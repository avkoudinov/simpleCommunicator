<?php//-------------------------------------------------------------------// class AttachmentManager//-------------------------------------------------------------------class AttachmentManager{    //---------------------------------------------------------------    var $forum_manager;        //---------------------------------------------------------------    static function get_picture_exts()    {        return array("jpeg", "jpg", "png", "gif", "webp");    } // get_picture_exts    //---------------------------------------------------------------    function handle_attachments()    {        global $settings;            $max_att_size = $settings["max_att_size"];        $max_att_size_audiovideo = $settings["max_att_size_audiovideo"];        for ($i = 1; $i <= $this->forum_manager->get_attachments_per_post(); $i++) {            $idx = ($i == 1) ? "" : $i;                        $_SESSION["last_attachment$idx"] = "";            $_SESSION["last_attachment_name$idx"] = "";            $_SESSION["last_attachment_type$idx"] = "";                        if (empty($_FILES["attachment$idx"]["size"])) {                continue;            }                        $pi = pathinfo($_FILES["attachment$idx"]["name"]);                        $attachment_type = $_FILES["attachment$idx"]["type"];            $attachment_extension = val_or_empty($pi['extension']);            $attachment_origin_name = $pi['basename'];            $attachment_file_name = $pi['filename'];            $attachment_size = $_FILES["attachment$idx"]["size"];                $attachment_base_name = session_id();            if (!empty($idx)) {                $attachment_base_name .= "-" . $idx;            }                        $attachment_name = $attachment_base_name;            if (!empty($attachment_extension)) {                $attachment_name .= "." . strtolower($attachment_extension);            }                        if (preg_match("/jpg|jpeg|gif|png|webp/i", strtolower($attachment_extension))) {                if (!check_image($_FILES["attachment$idx"]["tmp_name"])) {                    MessageHandler::setError(sprintf(text("ErrFileIsNotPicture"), $attachment_origin_name));                    return false;                }            }            if (!empty($settings["bulk_upload"])) {                if (!copy($_FILES["attachment$idx"]["tmp_name"], APPLICATION_ROOT . "tmp/" . $attachment_name)) {                    MessageHandler::setError(sprintf(text("ErrFileUpload"), $attachment_origin_name));                    return false;                }                                @unlink($_FILES["attachment$idx"]["tmp_name"]);            } else {                if (!move_uploaded_file($_FILES["attachment$idx"]["tmp_name"], APPLICATION_ROOT . "tmp/" . $attachment_name)) {                    MessageHandler::setError(sprintf(text("ErrFileUpload"), $attachment_origin_name));                    return false;                }            }                        // we convert the amr to mp3 if the system utility is available            if (defined('CONVERT_AMR_TO_MP3') && CONVERT_AMR_TO_MP3 == 1 && (strtolower($attachment_extension) == "amr")) {                if (convert_amr_to_mp3(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_base_name . ".mp3")) {                    $attachment_type = "audio/mpeg";                    $attachment_extension = "mp3";                    $attachment_origin_name = $attachment_file_name . ".mp3";                    $attachment_name = $attachment_base_name . ".mp3";                    $attachment_size = filesize(APPLICATION_ROOT . "tmp/" . $attachment_name);                }            }                        // we convert the aac to mp3 if the system utility is available            if (defined('CONVERT_M4A_TO_MP3') && CONVERT_M4A_TO_MP3 == 1 && strtolower($attachment_extension) == "m4a") {                if (convert_m4a_to_mp3(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_base_name . ".mp3")) {                    $attachment_type = "audio/mpeg";                    $attachment_extension = "mp3";                    $attachment_origin_name = $attachment_file_name . ".mp3";                    $attachment_name = $attachment_base_name . ".mp3";                    $attachment_size = filesize(APPLICATION_ROOT . "tmp/" . $attachment_name);                }            }                        // we convert the aac to mp3 if the system utility is available            if (defined('CONVERT_AAC_TO_MP3') && CONVERT_AAC_TO_MP3 == 1 && strtolower($attachment_extension) == "aac") {                if (convert_aac_to_mp3(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_base_name . ".mp3")) {                    $attachment_type = "audio/mpeg";                    $attachment_extension = "mp3";                    $attachment_origin_name = $attachment_file_name . ".mp3";                    $attachment_name = $attachment_base_name . ".mp3";                    $attachment_size = filesize(APPLICATION_ROOT . "tmp/" . $attachment_name);                }            }                        // if the png exceeds the max size, we try to compress it if the system utility is available            if (defined('COMPRESS_PNG') && COMPRESS_PNG == 1 && ($attachment_type == "image/png" || strtolower($attachment_extension) == "png") && $attachment_size > 1024 * ($max_att_size + 30)) {                if (compress_png(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_name, "60-90")) {                    $attachment_size = filesize(APPLICATION_ROOT . "tmp/" . $attachment_name);                }            }                        $web_optimized_jpg_size = defined("WEB_OPTIMIZED_JPG_SIZE") ? WEB_OPTIMIZED_JPG_SIZE : $max_att_size;                        // if the png exceeds the max size, we try to convert it to jpg if the system utility is available            if (defined('CONVERT_PNG_TO_JPG') && CONVERT_PNG_TO_JPG == 1 && ($attachment_type == "image/png" || strtolower($attachment_extension) == "png") && $attachment_size > 1024 * ($web_optimized_jpg_size + 30)) {                if (convert_png_to_jpg(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_base_name . ".jpg", "90")) {                    $attachment_type = "image/jpeg";                    $attachment_extension = "jpg";                    $attachment_origin_name = $attachment_file_name . ".jpg";                    $attachment_name = $attachment_base_name . ".jpg";                    $attachment_size = filesize(APPLICATION_ROOT . "tmp/" . $attachment_name);                }            }                        // gif            if ($attachment_type == "image/gif" || strtolower($attachment_extension) == "gif") {                if ($attachment_size <= 1024 * $max_att_size_audiovideo) {                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                                        continue;                }                                $max_att_size = $max_att_size_audiovideo;            }                        // mp3            if ($attachment_type == "audio/mpeg" || strtolower($attachment_extension) == "mp3") {                if ($attachment_size <= 1024 * $max_att_size_audiovideo) {                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                                        continue;                }                                $max_att_size = $max_att_size_audiovideo;            }                        // ogg            if ($attachment_type == "audio/ogg" || strtolower($attachment_extension) == "ogg") {                if ($attachment_size <= 1024 * $max_att_size_audiovideo) {                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                                        continue;                }                                $max_att_size = $max_att_size_audiovideo;            }                        // mp4            if ($attachment_type == "video/mp4" || strtolower($attachment_extension) == "mp4") {                if ($attachment_size <= 1024 * $max_att_size_audiovideo) {                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                                        continue;                }                                $max_att_size = $max_att_size_audiovideo;            }                        // webm            if ($attachment_type == "video/webm" || strtolower($attachment_extension) == "webm") {                if ($attachment_size <= 1024 * $max_att_size_audiovideo) {                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                                        continue;                }                                $max_att_size = $max_att_size_audiovideo;            }                        // size not ok and jpg, try to reduce            if (!empty($pi['extension']) && ($attachment_type == "image/jpeg" || in_array(strtolower($attachment_extension), array('jpg', 'jpeg')))) {                if (!check_image_rotation(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_name)) {                    MessageHandler::setError(sprintf(text("ErrFileProcessing"), $attachment_origin_name), "check_image_rotation: " . sys_get_last_error());                    return false;                }                                if ($attachment_size <= 1024 * ($web_optimized_jpg_size + 30)) {                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                            continue;                }                                if (!scale_image(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_name, 1400, 1400)) {                    MessageHandler::setError(sprintf(text("ErrFileProcessing"), $attachment_origin_name), "scale_image: " . sys_get_last_error());                    return false;                }                                $attachment_size = filesize(APPLICATION_ROOT . "tmp/" . $attachment_name);                    // if now ok, then done                if ($attachment_size <= 1024 * ($web_optimized_jpg_size + 30)) {                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                                        continue;                }                                if (!scale_image(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_name, 1200, 1200)) {                    MessageHandler::setError(sprintf(text("ErrFileProcessing"), $attachment_origin_name), "scale_image: " . sys_get_last_error());                    return false;                }                                $attachment_size = filesize(APPLICATION_ROOT . "tmp/" . $attachment_name);                // if now ok, then done                if ($attachment_size <= 1024 * ($web_optimized_jpg_size + 30)) {                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                                        continue;                }                                // still not ok, try to reduce quality to 90%                if (!compress_image(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_name, 97)) {                    MessageHandler::setError(sprintf(text("ErrFileProcessing"), $attachment_origin_name), "compress_image: " . sys_get_last_error());                    return false;                }                                clearstatcache();                $attachment_size = filesize(APPLICATION_ROOT . "tmp/" . $attachment_name);                    // if now ok, then done                if ($attachment_size <= 1024 * ($web_optimized_jpg_size + 30)) {                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                                        continue;                }                                // still not ok, try to reduce quality quality to 80%                if (!compress_image(APPLICATION_ROOT . "tmp/" . $attachment_name, APPLICATION_ROOT . "tmp/" . $attachment_name, 90)) {                    MessageHandler::setError(sprintf(text("ErrFileProcessing"), $attachment_origin_name), "compress_image: " . sys_get_last_error());                    return false;                }                                clearstatcache();                $attachment_size = filesize(APPLICATION_ROOT . "tmp/" . $attachment_name);                    // if now ok, then done                if ($attachment_size <= 1024 * ($max_att_size + 30)) { // we use $max_att_size instead of $web_optimized_jpg_size                    $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                    $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                    $_SESSION["last_attachment_type$idx"] = $attachment_type;                                        continue;                }                //if still not ok, give up            } elseif ($attachment_size <= 1024 * ($max_att_size + 30)) {                $_SESSION["last_attachment$idx"] = "tmp/" . $attachment_name;                $_SESSION["last_attachment_name$idx"] = $attachment_origin_name;                $_SESSION["last_attachment_type$idx"] = $attachment_type;                    continue;            }                if ($max_att_size > 1024) {                $max_att_size = number_format($max_att_size / 1024, 1, ",", "");                $max_att_size .= " " . text("MB");            } else {                $max_att_size .= " " . text("KB");            }                        $attachment_size = round($attachment_size / 1024);            if ($attachment_size > 1024) {                $attachment_size = number_format($attachment_size / 1024, 1, ",", "");                $attachment_size .= " " . text("MB");            } else {                $attachment_size .= " " . text("KB");            }                        MessageHandler::setError(sprintf(text("ErrAttachmentTooLarge"), $attachment_origin_name, $attachment_size, $max_att_size));                        return false;        }                return true;    } // handle_attachments        //---------------------------------------------------------------    function finalize_attachment($pid, &$attachment_name, &$attachment_origin_name, &$attachment_type, $idx)    {        $attachment_origin_name = $_SESSION["last_attachment_name$idx"];        $attachment_type = $_SESSION["last_attachment_type$idx"];                $pi = pathinfo($attachment_origin_name);                $attachment_name = sha1_file(APPLICATION_ROOT . $_SESSION["last_attachment$idx"]);        if (!empty($pi['extension'])) {            $attachment_name .= "." . strtolower($pi['extension']);        }                $subfolder = substr($attachment_name, 0, 3);                $attachment_name = $subfolder . "/" . $attachment_name;                if (!file_exists(APPLICATION_ROOT . "user_data/attachments/" . $subfolder) &&             !@mkdir(APPLICATION_ROOT . "user_data/attachments/" . $subfolder)) {            MessageHandler::setError(sprintf(text("ErrFileUpload"), $attachment_origin_name));            return false;        }                if (!rename(APPLICATION_ROOT . $_SESSION["last_attachment$idx"], APPLICATION_ROOT . "user_data/attachments/" . $attachment_name)) {            MessageHandler::setError(sprintf(text("ErrFileUpload"), $attachment_origin_name));            return false;        }                return true;    } // finalize_attachment        //---------------------------------------------------------------    function handle_custom_smiles(&$custom_smiles, $uid)    {        if (empty($uid)) {            return true;        }                if (empty($_FILES["add_custom_smiles"]["name"][0])) {            return true;        }                $custom_smiles_array = preg_split("/[\r\n]+/", $custom_smiles, -1, PREG_SPLIT_NO_EMPTY);                if (!file_exists(APPLICATION_ROOT . "user_data") && !@mkdir(APPLICATION_ROOT . "user_data")) {            MessageHandler::setError(text("ErrNoWritePermissions"));            return false;        }                if (!file_exists(APPLICATION_ROOT . "user_data/custom_smileys") && !@mkdir(APPLICATION_ROOT . "user_data/custom_smileys")) {            MessageHandler::setError(text("ErrNoWritePermissions"));            return false;        }                if (!file_exists(APPLICATION_ROOT . "user_data/custom_smileys/$uid") && !@mkdir(APPLICATION_ROOT . "user_data/custom_smileys/$uid")) {            MessageHandler::setError(text("ErrNoWritePermissions"));            return false;        }                $problems = "";        foreach ($_FILES["add_custom_smiles"]["name"] as $i => $file_name) {            $pi = pathinfo($file_name);                        $matches = array();            if (!preg_match("/.+\.(jpg|jpeg|gif|png|webp)$/i", basename($file_name), $matches) || empty($pi['extension'])) {                $problems .= sprintf(text("ErrFileIsNotPicture"), basename($file_name)) . "\n";                continue;            }                        if (!check_image($_FILES["add_custom_smiles"]["tmp_name"][$i])) {                $problems .= sprintf(text("ErrFileIsNotPicture"), basename($file_name)) . "\n";                continue;            }                        if (!move_uploaded_file($_FILES["add_custom_smiles"]["tmp_name"][$i], APPLICATION_ROOT . "user_data/custom_smileys/$uid/" . basename($file_name))) {                MessageHandler::setError(sprintf(text("ErrFileUpload"), basename($file_name)));                return false;            }                        if (!scale_image(APPLICATION_ROOT . "user_data/custom_smileys/$uid/" . basename($file_name), APPLICATION_ROOT . "user_data/custom_smileys/$uid/" . basename($file_name), 350, 150)) {                MessageHandler::setError(sprintf(text("ErrFileProcessing"), basename($file_name)), "scale_image: " . sys_get_last_error());                return false;            }                        $custom_smiles_array[] = "user_data/custom_smileys/$uid/" . basename($file_name);        }                if (!empty($problems)) {            MessageHandler::setWarning(trim($problems));        }                $custom_smiles = implode("\r\n", $custom_smiles_array);                return true;    } // handle_custom_smiles        //---------------------------------------------------------------    function handle_avatar($uid)    {        if (empty($uid)) {            return true;        }                $exts = self::get_picture_exts();                if (!reqvar_empty("delete_avatar") || !empty($_FILES["avatar"]["name"])) {            foreach ($exts as $ext) {                if (file_exists(APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . $ext)) {                    @unlink(APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . $ext);                }            }        }                if (empty($_FILES["avatar"]["name"]) || $_FILES["avatar"]["size"] == 0) {            return true;        }                $pi = pathinfo($_FILES["avatar"]["name"]);                $matches = array();        if (!preg_match("/.+\.(jpg|jpeg|gif|png|webp)$/i", basename($_FILES["avatar"]["name"]), $matches) || empty($pi['extension'])) {            MessageHandler::setError(sprintf(text("ErrFileIsNotPicture"), basename($_FILES["avatar"]["name"])));            return false;        }                if (!file_exists(APPLICATION_ROOT . "user_data") && !@mkdir(APPLICATION_ROOT . "user_data")) {            MessageHandler::setError(sprintf(text("ErrFileUpload"), basename($_FILES["avatar"]["name"])));            return false;        }                if (!file_exists(APPLICATION_ROOT . "user_data/avatars") && !@mkdir(APPLICATION_ROOT . "user_data/avatars")) {            MessageHandler::setError(sprintf(text("ErrFileUpload"), basename($_FILES["avatar"]["name"])));            return false;        }                if (!check_image($_FILES["avatar"]["tmp_name"])) {            MessageHandler::setError(sprintf(text("ErrFileIsNotPicture"), basename($_FILES["avatar"]["name"])));            return false;        }        if (!move_uploaded_file($_FILES["avatar"]["tmp_name"], APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . strtolower($pi['extension']))) {            MessageHandler::setError(sprintf(text("ErrFileUpload"), basename($_FILES["avatar"]["name"])));            return false;        }                if (!check_image_rotation(APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . strtolower($pi['extension']), APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . strtolower($pi['extension']))) {            MessageHandler::setError(sprintf(text("ErrFileProcessing"), basename($_FILES["avatar"]["name"])), "check_image_rotation: " . sys_get_last_error());            return false;        }                if (!scale_image(APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . strtolower($pi['extension']), APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . strtolower($pi['extension']), 200, 200)) {            MessageHandler::setError(sprintf(text("ErrFileProcessing"), basename($_FILES["avatar"]["name"])), "scale_image: " . sys_get_last_error());            return false;        }                return true;    } // handle_avatar        //---------------------------------------------------------------    function handle_photo($uid)    {        if (empty($uid)) {            return true;        }                $exts = self::get_picture_exts();                if (!reqvar_empty("delete_photo") || !empty($_FILES["photo"]["name"])) {            foreach ($exts as $ext) {                if (file_exists(APPLICATION_ROOT . "user_data/photos/" . $uid . "." . $ext)) {                    @unlink(APPLICATION_ROOT . "user_data/photos/" . $uid . "." . $ext);                }            }        }                if (empty($_FILES["photo"]["name"]) || $_FILES["photo"]["size"] == 0) {            return true;        }                $pi = pathinfo($_FILES["photo"]["name"]);                $matches = array();        if (!preg_match("/.+\.(jpg|jpeg|gif|png|webp)$/i", basename($_FILES["photo"]["name"]), $matches) || empty($pi['extension'])) {            MessageHandler::setError(sprintf(text("ErrFileIsNotPicture"), basename($_FILES["photo"]["name"])));            return false;        }                if (!file_exists(APPLICATION_ROOT . "user_data") && !@mkdir(APPLICATION_ROOT . "user_data")) {            MessageHandler::setError(sprintf(text("ErrFileUpload"), basename($_FILES["photo"]["name"])));            return false;        }                if (!file_exists(APPLICATION_ROOT . "user_data/photos") && !@mkdir(APPLICATION_ROOT . "user_data/photos")) {            MessageHandler::setError(sprintf(text("ErrFileUpload"), basename($_FILES["photo"]["name"])));            return false;        }                if (!check_image($_FILES["photo"]["tmp_name"])) {            MessageHandler::setError(sprintf(text("ErrFileIsNotPicture"), basename($_FILES["photo"]["name"])));            return false;        }                if (!move_uploaded_file($_FILES["photo"]["tmp_name"], APPLICATION_ROOT . "user_data/photos/" . $uid . "." . strtolower($pi['extension']))) {            MessageHandler::setError(sprintf(text("ErrFileUpload"), basename($_FILES["photo"]["name"])));            return false;        }                if (!check_image_rotation(APPLICATION_ROOT . "user_data/photos/" . $uid . "." . strtolower($pi['extension']), APPLICATION_ROOT . "user_data/photos/" . $uid . "." . strtolower($pi['extension']))) {            MessageHandler::setError(sprintf(text("ErrFileProcessing"), basename($_FILES["photo"]["name"])), "check_image_rotation: " . sys_get_last_error());            return false;        }                if (!scale_image(APPLICATION_ROOT . "user_data/photos/" . $uid . "." . strtolower($pi['extension']), APPLICATION_ROOT . "user_data/photos/" . $uid . "." . strtolower($pi['extension']), 1000, false)) {            MessageHandler::setError(sprintf(text("ErrFileProcessing"), basename($_FILES["photo"]["name"])), "scale_image: " . sys_get_last_error());            return false;        }                return true;    } // handle_photo        //---------------------------------------------------------------    function get_doctype_thumb($base_path, &$attachment_data)    {        $ext = "";        if (!empty($attachment_data["path"])) {            $ext = strtolower(pathinfo($attachment_data["path"], PATHINFO_EXTENSION));        }                if (preg_match("/r\d{2}/i", $ext)) {            $ext = "rar";        }                if (!empty($ext) && file_exists($base_path . $ext . ".png")) {            $doctype_thumb = $ext . ".png";        } else {            $doctype_thumb = "attachment.png";        }                $attachment_data["path"] = $base_path . $doctype_thumb;        $attachment_data["name"] = $doctype_thumb;        $attachment_data["type"] = "image/png";        $attachment_data["indicator"] = true;    } // get_doctype_thumb        //---------------------------------------------------------------    function get_attachment_data($aid, $nr, &$attachment_data)    {        $dbw = System::getDBWorker();        if (!$dbw) {            return false;        }                $prfx = $dbw->escape(System::getDBPrefix());                if (empty($aid)) {            return false;        }                if ($aid != "tmp" && !is_numeric($aid)) {            return false;        }                if ($aid == "tmp") {            if ($nr == 1) {                $nr = "";            }                        if (!empty($_SESSION["last_attachment$nr"])) {                $attachment_data["path"] = APPLICATION_ROOT . $_SESSION["last_attachment$nr"];                $attachment_data["name"] = $_SESSION["last_attachment_name$nr"];                $attachment_data["type"] = $_SESSION["last_attachment_type$nr"];                $attachment_data["origin_type"] = $_SESSION["last_attachment_type$nr"];                $attachment_data["deleted"] = 0;            }        } else {            $aid = $dbw->escape($aid);            $nr_db = $dbw->escape($nr);            if (empty($nr_db) || !is_numeric($nr_db)) {                $nr_db = 1;            }                        if (!$dbw->execute_query("select {$prfx}_attachment.name, {$prfx}_attachment.origin_name, {$prfx}_attachment.type,                               forum_id, topic_id, {$prfx}_attachment.deleted,                               {$prfx}_post.deleted post_deleted,                               {$prfx}_topic.deleted topic_deleted,                               {$prfx}_forum.deleted forum_deleted,                               is_private,                               {$prfx}_post.user_id, {$prfx}_post.read_marker                               from {$prfx}_attachment                               inner join {$prfx}_post on ({$prfx}_attachment.post_id = {$prfx}_post.id)                               inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)                               inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)                               where {$prfx}_attachment.post_id = $aid and nr = $nr_db")) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }                        if ($dbw->fetch_row()) {                $attachment_data["path"] = APPLICATION_ROOT . "user_data/attachments/" . $dbw->field_by_name("name");                $attachment_data["origin_path"] = APPLICATION_ROOT . "user_data/attachments/" . $dbw->field_by_name("name");                $attachment_data["name"] = $dbw->field_by_name("origin_name");                $attachment_data["type"] = $dbw->field_by_name("type");                $attachment_data["origin_type"] = $dbw->field_by_name("type");                $attachment_data["deleted"] = $dbw->field_by_name("deleted") || $dbw->field_by_name("topic_deleted") || $dbw->field_by_name("forum_deleted");                                $attachment_data["indirect_deleted"] = $dbw->field_by_name("post_deleted") || $dbw->field_by_name("topic_deleted") || $dbw->field_by_name("forum_deleted");                                $attachment_data["topic_id"] = $dbw->field_by_name("topic_id");                $attachment_data["forum_id"] = $dbw->field_by_name("forum_id");                $attachment_data["topic_private"] = $dbw->field_by_name("is_private");                                $attachment_data["post_user_id"] = $dbw->field_by_name("user_id");                $attachment_data["post_read_marker"] = $dbw->field_by_name("read_marker");            } else {                $dbw->free_result();                return false;            }                        $dbw->free_result();                        if (!$this->forum_manager->has_access_to_topic($attachment_data["topic_id"], false)) {                $attachment_data["no_access"] = true;            }                if ($this->forum_manager->may_edit_message($aid)) {                $attachment_data["editable"] = true;            }            if (($attachment_data["topic_private"] == 2 && $this->forum_manager->is_topic_moderator($attachment_data["topic_id"])) ||                (empty($attachment_data["topic_private"]) && ($this->forum_manager->is_admin() || $this->forum_manager->is_forum_moderator($attachment_data["forum_id"]))) ||                (empty($attachment_data["topic_private"]) && $this->forum_manager->is_topic_moderator($attachment_data["topic_id"]))            ) {                $attachment_data["moderatable"] = true;            }        }                return true;    } // get_attachment_data        //---------------------------------------------------------------    function send_attachment_and_exit(&$attachment_data)    {        if (empty($attachment_data["indicator"])) {            if (!empty($attachment_data["path"]) && !file_exists($attachment_data["path"])) {                header("HTTP/1.1 404 Not Found");                echo_html("404 " . text("ErrAttachmentNotFound"));                exit();            }                        if (empty($attachment_data["path"]) || !empty($attachment_data["deleted"])) {                header('HTTP/1.0 403 Forbidden');                echo_html("403 " . text("ErrAttachmentDeleted"));                exit();            }                        if (!empty($attachment_data["no_access"])) {                header('HTTP/1.0 403 Forbidden');                echo_html("403 " . text("ErrAttachmentNoAccess"));                exit();            }        }                $HTTP_IF_NONE_MATCH = val_or_empty($_SERVER['HTTP_IF_NONE_MATCH']);                $headers = apache_request_headers();                foreach ($headers as $header => $value) {            if (strcasecmp('If-None-Match', $header) == 0 && !empty($value)) {                $HTTP_IF_NONE_MATCH = $value;            }        }        $modified = filectime($attachment_data["path"]);        $etag = System::generateHash(str_replace(APPLICATION_ROOT, "", $attachment_data["path"]) . "-" . $modified . "-" . val_or_empty($attachment_data["deleted"]), SALT_KEY);        if ($HTTP_IF_NONE_MATCH == $etag) {            header("HTTP/1.1 304 Not Modified");            exit();        }                        header("Cache-Control: no-cache");        $filesize = sprintf("%u", filesize($attachment_data["path"]));                $range = false;                if (isset($_SERVER['HTTP_RANGE'])) {            $range = $_SERVER['HTTP_RANGE'];        } elseif ($apache = apache_request_headers()) {            $headers = array();            foreach ($apache as $header => $val) {                $headers[strtolower($header)] = $val;            }            if (isset($headers['range'])) {                $range = $headers['range'];            }        }                $length = $filesize;        $partial = false;        if ($range) {            $partial = true;            list($param, $range) = explode('=', $range);                        // Bad request - range unit is not 'bytes'            if (strtolower(trim($param)) != 'bytes') {                header("HTTP/1.1 400 Invalid Request");                exit;            }                        // Get range values            $range = explode(',', $range);            $range = explode('-', $range[0]);                        // Deal with range values            if ($range[0] === '') {                $end = $filesize - 1;                $start = $end - intval($range[0]);                $length = $end - $start + 1;            } elseif ($range[1] === '') {                $start = intval($range[0]);                $end = $filesize - 1;                $length = $end - $start + 1;            } else {                // Both numbers present, return specific range                $start = intval($range[0]);                $end = intval($range[1]);                if ($end >= $filesize || (!$start && (!$end || $end == ($filesize - 1)))) {                    $partial = false; // Invalid range/whole file specified, return whole file                    $length = $filesize;                } else {                    $length = $end - $start + 1;                }            }        }                if (!$partial) {            header("Etag: $etag");        }                header('Accept-Ranges: bytes');                if (preg_match("/image.+/", $attachment_data["type"])) {            header("Content-type: " . $attachment_data["type"]);            header("Content-Disposition: inline; filename=\"$attachment_data[name]\"");        } elseif (preg_match("/.*(audio\\/mpeg|video\\/mp4|video\\/webm).*/", $attachment_data["type"])) {            header("Content-type: " . $attachment_data["type"]);            header("Content-Disposition: inline; filename=\"$attachment_data[name]\"");        } elseif (preg_match("/.*(application\\/pdf).*/", $attachment_data["type"])) {            header("Content-type: " . $attachment_data["type"]);            header("Content-Disposition: inline; filename=\"$attachment_data[name]\"");        } else {            header("Content-type: " . $attachment_data["type"]);            header("Content-Disposition: attachment; filename=\"$attachment_data[name]\"");        }                if ($partial) {            header('HTTP/1.1 206 Partial Content');            header("Content-Length: $length");            header("Content-Range: bytes $start-$end/$filesize");            if (!$fp = fopen($attachment_data["path"], 'rb')) {                header("HTTP/1.1 500 Internal Server Error");                exit();            }                        if ($start) {                fseek($fp, $start);            }            while ($length) {                set_time_limit(0);                $read = ($length > 65536) ? 65536 : $length;                $length -= $read;                if ($read > 0) {                    print(fread($fp, $read));                }            }                        fclose($fp);        } else {            header("Content-Length: $length");            readfile($attachment_data["path"]);        }                exit();    } // send_attachment_and_exit    //---------------------------------------------------------------} // AttachmentManager//-------------------------------------------------------------------?>