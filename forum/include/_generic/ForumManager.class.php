<?php
//-------------------------------------------------------------------
// class ForumManager
//-------------------------------------------------------------------
// restricted_access = 0 - open for all
// restricted_access = 1 - only for definite users
// restricted_access = 2 - only for registered users
//-------------------------------------------------------------------
abstract class ForumManager
{
    //-----------------------------------------------------------------
    abstract function get_new_where_appendix($prfx, $rm);
    
    abstract function get_query_min_topic_post($prfx, $first_post_topic_id, $first_post_id);

    abstract function get_query_max_topic_post($prfx, $first_post_topic_id, $first_post_id);
    
    abstract function get_query_empty_topic($prfx, $topic_id);
    
    abstract function get_query_previous_valid_topic_post($prfx, $where);
    
    abstract function get_query_next_valid_topic_post($prfx, $where);

    abstract function get_query_user($prfx, $where, $master_admin_name);
    
    abstract function get_query_last_guest_activity($prfx, $where);
    
    abstract function get_query_tor_ip_list($prfx, $where);
    
    abstract function get_query_user_list($prfx, $start_date, $where, $order_by, &$pagination_info);
    
    abstract function get_query_blocked_user_list_order_clause($prfx);
    
    abstract function get_query_subscribed_authors($prfx, $uid, $mindate);
    
    abstract function get_query_read_marker_list($prfx, $where, $order_by, &$pagination_info);
    
    abstract function get_query_user_agent_list($prfx, $where);
    
    abstract function get_query_ignored_posts_list($prfx, $where);
    
    abstract function get_query_topic_first_post($prfx, $where, $order_by);
    
    abstract function get_query_subscribed_messages(&$dbw, $prfx, $uid, $mindate);
    
    abstract function get_query_subscribed_topics(&$dbw, $prfx, $uid, $mindate);
    
    abstract function get_query_topic_search(&$dbw, $uid, $prfx, $search);
    
    abstract function get_query_existing_topic_search(&$dbw, $prfx, $search, $forum);
    
    abstract function get_query_moderated_topic_search(&$dbw, $prfx, $search, $source_fid, $merge_modus);
    
    abstract function get_query_forum_topics($prfx, $uid, $user_pinned_topic_appendix, $where, &$pagination_info);
    
    abstract function get_query_topic_cnt_update($prfx, $fid);
    
    abstract function get_query_post_cnt_update($prfx, $tid);
    
    abstract function get_query_user_post_cnt_update($prfx, $uid);
    
    abstract function get_query_user_rate_cnt_update($prfx, $uid);
    
    abstract function get_query_post_rate_cnt_update($prfx, $pid);
    
    abstract function get_query_last_n_posts($N, $prfx, $forum_id, $author_id, $author_rm);
    
    abstract function get_query_last_n_rates($prfx, $N, $rater_id, $author_id, $moderator_restriction, $rate_type);
    
    abstract function get_query_post_count($prfx, $where);
    
    abstract function get_query_paginated_found_posts($prfx, $current_uid, $where, &$pagination_info, $order_by);
    
    abstract function get_query_topic_posts($prfx, $current_uid, $where, $limit, $order_by);
    
    abstract function get_query_moderator_events($prfx, $where, &$pagination_info);
    
    abstract function get_query_event_list($prfx, $where, &$pagination_info);
    
    abstract function get_query_read_topics($prfx, $uid, $forum_appendix);
    
    abstract function get_query_guest_read_topics($prfx, $guest, $forum_appendix);
    
    abstract function get_query_guest_last_activity($prfx, $guest);
    
    abstract function get_query_found_topics($prfx, $current_uid, $session_id, $hash, &$pagination_info);
    
    abstract function get_post_search_clause(&$dbw, $prfx, $search_keys, $with_morphology);

    abstract function get_topic_search_clause(&$dbw, $prfx, $search_keys, $with_morphology);
    
    abstract function get_query_fill_digest_posts($dbw, $prfx, $session_id, $now, $search_hash, $uid, $rm, $fid, $private_fid);
    
    abstract function get_query_fill_search_posts($prfx, $session_id, $now, $search_hash, $topic_part_where, $post_part_where, $max_search_results, $order_by, &$hints);
    
    abstract function get_query_fill_search_topics($prfx, $session_id, $now, $search_hash, $topic_where, $delayed_clause, $max_search_results);
    
    abstract function get_query_load_attachments($prfx, $uid, $current_appendex);
    
    abstract function get_query_user_hour_hits($prfx, $where, $hour_offset);
    
    abstract function get_query_user_hour_posts($prfx, $where, $hour_offset);
    
    abstract function get_query_clear_viewed_topics($prfx);
    
    abstract function get_query_clear_guest_viewed_topics($prfx);
    
    abstract function gen_load_statistics(&$user_activity, &$ip_activity, &$agent_activity, &$total_user_hits_count, &$total_ip_hits_count, &$total_agents_hits_count);
    
    abstract function get_reply_post_clause($dbw, $prfx, $parent_pid);

    abstract function get_hot_topic_clause($prfx, $start1, $start2);

    abstract function create_tmp_id_collector_table($dbw, $prfx);
    
    abstract function get_query_rating_info($prfx, $where);
    
    abstract function get_query_banned_ips($prfx);
    
    //-----------------------------------------------------------------
    var $email_manager;
    var $attachment_manager;
    var $format_manager;
    var $job_manager;
    var $new_checker;
    
    //-----------------------------------------------------------------
    static $inst_object;
    
    //-----------------------------------------------------------------
    static function instance()
    {
        if (!empty(self::$inst_object)) {
            return self::$inst_object;
        }
        
        self::$inst_object = System::getClassInstance(__CLASS__);
        
        return self::$inst_object;
    } // instance
    
    //-----------------------------------------------------------------
    function __construct()
    {
        $this->email_manager = System::getClassInstance("EmailManager");
        $this->email_manager->forum_manager = $this;
        
        $this->attachment_manager = System::getClassInstance("AttachmentManager");
        $this->attachment_manager->forum_manager = $this;
        
        $this->format_manager = System::getClassInstance("FormatManager");
        $this->format_manager->forum_manager = $this;
        
        $this->job_manager = System::getClassInstance("JobManager");
        $this->job_manager->forum_manager = $this;
        
        $this->new_checker = System::getClassInstance("NewChecker");
        $this->new_checker->forum_manager = $this;
    } // __construct
    
    //-----------------------------------------------------------------
    function get_posts_per_page()
    {
        if (defined("POSTS_PER_PAGE")) {
            return POSTS_PER_PAGE;
        }
        
        return 25;
    } // get_posts_per_page
    
    //-----------------------------------------------------------------
    function get_attachments_per_post()
    {
        if (defined("ATTACHMENTS_PER_POST")) {
            return ATTACHMENTS_PER_POST < 1 ? 1 : ATTACHMENTS_PER_POST;
        }
        
        return 3;
    } // get_attachments_per_post
    
    //-----------------------------------------------------------------
    function demo_mode()
    {
        return val_or_empty($_SESSION["user_login"]) == "demoadmin";
    } // demo_mode
    
    //-----------------------------------------------------------------
    static function get_reason_lang_code($reason)
    {
        switch ($reason) {
            case "roughness":
                return "Roughness";
            case "relatives_insult":
                return "RelativesInsult";
            case "flood":
                return "Flood";
            case "spam":
                return "Spam";
            case "author_wish":
                return "AuthorWish";
            case "author_death":
                return "AuthorDeath";
            case "account_loss":
                return "AccountLoss";
            case "extremism":
                return "Extremism";
            case "ethnic_hatred":
                return "EthnicHatred";
            case "illegal_content":
                return "IllegalContent";
            case "unlawful_statement":
                return "UnlawfulStatement";
        }
        
        return $reason;
    } // get_reason_lang_code
    
    //-----------------------------------------------------------------
    function get_month_name($month)
    {
        switch($month)
        {
            case 1: return text("January");
            case 2: return text("February");
            case 3: return text("March");
            case 4: return text("April");
            case 5: return text("May");
            case 6: return text("June");
            case 7: return text("July");
            case 8: return text("August");
            case 9: return text("September");
            case 10: return text("October");
            case 11: return text("November");
            case 12: return text("December");
        }
        
        return $month;
    } // get_month_name

    //-----------------------------------------------------------------
    function get_month_short_name($month)
    {
        switch($month)
        {
            case 1: return text("JanuaryShort");
            case 2: return text("FebruaryShort");
            case 3: return text("MarchShort");
            case 4: return text("AprilShort");
            case 5: return text("MayShort");
            case 6: return text("JuneShort");
            case 7: return text("JulyShort");
            case 8: return text("AugustShort");
            case 9: return text("SeptemberShort");
            case 10: return text("OctoberShort");
            case 11: return text("NovemberShort");
            case 12: return text("DecemberShort");
        }
        
        return $month;
    } // get_month_short_name

    //-----------------------------------------------------------------
    function get_weekday_name($wd)
    {
        switch($wd)
        {
            case 1: return text("MondayShort");
            case 2: return text("TuesdayShort");
            case 3: return text("WednesdayShort");
            case 4: return text("ThursdayShort");
            case 5: return text("FridayShort");
            case 6: return text("SaturdayShort");
            case 7: return text("SundayShort");
        }
        
        return $wd;
    } // get_weekday_name

    //-----------------------------------------------------------------
    static function get_action_txt($action)
    {
        switch ($action) {
            case "delete_post":
                return text("ActionPostDeleted");
            case "restore_post":
                return text("ActionPostRestored");
            case "pin_post":
                return text("ActionPostPinned");
            case "unpin_post":
                return text("ActionPostUnpinned");
            case "move_post":
                return text("ActionPostsMoved");
            case "change_post":
                return text("ActionPostChanged");
            case "warn_post":
                return text("ActionPostWarned");
            
            case "post_liked":
                return text("ActionPostLiked");
            case "post_disliked":
                return text("ActionPostDisliked");
            
            case "like_revoked":
                return text("ActionLikeRevoked");
            case "dislike_revoked":
                return text("ActionDislikeRevoked");
            
            case "delete_attachment":
                return text("ActionAttachmentDeleted");
            case "restore_attachment":
                return text("ActionAttachmentRestored");
            
            case "change_topic":
                return text("ActionTopicChanged");
            
            case "hide_profile":
                return text("ActionProfileHidden");
            case "open_profile":
                return text("ActionProfileOpened");
            case "disallow_rating":
                return text("ActionRatingDisallowed");
            case "allow_rating":
                return text("ActionRatingAllowed");
            case "block_user":
                return text("ActionUserBlocked");
            case "unblock_user":
                return text("ActionUserUnblocked");
            case "ignore_user":
                return text("ActionUserIgnored");
            case "unignore_user":
                return text("ActionUserUnignored");
            case "delete_user":
                return text("ActionUserDeleted");
            case "rename_user":
                return text("ActionUserRenamed");
            case "bulk_delete_posts":
                return text("ActionBulkDeleteMessages");
            case "bulk_restore_posts":
                return text("ActionBulkRestoreMessages");
            
            case "block_user_until":
                return text("ActionUserBlockedUntil");
            case "block_user_forum":
                return text("ActionUserForumBlocked");
            case "block_user_forum_until":
                return text("ActionUserForumBlockedUntil");
            case "unblock_user_forum":
                return text("ActionUserForumUnblocked");
            
            case "block_ip":
                return text("ActionIPBlocked");
            case "unblock_ip":
                return text("ActionIPUnblocked");
            case "block_ip_until":
                return text("ActionIPBlockedUntil");
            
            case "block_user_marker":
                return text("ActionFingerPrintBlocked");
            case "unblock_user_marker":
                return text("ActionFingerPrintUnblocked");
            case "block_user_marker_until":
                return text("ActionFingerPrintBlockedUntil");
            
            case "block_user_topic":
                return text("ActionUserTopicBlocked");
            case "unblock_user_topic":
                return text("ActionUserTopicUnblocked");
            
            case "grant_forum_access":
                return text("ActionGrantForumAccess");
            case "revoke_forum_access":
                return text("ActionRevokeForumAccess");
            
            case "delete_avatar":
                return text("ActionAvatarDeleted");
            
            case "make_topic_moderator":
                return text("ActionTopicModeratorMade");
            case "revoke_topic_moderator":
                return text("ActionTopicModeratorRevoked");
            
            case "make_forum_moderator":
                return text("ActionForumModeratorMade");
            case "revoke_forum_moderator":
                return text("ActionForumModeratorRevoked");
            
            case "make_administrator":
                return text("ActionAdministratorMade");
            case "revoke_administrator":
                return text("ActionAdministratorRevoked");
            
            case "open_forum":
                return text("ActionForumOpened");
            case "close_forum":
                return text("ActionForumClosed");
            case "delete_forum":
                return text("ActionForumDeleted");
            case "create_forum":
                return text("ActionForumCreated");
            case "restore_forum":
                return text("ActionForumRestored");
            case "turn_on_restricted_mode":
                return text("ActionRestrictedGuestModeOn");
            case "turn_off_restricted_mode":
                return text("ActionRestrictedGuestModeOff");
            
            case "open_topic":
                return text("ActionTopicOpened");
            case "close_topic":
                return text("ActionTopicClosed");
            case "delete_topic":
                return text("ActionTopicDeleted");
            case "restore_topic":
                return text("ActionTopicRestored");
            case "pin_topic":
                return text("ActionTopicPinned");
            case "unpin_topic":
                return text("ActionTopicUnpinned");
            case "close_poll":
            case "publish_poll": // old name
                return text("ActionPollCompleted");
            case "open_poll":
            case "unpublish_poll": // old name
                return text("ActionPollOpened");
            case "allow_guests":
                return text("ActionTopicGuestsAllowed");
            case "disallow_guests":
                return text("ActionTopicGuestsDisallowed");
            case "profiled_topic_on":
                return text("ActionTopicProfiledModeTurnedOn");
            case "profiled_topic_off":
                return text("ActionTopicProfiledModeTurnedOff");
            case "convert_to_thematic":
                return text("ActionMessageConvertedToThematic");
            case "convert_to_comment":
                return text("ActionMessageConvertedToComments");
            case "convert_to_adult":
                return text("ActionMessageConvertedToAdult");
            case "convert_to_nonadult":
                return text("ActionMessageConvertedToNonAdult");
            case "move_topic":
                return text("ActionTopicMoved");
            case "merge_topic":
                return text("ActionTopicMerged");
            
            case "delete_posts_in_topic":
                return text("ActionPostsDeletedInTopic");
            case "restore_posts_in_topic":
                return text("ActionPostsRestoredInTopic");
            case "delete_posts_in_forum":
                return text("ActionPostsDeletedInForum");
            case "delete_all_posts":
                return text("ActionPostsDeleted");
            case "delete_last_N_posts":
                return text("ActionLastNPostsDeleted");
            case "delete_user_rates":
                return text("ActionLastNRatesDeleted");
        }
        
        return $action;
    } // get_action_txt
    
    //-----------------------------------------------------------------
    function get_anonym_appendixes($uid, &$anonym_appendix, &$anonym_appendix2)
    {
        global $settings;
        
        if (empty($uid)) {
            return;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $query = "select is_admin, forum_id
                  from {$prfx}_user
                  left join {$prfx}_forum_moderator on ({$prfx}_forum_moderator.user_id = {$prfx}_user.id)
                  where id = $uid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return;
        }
        
        $is_admin = false;
        $is_moderator = false;
        if ($dbw->fetch_row()) {
            $is_moderator = $dbw->field_by_name("forum_id");
            $is_admin = $dbw->field_by_name("is_admin");
        }
        
        $dbw->free_result();
        
        $anonym_appendix = "_anonym";
        $anonym_appendix2 = "Anonym";
        
        if ($is_admin ||
            ($settings["moderator_log"] == "all") ||
            ($settings["moderator_log"] == "moderators" && $is_moderator)
        ) {
            $anonym_appendix = "";
            $anonym_appendix2 = "";
        }
    } // get_anonym_appendixes
    
    //-----------------------------------------------------------------
    function is_logged_in()
    {
        return !empty($_SESSION["logged_in"]);
    } // is_logged_in
    
    //-----------------------------------------------------------------
    function is_admin()
    {
        return !empty($_SESSION["is_admin"]);
    } // is_admin
    
    //-----------------------------------------------------------------
    function is_master_admin()
    {
        return !empty($_SESSION["is_master_admin"]);
    } // is_master_admin
    
    //-----------------------------------------------------------------
    function is_moderator()
    {
        return !empty($_SESSION["forum_moderator"]) || !empty($_SESSION["is_admin"]);
    } // is_moderator
    
    //-----------------------------------------------------------------
    function may_see_ip()
    {
        if (!empty($_SESSION["is_admin"])) {
            return true;
        }
        
        if (empty($_SESSION["forum_moderator"])) {
            return false;
        }
        
        return !empty($_SESSION["show_ip"]);
    } // may_see_ip
    
    //-----------------------------------------------------------------
    function is_privileged()
    {
        return !empty($_SESSION["privileged"]);
    } // is_privileged
    
    //-----------------------------------------------------------------
    function is_privileged_topic_moderator()
    {
        return !empty($_SESSION["privileged_topic_moderator"]);
    } // is_privileged_topic_moderator
    
    //-----------------------------------------------------------------
    function global_ban_allowed()
    {
        if ($this->is_admin()) {
            return true;
        }
        
        if (!$this->is_moderator()) {
            return false;
        }
        
        return !empty($_SESSION["global_ban_allowed"]);
    } // global_ban_allowed
    
    //-----------------------------------------------------------------
    function is_activated()
    {
        return !empty($_SESSION["activated"]);
    } // is_activated
    
    //-----------------------------------------------------------------
    function is_topic_moderator($tid)
    {
        return !empty($_SESSION["topic_moderator"][$tid]);
    } // is_topic_moderator
    
    //-----------------------------------------------------------------
    function is_forum_moderator($fid)
    {
        return !empty($_SESSION["forum_moderator"][$fid]);
    } // is_forum_moderator
    
    //-----------------------------------------------------------------
    function is_moderator_log_visible()
    {
        global $settings;
        
        if ($this->is_admin()) {
            return true;
        }
        
        if (empty($settings["moderator_log"])) {
            return false;
        }
        
        if ($this->is_moderator() && $settings["moderator_log"] == "moderators") {
            return true;
        }
        
        if ($settings["moderator_log"] == "all" || $settings["moderator_log"] == "all_names_hidden") {
            return true;
        }
        
        return false;
    } // is_moderator_log_visible
    
    //-----------------------------------------------------------------
    function are_moderator_names_visible()
    {
        global $settings;
        
        if ($this->is_admin()) {
            return true;
        }
        
        if (empty($settings["moderator_log"])) {
            return false;
        }
        
        if ($this->is_moderator() && $settings["moderator_log"] == "moderators") {
            return true;
        }
        
        if ($settings["moderator_log"] == "all") {
            return true;
        }
        
        return false;
    } // are_moderator_names_visible
    
    //-----------------------------------------------------------------
    function get_user_name()
    {
        if ($this->is_master_admin()) {
            return "admin";
        }
        
        return val_or_empty($_SESSION["user_name"]);
    } // get_user_name
    
    //-----------------------------------------------------------------
    function get_status_user_name()
    {
        $user_name = $this->get_user_name();
        
        if ($this->is_master_admin()) {
            return text("MasterAdministrator");
        }
        
        if (empty($user_name)) {
            return text("Guest");
        }
        
        return $this->get_user_name();
    } // get_status_user_name
    
    //-----------------------------------------------------------------
    function get_last_posted_user_name()
    {
        if (!empty($_SESSION["last_posted_user"])) return $_SESSION["last_posted_user"];
        
        return $this->get_user_name();
    } // get_last_posted_user_name
    
    //-----------------------------------------------------------------
    function get_user_id()
    {
        return empty($_SESSION["user_id"]) ? "" : trim($_SESSION["user_id"]);
    } // get_user_id
    
    //-----------------------------------------------------------------
    function verify_password($fid, $password)
    {
        if (empty($fid) || empty($password)) {
            MessageHandler::setError(text("ErrWrongPassword"));
            MessageHandler::setFocusElement("password");
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pwhash = md5($password);
        
        $fid = $dbw->escape($fid);
        $password = $dbw->escape($password);
        
        if (!$dbw->execute_query("select 1 from {$prfx}_forum where id = $fid and password = '$password'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            MessageHandler::setError(text("ErrWrongPassword"));
            MessageHandler::setFocusElement("password");
            return false;
        }
        
        $dbw->free_result();
        
        $_SESSION["verified_protected_forums"][$fid] = $fid;
        
        set_cookie("password_verified_$fid", $pwhash, time() + 90 * 24 * 3600);
        
        return true;
    } // verify_password
    
    //-----------------------------------------------------------------
    function gen_user_hourly_activity($uid)
    {
        unset($_SESSION["user_posts"]);
        unset($_SESSION["user_hits"]);
        
        if (empty($uid) || !is_numeric($uid)) {
            return false;
        }
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        $uid = $rodbw->escape($uid);
        
        $_SESSION["user_activity_time_zone"] = reqvar("time_zone");
        if (empty($_SESSION["user_activity_time_zone"])) {
            $_SESSION["user_activity_time_zone"] = "my_time_zone";
        }
        
        if ($_SESSION["user_activity_time_zone"] == "my_time_zone") {
            $hour_offset = get_timezone_gmt_offset($_SESSION["time_zone"]) - get_timezone_gmt_offset(TIME_ZONE);
        } else {
            if (!$rodbw->execute_query("select time_zone from {$prfx}_user where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $user_time_zone = "";
            
            while ($rodbw->fetch_row()) {
                $user_time_zone = $rodbw->field_by_name("time_zone") ? $rodbw->field_by_name("time_zone") : TIME_ZONE;
            }
            
            $rodbw->free_result();
            
            $hour_offset = get_timezone_gmt_offset($user_time_zone) - get_timezone_gmt_offset(TIME_ZONE);
        }
        
        if (empty($hour_offset)) {
            $hour_offset = 0;
        }
        
        $where = "where user_id = $uid";
        $start_date = $rodbw->format_datetime(time() - 30 * 24 * 3600);
        $where .= " and dt >= '$start_date'";
        
        if (!$rodbw->execute_query($this->get_query_user_hour_hits($prfx, $where, $hour_offset))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $hour = $rodbw->field_by_name("hour");
            
            $_SESSION["user_hits"][$hour] = $rodbw->field_by_name("hits_count") / 30.0;
        }
        
        $rodbw->free_result();
        
        $where = "where user_id = $uid";
        $start_date = $rodbw->format_datetime(time() - 30 * 24 * 3600);
        $where .= " and creation_date >= '$start_date'";
        
        if (!$rodbw->execute_query($this->get_query_user_hour_posts($prfx, $where, $hour_offset))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $hour = $rodbw->field_by_name("hour");
            
            $_SESSION["user_posts"][$hour] = $rodbw->field_by_name("post_count") / 30.0;
        }
        
        $rodbw->free_result();
        
        if (!empty($_SESSION["user_hits"])) {
            for ($t = 0; $t <= 23; $t++) {
                if (empty($_SESSION["user_hits"][$t])) {
                    $_SESSION["user_hits"][$t] = 0;
                }
            }
            
            $_SESSION["user_hits"][24] = $_SESSION["user_hits"][0];
            
            ksort($_SESSION["user_hits"]);
        }
        
        if (!empty($_SESSION["user_posts"])) {
            for ($t = 0; $t <= 23; $t++) {
                if (empty($_SESSION["user_posts"][$t])) {
                    $_SESSION["user_posts"][$t] = 0;
                }
            }
            
            $_SESSION["user_posts"][24] = $_SESSION["user_posts"][0];

            ksort($_SESSION["user_posts"]);
        }
        
        return true;
    } // gen_user_hourly_activity
    
    //-----------------------------------------------------------------
    function gen_user_daily_activity($uid)
    {
        unset($_SESSION["user_posts"]);
        unset($_SESSION["user_hits"]);
        
        if (empty($uid) || !is_numeric($uid)) {
            return false;
        }
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($uid);
        
        $start_date = xstrtotime("-6 months");
        switch (reqvar("period")) {
            case "last_month":
                $_SESSION["user_activity_period"] = reqvar("period");
                $start_date = xstrtotime("-1 month");
                break;
            case "last_half_year":
                $_SESSION["user_activity_period"] = reqvar("period");
                $start_date = xstrtotime("-6 months");
                break;
            case "last_year":
                $_SESSION["user_activity_period"] = reqvar("period");
                $start_date = xstrtotime("-1 year");
                break;
            case "whole_period":
                $_SESSION["user_activity_period"] = reqvar("period");
                $start_date = 0;
                break;
            default:
                $_SESSION["user_activity_period"] = "last_half_year";
                $start_date = xstrtotime("-6 months");
                break;
        }
        
        $where = "where user_id = $uid";
        
        $now = $rodbw->format_datetime(mktime(0, 0, 0, date("n"), date("j"), date("Y")));
        $where .= " and dt < '$now'";
        
        if (!empty($start_date)) {
            $start_date = $rodbw->format_datetime($start_date);
            $where .= " and dt >= '$start_date'";
        }
        
        if (!$rodbw->execute_query("
                            select dt, sum(hits_count) hits_count, sum(post_count) post_count
                            from {$prfx}_daily_statistics
                            $where
                            group by dt
                            order by dt
                           ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $date = xstrtotime($rodbw->field_by_name("dt"));
            
            $_SESSION["user_hits"][$date] = $rodbw->field_by_name("hits_count");
            $_SESSION["user_posts"][$date] = $rodbw->field_by_name("post_count");
        }
        
        $rodbw->free_result();
        
        if (!empty($_SESSION["user_hits"])) {
            $min = min(array_keys($_SESSION["user_hits"]));
            $max = max(array_keys($_SESSION["user_hits"]));
            for ($t = $min; $t < $max; $t = $t + 24 * 3600) {
                if (empty($_SESSION["user_hits"][$t])) {
                    $_SESSION["user_hits"][$t] = 0;
                }
            }
            
            ksort($_SESSION["user_hits"]);
        }
        
        if (!empty($_SESSION["user_posts"])) {
            $min = min(array_keys($_SESSION["user_posts"]));
            $max = max(array_keys($_SESSION["user_posts"]));
            for ($t = $min; $t < $max; $t = $t + 24 * 3600) {
                if (empty($_SESSION["user_posts"][$t])) {
                    $_SESSION["user_posts"][$t] = 0;
                }
            }
            
            ksort($_SESSION["user_posts"]);
        }
        
        return true;
    } // gen_user_daily_activity
    
    //-----------------------------------------------------------------
    function gen_user_weekday_activity($uid)
    {
        unset($_SESSION["user_posts"]);
        unset($_SESSION["user_hits"]);
        
        if (empty($uid) || !is_numeric($uid)) {
            return false;
        }
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($uid);
        
        $start_date = xstrtotime("-6 months");
        switch (reqvar("period")) {
            case "last_month":
                $_SESSION["user_activity_period"] = reqvar("period");
                $start_date = xstrtotime("-1 month");
                break;
            case "last_half_year":
                $_SESSION["user_activity_period"] = reqvar("period");
                $start_date = xstrtotime("-6 months");
                break;
            case "last_year":
                $_SESSION["user_activity_period"] = reqvar("period");
                $start_date = xstrtotime("-1 year");
                break;
            case "whole_period":
                $_SESSION["user_activity_period"] = reqvar("period");
                $start_date = 0;
                break;
            default:
                $_SESSION["user_activity_period"] = "last_half_year";
                $start_date = xstrtotime("-6 months");
                break;
        }
        
        $where = "where user_id = $uid";
        
        $now = $rodbw->format_datetime(mktime(0, 0, 0, date("n"), date("j"), date("Y")));
        $where .= " and dt < '$now'";
        
        if (!empty($start_date)) {
            $start_date = $rodbw->format_datetime($start_date);
            $where .= " and dt >= '$start_date'";
        }
        
        if (!$rodbw->execute_query("
                            select dt, sum(hits_count) hits_count, sum(post_count) post_count
                            from {$prfx}_daily_statistics
                            $where
                            group by dt
                            order by dt
                           ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $user_hits = array();
        $user_posts = array();
        $weekdays_counted = array();
        while ($rodbw->fetch_row()) {
            $weekday = date("N", xstrtotime($rodbw->field_by_name("dt")));
            
            if(empty($weekdays_counted[$weekday])) {
                $weekdays_counted[$weekday] = 0;
            }
            
            $weekdays_counted[$weekday]++;

            if(empty($user_hits[$weekday])) {
                $user_hits[$weekday] = 0;
            }

            $user_hits[$weekday] += $rodbw->field_by_name("hits_count");

            if(empty($user_posts[$weekday])) {
                $user_posts[$weekday] = 0;
            }

            $user_posts[$weekday] += $rodbw->field_by_name("post_count");
        }
        
        $rodbw->free_result();
        
        if (!empty($user_hits)) {
            for ($wd = 1; $wd <= 7; $wd++) {
                if (empty($weekdays_counted[$wd])) {
                    $weekdays_counted[$wd] = 1;
                }

                if (empty($user_hits[$wd])) {
                    $user_hits[$wd] = 0;
                }
            }
            
            ksort($user_hits);
        }
        
        if (!empty($user_posts)) {
            for ($wd = 1; $wd <= 7; $wd++) {
                if (empty($weekdays_counted[$wd])) {
                    $weekdays_counted[$wd] = 1;
                }

                if (empty($user_posts[$wd])) {
                    $user_posts[$wd] = 0;
                }
            }
            
            ksort($user_posts);
        }
        
        foreach($user_hits as $wd => $val) {
            $_SESSION["user_hits"][$this->get_weekday_name($wd)] = $val / $weekdays_counted[$wd];
        }
        
        foreach($user_posts as $wd => $val) {
            $_SESSION["user_posts"][$this->get_weekday_name($wd)] = $val / $weekdays_counted[$wd];
        }

        return true;
    } // gen_user_weekday_activity

    //-----------------------------------------------------------------
    function get_forum_activity()
    {
        $_SESSION["period"]["total_likes"] = 0;
        $_SESSION["period"]["total_dislikes"] = 0;
        $_SESSION["period"]["total_rates"] = 0;
        $_SESSION["period"]["total_posts"] = 0;
        $_SESSION["period"]["total_topics"] = 0;
        $_SESSION["period"]["new_users"] = 0;
        $_SESSION["period"]["total_hits"] = 0;
        $_SESSION["period"]["posts_per_day"] = 0;
        $_SESSION["period"]["online_users"] = 0;
        
        $_SESSION["today"]["total_likes"] = 0;
        $_SESSION["today"]["total_dislikes"] = 0;
        $_SESSION["today"]["total_rates"] = 0;
        $_SESSION["today"]["total_posts"] = 0;
        $_SESSION["today"]["total_topics"] = 0;
        $_SESSION["today"]["new_users"] = 0;
        $_SESSION["today"]["total_hits"] = 0;
        $_SESSION["today"]["posts_per_day"] = 0;
        $_SESSION["today"]["online_users"] = 0;
        
        $_SESSION["yesterday"]["total_likes"] = 0;
        $_SESSION["yesterday"]["total_dislikes"] = 0;
        $_SESSION["yesterday"]["total_rates"] = 0;
        $_SESSION["yesterday"]["total_posts"] = 0;
        $_SESSION["yesterday"]["total_topics"] = 0;
        $_SESSION["yesterday"]["new_users"] = 0;
        $_SESSION["yesterday"]["total_hits"] = 0;
        $_SESSION["yesterday"]["posts_per_day"] = 0;
        $_SESSION["yesterday"]["online_users"] = 0;
        
        $now = time();
        
        if (!$this->gen_forum_summary_statistics(reqvar("fid"), reqvar("period"), $_SESSION["period"])) {
            return false;
        }
        if (!$this->gen_forum_day_statistics(reqvar("fid"), $now - 24 * 3600, $now, $_SESSION["today"])) {
            return false;
        }
        if (!$this->gen_forum_day_statistics(reqvar("fid"), $now - 48 * 3600, $now - 24 * 3600 - 1, $_SESSION["yesterday"])) {
            return false;
        }
        
        return true;
    } // get_forum_activity
    
    //-----------------------------------------------------------------
    function gen_forum_monthly_activity()
    {
        unset($_SESSION["forum_posts"]);
        unset($_SESSION["forum_hits"]);
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $forum_filter = "and forum_id is not NULL";
        
        if (!reqvar_empty("fid")) {
            $forum_filter = "and forum_id = " . $rodbw->escape(reqvar("fid"));
        }
        
        $now = mktime(0, 0, 0, date("n"), date("j"), date("Y"));
        
        switch (reqvar("period")) {
            case "last_month":
                $start_date = xstrtotime("-1 month", $now);
                break;
            case "last_half_year":
                $start_date = xstrtotime("-6 months", $now);
                break;
            case "last_year":
                $start_date = xstrtotime("-1 year", $now);
                break;
            case "whole_period":
                $start_date = 0;
                break;
            default:
                $start_date = xstrtotime("-1 year", $now);
                break;
        }
        
        $now = $rodbw->format_date($now);
        $date_appendix = " and dt < '$now'";
        
        if (!empty($start_date)) {
            $start_date = $rodbw->format_date($start_date);
            $date_appendix .= " and dt >= '$start_date'";
        }
        
        if (!$rodbw->execute_query("select dt,
                             sum(hits_count) hits_count,
                             sum(post_count) post_count
                             from {$prfx}_daily_statistics
                             where 1 = 1
                             $forum_filter
                             $date_appendix
                             group by dt
                             order by dt
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $forum_hits = array();
        $forum_posts = array();
        $months_counted = array();
        while ($rodbw->fetch_row()) {
            $month = date("n", xstrtotime($rodbw->field_by_name("dt")));
            
            if(empty($months_counted[$month])) {
                $months_counted[$month] = 0;
            }
            
            $months_counted[$month]++;

            if(empty($forum_hits[$month])) {
                $forum_hits[$month] = 0;
            }

            $forum_hits[$month] += $rodbw->field_by_name("hits_count");

            if(empty($forum_posts[$month])) {
                $forum_posts[$month] = 0;
            }

            $forum_posts[$month] += $rodbw->field_by_name("post_count");
        }
        
        $rodbw->free_result();
        
        if (!empty($forum_hits)) {
            for ($mn = 1; $mn <= 12; $mn++) {
                if (empty($months_counted[$mn])) {
                    $months_counted[$mn] = 1;
                }

                if (empty($forum_hits[$mn])) {
                    $forum_hits[$mn] = 0;
                }
            }
            
            ksort($forum_hits);
        }
        
        if (!empty($forum_posts)) {
            for ($mn = 1; $mn <= 12; $mn++) {
                if (empty($months_counted[$mn])) {
                    $months_counted[$mn] = 1;
                }

                if (empty($forum_posts[$mn])) {
                    $forum_posts[$mn] = 0;
                }
            }
            
            ksort($forum_posts);
        }
        
        foreach($forum_hits as $mn => $val) {
            $_SESSION["forum_hits"][$this->get_month_short_name($mn)] = $val / $months_counted[$mn];
        }
        
        foreach($forum_posts as $mn => $val) {
            $_SESSION["forum_posts"][$this->get_month_short_name($mn)] = $val / $months_counted[$mn];
        }
        
        $rodbw->free_result();
        
        return true;
    } // gen_forum_monthly_activity
    
    //-----------------------------------------------------------------
    function gen_forum_daily_activity()
    {
        unset($_SESSION["forum_posts"]);
        unset($_SESSION["forum_hits"]);
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $forum_filter = "and forum_id is not NULL";
        
        if (!reqvar_empty("fid")) {
            $forum_filter = "and forum_id = " . $rodbw->escape(reqvar("fid"));
        }
        
        $now = mktime(0, 0, 0, date("n"), date("j"), date("Y"));
        
        switch (reqvar("period")) {
            case "last_month":
                $start_date = xstrtotime("-1 month", $now);
                break;
            case "last_half_year":
                $start_date = xstrtotime("-6 months", $now);
                break;
            case "last_year":
                $start_date = xstrtotime("-1 year", $now);
                break;
            case "whole_period":
                $start_date = 0;
                break;
            default:
                $start_date = xstrtotime("-1 year", $now);
                break;
        }
        
        // daily statistics
        
        $now = $rodbw->format_date($now);
        $date_appendix = " and dt < '$now'";
        
        if (!empty($start_date)) {
            $start_date = $rodbw->format_date($start_date);
            $date_appendix .= " and dt >= '$start_date'";
        }
        
        if (!$rodbw->execute_query("select dt,
                             sum(hits_count) hits_count,
                             sum(post_count) post_count
                             from {$prfx}_daily_statistics
                             where 1 = 1
                             $forum_filter
                             $date_appendix
                             group by dt
                             order by dt
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $date = xstrtotime($rodbw->field_by_name("dt"));
            
            $_SESSION["forum_hits"][$date] = $rodbw->field_by_name("hits_count");
            $_SESSION["forum_posts"][$date] = $rodbw->field_by_name("post_count");
        }
        
        $rodbw->free_result();
        
        if (!empty($_SESSION["forum_hits"])) {
            $min = min(array_keys($_SESSION["forum_hits"]));
            $max = max(array_keys($_SESSION["forum_hits"]));
            for ($t = $min; $t < $max; $t = $t + 24 * 3600) {
                if (empty($_SESSION["forum_hits"][$t])) {
                    $_SESSION["forum_hits"][$t] = 0;
                }
            }
            
            ksort($_SESSION["forum_hits"]);
        }
        
        if (!empty($_SESSION["forum_posts"])) {
            $min = min(array_keys($_SESSION["forum_posts"]));
            $max = max(array_keys($_SESSION["forum_posts"]));
            for ($t = $min; $t < $max; $t = $t + 24 * 3600) {
                if (empty($_SESSION["forum_posts"][$t])) {
                    $_SESSION["forum_posts"][$t] = 0;
                }
            }
            
            ksort($_SESSION["forum_posts"]);
        }
        
        return true;
    } // gen_forum_daily_activity
    
    //-----------------------------------------------------------------
    function gen_forum_summary_statistics($fid, $period, &$stat_data)
    {
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $now_rounded = mktime(0, 0, 0, date("n"), date("j"), date("Y"));
        
        switch ($period) {
            case "last_month":
                $start_date_rounded = xstrtotime("-1 month", $now_rounded);
                break;
            case "last_half_year":
                $start_date_rounded = xstrtotime("-6 months", $now_rounded);
                break;
            case "last_year":
                $start_date_rounded = xstrtotime("-1 year", $now_rounded);
                break;
            case "whole_period":
                $start_date_rounded = 0;
                break;
            default:
                $start_date_rounded = xstrtotime("-6 months", $now_rounded);
                break;
        }
        
        $forum_filter = "and forum_id is not NULL";
        $forum_appendix = "";
        
        $user_date_appendix = "";
        $topic_date_appendix = "";
        $hits_date_appendix = "";
        
        //--------------------------------------------------------------------
        if (!empty($fid)) {
            $fid = $rodbw->escape($fid);
            
            $forum_appendix = "and forum_id = $fid";
            $forum_filter = "and forum_id = $fid";
        }
        //--------------------------------------------------------------------
        if (!empty($start_date_rounded)) {
            $dt = $rodbw->format_datetime($start_date_rounded);
            
            $user_date_appendix .= " and registration_date >= '$dt'";
            $topic_date_appendix .= " and {$prfx}_topic.creation_date >= '$dt'";
            $hits_date_appendix .= " and dt >= '$dt'";
        }
        //--------------------------------------------------------------------
        
        // user statistics
        
        if (!$rodbw->execute_query("select count(*) cnt
                             from {$prfx}_user
                             where 1 = 1
                             $user_date_appendix")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["new_users"] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        if (empty($stat_data["new_users"])) {
            $stat_data["new_users"] = 0;
        }
        
        // topic statistics
        
        if (!$rodbw->execute_query("select
                             count(*) cnt
                             from
                             {$prfx}_topic
                             where is_private < 1
                             $forum_appendix
                             $topic_date_appendix
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["total_topics"] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        if (empty($stat_data["total_topics"])) {
            $stat_data["total_topics"] = 0;
        }
        
        // posts statistics
        
        if (!$rodbw->execute_query("select
                             sum(hits_count) hits_count, sum(post_count) post_count,
                             min(dt) min_dt, max(dt) max_dt
                             from {$prfx}_daily_statistics
                             where 1 = 1
                             $forum_filter
                             $hits_date_appendix
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["total_posts"] = $rodbw->field_by_name("post_count");
            $stat_data["total_hits"] = $rodbw->field_by_name("hits_count");
            
            $stat_data["posts_per_day"] = $rodbw->field_by_name("post_count");
            
            if (empty($stat_data["posts_per_day"])) {
                $stat_data["posts_per_day"] = 0;
            }
            
            $days = (xstrtotime($rodbw->field_by_name("max_dt")) - xstrtotime($rodbw->field_by_name("min_dt"))) / (24 * 3600);
            if ($days > 1) {
                $stat_data["posts_per_day"] = ceil($stat_data["posts_per_day"] / $days);
            }
        }
        
        $rodbw->free_result();
        
        if (empty($stat_data["total_posts"])) {
            $stat_data["total_posts"] = 0;
        }
        if (empty($stat_data["posts_per_day"])) {
            $stat_data["posts_per_day"] = 0;
        }
        if (empty($stat_data["total_hits"])) {
            $stat_data["total_hits"] = 0;
        }
        
        // online users statistics
        
        if (!$rodbw->execute_query("select
                             count(distinct user_id) user_count
                             from {$prfx}_daily_statistics
                             where 1 = 1
                             $forum_filter
                             $hits_date_appendix
                             and user_id is not NULL
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["online_users"] = $rodbw->field_by_name("user_count");
        }
        
        $rodbw->free_result();
        
        if (empty($stat_data["online_users"])) {
            $stat_data["online_users"] = 0;
        }
        
        measure_action_time("get forum summary stat.");
        
        return true;
    } // gen_forum_summary_statistics
    
    //-----------------------------------------------------------------
    function gen_forum_day_statistics($fid, $start_date, $end_date, &$stat_data)
    {
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $forum_filter = "and forum_id is not NULL";
        $forum_appendix = "";
        
        $user_date_appendix = "";
        $post_date_appendix = "";
        $topic_date_appendix = "";
        $hits_date_appendix = "";
        
        //--------------------------------------------------------------------
        if (!empty($fid)) {
            $fid = $rodbw->escape($fid);
            
            $forum_filter = "and forum_id = $fid";
            $forum_appendix = "and forum_id = $fid";
        }
        //--------------------------------------------------------------------
        if (!empty($start_date)) {
            $dt = $rodbw->format_datetime($start_date);
            
            $user_date_appendix .= " and registration_date >= '$dt'";
            $post_date_appendix .= " and {$prfx}_post.creation_date >= '$dt'";
            $topic_date_appendix .= " and {$prfx}_topic.creation_date >= '$dt'";
            $hits_date_appendix .= " and dt >= '$dt'";
        }
        //--------------------------------------------------------------------
        if (!empty($end_date)) {
            $dt = $rodbw->format_datetime($end_date);
            
            $user_date_appendix .= " and registration_date <= '$dt'";
            $post_date_appendix .= " and {$prfx}_post.creation_date <= '$dt'";
            $topic_date_appendix .= " and {$prfx}_topic.creation_date <= '$dt'";
            $hits_date_appendix .= " and dt <= '$dt'";
        }
        //--------------------------------------------------------------------
        
        // user statistics
        
        if (!$rodbw->execute_query("select count(*) cnt
                             from {$prfx}_user
                             where 1 = 1
                             $user_date_appendix")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["new_users"] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        if (empty($stat_data["new_users"])) {
            $stat_data["new_users"] = 0;
        }
        
        // topic statistics
        
        if (!$rodbw->execute_query("select
                             count(*) cnt
                             from
                             {$prfx}_topic
                             where is_private < 1
                             $forum_appendix
                             $topic_date_appendix
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["total_topics"] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        if (empty($stat_data["total_topics"])) {
            $stat_data["total_topics"] = 0;
        }
        
        // posts statistics
        
        if (!$rodbw->execute_query("select
                             count(*) cnt,
                             min({$prfx}_post.creation_date) min_dt,
                             max({$prfx}_post.creation_date) max_dt
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where is_private < 1
                             $forum_appendix
                             $post_date_appendix
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["total_posts"] = $rodbw->field_by_name("cnt");
            $stat_data["posts_per_day"] = $rodbw->field_by_name("cnt");
            
            if (empty($stat_data["total_posts"])) {
                $stat_data["total_posts"] = 0;
            }
            if (empty($stat_data["posts_per_day"])) {
                $stat_data["posts_per_day"] = 0;
            }
            
            $days = (xstrtotime($rodbw->field_by_name("max_dt")) - xstrtotime($rodbw->field_by_name("min_dt"))) / (24 * 3600);
            if ($days > 1) {
                $stat_data["posts_per_day"] = ceil($stat_data["posts_per_day"] / $days);
            }
        }
        
        $rodbw->free_result();
        
        // hits statistics
        
        if (!$rodbw->execute_query("select
                             sum(hits_count) hits_count
                             from
                             {$prfx}_forum_hits
                             where 1 = 1
                             $forum_filter
                             $hits_date_appendix
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["total_hits"] = $rodbw->field_by_name("hits_count");
        }
        
        $rodbw->free_result();
        
        if (empty($stat_data["total_hits"])) {
            $stat_data["total_hits"] = 0;
        }
        
        // online user statistics
        
        if (!$rodbw->execute_query("select
                             count(distinct user_id) user_count
                             from
                             {$prfx}_forum_hits
                             where 1 = 1
                             $forum_filter
                             $hits_date_appendix
                           ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["online_users"] = $rodbw->field_by_name("user_count");
        }
        
        $rodbw->free_result();
        
        if (empty($stat_data["online_users"])) {
            $stat_data["online_users"] = 0;
        }
        
        // rate statistics
        
        if (!$rodbw->execute_query("select sum(like_count) likes, sum(dislike_count) dislikes, sum(like_count + dislike_count) rates
                                    from {$prfx}_post
                                    inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                    inner join {$prfx}_post_statistics on ({$prfx}_post.id = {$prfx}_post_statistics.post_id)
                                    where is_private < 1
                                    $forum_appendix
                                    $post_date_appendix
                                    ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $stat_data["total_likes"] = $rodbw->field_by_name("likes");
            $stat_data["total_dislikes"] = $rodbw->field_by_name("dislikes");
            $stat_data["total_rates"] = $rodbw->field_by_name("rates");
        }
        
        $rodbw->free_result();
        
        if (empty($stat_data["total_likes"])) {
            $stat_data["total_likes"] = 0;
        }
        
        if (empty($stat_data["total_dislikes"])) {
            $stat_data["total_dislikes"] = 0;
        }
        
        if (empty($stat_data["total_rates"])) {
            $stat_data["total_rates"] = 0;
        }
        
        measure_action_time("get forum day stat.");
        
        return true;
    } // gen_forum_day_statistics
    
    //-----------------------------------------------------------------
    function get_moderator_list($fid, &$moderator_list)
    {
        if (empty($fid) || !is_numeric($fid)) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $fid = $dbw->escape($fid);
        
        if (!$dbw->execute_query("select user_id, user_name
                             from
                             {$prfx}_forum_moderator
                             inner join {$prfx}_user on ({$prfx}_forum_moderator.user_id = {$prfx}_user.id)
                             where forum_id = $fid
                             order by user_name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $moderator_list[$dbw->field_by_name("user_id")] = $dbw->field_by_name("user_name");
        }
        
        $dbw->free_result();
        
        return true;
    } // get_moderator_list
    
    //-----------------------------------------------------------------
    function find_users($search, &$found_users, $master_admin = "")
    {
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $current_uid = $rodbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = 0;
        }
        
        $search_ru = $rodbw->escape(switcher_ru($search));
        $search_en = $rodbw->escape(switcher_en($search));
        $translit = $rodbw->escape(translit($search));
        $untranslit = $rodbw->escape(untranslit($search));
        $search = $rodbw->escape($search);
        
        $where = "where (user_name like '$search%' or user_name like '$search_ru%' or user_name like '$search_en%' or user_name like '$translit%' or user_name like '$untranslit%')";
        
        $find_ignored_users = false;
        foreach ($GLOBALS['LANGUAGES'] as $lng) {
            if (utf8_strtolower($search) == ":" . utf8_strtolower(try_translate("ignored", $lng))) {
                $find_ignored_users = true;
            }
        }
        
        if (utf8_strtolower($search) == ":i") {
            $find_ignored_users = true;
        }
        
        if ($find_ignored_users) {
            $where = "where id in (select ignored_user_id from {$prfx}_ignored_users where user_id = $current_uid)";
        }          
        
        if (!$rodbw->execute_query($this->get_query_user($prfx, $where, $rodbw->escape($master_admin)))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $found_users[$rodbw->field_by_name("id")] = $rodbw->field_by_name("user_name");
        }
        
        $rodbw->free_result();
        
        return true;
    } // find_users
    
    //-----------------------------------------------------------------
    function user_name_to_id($user)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $user = $dbw->escape($user);
        
        if (!$dbw->execute_query("select id from {$prfx}_user where user_name = '$user'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return "";
        }
        
        $uid = "";
        while ($dbw->fetch_row()) {
            $uid = $dbw->field_by_name("id");
        }
        
        $dbw->free_result();
        
        return $uid;
    } // user_name_to_id
    
    //-----------------------------------------------------------------
    function get_topic_name($tid, &$topic_name, &$clear_topic_name, &$fid)
    {
        if (empty($tid)) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape($tid);
        if (!is_numeric($tid)) {
            return false;
        }
        
        $forum_list = array();
        if (!$this->get_forum_list($forum_list)) {
            return false;
        }
        
        $in_list = "";
        $forum_name = "-";
        foreach ($forum_list as $fid => $dummy) {
            if (!$this->has_access_to_forum($fid, $forum_name, false)) {
                continue;
            }
            
            if ($this->need_forum_password("", $fid)) {
                continue;
            }
            
            $in_list .= $fid . ",";
        }
        
        $in_list = trim($in_list, ",");
        if (empty($in_list)) {
            $in_list = "NULL";
        }
        
        $query = "select id, name, forum_id
            from
            {$prfx}_topic
            where deleted <> 1 and merged is NULL and
            forum_id in ($in_list) and {$prfx}_topic.id = $tid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
            $topic_name = "[#" . $dbw->field_by_name("id") . "] " . $dbw->field_by_name("name");
            $clear_topic_name = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        return true;
    } // get_topic_name
    
    //-----------------------------------------------------------------
    function find_topics($search, &$found_topics)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = 0;
        }
        
        if (!$dbw->execute_query($this->get_query_topic_search($dbw, $prfx, $current_uid, $search))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("id");
            
            $found_topics["#" . $tid] = "[#$tid] " . $dbw->field_by_name("topic_name");
        }
        
        $dbw->free_result();
        
        return true;
    } // find_topics
    
    //-----------------------------------------------------------------
    function find_existing_topics($search, $forum, &$found_topics)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->execute_query($this->get_query_existing_topic_search($dbw, $prfx, $search, $forum))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("id");
            
            $found_topics["#" . $tid] = array(
                "tid" => $tid,
                "fid" => $forum,
                "name" => $dbw->field_by_name("topic_name")
            );
        }
        
        $dbw->free_result();
        
        return true;
    } // find_existing_topics
    
    //-----------------------------------------------------------------
    function find_moderated_topics($search, $fid, $merge_modus, &$found_topics)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $search = $dbw->escape($search);
        $fid = $dbw->escape($fid);
        
        if (!$dbw->execute_query($this->get_query_moderated_topic_search($dbw, $prfx, $search, $fid, $merge_modus))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("id");
            
            $found_topics["#" . $tid] = "[#$tid] " . $dbw->field_by_name("topic_name");
        }
        
        $dbw->free_result();
        
        return true;
    } // find_moderated_topics
    
    //-----------------------------------------------------------------
    function has_access_to_topic($tid, $with_message)
    {
        if (empty($tid)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($tid)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            return false;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape($tid);
        
        if (!$dbw->execute_query("select forum_id, {$prfx}_forum.name forum_name, {$prfx}_topic.deleted, {$prfx}_forum.deleted forum_deleted,
                             publish_delay, is_private, author, {$prfx}_topic.user_id
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $fid = 0;
        $delayed = false;
        $deleted = false;
        $forum_name = "";
        $author_id = "";
        $is_private = false;
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("is_private") ? "private" : $dbw->field_by_name("forum_id");
            $forum_name = $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name");
            
            $deleted = $dbw->field_by_name("deleted") || $dbw->field_by_name("forum_deleted");
            $delayed = $dbw->field_by_name("publish_delay");
            $author_id = $dbw->field_by_name("user_id");
            $is_private = $dbw->field_by_name("is_private");
        } else {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if ($deleted) {
            $has_access = false;
            
            if ($is_private == 2 && $this->is_topic_moderator($tid)) {
                $has_access = true;
            } elseif (empty($is_private) && ($this->is_forum_moderator($fid) || $this->is_admin())) {
                $has_access = true;
            }
            
            if (!$has_access) {
                if ($with_message) {
                    MessageHandler::setWarning(text("WarnTopicDeleted"));
                }
                
                measure_action_time("check topic access");
                return false;
            }
        }
        
        $uid = $dbw->escape($this->get_user_id());
        
        if ($delayed && $author_id != $uid) {
            if ($with_message) {
                MessageHandler::setWarning(text("ErrTopicNotPublished"));
            }
            
            measure_action_time("check topic access");
            return false;
        }
        
        if (empty($is_private)) {
            if (!$this->has_access_to_forum($fid, $forum_name, $with_message)) {
                measure_action_time("check topic access");
                return false;
            } else {
                
                measure_action_time("check topic access");
                return true;
            }
        }
        
        if (empty($uid)) {
            if ($with_message) {
                MessageHandler::setWarning(text("ErrNoAccessToPrivateTopic"));
            }
            
            measure_action_time("check topic access");
            return false;
        }
        
        if (!$dbw->execute_query("select 1 from {$prfx}_private_topics where topic_id = $tid and participant_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            
            measure_action_time("check topic access");
            return true;
        }
        
        $dbw->free_result();
        
        if ($with_message) {
            MessageHandler::setWarning(text("ErrNoAccessToPrivateTopic"));
        }
        
        measure_action_time("check topic access");
        
        return false;
    } // has_access_to_topic
    
    //-----------------------------------------------------------------
    function has_access_to_forum($fid, &$forum_name, $with_message)
    {
        if (empty($fid)) {
            $forum_name = "-";
            MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($fid)) {
            $forum_name = $fid;
            MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), $fid));
            return false;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $fid = $dbw->escape($fid);
        
        $forum_name = "-";
        
        if (!$dbw->execute_query("select name, deleted, protected_by_password, restricted_access from {$prfx}_forum where id = $fid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $protected_by_password = false;
        $restricted_access = 0;
        
        if ($dbw->fetch_row()) {
            $deleted = $dbw->field_by_name("deleted");
            $protected_by_password = $dbw->field_by_name("protected_by_password");
            $restricted_access = $dbw->field_by_name("restricted_access");
            $forum_name = $dbw->field_by_name("name");
            
            if ($forum_name == "PRIVATE_MESSAGES") {
                $forum_name = text("PrivateTopics");
                $dbw->free_result();
                
                measure_action_time("check forum access");
                return ($this->get_user_id() != 0);
            }
        } else {
            $forum_name = $fid;
            $dbw->free_result();
            MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), $fid));
            measure_action_time("check forum access");
            return false;
        }
        
        $dbw->free_result();
        
        if ($deleted && !$this->is_admin() && !$this->is_forum_moderator($fid)) {
            measure_action_time("check forum access");

            if ($with_message) {
                MessageHandler::setWarning(text("WarnForumDeleted"));
            }

            return false;
        }
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
            
        if (!$dbw->execute_query("select block_expires
                           from {$prfx}_forum_blocked
                           where user_id = $uid and forum_id = $fid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $blocked = false;
        $block_expires = "";
        $block_time_left = "";
        
        if ($dbw->fetch_row()) {
            $blocked = true;
            $block_expires = "";
            $block_time_left = "";
            if ($dbw->field_by_name("block_expires")) {
                if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                    $blocked = false;
                } else {
                    $block_expires = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                    $block_time_left = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                }
            }
        }
        
        $dbw->free_result();

        if ($blocked && $restricted_access > 0) {
            measure_action_time("check forum access");

            if ($with_message) {
                if (!empty($block_expires)) {
                    MessageHandler::setWarning(sprintf(text("ErrAccountIsBlockedUntilOnForum"), $forum_name, $block_expires, $block_time_left));
                } else {
                    MessageHandler::setWarning(sprintf(text("ErrAccountIsBlockedOnForum"), $forum_name));
                }
                
                MessageHandler::setWarning(sprintf(text("ErrForumNotAccessibleDueToBlock"), $forum_name));
            }  

            return false;
        }
        
        $where = "where {$prfx}_forum.id = $fid and {$prfx}_forum.name <> 'PRIVATE_MESSAGES'";
        
        if (!$this->is_logged_in()) {
            $where .= " and restricted_access = 0";
        } elseif ($this->is_admin() && !$this->demo_mode()) {
            // no restrxtions
        } else {
            $where .= " and (((restricted_access = 0 or restricted_access = 2) and deleted <> 1) or
                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = $uid) or
                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = $uid) and deleted <> 1)
                      )";
        }
        
        if (!$dbw->execute_query("select 1 from {$prfx}_forum $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            measure_action_time("check forum access");
            return true;
        }
        
        $dbw->free_result();
        
        measure_action_time("check forum access");
        
        if ($with_message) {
            MessageHandler::setWarning(sprintf(text("ErrForumNotAccessible"), $forum_name));
        }  
        
        return false;
    } // has_access_to_forum
    
    //-----------------------------------------------------------------
    function need_forum_password($tid, &$fid)
    {
        if (empty($fid) && empty($tid)) {
            return false;
        }
        
        if (!is_numeric($fid)) {
            return false;
        }
        
        if ($this->is_admin()) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $where = "";
        if (empty($fid)) {
            $tid = $dbw->escape($tid);
            $where = "where {$prfx}_forum.id in (select forum_id from {$prfx}_topic where id = $tid)";
        } else {
            $fid = $dbw->escape($fid);
            $where = "where {$prfx}_forum.id = $fid";
        }
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        if (!$dbw->execute_query("select id, password, protected_by_password, {$prfx}_forum_moderator.forum_id is_moderator
                             from {$prfx}_forum
                             left join {$prfx}_forum_moderator on ({$prfx}_forum.id = {$prfx}_forum_moderator.forum_id and user_id = $uid)
                             $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $protected_by_password = false;
        $is_moderator = false;
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("id");
            $is_moderator = $dbw->field_by_name("is_moderator");
            $protected_by_password = $dbw->field_by_name("protected_by_password");
        }
        
        $dbw->free_result();
        
        if (!$protected_by_password || $is_moderator) {
            return false;
        }
        
        if (!empty($_SESSION["verified_protected_forums"][$fid])) {
            return false;
        }
        
        return true;
    } // need_forum_password
    
    //-----------------------------------------------------------------
    function get_forum_list(&$forum_list, $exclude_not_preferred = true)
    {
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $forum_list_tmp = array();
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $where = "where {$prfx}_forum.name <> 'PRIVATE_MESSAGES'";
        
        $forum_restriction_appendix = $this->get_forum_restriction_appendix($rodbw, $prfx, true);
        if (!empty($forum_restriction_appendix)) {
            $where .= " and $forum_restriction_appendix";
        }
        
        if (!$rodbw->execute_query("select {$prfx}_forum.id, name, description, {$prfx}_forum.creation_date,
                             user_posting_as_guest,
                             topic_count, topic_count_total,
                             last_message_date, 
                             {$prfx}_forum.deleted, closed,
                             {$prfx}_post.user_id, {$prfx}_post.author, {$prfx}_user.user_name, {$prfx}_post.read_marker,
                             last_visit_date, logout
                             from {$prfx}_forum
                             inner join {$prfx}_forum_statistics on ({$prfx}_forum.id = {$prfx}_forum_statistics.forum_id)
                             left join {$prfx}_post on ({$prfx}_forum_statistics.last_message_id = {$prfx}_post.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             $where
                             order by sort_order, name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $_SESSION["has_forums_with_user_guest_posting"] = false;
        
        while ($rodbw->fetch_row()) {
            if ($rodbw->field_by_name("user_posting_as_guest")) {
                $_SESSION["has_forums_with_user_guest_posting"] = true;
            }            
            
            $fid = $rodbw->field_by_name("id");
            
            $topic_count = $rodbw->field_by_name("topic_count");
            $deleted = $rodbw->field_by_name("deleted");
            
            if (!empty($_SESSION["show_deleted"])) {
                if ($deleted && !$this->is_admin() && !$this->is_forum_moderator($fid)) {
                    continue;
                }
                
                if ($this->is_admin() || $this->is_forum_moderator($fid)) {
                    $topic_count = $rodbw->field_by_name("topic_count_total");
                }
            } elseif ($deleted) {
                continue;
            }
            
            $last_author_id = $rodbw->field_by_name("user_id");
            $last_author_readmarker = $rodbw->field_by_name("read_marker");
            $last_author = $rodbw->field_by_name("user_name") ? $rodbw->field_by_name("user_name") : $rodbw->field_by_name("author");
            $last_author_online = (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0);
            
            $last_author_ignored = false;
            $this->clear_if_ignored($last_author_id, $last_author, $last_author_readmarker, $last_author_online, $last_author_ignored, $fid, "");
            
            $forum_list_tmp[$fid] = array(
                "name" => $rodbw->field_by_name("name"),
                "description" => $rodbw->field_by_name("description"),
                "last_message_date" => smart_date2(xstrtotime($rodbw->field_by_name("last_message_date"))),
                "topic_count" => $topic_count,
                "last_author" => $last_author,
                "last_author_id" => $last_author_id,
                "last_author_online" => $last_author_online,
                "last_author_ignored" => $last_author_ignored,
                "closed" => $rodbw->field_by_name("closed"),
                "deleted" => $deleted,
                "not_preferred" => !empty($_SESSION["preferred_forums"]) && empty($_SESSION["preferred_forums"][$fid]),
                "topics_with_new_count" => 0
            );
        }
        
        $rodbw->free_result();
        
        if (!$rodbw->execute_query("select user_id, forum_id, user_name,
                             last_visit_date, logout
                             from
                             {$prfx}_forum_moderator
                             inner join {$prfx}_user on ({$prfx}_forum_moderator.user_id = {$prfx}_user.id)
                             order by user_name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            if (empty($forum_list_tmp[$rodbw->field_by_name("forum_id")])) {
                continue;
            }
            
            $forum_list_tmp[$rodbw->field_by_name("forum_id")]["moderators"][$rodbw->field_by_name("user_id")] = array(
                "name" => $rodbw->field_by_name("user_name"),
                "online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0),
            );
        }
        
        $rodbw->free_result();
        
        if (empty($_SESSION["preferred_forums"]) || empty($exclude_not_preferred)) {
            $forum_list = $forum_list_tmp;
            
            measure_action_time("get forum list");
            return true;
        }
        
        foreach ($forum_list_tmp as $fid => $forum_data) {
            if (!empty($_SESSION["preferred_forums"][$fid])) {
                $forum_list[$fid] = $forum_data;
            }
        }
        
        measure_action_time("get forum list");
        return true;
    } // get_forum_list
    
    //-----------------------------------------------------------------
    function check_hash()
    {
        return (!reqvar_empty("hash") && reqvar("hash") == val_or_empty($_SESSION["hash"]));
    } // check_hash
    
    //-----------------------------------------------------------------
    function open_close_forum($fid, $closed)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($fid) || !is_numeric($fid)) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $fid = $dbw->escape($fid);
        
        $event_data = array();
        
        if (!$dbw->execute_query("select id, name from {$prfx}_forum where id = $fid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $event_data["action"] = $closed ? "close_forum" : "open_forum";
            $event_data["forum_id"] = $dbw->field_by_name("id");
            $event_data["forum_name"] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_forum set closed = '$closed' where id = $fid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($closed) {
            MessageHandler::setInfo(text("MsgForumClosed"));
        } else {
            MessageHandler::setInfo(text("MsgForumOpened"));
        }
        
        return true;
    } // open_close_forum
    
    //-----------------------------------------------------------------
    function cascade_delete_forum($dbw, $forum_clause)
    {
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->execute_query("delete from {$prfx}_forum_statistics where forum_id in (select id from {$prfx}_forum where $forum_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_forum_moderator where forum_id in (select id from {$prfx}_forum where $forum_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_forum_member where forum_id in (select id from {$prfx}_forum where $forum_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_forum_blocked where forum_id in (select id from {$prfx}_forum where $forum_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_ignored_forums where forum_id in (select id from {$prfx}_forum where $forum_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$this->cascade_delete_topic($dbw, "forum_id in (select id from {$prfx}_forum where $forum_clause)")) {
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_forum where $forum_clause")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // cascade_delete_forum
    
    //-----------------------------------------------------------------
    function cascade_delete_topic($dbw, $topic_clause)
    {
        $prfx = $dbw->escape(System::getDBPrefix());

        $tmp_id_collector_table = $this->create_tmp_id_collector_table($dbw, $prfx);
        if (empty($tmp_id_collector_table)) {
            return false;
        }
        
        if (!$dbw->execute_query("insert into $tmp_id_collector_table (id) select id from {$prfx}_topic where $topic_clause")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_poll_user_answers where option_id in (select id from {$prfx}_poll_options where topic_id in (select id from $tmp_id_collector_table))")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_poll_options where topic_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_statistics where topic_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_moderator where topic_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_favourite_topics where topic_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_subscription where topic_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_pinned_topics where topic_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_ignored_topics where topic_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_private_topics where topic_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_blocked where topic_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // $tmp_id_collector_table is not allowed because it is also used for cascade_delete_post
        if (!$this->cascade_delete_post($dbw, "topic_id in (select id from {$prfx}_topic where $topic_clause)")) {
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic where $topic_clause")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // cascade_delete_topic
    
    //-----------------------------------------------------------------
    function cascade_delete_post($dbw, $post_clause)
    {
        $prfx = $dbw->escape(System::getDBPrefix());

        $tmp_id_collector_table = $this->create_tmp_id_collector_table($dbw, $prfx);
        if (empty($tmp_id_collector_table)) {
            return false;
        }
        
        if (!$dbw->execute_query("insert into $tmp_id_collector_table (id) select id from {$prfx}_post where $post_clause")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_post_rating where post_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_favourite_posts where post_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_user_tag_post where post_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_post_history where post_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_post_statistics where post_id in (select id from $tmp_id_collector_table)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // unset flag HAS_PINNED_POST for topics where pinned post was deleted
        $query = "update {$prfx}_topic set has_pinned_post = 0
                  where id in (select topic_id from {$prfx}_post where pinned = 1 and id in (select id from $tmp_id_collector_table))";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_post where $post_clause")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // cascade_delete_post
    
    //-----------------------------------------------------------------
    function cascade_delete_user($dbw, $user_clause)
    {
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->execute_query("delete from {$prfx}_user_comment where user_id in (select id from {$prfx}_user where $user_clause) or commented_user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_ignored_forums where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_forum_blocked where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_forum_member where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_forum_moderator where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_ignored_guests where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_ignored_users where user_id in (select id from {$prfx}_user where $user_clause) or ignored_user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_events where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_user_tags where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_favourite_posts where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_post_rating where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_moderator where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_participants where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_favourite_topics where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_subscription where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_pinned_topics where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_ignored_topics where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_private_topics where participant_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_blocked where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_poll_user_answers where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_user_statistics where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_view_history where user_id in (select id from {$prfx}_user where $user_clause)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$this->cascade_delete_post($dbw, "user_id in (select id from {$prfx}_user where $user_clause)")) {
            return false;
        }
        
        if (!$this->cascade_delete_topic($dbw, "user_id in (select id from {$prfx}_user where $user_clause)")) {
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_user where $user_clause")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // cascade_delete_user
    
    //-----------------------------------------------------------------
    function delete_restore_forum($fid, $deleted)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($fid) || !is_numeric($fid)) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $fid = $dbw->escape($fid);
        
        $event_data = array();
        
        if (!$dbw->execute_query("select id, name from {$prfx}_forum where id = $fid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $event_data["action"] = $deleted ? "delete_forum" : "restore_forum";
            $event_data["forum_id"] = $dbw->field_by_name("id");
            $event_data["forum_name"] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_forum set deleted = $deleted where id = $fid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // delete physically if no topics
        
        $cnt = 0;
        
        if ($deleted) {
            if (!$dbw->execute_query("select topic_count from {$prfx}_forum_statistics where forum_id = $fid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $cnt = $dbw->field_by_name("topic_count");
            }
            
            $dbw->free_result();
            
            if ($cnt == 0) {
                if (!$this->cascade_delete_forum($dbw, "id = $fid")) {
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($deleted) {
            if ($cnt > 0) {
                MessageHandler::setWarning(text("MsgForumMarkedDeleted"));
            } else {
                MessageHandler::setInfo(text("MsgForumDeleted"));
            }
        } else {
            MessageHandler::setInfo(text("MsgForumRestored"));
        }
        
        return true;
    } // delete_restore_forum
    
    //-----------------------------------------------------------------
    function get_topic_data($tid, &$topic_data)
    {
        start_action_time_measure();
        
        $topic_data["id"] = "";
        $topic_data["topic_name"] = "";
        $topic_data["user_id"] = "";
        $topic_data["author"] = "";
        
        $topic_data["new_messages_count"] = 0;
        $topic_data["post_count"] = 0;
        $topic_data["post_count_nondeleted"] = 0;
        $topic_data["post_count_total"] = 0;
        $topic_data["first_topic_message"] = 0;
        $topic_data["last_topic_message"] = 0;
        $topic_data["first_topic_pinned_message"] = 0;
        
        $topic_data["pinned"] = "";
        $topic_data["publish_delay"] = "";
        $topic_data["has_pinned_post"] = "";
        $topic_data["user_pinned"] = "";
        $topic_data["no_guests"] = "";
        $topic_data["deleted"] = "";
        $topic_data["closed"] = "";
        $topic_data["is_poll"] = "";
        $topic_data["poll_comment"] = "";
        $topic_data["poll_results_delayed"] = "";
        $topic_data["is_private"] = "";
        $topic_data["profiled_topic"] = "";
        $topic_data["read_marker"] = "";
        
        if ($tid == "new") {
            $topic_data["topic_name"] = text("NewTopic");
            return true;
        }
        
        if (empty($tid)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($tid)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape($tid);
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        $offline_download = !reqvar_empty("download") && $this->is_logged_in();
        
        if (!$dbw->execute_query("select
                             id, name, creation_date, poll_comment, pinned, has_pinned_post, no_guests, forum_id, merged, {$prfx}_topic.user_id, author, read_marker, publish_delay,
                             profiled_topic, is_private, deleted, closed, is_poll, poll_results_delayed, post_count, post_count_total, {$prfx}_topic_statistics.last_message_id
                             from {$prfx}_topic
                             inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
                             where id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $topic_creation_date = 0;
        
        if ($dbw->fetch_row()) {
            $topic_creation_date = xstrtotime($dbw->field_by_name("creation_date"));
            
            $topic_data["id"] = $dbw->field_by_name("id");
            $topic_data["topic_name"] = $dbw->field_by_name("name");
            $topic_data["poll_comment"] = $dbw->field_by_name("poll_comment");
            if (empty($topic_data["poll_comment"])) {
                $topic_data["poll_comment"] = $topic_data["topic_name"];
            }
            
            $topic_data["user_id"] = $dbw->field_by_name("user_id");
            $topic_data["author"] = $dbw->field_by_name("author");
            
            $topic_data["forum_id"] = $dbw->field_by_name("forum_id");
            $topic_data["pinned"] = $dbw->field_by_name("pinned");
            $topic_data["publish_delay"] = $dbw->field_by_name("publish_delay");
            $topic_data["has_pinned_post"] = $dbw->field_by_name("has_pinned_post");
            $topic_data["is_private"] = $dbw->field_by_name("is_private");
            
            $topic_data["profiled_topic"] = $dbw->field_by_name("profiled_topic");
            
            $topic_data["no_guests"] = $dbw->field_by_name("no_guests");
            $topic_data["deleted"] = $dbw->field_by_name("deleted");
            $topic_data["closed"] = $dbw->field_by_name("closed");
            $topic_data["is_poll"] = $dbw->field_by_name("is_poll");
            $topic_data["poll_results_delayed"] = $dbw->field_by_name("poll_results_delayed");
            $topic_data["read_marker"] = $dbw->field_by_name("read_marker");
            
            $topic_data["merge_target_topic"] = $dbw->field_by_name("merged");
            
            $topic_data["post_count"] = $dbw->field_by_name("post_count");
            $topic_data["post_count_nondeleted"] = $dbw->field_by_name("post_count");
            $topic_data["post_count_total"] = $dbw->field_by_name("post_count_total");
            $topic_data["last_message_id"] = $dbw->field_by_name("last_message_id");
            
            $show_deleted = !empty($_SESSION["show_deleted"]);
            
            // If we enter a deleted topic and we may do this,
            // we want to see the posts.
            if (!empty($topic_data["deleted"])) {
                $show_deleted = true;
            }
            
            if (($this->is_admin() || $this->is_forum_moderator($topic_data["forum_id"]) || $this->is_topic_moderator($tid)) && $show_deleted) {
                $topic_data["post_count"] = $dbw->field_by_name("post_count_total");
            }
            
            $dbw->free_result();
        } else {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // if poll
        
        if (!empty($topic_data["is_poll"])) {
            if (!$dbw->execute_query("select
                               {$prfx}_poll_options.id, name, {$prfx}_poll_user_answers.tm,
                               {$prfx}_user.id user_id, {$prfx}_user.user_name, {$prfx}_user.read_marker
                               from {$prfx}_poll_options
                               left join {$prfx}_poll_user_answers on ({$prfx}_poll_options.id = {$prfx}_poll_user_answers.option_id)
                               left join {$prfx}_user on ({$prfx}_poll_user_answers.user_id = {$prfx}_user.id)
                               where topic_id = $tid
                               order by {$prfx}_poll_options.id, {$prfx}_poll_user_answers.tm")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $topic_data["max_votes_count"] = 0;
            $topic_data["poll_total_votes"] = 0;
            while ($dbw->fetch_row()) {
                $id = $dbw->field_by_name("id");
                
                $topic_data["poll_options"][$id]["name"] = Emoji::Decode($dbw->field_by_name("name"));
                
                if (empty($topic_data["poll_options"][$id]["votes_count"])) {
                    $topic_data["poll_options"][$id]["votes_count"] = 0;
                }
                
                if (!$dbw->field_by_name("user_id")) {
                    continue;
                }
                
                $user_id = $dbw->field_by_name("user_id");
                $user = $dbw->field_by_name("user_name");
                $user_readmarker = $dbw->field_by_name("read_marker");
                $user_online = false;
                $user_ignored = false;
                $this->clear_if_ignored($user_id, $user, $user_readmarker, $user_online, $user_ignored, $topic_data["forum_id"], $tid);
                
                $topic_data["poll_options"][$id]["users"][] = array(
                    "user_id" => $user_id,
                    "user" => $user,
                    "user_ignored" => $user_ignored,
                    "tm" => adjust_and_format_timezone(xstrtotime($dbw->field_by_name("tm")), text("DateTimeFormat"))
                );
                
                $topic_data["poll_options"][$id]["votes_count"]++;
                
                $topic_data["max_votes_count"] = max($topic_data["max_votes_count"], $topic_data["poll_options"][$id]["votes_count"]);
                
                $topic_data["poll_total_votes"]++;
            }
            
            $dbw->free_result();
            
            if (!$dbw->execute_query("select count(distinct user_id) cnt
                               from {$prfx}_poll_options
                               inner join {$prfx}_poll_user_answers on ({$prfx}_poll_options.id = {$prfx}_poll_user_answers.option_id)
                               where topic_id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $topic_data["poll_total_voters"] = $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
            
            if (!empty($uid)) {
                if (!$dbw->execute_query("select id, tm
                                 from {$prfx}_poll_options
                                 inner join {$prfx}_poll_user_answers on ({$prfx}_poll_options.id = {$prfx}_poll_user_answers.option_id)
                                 where topic_id = $tid and user_id = $uid")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                while ($dbw->fetch_row()) {
                    $topic_data["may_cancel_vote"] = time() - xstrtotime($dbw->field_by_name("tm")) <= get_allow_edit_period();
                    $topic_data["i_have_voted"] = true;
                    $topic_data["poll_options"][$dbw->field_by_name("id")]["my_vote"] = true;
                }
                
                $dbw->free_result();
            }
        } // if poll
        
        // participants
        
        if (!$dbw->execute_query("select participant_id, user_name, {$prfx}_private_topics.last_visit_date topic_last_visit_date,
                             {$prfx}_user.last_visit_date, {$prfx}_user.logout
                             from {$prfx}_private_topics
                             inner join {$prfx}_user on ({$prfx}_private_topics.participant_id = {$prfx}_user.id)
                             where topic_id = $tid
                             order by {$prfx}_private_topics.last_visit_date desc")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            if ($this->is_user_ignored($dbw->field_by_name("participant_id"))) {
                continue;
            }
            
            $topic_data["participants"][$dbw->field_by_name("participant_id")] = array(
                "user" => $dbw->field_by_name("user_name"),
                "last_visit" => smart_date2(xstrtotime($dbw->field_by_name("topic_last_visit_date"))),
                "online" => (xstrtotime($dbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $dbw->field_by_name("logout") == 0)
            );
        }
        
        $dbw->free_result();
        
        // topic moderators
        
        if (!$dbw->execute_query("select topic_id, user_id, user_name,
                             last_visit_date, logout
                             from {$prfx}_topic_moderator
                             inner join {$prfx}_user on ({$prfx}_topic_moderator.user_id = {$prfx}_user.id)
                             where topic_id = $tid
                             order by user_name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topic_data["moderators"][$dbw->field_by_name("user_id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "online" => (xstrtotime($dbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $dbw->field_by_name("logout") == 0)
            );
        }
        
        $dbw->free_result();
        
        if (!empty($_SESSION["favourite_topics"][$tid])) {
            $topic_data["in_favourites"] = true;
        }
        
        if (!empty($_SESSION["ignored_topics"][$tid])) {
            $topic_data["in_ignored"] = true;
        }
        
        if (!empty($_SESSION["pinned_topics"][$tid])) {
            $topic_data["user_pinned"] = true;
        }
        
        // check blocked
        
        if (!$dbw->execute_query("select
                             1
                             from {$prfx}_topic_blocked
                             where topic_id = $tid and user_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $topic_data["blocked"] = true;
        }
        
        $dbw->free_result();
        
        // check subscribed
        
        if (!$dbw->execute_query("select
                             1
                             from {$prfx}_topic_subscription
                             where topic_id = $tid and user_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $topic_data["subscribed"] = true;
        }
        
        $dbw->free_result();
        
        $show_deleted = !empty($_SESSION["show_deleted"]);
        
        // If we enter a deleted topic and we may do this,
        // we want to see the posts.
        if (!empty($topic_data["deleted"])) {
            $show_deleted = true;
        }
        
        $where = "where topic_id = $tid";

        if (!$show_deleted) {
            $where .= " and {$prfx}_post.deleted <> 1";
        }        
        
        // get very first message
        
        if (!$rodbw->execute_query($this->get_query_topic_first_post($prfx, $where, "order by {$prfx}_post.id"))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $topic_data["absolute_first_topic_message"] = $rodbw->field_by_name("id");
        } else {
            $should_break = true;
        }
        
        $rodbw->free_result();
        
        // get first unignored message
        
        $where .= $this->get_ignore_post_where_appendix($rodbw, $prfx);
        
        $current_topic_message = 0;
        
        $should_break = false;
        $counter = 0;
        do {
            if (!$rodbw->execute_query($this->get_query_topic_first_post($prfx, $where, "order by {$prfx}_post.id"))) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            if ($rodbw->fetch_row()) {
                $current_topic_message = $rodbw->field_by_name("id");
                
                if ($rodbw->field_by_name("pinned")) {
                    $topic_data["first_topic_pinned_message"] = $current_topic_message;
                }
                
                if (($show_deleted || !$rodbw->field_by_name("deleted")) && !$rodbw->field_by_name("pinned")) {
                    $topic_data["first_topic_message"] = $current_topic_message;
                    $should_break = true;
                }
                
                $where = "where topic_id = $tid and {$prfx}_post.id > $current_topic_message";
            } else {
                $should_break = true;
            }
            
            $rodbw->free_result();
            $counter++;
        } while (!$should_break);
        
        // get last unignored message
        
        $where = "where topic_id = $tid";
        if (!empty($start_post)) {
            $where .= " and {$prfx}_post.id >= " . $start_post;
        }

        if (!$show_deleted) {
            $where .= " and {$prfx}_post.deleted <> 1";
        }        

        $where .= $this->get_ignore_post_where_appendix($rodbw, $prfx);
        
        $should_break = false;
        $counter = 0;
        do {
            if (!$rodbw->execute_query($this->get_query_topic_first_post($prfx, $where, "order by {$prfx}_post.id desc"))) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            if ($rodbw->fetch_row()) {
                $current_topic_message = $rodbw->field_by_name("id");
                
                if (($show_deleted || !$rodbw->field_by_name("deleted")) && !$rodbw->field_by_name("pinned")) {
                    $topic_data["last_topic_message"] = $current_topic_message;
                    $should_break = true;
                }
                
                $where = "where topic_id = $tid and {$prfx}_post.id < $current_topic_message";
            } else {
                $should_break = true;
            }
            
            $rodbw->free_result();
            $counter++;
        } while (!$should_break);
        
        $deleted_where_appendix = " and {$prfx}_post.deleted <> 1";
        if (!empty($_SESSION["show_deleted"]) &&
            ($this->is_admin() || !empty($_SESSION["forum_moderator"][$topic_data["forum_id"]]) || !empty($_SESSION["topic_moderator"][$tid]))
        ) {
            $deleted_where_appendix = "";
        }
        
        $ignore_post_where_appendix = $this->get_calc_ignore_post_where_appendix($rodbw, $prfx);
        
        if (!empty($ignore_post_where_appendix)) {
            start_action_time_measure();
            
            $where = "where topic_id = $tid
                      $deleted_where_appendix
                      $ignore_post_where_appendix";
            
            if (!empty($start_post)) {
                $where .= " and {$prfx}_post.id >= " . $start_post;
            }
            
            if ($topic_data["post_count"] <= 1000) {
                if (!$rodbw->execute_query("select count(*) cnt
                               from {$prfx}_post
                               inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                               $where")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                    return false;
                }
                
                if ($rodbw->fetch_row()) {
                    $topic_data["ignored_post_count"] = $rodbw->field_by_name("cnt");
                }
                
                $rodbw->free_result();
            } else {
                if (!$rodbw->execute_query($this->get_query_ignored_posts_list($prfx, $where))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                    return false;
                }
                
                if ($rodbw->fetch_row()) {
                    $topic_data["ignored_post_count"] = "1+";
                }
                
                $rodbw->free_result();
            }
        }
        
        measure_action_time("get topic data");
        
        if (empty($topic_data["merge_target_topic"])) {
            return true;
        }
        
        $target_topic = $dbw->escape($topic_data["merge_target_topic"]);
        
        if (!$dbw->execute_query("select forum_id from {$prfx}_topic where id = $target_topic")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $topic_data["merge_target_forum"] = $dbw->field_by_name("forum_id");
        }
        
        $dbw->free_result();
        
        return true;
    } // get_topic_data
    
    //-----------------------------------------------------------------
    function get_forums_new_status(&$forum_list)
    {
        return $this->new_checker->get_forums_new_status($forum_list);
    } // get_forums_new_status
    
    //-----------------------------------------------------------------
    function get_topics_new_status(&$topic_list)
    {
        return $this->new_checker->get_topics_new_status($topic_list);
    } // get_topics_new_status
    
    //-----------------------------------------------------------------
    function get_authors_new_status(&$author_list)
    {
        return $this->new_checker->get_authors_new_status($author_list);
    } // get_authors_new_status
    
    //-----------------------------------------------------------------
    function is_background_activity()
    {
        global $background_activity;
        
        return !empty($background_activity);
    } // is_background_activity
    
    //-----------------------------------------------------------------
    function is_async_activity()
    {
        global $background_activity;
        global $ajax_processing;
        
        return !empty($ajax_processing) || !empty($background_activity);
    } // is_async_activity

    //-----------------------------------------------------------------
    function get_favourites_data(&$forum_data)
    {
        start_action_time_measure();
        
        $forum_data["topic_count"] = 0;
        $forum_data["forum_name"] = text("Favourites");
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($this->get_user_id());
        
        if (empty($_SESSION["favourite_topics"])) {
            $in_list = "-1";
        } else {
            $in_list = $rodbw->escape(implode(",", $_SESSION["favourite_topics"]));
        }
        
        $where = "where {$prfx}_topic.id in ($in_list)";
        
        $where .= $this->get_deleted_where_appendix($rodbw, $prfx, !empty($_SESSION["show_deleted"]), false);
        
        if (!$rodbw->execute_query("select count(*) cnt from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             $where
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $forum_data["topic_count"] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        // favourites posts
        
        if (empty($uid)) {
            if (empty($_SESSION["favourite_posts"])) {
                $in_list = "-1";
            } else {
                $in_list = $rodbw->escape(implode(",", $_SESSION["favourite_posts"]));
            }
            
            $query = "select count(*) cnt
                from {$prfx}_post
                where id in ($in_list)";
        } else {
            $query = "select count(*) cnt
                from {$prfx}_favourite_posts
                where user_id = $uid";
        }
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $fav_count = 0;
        while ($rodbw->fetch_row()) {
            $fav_count = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        if ($fav_count > 0) {
            $forum_data["topic_count"]++;
        }
        
        if (!empty($_SESSION["ignored_topics"])) {
            $ignored_in_list = $rodbw->escape(implode(",", $_SESSION["ignored_topics"]));
            $where .= " and {$prfx}_topic.id in ($ignored_in_list)";
            
            if (!$rodbw->execute_query("select count(*) cnt from
                           {$prfx}_topic
                           inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                           $where
                           ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            if ($rodbw->fetch_row()) {
                $forum_data["ignored_topic_count"] = $rodbw->field_by_name("cnt");
            }
            
            $rodbw->free_result();
        }
        
        measure_action_time("get favourites data");
        
        return true;
    } // get_favourites_data
    
    //-----------------------------------------------------------------
    function update_topic_new_messages_cache($tid, $new_cnt, $last_post_read_date)
    {
        return $this->new_checker->update_topic_new_messages_cache($tid, $new_cnt, $last_post_read_date);
    } // update_topic_new_messages_cache
    
    
    //-----------------------------------------------------------------
    function calculate_ignored_topics($topic_list)
    {
        if (empty($topic_list)) {
            return 0;
        }
        
        if (empty($_SESSION["ignored_topics"])) {
            return 0;
        }
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return 0;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $in_list = $rodbw->escape(implode(",", array_intersect($topic_list, $_SESSION["ignored_topics"])));
        if (empty($in_list)) {
            return 0;
        }
        
        $where = "where {$prfx}_topic.id in ($in_list)";
        
        if (!$rodbw->execute_query("select count(*) cnt from
                             {$prfx}_topic
                             $where
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return 0;
        }
        
        if ($rodbw->fetch_row()) {
            $ignored_count = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        return $ignored_count;
    } // calculate_ignored_topics
    
    //-----------------------------------------------------------------
    function calculate_new_messages($no_cache = false)
    {
        return $this->new_checker->calculate_new_messages($no_cache);
    } // calculate_new_messages
    
    //-----------------------------------------------------------------
    function get_private_forum_data(&$forum_data)
    {
        start_action_time_measure();
        
        $forum_data["hide_from_robots"] = "1";
        
        $forum_data["topic_count"] = 0;
        $forum_data["ignored_topic_count"] = 0;
        $forum_data["hidden_topic_count"] = 0;
        
        $forum_data["forum_name"] = text("PrivateTopics");
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->execute_query("select id from {$prfx}_forum where name = 'PRIVATE_MESSAGES'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $forum_data["id"] = $dbw->field_by_name("id");
        }
        
        $dbw->free_result();
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            return true;
        }
        
        // statistics, use rodbw
        
        $delete_appendix = "";
        if (!empty($_SESSION["show_deleted"])) {
            $delete_appendix = " or ({$prfx}_topic.deleted = 1 and {$prfx}_topic.id in (select {$prfx}_topic_moderator.topic_id from {$prfx}_topic_moderator where user_id = $uid))";
        }
        
        $where = "where {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = $uid)
                       and ({$prfx}_topic.deleted = 0 $delete_appendix)";
        
        if (!$rodbw->execute_query("select count(*) cnt
                             from {$prfx}_topic
                             $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $forum_data["topic_count"] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        if (!empty($_SESSION["ignored_topics"])) {
            $in_list = $rodbw->escape(implode(",", $_SESSION["ignored_topics"]));
            $where .= " and {$prfx}_topic.id in ($in_list)";
            
            if (!$rodbw->execute_query("select count(*) cnt from
                           {$prfx}_topic
                           $where
                           ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            if ($rodbw->fetch_row()) {
                $forum_data["ignored_topic_count"] = $rodbw->field_by_name("cnt");
            }
            
            $rodbw->free_result();
        }
        
        // check blocked
        
        if (!$dbw->execute_query("select
                             block_expires
                             from {$prfx}_forum_blocked
                             where forum_id = $forum_data[id] and user_id = $uid
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $forum_data["blocked"] = true;
            $forum_data["block_expires"] = "";
            $forum_data["block_time_left"] = "";
            if ($dbw->field_by_name("block_expires")) {
                if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                    $forum_data["blocked"] = "";
                } else {
                    $forum_data["block_expires"] = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                    $forum_data["block_time_left"] = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                }
            }
        }
        
        $dbw->free_result();
        
        measure_action_time("get priv. forum data");
        
        return true;
    } // get_private_forum_data
    
    //-----------------------------------------------------------------
    function get_forum_data($fid, &$forum_data)
    {
        start_action_time_measure();
        
        $forum_data["id"] = "";
        $forum_data["forum_name"] = "";
        $forum_data["forum_description"] = "";
        
        $forum_data["topic_count"] = 0;
        $forum_data["ignored_topic_count"] = 0;
        $forum_data["hidden_topic_count"] = 0;
        
        $forum_data["sort_order"] = "0";
        $forum_data["allow_edit"] = "";
        
        $forum_data["hide_from_robots"] = "";
        
        $forum_data["no_guests"] = "";
        $forum_data["restricted_guest_mode"] = "";
        $forum_data["user_posting_as_guest"] = "";
        $forum_data["restricted_access"] = "";
        $forum_data["stringent_rules"] = "";
        $forum_data["protected_by_password"] = "";
        $forum_data["deleted"] = "";
        $forum_data["closed"] = "";
        
        $forum_data["access_duration"] = "";
        $forum_data["access_message_count"] = "";
        
        if (empty($fid)) {
            //debug_message(extract_call_stack(debug_backtrace()));
            
            MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($fid)) {
            MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), $fid));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        $fid = $dbw->escape($fid);
        
        $count_field = "TOPIC_COUNT";
        if (!empty($_SESSION["show_deleted"]) && ($this->is_forum_moderator($fid) || $this->is_admin())) {
            $count_field = "TOPIC_COUNT_TOTAL";
        }
        
        if (!$dbw->execute_query("select
                             id, name, description, no_guests, restricted_guest_mode, user_posting_as_guest, stringent_rules, allow_edit, restricted_access, hide_from_robots, sort_order,
                             access_duration, access_message_count,
                             protected_by_password, deleted, closed, $count_field topic_count
                             from {$prfx}_forum
                             inner join {$prfx}_forum_statistics on ({$prfx}_forum.id = {$prfx}_forum_statistics.forum_id)
                             where id = $fid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $forum_data["id"] = $dbw->field_by_name("id");
            $forum_data["forum_name"] = $dbw->field_by_name("name");
            if ($forum_data["forum_name"] == "PRIVATE_MESSAGES") {
                $forum_data["forum_name"] = text("PrivateTopics");
            }
            
            $forum_data["forum_description"] = $dbw->field_by_name("description");
            
            $forum_data["topic_count"] = $dbw->field_by_name("topic_count");
            
            $forum_data["sort_order"] = $dbw->field_by_name("sort_order");
            
            $forum_data["hide_from_robots"] = $dbw->field_by_name("hide_from_robots");
            
            $forum_data["allow_edit"] = $dbw->field_by_name("allow_edit");
            $forum_data["no_guests"] = $dbw->field_by_name("no_guests");
            $forum_data["restricted_guest_mode"] = $dbw->field_by_name("restricted_guest_mode");
            $forum_data["user_posting_as_guest"] = $dbw->field_by_name("user_posting_as_guest");
            $forum_data["restricted_access"] = $dbw->field_by_name("restricted_access");
            if ($forum_data["restricted_access"] == 2) {
                $forum_data["restricted_access"] = "";
                $forum_data["registered_access"] = "1";
            }
            
            $forum_data["stringent_rules"] = $dbw->field_by_name("stringent_rules");
            
            $forum_data["protected_by_password"] = $dbw->field_by_name("protected_by_password");
            $forum_data["deleted"] = $dbw->field_by_name("deleted");
            $forum_data["closed"] = $dbw->field_by_name("closed");
            
            $forum_data["access_duration"] = $dbw->field_by_name("access_duration");
            if (!is_numeric($forum_data["access_duration"]) || $forum_data["access_duration"] < 1) {
                $forum_data["access_duration"] = "";
            }
            
            $forum_data["access_message_count"] = $dbw->field_by_name("access_message_count");
            if (!is_numeric($forum_data["access_message_count"]) || $forum_data["access_message_count"] < 1) {
                $forum_data["access_message_count"] = "";
            }
        } else {
            MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), $fid));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // statistics, use rodbw
        
        if (!empty($_SESSION["ignored_topics"])) {
            $where = "where forum_id = $fid";
            
            if (empty($_SESSION["show_deleted"]) || (!$this->is_forum_moderator($fid) && !$this->is_admin())) {
                $where .= " and {$prfx}_topic.deleted = 0";
            }
            
            $in_list = $rodbw->escape(implode(",", $_SESSION["ignored_topics"]));
            
            if (!$rodbw->execute_query("select count(*) cnt from
                           {$prfx}_topic
                           $where and {$prfx}_topic.id in ($in_list)
                           ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            if ($rodbw->fetch_row()) {
                $forum_data["ignored_topic_count"] = $rodbw->field_by_name("cnt");
            }
            
            $rodbw->free_result();
            
            // correction of the total count
            if (!empty($_SESSION["hide_ignored"]) && !$this->is_forum_moderator($fid)) {
                $forum_data["hidden_topic_count"] = $forum_data["ignored_topic_count"];
                
                if (!empty($_SESSION["topic_moderator"])) {
                    $in_list = $rodbw->escape(implode(",", array_intersect($_SESSION["ignored_topics"], $_SESSION["topic_moderator"])));
                    
                    if (!empty($in_list)) {
                        if (!$rodbw->execute_query("select count(*) cnt from
                           {$prfx}_topic
                           $where and {$prfx}_topic.id in ($in_list)
                           ")) {
                            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                            return false;
                        }
                        
                        if ($rodbw->fetch_row()) {
                            $forum_data["hidden_topic_count"] -= $rodbw->field_by_name("cnt");
                        }
                        
                        $rodbw->free_result();
                    }
                }
            }
        }
        
        if (!$dbw->execute_query("select user_id, forum_id, user_name,
                             last_visit_date, logout
                             from
                             {$prfx}_forum_moderator
                             inner join {$prfx}_user on ({$prfx}_forum_moderator.user_id = {$prfx}_user.id)
                             where forum_id = $fid
                             order by user_name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $forum_data["moderators"][$dbw->field_by_name("user_id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "online" => (xstrtotime($dbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $dbw->field_by_name("logout") == 0)
            );
        }
        
        $dbw->free_result();
        
        if (empty($uid)) {
            measure_action_time("get forum data");
            
            return true;
        }
        
        // check blocked
        
        if (!$dbw->execute_query("select
                             block_expires
                             from {$prfx}_forum_blocked
                             where forum_id = $fid and user_id = $uid
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $forum_data["blocked"] = true;
            $forum_data["block_expires"] = "";
            $forum_data["block_time_left"] = "";
            if ($dbw->field_by_name("block_expires")) {
                if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                    $forum_data["blocked"] = "";
                } else {
                    $forum_data["block_expires"] = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                    $forum_data["block_time_left"] = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                }
            }
        }
        
        $dbw->free_result();
        
        measure_action_time("get forum data");
        
        return true;
    } // get_forum_data
    
    //-----------------------------------------------------------------
    function save_forum()
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $is_new = (reqvar_empty("fid") || !is_numeric(reqvar("fid")));
        
        if (reqvar_empty("forum_name")) {
            MessageHandler::setError(text("ErrForumNameEmpty"));
            MessageHandler::setErrorElement("forum_name");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("forum_name"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("forum_name");
            return false;
        }
        
        if (utf8_strlen(reqvar("forum_name")) > 100) {
            MessageHandler::setError(sprintf(text("ErrForumNameTooLong"), 100));
            MessageHandler::setErrorElement("forum_name");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("forum_description"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("forum_description");
            return false;
        }
        
        if (utf8_strlen(reqvar("forum_description")) > 300) {
            MessageHandler::setError(sprintf(text("ErrForumDescriptionTooLong"), 300));
            MessageHandler::setErrorElement("forum_description");
            return false;
        }
        
        $fid = $dbw->escape(reqvar("fid"));
        
        $password_is_set = false;
        
        if (!$is_new) {
            if (!$dbw->execute_query("select
                               password
                               from {$prfx}_forum
                               where id = $fid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $password_is_set = ($dbw->field_by_name("password") != "");
            }
            
            $dbw->free_result();
        }
        
        if (Emoji::HasEmoji(reqvar("password"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        if (!reqvar_empty("protected_by_password") && reqvar_empty("password") && !$password_is_set) {
            MessageHandler::setError(text("ErrPasswordEmpty"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        if (reqvar("password") != reqvar("password2")) {
            MessageHandler::setError(text("ErrPwdNotIdentical"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        $forum_name = quotes_or_null($dbw->escape(reqvar("forum_name")));
        
        if (!$is_new) {
            $query = "select name from {$prfx}_forum where name = $forum_name and id <> $fid";
        } else {
            $query = "select name from {$prfx}_forum where name = $forum_name";
        } // if
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setError(text("ErrForumNameExists"));
            MessageHandler::setErrorElement("forum_name");
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        $old_restricted_guest_mode = 0;
        
        if (!$is_new) {
            $query = "select restricted_guest_mode from {$prfx}_forum where id = $fid";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $old_restricted_guest_mode = $dbw->field_by_name("restricted_guest_mode");
            }
            
            $dbw->free_result();
        }
        
        $sort_order = reqvar("sort_order");
        if (empty($sort_order) || !is_numeric($sort_order)) {
            $sort_order = 0;
        }
        
        $forum_description = quotes_or_null($dbw->escape(reqvar("forum_description")));
        $password = quotes_or_null($dbw->escape(reqvar("password")));
        
        $hide_from_robots = reqvar_empty("hide_from_robots") ? "0" : "1";
        
        $stringent_rules = reqvar_empty("stringent_rules") ? "0" : "1";
        
        $allow_edit = reqvar_empty("allow_edit") ? "0" : "1";
        $no_guests = reqvar_empty("no_guests") ? "0" : "1";
        $restricted_guest_mode = reqvar_empty("restricted_guest_mode") ? "0" : "1";
        $user_posting_as_guest = reqvar_empty("user_posting_as_guest") ? "0" : "1";
        $restricted_access = reqvar_empty("restricted_access") ? "0" : "1";
        if (!reqvar_empty("registered_access")) {
            $restricted_access = "2";
        }
        if ($restricted_access != "0") {
            $no_guests = "1";
        }
        
        $protected_by_password = reqvar_empty("protected_by_password") ? "0" : "1";
        $deleted = reqvar_empty("deleted") ? "0" : "1";
        
        $access_duration = $dbw->escape(reqvar("access_duration"));
        if (!is_numeric($access_duration)) {
            $access_duration = 0;
        }
        $access_duration = round($access_duration);
        if ($access_duration < 1) {
            $access_duration = "NULL";
        }
        
        $access_message_count = $dbw->escape(reqvar("access_message_count"));
        if (!is_numeric($access_message_count)) {
            $access_message_count = 0;
        }
        $access_message_count = round($access_message_count);
        if ($access_message_count < 1) {
            $access_message_count = "NULL";
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($is_new) {
            $now = $dbw->format_datetime(time());
            
            $query = "insert into {$prfx}_forum
               (name, description, allow_edit, hide_from_robots, no_guests, restricted_guest_mode, user_posting_as_guest, restricted_access, stringent_rules, protected_by_password, deleted, password, creation_date, sort_order, access_duration, access_message_count)
                values
               ($forum_name, $forum_description, $allow_edit, $hide_from_robots, $no_guests, $restricted_guest_mode, $user_posting_as_guest, $restricted_access, $stringent_rules, $protected_by_password, $deleted, $password, '$now', $sort_order, $access_duration, $access_message_count)";
        } else {
            $password_string = "password = $password,";
            if ($protected_by_password && $password_is_set && reqvar_empty("password")) {
                $password_string = "";
            }
            
            $query = "update {$prfx}_forum set
                name = $forum_name,
                description = $forum_description,
                sort_order = $sort_order,
                no_guests = $no_guests,
                restricted_guest_mode = $restricted_guest_mode,
                user_posting_as_guest = $user_posting_as_guest,
                allow_edit = $allow_edit,
                hide_from_robots = $hide_from_robots,
                restricted_access = $restricted_access,
                stringent_rules = $stringent_rules,
                access_duration = $access_duration,
                access_message_count = $access_message_count,
                protected_by_password = $protected_by_password,
                $password_string
                deleted = $deleted
                where id = $fid";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($is_new) {
            $fid = $dbw->insert_id();
            
            if (!$dbw->execute_query("insert into {$prfx}_forum_statistics (forum_id) values ($fid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $event_data = array();
        $event_data["forum_id"] = $fid;
        $event_data["forum_name"] = reqvar("forum_name");
        
        if ($is_new) {
            $event_data["action"] = "create_forum";
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if ($restricted_guest_mode != $old_restricted_guest_mode) {
            if ($old_restricted_guest_mode == 0) {
                $event_data["action"] = "turn_on_restricted_mode";
            } else {
                $event_data["action"] = "turn_off_restricted_mode";
            }
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // handle moderators
        
        if (empty($_REQUEST["moderators"])) {
            $in_list = "-1";
        } else {
            $in_list = $dbw->escape(implode(",", $_REQUEST["moderators"]));
        }
        
        // get list of the newly added moderators
        
        $new_moderators = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language, last_host
                             from {$prfx}_user
                             where id in ($in_list) and
                             id not in (select user_id from {$prfx}_forum_moderator where forum_id = $fid union select -1 from {$prfx}_dual)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $new_moderators[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // get list of the removed moderators
        
        $removed_moderators = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language, last_host
                             from {$prfx}_user
                             where id not in ($in_list) and
                             id in (select user_id from {$prfx}_forum_moderator where forum_id = $fid union select -1 from {$prfx}_dual)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $removed_moderators[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        if (!$dbw->execute_query("delete from {$prfx}_forum_moderator where forum_id = $fid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!empty($_REQUEST["moderators"])) {
            foreach ($_REQUEST["moderators"] as $mid) {
                if (!$dbw->execute_query("insert into {$prfx}_forum_moderator (forum_id, user_id) values ($fid, $mid)")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }

                $query = "insert into {$prfx}_forum_member (forum_id, user_id) 
                          select id, $mid from {$prfx}_forum where id = $fid and restricted_access = 1
                          and not exists (select 1 from {$prfx}_forum_member where {$prfx}_forum_member.forum_id = {$prfx}_forum.id and user_id = $mid)";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        // final existing moderators
        
        $existing_moderators = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language, last_host
                             from {$prfx}_user
                             where
                             id in (select user_id from {$prfx}_forum_moderator where forum_id = $fid)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $existing_moderators[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        foreach ($new_moderators as $id => $minfo) {
            $event_data["author_id"] = $id;
            $event_data["author_name"] = val_or_empty($minfo["user_name"]);
            $event_data["action"] = "make_forum_moderator";
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        foreach ($removed_moderators as $id => $minfo) {
            $event_data["author_id"] = $id;
            $event_data["author_name"] = val_or_empty($minfo["user_name"]);
            $event_data["action"] = "revoke_forum_moderator";
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgDataSaved"));
        
        // mail notification
        
        // actor himself is already excluded by query
        
        $params = array();
        
        $params["{administrator_name}"] = $this->get_user_name();
        
        $params["{forum_id}"] = $fid;
        $params["{forum_name}"] = reqvar("forum_name");
        
        foreach ($new_moderators as $mid => $minfo) {
            // if the actor and the receiver are the same, do not notify
            if ($mid == $this->get_user_id()) {
                continue;
            }
            
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($mid, $anonym_appendix, $anonym_appendix2);
            
            $params["{user_name}"] = $minfo["user_name"];
            
            $params["{forum_url}"] = get_host_address($minfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $this->log_user_event($mid, $this->get_user_id(), $this->get_user_name(), "MsgEventGrantForumModerator{$anonym_appendix2}", $params);
            
            if (!empty($minfo["user_email"]) && !empty($minfo["send_notifications"])) {
                $this->email_manager->send_email($settings["default_sender"], $minfo["user_email"], "email_grant_forum_moderator{$anonym_appendix}.txt", $params, $minfo["interface_language"]);
            }
        }
        
        foreach ($removed_moderators as $mid => $minfo) {
            // if the actor and the receiver are the same, do not notify
            if ($mid == $this->get_user_id()) {
                continue;
            }
            
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($mid, $anonym_appendix, $anonym_appendix2);
            
            $params["{user_name}"] = $minfo["user_name"];
            $params["{forum_url}"] = get_host_address($minfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $this->log_user_event($mid, $this->get_user_id(), $this->get_user_name(), "MsgEventRevokeForumModerator{$anonym_appendix2}", $params);
            
            if (!empty($minfo["user_email"]) && !empty($minfo["send_notifications"])) {
                $this->email_manager->send_email($settings["default_sender"], $minfo["user_email"], "email_revoke_forum_moderator{$anonym_appendix}.txt", $params, $minfo["interface_language"]);
            }
        }
        
        foreach ($existing_moderators as $mid => $minfo) {
            // if the actor and the receiver are the same, do not notify
            if ($mid == $this->get_user_id()) {
                continue;
            }
            
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($mid, $anonym_appendix, $anonym_appendix2);
            
            $params["{user_name}"] = $minfo["user_name"];
            $params["{forum_url}"] = get_host_address($minfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            foreach ($removed_moderators as $rmid => $rminfo) {
                $params["{moderator_id}"] = $rmid;
                $params["{moderator_name}"] = $rminfo["user_name"];
                
                $this->log_user_event($mid, $this->get_user_id(), $this->get_user_name(), "MsgEventForumModeratorRemoved{$anonym_appendix2}", $params);
                
                if (!empty($minfo["user_email"]) && !empty($minfo["send_notifications"])) {
                    $this->email_manager->send_email($settings["default_sender"], $minfo["user_email"], "email_forum_moderator_removed{$anonym_appendix}.txt", $params, $minfo["interface_language"]);
                }
            }
            
            foreach ($new_moderators as $nmid => $nminfo) {
                if ($mid == $nmid) {
                    continue;
                }
                
                $params["{moderator_id}"] = $nmid;
                $params["{moderator_name}"] = $nminfo["user_name"];
                
                $this->log_user_event($mid, $this->get_user_id(), $this->get_user_name(), "MsgEventNewForumModeratorAdded{$anonym_appendix2}", $params);
                
                if (!empty($minfo["user_email"]) && !empty($minfo["send_notifications"])) {
                    $this->email_manager->send_email($settings["default_sender"], $minfo["user_email"], "email_forum_moderator_added{$anonym_appendix}.txt", $params, $minfo["interface_language"]);
                }
            }
        }
        
        return true;
    } // save_forum
    
    //-----------------------------------------------------------------
    function get_settings(&$settings, $for_edit = false)
    {
        start_action_time_measure();
        
        $settings["block_tor_ips"] = "";
        $settings["whois_server"] = "";
        $settings["moderator_log"] = "";
        $settings["default_sender"] = "";
        $settings["receiver"] = "";
        $settings["max_att_size"] = "";
        $settings["max_messages_minute"] = "";
        $settings["max_messages_hour"] = "";
        $settings["max_messages_day"] = "";
        $settings["max_poll_options"] = "";
        $settings["max_topics_day"] = "";
        $settings["max_message_length"] = "";
        $settings["max_pinned_topics"] = "";
        $settings["max_private_members"] = "";
        $settings["max_rates_hour"] = "";
        $settings["max_user_name_symbols"] = "";
        $settings["max_topic_name_symbols"] = "";
        $settings["approval_required"] = "";
        $settings["hide_online_status"] = "";
        $settings["hide_users_from_robots"] = "";
        $settings["rates_active"] = "";
        $settings["dislikes_active"] = "";
        $settings["dislikes_anonym"] = "";
        $settings["skin"] = "";
        $settings["protected_guests"] = "";
        $settings["protected_guest_list"] = array();
        $settings["celebration_active"] = "";
        $settings["mourning_active"] = "";
        $settings["archive_mode"] = "";
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->execute_query("select
                             block_tor_ips, moderator_log, default_sender, receiver, whois_server, approval_required, hide_online_status,
                             dislikes_active, rates_active, dislikes_anonym, skin, max_poll_options,
                             max_message_length, max_pinned_topics, max_private_members,
                             max_att_size, max_att_size_audiovideo, max_messages_minute, max_messages_hour, max_messages_day, 
                             max_topics_day, min_search_interval, max_rates_hour,
                             max_topic_name_symbols, max_user_name_symbols, hide_users_from_robots,
                             celebration_active, mourning_active, snow_effect, archive_mode
                             from {$prfx}_settings")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $settings["block_tor_ips"] = $dbw->field_by_name("block_tor_ips");
            
            $settings["whois_server"] = $dbw->field_by_name("whois_server");
            
            $settings["moderator_log"] = $dbw->field_by_name("moderator_log");
            if (empty($settings["moderator_log"])) {
                $settings["moderator_log"] = "moderators";
            }
            
            $settings["default_sender"] = $dbw->field_by_name("default_sender");
            $settings["receiver"] = $dbw->field_by_name("receiver");
            
            $settings["approval_required"] = $dbw->field_by_name("approval_required");
            $settings["hide_online_status"] = $dbw->field_by_name("hide_online_status");
            $settings["hide_users_from_robots"] = $dbw->field_by_name("hide_users_from_robots");
            
            $settings["rates_active"] = $dbw->field_by_name("rates_active");
            $settings["dislikes_active"] = $dbw->field_by_name("dislikes_active");
            $settings["dislikes_anonym"] = $dbw->field_by_name("dislikes_anonym");
            
            $settings["celebration_active"] = $dbw->field_by_name("celebration_active");
            $settings["mourning_active"] = $dbw->field_by_name("mourning_active");
            $settings["snow_effect"] = $dbw->field_by_name("snow_effect");
            $settings["archive_mode"] = $dbw->field_by_name("archive_mode");
            
            $settings["skin"] = $dbw->field_by_name("skin");
            
            $settings["max_topic_name_symbols"] = $dbw->field_by_name("max_topic_name_symbols");
            if (!is_numeric($settings["max_topic_name_symbols"]) || $settings["max_topic_name_symbols"] < 1) {
                $settings["max_topic_name_symbols"] = "300";
            }
            
            $settings["max_user_name_symbols"] = $dbw->field_by_name("max_user_name_symbols");
            if (!is_numeric($settings["max_user_name_symbols"]) || $settings["max_user_name_symbols"] < 1 || $settings["max_user_name_symbols"] > 50) {
                $settings["max_user_name_symbols"] = "50";
            }
            
            $settings["max_att_size"] = $dbw->field_by_name("max_att_size");
            if (!is_numeric($settings["max_att_size"]) || $settings["max_att_size"] < 1) {
                $settings["max_att_size"] = "200";
            }
            
            $settings["max_att_size_audiovideo"] = $dbw->field_by_name("max_att_size_audiovideo");
            if (!is_numeric($settings["max_att_size_audiovideo"]) || $settings["max_att_size_audiovideo"] < 1) {
                $settings["max_att_size_audiovideo"] = $settings["max_att_size"];
            }
            
            if (!$for_edit && $this->is_admin() && $settings["max_att_size"] !== "") {
                $settings["max_att_size"] *= 4;
            }
            
            if (!$for_edit && $this->is_admin() && $settings["max_att_size_audiovideo"] !== "") {
                $settings["max_att_size_audiovideo"] *= 4;
            }
            
            $settings["max_messages_minute"] = $dbw->field_by_name("max_messages_minute");
            if (!is_numeric($settings["max_messages_minute"]) || $settings["max_messages_minute"] < 1) {
                $settings["max_messages_minute"] = "";
            }
            
            $settings["max_messages_hour"] = $dbw->field_by_name("max_messages_hour");
            if (!is_numeric($settings["max_messages_hour"]) || $settings["max_messages_hour"] < 1) {
                $settings["max_messages_hour"] = "";
            }

            $settings["max_messages_day"] = $dbw->field_by_name("max_messages_day");
            if (!is_numeric($settings["max_messages_day"]) || $settings["max_messages_day"] < 1) {
                $settings["max_messages_day"] = "";
            }

            $settings["max_topics_day"] = $dbw->field_by_name("max_topics_day");
            if (!is_numeric($settings["max_topics_day"]) || $settings["max_topics_day"] < 1) {
                $settings["max_topics_day"] = "";
            }
            
            $settings["max_message_length"] = $dbw->field_by_name("max_message_length");
            if (!is_numeric($settings["max_message_length"]) || $settings["max_message_length"] < 1) {
                $settings["max_message_length"] = "";
            }
            
            if (!$for_edit && $this->is_admin() && $settings["max_message_length"] !== "") {
                $settings["max_message_length"] *= 4;
            }
            
            if (!$for_edit && $this->is_admin() && $settings["max_message_length"] !== "") {
                $settings["max_message_length"] *= 4;
            }
            
            $settings["max_pinned_topics"] = $dbw->field_by_name("max_pinned_topics");
            if (!is_numeric($settings["max_pinned_topics"]) || $settings["max_pinned_topics"] < 1) {
                $settings["max_pinned_topics"] = "";
            }
            
            $settings["max_private_members"] = $dbw->field_by_name("max_private_members");
            if (!is_numeric($settings["max_private_members"]) || $settings["max_private_members"] < 2) {
                $settings["max_private_members"] = "";
            }
            
            if ($this->is_admin()) {
                $settings["max_private_members"] = "";
            }
            
            $settings["max_rates_hour"] = $dbw->field_by_name("max_rates_hour");
            if (!is_numeric($settings["max_rates_hour"]) || $settings["max_rates_hour"] < 1) {
                $settings["max_rates_hour"] = "";
            }
            
            $settings["min_search_interval"] = $dbw->field_by_name("min_search_interval");
            if (!is_numeric($settings["min_search_interval"]) || $settings["min_search_interval"] < 1) {
                $settings["min_search_interval"] = "";
            }
            
            $settings["max_poll_options"] = $dbw->field_by_name("max_poll_options");
            if (!is_numeric($settings["max_poll_options"])) {
                $settings["max_poll_options"] = "100";
            }
            if ($settings["max_poll_options"] < 2) {
                $settings["max_poll_options"] = "2";
            }
        }
        
        $dbw->free_result();
        
        // protected guests
        
        $query = "select guest_name
              from {$prfx}_protected_guests
              order by guest_name";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $settings["protected_guests"] .= $dbw->field_by_name("guest_name") . "\n";
            $settings["protected_guest_list"][$dbw->field_by_name("guest_name")] = $dbw->field_by_name("guest_name");
        }
        
        $dbw->free_result();
        
        $settings["protected_guests"] = trim($settings["protected_guests"]);
        
        measure_action_time("get settings");
        
        return true;
    } // get_settings
    
    //-----------------------------------------------------------------
    function save_settings()
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (reqvar_empty("default_sender")) {
            MessageHandler::setError(text("ErrAddressOfTheDefaultSenderEmpty"));
            MessageHandler::setErrorElement("default_sender");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("default_sender"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("default_sender");
            return false;
        }
        
        if (reqvar_empty("receiver")) {
            MessageHandler::setError(text("ErrAddressOfTheContactReceiverEmpty"));
            MessageHandler::setErrorElement("receiver");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("receiver"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("receiver");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("whois_server"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("whois_server");
            return false;
        }
        
        $default_sender = quotes_or_null($dbw->escape(reqvar("default_sender")));
        $receiver = quotes_or_null($dbw->escape(reqvar("receiver")));
        $whois_server = quotes_or_null($dbw->escape(reqvar("whois_server")));
        $skin = quotes_or_null($dbw->escape(reqvar("skin")));
        
        $moderator_log = $dbw->escape(reqvar("moderator_log"));
        if (!in_array($moderator_log, array("moderators", "admins", "all", "all_names_hidden"))) {
            $moderator_log = "moderators";
        }
        $moderator_log = quotes_or_null($moderator_log);
        
        $max_topic_name_symbols = $dbw->escape(reqvar("max_topic_name_symbols"));
        if (!is_numeric($max_topic_name_symbols)) {
            $max_topic_name_symbols = 0;
        }
        $max_topic_name_symbols = round($max_topic_name_symbols);
        if ($max_topic_name_symbols < 1) {
            $max_topic_name_symbols = "300";
        }
        
        $max_user_name_symbols = $dbw->escape(reqvar("max_user_name_symbols"));
        if (!is_numeric($max_user_name_symbols)) {
            $max_user_name_symbols = 0;
        }
        $max_user_name_symbols = round($max_user_name_symbols);
        if ($max_user_name_symbols < 1 || $max_user_name_symbols > 50) {
            $max_user_name_symbols = "50";
        }
        
        $max_att_size = $dbw->escape(reqvar("max_att_size"));
        if (!is_numeric($max_att_size)) {
            $max_att_size = 0;
        }
        $max_att_size = round($max_att_size);
        if ($max_att_size < 1) {
            $max_att_size = "200";
        }
        
        $max_att_size_audiovideo = $dbw->escape(reqvar("max_att_size_audiovideo"));
        if (!is_numeric($max_att_size_audiovideo)) {
            $max_att_size_audiovideo = 0;
        }
        $max_att_size_audiovideo = round($max_att_size_audiovideo);
        if ($max_att_size_audiovideo < 1) {
            $max_att_size_audiovideo = $max_att_size;
        }
        
        $min_search_interval = $dbw->escape(reqvar("min_search_interval"));
        if (!is_numeric($min_search_interval)) {
            $min_search_interval = 0;
        }
        $min_search_interval = round($min_search_interval);
        if ($min_search_interval < 1) {
            $min_search_interval = "NULL";
        }
        
        $max_messages_minute = $dbw->escape(reqvar("max_messages_minute"));
        if (!is_numeric($max_messages_minute)) {
            $max_messages_minute = 0;
        }
        $max_messages_minute = round($max_messages_minute);
        if ($max_messages_minute < 1) {
            $max_messages_minute = "NULL";
        }
        
        $max_messages_hour = $dbw->escape(reqvar("max_messages_hour"));
        if (!is_numeric($max_messages_hour)) {
            $max_messages_hour = 0;
        }
        $max_messages_hour = round($max_messages_hour);
        if ($max_messages_hour < 1) {
            $max_messages_hour = "NULL";
        }

        $max_messages_day = $dbw->escape(reqvar("max_messages_day"));
        if (!is_numeric($max_messages_day)) {
            $max_messages_day = 0;
        }
        $max_messages_day = round($max_messages_day);
        if ($max_messages_day < 1) {
            $max_messages_day = "NULL";
        }

        $max_topics_day = $dbw->escape(reqvar("max_topics_day"));
        if (!is_numeric($max_topics_day)) {
            $max_topics_day = 0;
        }
        $max_topics_day = round($max_topics_day);
        if ($max_topics_day < 1) {
            $max_topics_day = "NULL";
        }
        
        $max_message_length = $dbw->escape(reqvar("max_message_length"));
        if (!is_numeric($max_message_length)) {
            $max_message_length = 0;
        }
        $max_message_length = round($max_message_length);
        if ($max_message_length < 1) {
            $max_message_length = "NULL";
        }
        
        $max_private_members = $dbw->escape(reqvar("max_private_members"));
        if (!is_numeric($max_private_members)) {
            $max_private_members = 0;
        }
        $max_private_members = round($max_private_members);
        if ($max_private_members < 2) {
            $max_private_members = "NULL";
        }
        
        $max_pinned_topics = $dbw->escape(reqvar("max_pinned_topics"));
        if (!is_numeric($max_pinned_topics)) {
            $max_pinned_topics = 0;
        }
        $max_pinned_topics = round($max_pinned_topics);
        if ($max_pinned_topics < 1) {
            $max_pinned_topics = "NULL";
        }
        
        $max_rates_hour = $dbw->escape(reqvar("max_rates_hour"));
        if (!is_numeric($max_rates_hour)) {
            $max_rates_hour = 0;
        }
        $max_rates_hour = round($max_rates_hour);
        if ($max_rates_hour < 1) {
            $max_rates_hour = "NULL";
        }
        
        $max_poll_options = $dbw->escape(reqvar("max_poll_options"));
        if (!is_numeric($max_poll_options)) {
            $max_poll_options = 100;
        }
        $max_poll_options = round($max_poll_options);
        if ($max_poll_options < 1) {
            $max_poll_options = 2;
        }
        
        $approval_required = reqvar_empty("approval_required") ? "0" : "1";
        $hide_online_status = reqvar_empty("hide_online_status") ? "0" : "1";
        $hide_users_from_robots = reqvar_empty("hide_users_from_robots") ? "0" : "1";
        
        $rates_active = reqvar_empty("rates_active") ? "0" : "1";
        $dislikes_active = reqvar_empty("dislikes_active") ? "0" : "1";
        $dislikes_anonym = reqvar_empty("dislikes_anonym") ? "0" : "1";
        
        $celebration_active = reqvar_empty("celebration_active") ? "0" : "1";
        $mourning_active = reqvar_empty("mourning_active") ? "0" : "1";
        $snow_effect = reqvar_empty("snow_effect") ? "0" : "1";
        $archive_mode = reqvar_empty("archive_mode") ? "0" : "1";
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_settings set
                             moderator_log = $moderator_log,
                             skin = $skin,
                             default_sender = $default_sender,
                             receiver = $receiver,
                             whois_server = $whois_server,
                             approval_required = $approval_required,
                             hide_online_status = $hide_online_status,
                             hide_users_from_robots = $hide_users_from_robots,
                             max_poll_options = $max_poll_options,
                             max_att_size = $max_att_size,
                             max_att_size_audiovideo = $max_att_size_audiovideo,
                             max_messages_minute = $max_messages_minute,
                             max_messages_hour = $max_messages_hour,
                             max_messages_day = $max_messages_day,
                             max_topics_day = $max_topics_day,
                             max_message_length = $max_message_length,
                             max_pinned_topics = $max_pinned_topics,
                             max_private_members = $max_private_members,
                             max_rates_hour = $max_rates_hour,
                             max_topic_name_symbols = $max_topic_name_symbols,
                             max_user_name_symbols = $max_user_name_symbols,
                             min_search_interval = $min_search_interval,
                             rates_active = $rates_active,
                             dislikes_active = $dislikes_active,
                             dislikes_anonym = $dislikes_anonym,
                             celebration_active = $celebration_active,
                             snow_effect = $snow_effect,
                             mourning_active = $mourning_active,
                             archive_mode = $archive_mode
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // protected guests
        
        $query = "delete from {$prfx}_protected_guests";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!reqvar_empty("protected_guests")) {
            $protected_guests = preg_split("/[\n\r]+/", Emoji::Encode(reqvar("protected_guests")), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($protected_guests as $guest) {
                shrink_spaces($guest);
                
                if ($guest == "") {
                    continue;
                }
                
                $guest = $dbw->escape($guest);
                $guest_hash = $dbw->escape($this->hash_user_name($guest));
                
                $query = "insert into {$prfx}_protected_guests
                 (guest_name, guest_name_hash)
                 select '$guest', '$guest_hash' from {$prfx}_dual
                 where '$guest' not in (select guest_name from {$prfx}_protected_guests)
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgDataSaved"));
        
        return true;
    } // save_settings
    
    //-----------------------------------------------------------------
    function send_contact_message()
    {
        if ($this->check_blocked("")) {
            return false;
        }
        
        return $this->email_manager->send_contact_message();
    } // send_contact_message
    
    //-----------------------------------------------------------------
    function captcha_verified()
    {
        global $READ_MARKER;
        
        if (empty($_SESSION["last_user_marker"])) {
            return false;
        }
        
        return !empty($_SESSION[$READ_MARKER][$_SESSION["last_user_marker"]]["captcha_verified"]);
    } // captcha_verified
    
    //-----------------------------------------------------------------
    function verify_captcha($force_new = false)
    {
        global $READ_MARKER;
        
        if (!$force_new && ($this->is_logged_in() || $this->captcha_verified())) {
            return true;
        }
        
        if (reqvar_empty("captcha_field") || reqvar_empty("user_marker") ||
            strtolower(reqvar("captcha_field")) != strtolower(val_or_empty($_SESSION["captcha"]))) {
            MessageHandler::setError(text("ErrSpamProtectError"));
            MessageHandler::setErrorElement("captcha_field");
            //$msg = "Captcha verification failed, entered: " . reqvar("captcha_field") . ", expected: " . val_or_empty($_SESSION["captcha"]) . " (" . date("d.m.Y H:i:s") . ", session: " . session_id() . ", user: " . val_or_empty($_SESSION["user_name"]) . ")";
            //trace_message_to_file($msg, "captcha.log");
            return false;
        }
        
        if ($force_new) {
            $captcha = new SimpleCaptcha();
            $_SESSION["captcha"] = $captcha->GetCaptchaText();
        }
        
        $_SESSION["last_user_marker"] = reqvar("user_marker");
        $_SESSION[$READ_MARKER][$_SESSION["last_user_marker"]]["captcha_verified"] = true;
        
        return true;
    } // verify_captcha
    
    //-----------------------------------------------------------------
    function get_post_readmarker($pid) 
    {
        if (empty($pid) || !is_numeric($pid)) {
            return "";
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return "";
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $pid = $dbw->escape($pid);
        
        $query = "select read_marker from {$prfx}_post where id = $pid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return "";
        }
        
        $read_marker = "";
        if ($dbw->fetch_row()) {
            $read_marker = $dbw->field_by_name("read_marker");
        }
        
        $dbw->free_result();
        
        return $read_marker;
    } // get_post_readmarker

    //-----------------------------------------------------------------
    function user_exists($user_name)
    {
        if (empty($user_name)) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $user_name = $dbw->escape($user_name);
        
        $query = "select id from {$prfx}_user where user_name = '$user_name'";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $uid = false;
        if ($dbw->fetch_row()) {
            $uid = $dbw->field_by_name("id");
        }
        
        $dbw->free_result();
        
        return $uid;
    } // user_exists
    
    //-----------------------------------------------------------------
    function check_email_domain($domain)
    {
        return $this->email_manager->check_email_domain($domain);
    } // check_email_domain
    
    //-----------------------------------------------------------------
    function hash_email($email)
    {
        return preg_replace_callback('|([^@]+)@([^@]+)|u', function ($matches) {
                  return str_replace(".", "", $matches[1]) . "@" . $matches[2];
              }, strtolower($email));
    } // hash_email
    
    //-----------------------------------------------------------------
    function hash_user_name($name)
    {
        $greek_replacements = array(
            "Α" => "А",
            "Β" => "В",
            "Γ" => "Г",
            "Ε" => "Е",
            "Ζ" => "Z",
            "Ł" => "L",
            "Η" => "Н",
            "Κ" => "К",
            "Μ" => "М",
            "Ο" => "О",
            "ο" => "о",
            "০" => "о",
            "Π" => "П",
            "Ρ" => "P",
            "Τ" => "T",
            "Ꭲ" => "T",
            "Υ" => "У",
            "Φ" => "Ф",
            "Χ" => "Х",
            "υ" => "u",
            "ν" => "v"
        );
        
        $cyrillic_replacements = array(
            "а" => "a",
            "с" => "c",
            "е" => "e",
            "у" => "y",
            "о" => "o",
            "р" => "p",
            "к" => "k",
            "г" => "r",
            "б" => "b",
            "х" => "x",
            "А" => "A",
            "С" => "C",
            "Е" => "E",
            "У" => "Y",
            "О" => "O",
            "Р" => "P",
            "К" => "K",
            "В" => "B",
            "Х" => "X",
            "Н" => "H",
            "Т" => "T",
            "М" => "M",
            "і" => "i",
            "ἰ" => "i",
            "п" => "n",
            "З" => "3",
            "з" => "3"
        );
        
        $spec_replacements = array(
            "O" => "0",
            "o" => "0",
            "I" => "l",
            "\/" => "V",
            "VV" => "W",
            "vv" => "w",
            "bl" => "Ы",
            "ъ" => "ь",
            "Ъ" => "Ь",
            " " => "",
            "_" => "",
            "-" => "",
            "." => "",
            "," => "",
            ":" => "",
            ";" => "",
            "!" => "",
            "?" => "",
            "~" => "",
            "`" => "",
            "^" => "",
            "'" => "",
            "\"" => ""
        );
        
        $name = str_replace(array_keys($greek_replacements), $greek_replacements, $name);
        $name = str_replace(array_keys($cyrillic_replacements), $cyrillic_replacements, $name);
        $name = str_replace(array_keys($spec_replacements), $spec_replacements, $name);
        
        $name = utf8_strtolower($name);
        
        $name = str_replace(array_keys($greek_replacements), $greek_replacements, $name);
        $name = str_replace(array_keys($cyrillic_replacements), $cyrillic_replacements, $name);
        $name = str_replace(array_keys($spec_replacements), $spec_replacements, $name);
        
        return $name;
    } // hash_user_name
    
    //-----------------------------------------------------------------
    function check_name_usage($user_name, $uid, $registration)
    {
        if (empty($user_name)) {
            return 0;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return 0;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        
        $appendix = "";
        if (!empty($uid)) {
            $appendix = " and id < $uid";
        }
        
        shrink_spaces($user_name);
        
        $user_name_hash = $dbw->escape($this->hash_user_name($user_name));
        
        $query = "select 1 from {$prfx}_user where user_name_hash = '$user_name_hash' $appendix";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return 0;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            return 1;
        }
        
        $dbw->free_result();
        
        if (stripos($user_name, "#user_name#") !== false) {
            return 2;
        }
        
        if (!$this->is_master_admin()) {
            $query = "select 1 from {$prfx}_reserved_names where user_name_hash = '$user_name_hash'";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return 0;
            }
            
            if ($dbw->fetch_row()) {
                $dbw->free_result();
                return 2;
            }
            
            $dbw->free_result();
        }
        
        if (!$registration) {
            return 0;
        }
        
        $query = "select 1 from {$prfx}_protected_guests where guest_name_hash = '$user_name_hash'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return 0;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            return 3;
        }
        
        $dbw->free_result();
        
        return 0;
    } // check_name_usage
    
    //-----------------------------------------------------------------
    function register()
    {
        global $READ_MARKER;
        global $settings;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if($this->is_logged_in()) {
            MessageHandler::setError(text("ErrLogoutForRegistration"));
            return false;
        }

        if (reqvar_empty("user_login", true)) {
            MessageHandler::setError(text("ErrUserLoginEmpty"));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("user_login"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        if (utf8_strlen(reqvar("user_login")) > $settings["max_user_name_symbols"]) {
            MessageHandler::setError(sprintf(text("ErrUserLoginTooLong"), $settings["max_user_name_symbols"]));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        shrink_spaces($_REQUEST["user_name"]);
        
        if (reqvar_empty("user_name", true)) {
            MessageHandler::setError(text("ErrUserNameEmpty"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        if (utf8_strlen(reqvar("user_name")) > $settings["max_user_name_symbols"]) {
            MessageHandler::setError(sprintf(text("ErrUserNameTooLong"), $settings["max_user_name_symbols"]));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        if (!$this->check_author(reqvar("user_name"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        trace_message_to_file(date("d.m.Y, H:i") . ": " . reqvar("user_name"), "registration.log");
        
        if (reqvar_empty("user_email", true)) {
            MessageHandler::setError(text("ErrEmailEmpty"));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("user_email"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("password"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        if (utf8_strlen(reqvar("user_email")) > 100) {
            MessageHandler::setError(sprintf(text("ErrEmailTooLong"), 100));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        if (reqvar_empty("password", true)) {
            MessageHandler::setError(text("ErrPasswordEmpty"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        if (reqvar("password") != reqvar("password2")) {
            MessageHandler::setError(text("ErrPwdNotIdentical"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        // check duplicates
        
        $user_login = quotes_or_null($dbw->escape(reqvar("user_login")));
        $user_name = quotes_or_null($dbw->escape(reqvar("user_name")));
        $user_name_hash = quotes_or_null($dbw->escape($this->hash_user_name(reqvar("user_name"))));
        
        $query = "select 1 from {$prfx}_user where login = $user_login";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row() || trim(strtolower(reqvar("user_login"))) == "admin") {
            MessageHandler::setError(text("ErrUserLoginInUse"));
            MessageHandler::setErrorElement("user_login");
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // check the user_name
        
        $check = $this->check_name_usage(reqvar("user_name"), "", true);
        if ($check == 1) {
            MessageHandler::setError(text("ErrUserNameInUse"));
            MessageHandler::setErrorElement("user_name");
            return false;
        } elseif ($check == 2) {
            MessageHandler::setError(text("ErrUserNameReserved"));
            MessageHandler::setErrorElement("user_name");
            return false;
        } elseif ($check == 3) {
            MessageHandler::setError(text("ErrUserNameProtected"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        // check the email
        
        $domain = strtolower(reqvar("user_email"));
        if (preg_match("/[^@]+@(.*)/", $domain, $matches)) {
            $domain = $matches[1];
        }
        if (!$this->check_email_domain($domain)) {
            MessageHandler::setError(sprintf(text("ErrEmailDomainNotAllowed"), $domain));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        $user_email_hash = quotes_or_null($dbw->escape($this->hash_email(reqvar("user_email"))));

        $query = "select 1 from {$prfx}_user where email_hash = $user_email_hash";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setError(text("ErrUserEmailInUse"));
            MessageHandler::setErrorElement("user_email");
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if (reqvar_empty("rules_agreemnt")) {
            MessageHandler::setError(text("ErrAgreementRequired"));
            MessageHandler::setErrorElement("rules_agreemnt");
            $dbw->free_result();
            return false;
        }
        
        if (!$this->verify_captcha(true)) {
            return false;
        }
        
        $hide_email = reqvar_empty("hide_email") ? "0" : "1";
        
        $now = $dbw->format_datetime(time());
        $activation_hash = System::generateHash(reqvar("user_login") . rand(100000, 900000), SALT_KEY);
        $activation_hash_db = quotes_or_null($dbw->escape($activation_hash));
        $activation_expire = $dbw->format_datetime(time() + 3600);
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        // By registration, the READ_MARKER changes. Pass the captcha verifiaction status to the new read marker
        $captcha_verified = !empty($_SESSION[$READ_MARKER]["captcha_verified"]);
        
        $READ_MARKER = System::generateHash(reqvar("user_login"), SALT_KEY);
        set_cookie("q_read_marker", $READ_MARKER, time() + 90 * 24 * 3600);
        
        $_SESSION[$READ_MARKER]["captcha_verified"] = $captcha_verified;
        
        $rm = $dbw->escape($READ_MARKER);
        
        $password_hash = quotes_or_null($dbw->escape(System::generateHash(reqvar("password"), SALT_KEY)));
        
        $approved = empty($settings["approval_required"]) ? "1" : "0";
        
        $lang = $dbw->escape(current_language());
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $user_email = quotes_or_null($dbw->escape(reqvar("user_email")));

        $query = "insert into {$prfx}_user (login, user_name, user_name_hash, email, email_hash, hide_email, password_hash, registration_date, last_visit_date, activation_hash, activation_expire, send_notifications, approved, ip, last_ip, read_marker, interface_language)
              values ($user_login, $user_name, $user_name_hash, $user_email, $user_email_hash, $hide_email, $password_hash, '$now', '$now', $activation_hash_db, '$activation_expire', 1, $approved, '$ip', '$ip', '$rm', '$lang')";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $uid = $dbw->insert_id();
        
        $query = "insert into {$prfx}_user_statistics (user_id) values ($uid)";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // - the new messages of the private topics are tracked even if the private forum has never been visited.
        //   it is ensured by the entering the the first read date of the private forum while user registration.
        
        $private_fid = $this->get_private_forum_id();
        
        $query = "insert into {$prfx}_forum_read_markers
             (forum_id, read_marker, first_read_date, first_activity, last_activity, ip)
              values
             ($private_fid, '$rm', '$now', '$now', '$now', '$ip')";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $agent = quotes_or_null($dbw->escape(val_or_empty($_SERVER["HTTP_USER_AGENT"])));
        
        $query = "insert into {$prfx}_read_marker_activity
             (read_marker, ip, last_activity, first_activity, current_name_start, author, user_agent, hits, current_name_hits)
              values
             ('$rm', '$ip', '$now', '$now', '$now', $user_name, $agent, 0, 0)";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $_SESSION["user_id"] = $uid;
        $_SESSION["user_name"] = reqvar("user_name");
        $_SESSION["logged_in"] = 1;
        $_SESSION["login_date"] = time();
        $_SESSION["blocked_notified"] = false;
        
        unset($_SESSION["last_url"]);
        $_SESSION["not_activated_notified"] = true;

        $this->update_user_status();

        $this->track_hit("", "");
        
        // get the list of the administrators
        
        $administrators = array();
        
        if (!$dbw->execute_query("select id, email, user_name, interface_language, last_host
                             from {$prfx}_user
                             where is_admin = 1 and login <> 'demoadmin'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $administrators[$dbw->field_by_name("id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // there is no administrators, send to the master admin
        
        if (empty($administrators)) {
            $administrators[0] = array(
                "name" => text("Administrator", defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"),
                "email" => $settings["receiver"],
                "last_host" => "",
                "interface_language" => defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"
            );
        }
        
        // get the list of the subscribed users
        
        $registration_subscribers = array();
        
        if (!$dbw->execute_query("select id, email, user_name, interface_language, last_host, send_notifications
                             from {$prfx}_user
                             where notify_about_new_users = 1")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $registration_subscribers[$dbw->field_by_name("id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "last_host" => $dbw->field_by_name("last_host"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        $params = array();
        
        $params["{user_login}"] = reqvar("user_login");
        $params["{user_name}"] = reqvar("user_name");
        $params["{user_email}"] = reqvar("user_email");
        $params["{user_password}"] = reqvar("password");
        
        $params["{site_url}"] = get_host_address() . get_url_path();
        $params["{activation_url}"] = get_host_address() . get_url_path() . "activate.php?code=" . xrawurlencode($activation_hash);
        
        $this->email_manager->send_email($settings["default_sender"], reqvar("user_email"), "email_registration.txt", $params, current_language());
        
        $already_notified = array();
        
        if (!empty($settings["approval_required"])) {
            $params = array();
            $params["{id}"] = $uid;
            $params["{user_login}"] = reqvar("user_login");
            $params["{user_name}"] = reqvar("user_name");
            $params["{user_email}"] = reqvar("user_email");
            
            foreach ($administrators as $aid => $uinfo) {
                $params["{administrator_name}"] = $uinfo["name"];
                
                $params["{site_url}"] = get_host_address($uinfo["last_host"]) . get_url_path();
                $params["{user_edit_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "edit_user.php?uid=" . xrawurlencode($uid);
                
                $already_notified[$aid] = 1;
                
                if ($aid != 0) {
                    $this->log_user_event($aid, $uid, reqvar("user_name"), "MsgEventUserRegisteredForAdmin", $params);
                }
                
                if (!empty($uinfo["email"])) {
                    $this->email_manager->send_email($settings["default_sender"], $uinfo["email"], "email_new_registration_for_admin.txt", $params, $uinfo["interface_language"]);
                }
            }
        }
        
        foreach ($registration_subscribers as $sid => $uinfo) {
            if (!empty($already_notified[$sid])) {
                continue;
            }
            
            $params["{subscriber_name}"] = $uinfo["name"];
            
            $params["{site_url}"] = get_host_address($uinfo["last_host"]) . get_url_path();
            $params["{user_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "view_profile.php?uid=" . xrawurlencode($uid);
            
            $this->log_user_event($sid, $uid, reqvar("user_name"), "MsgEventUserRegistered", $params);
            
            if (!empty($uinfo["email"]) && !empty($uinfo["send_notifications"])) {
                $this->email_manager->send_email($settings["default_sender"], $uinfo["email"], "email_new_registration.txt", $params, $uinfo["interface_language"]);
            }
        }
        
        MessageHandler::setInfo(text("MsgRegistrationSuccess"), null, false);
        
        return true;
    } // register
    
    //-----------------------------------------------------------------
    function activate_account()
    {
        if (reqvar_empty("code")) {
            MessageHandler::setError(text("ErrActivationLinkExpired"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $now = $dbw->format_datetime(time());
        $code = quotes_or_null($dbw->escape(reqvar("code")));
        
        $query = "select id, user_name from {$prfx}_user where activation_hash = $code and activation_expire > '$now'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            MessageHandler::setError(text("ErrActivationLinkExpired"));
            $dbw->free_result();
            return false;
        }
        
        $uid = $dbw->field_by_name("id");
        $user_name = $dbw->field_by_name("user_name");
        
        $dbw->free_result();
        
        $query = "update {$prfx}_user set
              activated = 1, activation_hash = NULL, activation_expire = NULL,
              last_visit_date = '$now'
              where id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $old_uid = val_or_empty($_SESSION["user_id"]);
        $old_user_name = val_or_empty($_SESSION["user_name"]);
        
        $_SESSION["user_id"] = $uid;
        $_SESSION["user_name"] = $user_name;
        
        $this->track_hit("", "");
        
        $_SESSION["user_id"] = $old_uid;
        $_SESSION["user_name"] = $old_user_name;
        
        MessageHandler::setInfo(text("ErrActivationSuccess"), null, false);
        
        return true;
    } // activate_account
    
    //-----------------------------------------------------------------
    function update_user_status()
    {
        global $READ_MARKER;
        
        if ($this->is_master_admin()) {
            if (ADMIN_PASSWORD != val_or_empty($_SESSION["password_hash"])) {
                // This can happen if the user changed password on another machine.
                // We force logout on all machines.
                
                $this->logout();
                
                MessageHandler::setWarning(text("WarnLogoutForced"));
                
                header("location: forums.php");
                exit;
            }
            
            $READ_MARKER = System::generateHash("admin", SALT_KEY);
            set_cookie("q_read_marker", $READ_MARKER, time() + 90 * 24 * 3600);

            $this->update_user_cookies();
            
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $start_time = $dbw->format_datetime(time() - 2*3600);

        $query = "select read_marker, author
                  from {$prfx}_read_marker_activity 
                  where (current_name_start > '$start_time' or current_name_hits < 500)
                  and author is not NULL";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $_SESSION["ignored_new_guests"] = array();
        while ($dbw->fetch_row()) {
            if ($dbw->field_by_name("author") == "admin") {
                continue;
            }
            
            $_SESSION["ignored_new_guests"][$dbw->field_by_name("read_marker")] = $dbw->field_by_name("author");
        }
        
        $dbw->free_result();
        
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            $this->update_user_cookies();

            // guests and IP
            $ip = $dbw->escape(val_or_empty($_SERVER["REMOTE_ADDR"]));
            
            if (!$dbw->execute_query("select block_expires, block_reason
                                 from {$prfx}_ip_blocked
                                 where ip = '$ip' and tp = 'ip'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $_SESSION["ip_blocked"] = false;
            $_SESSION["ip_block_expires"] = "";
            $_SESSION["ip_block_reason"] = "";
            $_SESSION["ip_block_time_left"] = "";
            
            if ($dbw->fetch_row()) {
                $_SESSION["ip_blocked"] = true;
                $_SESSION["ip_block_reason"] = Emoji::Decode($dbw->field_by_name("block_reason"));
                $_SESSION["ip_block_expires"] = "";
                $_SESSION["ip_block_time_left"] = "";
                if ($dbw->field_by_name("block_expires")) {
                    if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                        $_SESSION["ip_blocked"] = "";
                    } else {
                        $_SESSION["ip_block_expires"] = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                        $_SESSION["ip_block_time_left"] = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                    }
                }
            }
            
            $dbw->free_result();
            
            $ip_block_reason = "";
            if (!empty($_SESSION["ip_block_reason"])) {
                $ip_block_reason = $_SESSION["ip_block_reason"];
                $this->format_manager->format_message_simple($dbw, $prfx, $ip_block_reason, "warning");
                postprocess_message($ip_block_reason);
                
                $ip_block_reason = text("Reason") . ":\n\n[html]" . $ip_block_reason . "[/html]";
            }
            
            if (!empty($_SESSION["ip_blocked"])) {
                if (empty($_SESSION["blocked_notified"])) {
                    $_SESSION["blocked_notified"] = true;
                    if (!empty($_SESSION["ip_block_expires"])) {
                        MessageHandler::setError(sprintf(text("ErrIPIsBlockedUntil"), val_or_empty($_SERVER["REMOTE_ADDR"]), $_SESSION["ip_block_expires"], $_SESSION["ip_block_time_left"]), $ip_block_reason);
                    } else {
                        MessageHandler::setError(sprintf(text("ErrIPIsBlocked"), val_or_empty($_SERVER["REMOTE_ADDR"])), $ip_block_reason);
                    }
                }
            } else {
                $_SESSION["blocked_notified"] = false;
            }
            
            return true;
        } // if guests
        
        start_action_time_measure();
        
        $now = $dbw->format_datetime(time());
        
        if (!$this->is_async_activity()) {
            if (!$dbw->execute_query("update {$prfx}_user set blocked = 0, block_expires = NULL, block_reason = NULL
                                 where id = $uid and block_expires <= '$now'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if (!$dbw->execute_query("delete from {$prfx}_forum_blocked
                                 where user_id = $uid and block_expires <= '$now'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        
            $host = $dbw->escape(get_host_address());
        
            if (!$dbw->execute_query("update {$prfx}_user set last_host = '$host', last_visit_date = '$now' where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        if (!$dbw->execute_query("select login, user_name, email, turnoff_events, no_private_messages, send_notifications, donot_hide_adult_pictures,
                             hide_comments, thematic_per_default, donot_notify_on_rates, hide_pictures, hide_user_info, hide_user_avatars, hide_ignored, skin, self_blocked,
                             custom_css, custom_smiles, skin_properties, time_zone, interface_language, read_marker, activated, approved, rating_blocked, is_admin, privileged, last_logout_date,
                             privileged_topic_moderator, global_ban_allowed, show_ip, ignore_new_guests, ignore_guests_blacklist, ignore_guests_whitelist, blocked, block_expires, block_reason, password_hash
                             from {$prfx}_user
                             where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            
            // this can happen if the user account has been deleted.
            // force user logout and show him the message.
            
            $this->logout();
            
            MessageHandler::setWarning(text("ErrAccountDeleted"));
            
            measure_action_time("update user status");
            
            header("location: forums.php");
            exit;
        }
        
        // This can happen if the user logged out on another machine with the wish to force logout everywhere.
        // We force logout on all machines.
        if (!empty($_SESSION["login_date"]) && $_SESSION["login_date"] < xstrtotime($dbw->field_by_name("last_logout_date"))) {
            $dbw->free_result();
            
            $this->logout();
            
            MessageHandler::setWarning(text("WarnLogoutForced"));
            
            measure_action_time("update user status");
            
            header("location: forums.php");
            exit;
        }
        
        if ($dbw->field_by_name("self_blocked") == 2) {
            $dbw->free_result();
            
            $this->logout();
            
            MessageHandler::setWarning(text("ErrAccountBlockedBecauseDeath"));
            
            measure_action_time("update user status");
            
            header("location: forums.php");
            exit;
        }
        
        if ($dbw->field_by_name("self_blocked") == 3) {
            $dbw->free_result();
            
            $this->logout();
            
            MessageHandler::setWarning(text("ErrAccountBlockedBecauseLossSuspect"));
            
            measure_action_time("update user status");
            
            header("location: forums.php");
            exit;
        }
        
        $_SESSION["is_admin"] = $dbw->field_by_name("is_admin");
        $_SESSION["user_name"] = $dbw->field_by_name("user_name");
        
        $_SESSION["activated"] = $dbw->field_by_name("activated");
        $_SESSION["approved"] = $dbw->field_by_name("approved");
        $_SESSION["privileged"] = $dbw->field_by_name("privileged");
        $_SESSION["privileged_topic_moderator"] = $dbw->field_by_name("privileged_topic_moderator");
        $_SESSION["global_ban_allowed"] = $dbw->field_by_name("global_ban_allowed");
        $_SESSION["show_ip"] = $dbw->field_by_name("show_ip");
        
        $_SESSION["rating_blocked"] = $dbw->field_by_name("rating_blocked");
        
        $_SESSION["user_login"] = $dbw->field_by_name("login");
        $_SESSION["user_name"] = $dbw->field_by_name("user_name");
        $_SESSION["user_email"] = $dbw->field_by_name("email");
        
        $_SESSION["turnoff_events"] = $dbw->field_by_name("turnoff_events");
        $_SESSION["no_private_messages"] = $dbw->field_by_name("no_private_messages");
        $_SESSION["send_notifications"] = $dbw->field_by_name("send_notifications");
        $_SESSION["donot_notify_on_rates"] = $dbw->field_by_name("donot_notify_on_rates");
        
        $_SESSION["hide_pictures"] = $dbw->field_by_name("hide_pictures");
        $_SESSION["donot_hide_adult_pictures"] = $dbw->field_by_name("donot_hide_adult_pictures");
        $_SESSION["hide_user_info"] = $dbw->field_by_name("hide_user_info");
        $_SESSION["hide_user_avatars"] = $dbw->field_by_name("hide_user_avatars");
        $_SESSION["hide_ignored"] = $dbw->field_by_name("hide_ignored");
        $_SESSION["hide_comments"] = $dbw->field_by_name("hide_comments");
        $_SESSION["thematic_per_default"] = $dbw->field_by_name("thematic_per_default");
        $_SESSION["custom_css"] = $dbw->field_by_name("custom_css");
        $_SESSION["custom_smiles"] = preg_split("/[\r\n]+/", $dbw->field_by_name("custom_smiles") ?? "", -1, PREG_SPLIT_NO_EMPTY);
        
        $_SESSION["skin"] = $dbw->field_by_name("skin");
        $this->check_skin($_SESSION["skin"]);
        
        $skin_properties = $dbw->field_by_name("skin_properties");
        if (!empty($skin_properties)) {
            $_SESSION["skin_properties"] = json_decode($skin_properties, true);
            if (empty($_SESSION["skin_properties"])) {
                $_SESSION["skin_properties"] = array();
            }
        } else {
            $_SESSION["skin_properties"] = array();
        }
        
        $_SESSION["time_zone"] = $dbw->field_by_name("time_zone");
        if (empty($_SESSION["time_zone"]) || !in_array($_SESSION["time_zone"], $GLOBALS['time_zones'])) {
            $_SESSION["time_zone"] = TIME_ZONE;
        }
        
        set_language($dbw->field_by_name("interface_language"));
        
        $_SESSION["ignore_new_guests"] = $dbw->field_by_name("ignore_new_guests");
        $_SESSION["ignore_guests_blacklist"] = $dbw->field_by_name("ignore_guests_blacklist");
        $_SESSION["ignore_guests_whitelist"] = $dbw->field_by_name("ignore_guests_whitelist");
        
        $_SESSION["blocked"] = $dbw->field_by_name("blocked");
        $_SESSION["self_blocked"] = $dbw->field_by_name("self_blocked");
        $_SESSION["block_reason"] = Emoji::Decode($dbw->field_by_name("block_reason"));
        $_SESSION["block_expires"] = "";
        $_SESSION["block_time_left"] = "";
        
        if ($dbw->field_by_name("block_expires")) {
            if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                $_SESSION["blocked"] = "";
            } else {
                $_SESSION["block_expires"] = smart_date(adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat")));
                $_SESSION["block_time_left"] = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
            }
        }
        
        if ($dbw->field_by_name("read_marker")) {
            $READ_MARKER = $dbw->field_by_name("read_marker");
            
            // 90 days
            set_cookie("q_read_marker", $READ_MARKER, time() + 90 * 24 * 3600);
        }
        
        $dbw->free_result();
        
        $block_reason = "";
        if (!empty($_SESSION["blocked"]) && !empty($_SESSION["block_reason"])) {
            $block_reason = $_SESSION["block_reason"];
            $this->format_manager->format_message_simple($dbw, $prfx, $block_reason, "warning");
            postprocess_message($block_reason);
            
            $block_reason = text("Reason") . ":\n\n[html]" . $block_reason . "[/html]";
        }
        
        // check if forum member
        
        $_SESSION["forum_member"] = array();
        
        if (!$dbw->execute_query("select forum_id from {$prfx}_forum_member where user_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["forum_member"][$dbw->field_by_name("forum_id")] = 1;
        }
        
        $dbw->free_result();
        
        // check if forum moderator
        
        $_SESSION["forum_moderator"] = array();
        
        if (!$dbw->execute_query("select forum_id from {$prfx}_forum_moderator where user_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["forum_moderator"][$dbw->field_by_name("forum_id")] = $dbw->field_by_name("forum_id");
        }
        
        $dbw->free_result();
        
        // check if topic moderator
        
        $_SESSION["topic_moderator"] = array();
        
        if (!$dbw->execute_query("select topic_id from {$prfx}_topic_moderator where user_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["topic_moderator"][$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
        }
        
        $dbw->free_result();
        
        // ignored forums
        
        $_SESSION["ignored_forums"] = array();
        
        if (!$dbw->execute_query("select forum_id from {$prfx}_ignored_forums where user_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
            
            $_SESSION["ignored_forums"][$fid] = $fid;
        }
        
        $dbw->free_result();

        // preferred forums
        
        $_SESSION["preferred_forums"] = array();
        
        $query = "select id
                  from {$prfx}_forum
                  where 
                  exists (select 1 from {$prfx}_ignored_forums where user_id = $uid) and
                  id not in (select forum_id from {$prfx}_ignored_forums where user_id = $uid) and {$prfx}_forum.name <> 'PRIVATE_MESSAGES'";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("id");
            
            $_SESSION["preferred_forums"][$fid] = $fid;
        }
        
        $dbw->free_result();
        
        // blocked forums
        
        $_SESSION["blocked_forums"] = array();
        
        if (!$dbw->execute_query("select forum_id from {$prfx}_forum_blocked where user_id = $uid and (block_expires is NULL or block_expires > '$now')")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
            
            $_SESSION["blocked_forums"][$fid] = $fid;
        }
        
        $dbw->free_result();

        // ignored guests
        
        $_SESSION["ignored_guests_blacklist"] = array();
        $_SESSION["ignored_guests_whitelist"] = array();
        
        $query = "select guest_name, whitelist from {$prfx}_ignored_guests where user_id = $uid order by guest_name";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            if ($dbw->field_by_name("whitelist")) {
                $_SESSION["ignored_guests_whitelist"][utf8_strtolower($dbw->field_by_name("guest_name"))] = $dbw->field_by_name("guest_name");
            } else {
                $_SESSION["ignored_guests_blacklist"][utf8_strtolower($dbw->field_by_name("guest_name"))] = $dbw->field_by_name("guest_name");
            }
        }
        
        $dbw->free_result();
        
        // ignored users
        
        $_SESSION["ignored_users"] = array();
        
        $query = "select ignored_user_id from {$prfx}_ignored_users where user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["ignored_users"][$dbw->field_by_name("ignored_user_id")] = $dbw->field_by_name("ignored_user_id");
        }
        
        $dbw->free_result();
        
        // hidden guest profiles
        
        $_SESSION["hidden_guest_profiles"] = array();
        
        $query = "select avatar from {$prfx}_hide_guest_avatars where user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["hidden_guest_profiles"][$dbw->field_by_name("avatar")] = $dbw->field_by_name("avatar");
        }
        
        $dbw->free_result();
        
        // hidden user profiles
        
        $_SESSION["hidden_profiles"] = array();
        
        $query = "select hidden_user_id from {$prfx}_hide_profile where user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["hidden_profiles"][$dbw->field_by_name("hidden_user_id")] = $dbw->field_by_name("hidden_user_id");
        }
        
        $dbw->free_result();
        
        // subscribed authors
        
        $_SESSION["subscribed_authors"] = array();
        
        $query = "select subscribed_user_id, subscribed_user_name, user_name, last_visit_date, logout,
                  tm, last_view
                  from {$prfx}_user_subscription
                  left join {$prfx}_user on ({$prfx}_user_subscription.subscribed_user_id = {$prfx}_user.id)
                  where user_id = $uid
                  order by last_visit_date desc";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            if ($dbw->field_by_name("subscribed_user_id")) {
                $_SESSION["subscribed_authors"]["u_" . $dbw->field_by_name("subscribed_user_id")] = array(
                    "uid" => $dbw->field_by_name("subscribed_user_id"),
                    "user_name" => $dbw->field_by_name("user_name"),
                    "online" => (xstrtotime($dbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $dbw->field_by_name("logout") == 0),
                    "tm" => smart_date2(xstrtotime($dbw->field_by_name("tm"))),
                    "last_activity" => smart_date2(xstrtotime($dbw->field_by_name("last_visit_date"))),
                    "last_view" => smart_date2(xstrtotime($dbw->field_by_name("last_view")))
                );
            } else {
                $_SESSION["subscribed_authors"]["g_" . utf8_strtolower($dbw->field_by_name("subscribed_user_name"))] = array(
                    "user_name" => $dbw->field_by_name("subscribed_user_name"),
                    "tm" => smart_date2(xstrtotime($dbw->field_by_name("tm"))),
                    "last_activity" => "",
                    "last_view" => smart_date2(xstrtotime($dbw->field_by_name("last_view")))
                );
            }
        }
        
        $dbw->free_result();
        
        // ignored topics
        
        $_SESSION["ignored_topics"] = array();
        
        $query = "select topic_id from {$prfx}_ignored_topics where user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["ignored_topics"][$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
        }
        
        $dbw->free_result();
        
        // pinned topics
        
        $_SESSION["pinned_topics"] = array();
        
        $query = "select topic_id from {$prfx}_pinned_topics where user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["pinned_topics"][$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
        }
        
        $dbw->free_result();
        
        // favourite topics
        
        $_SESSION["favourite_topics"] = array();
        
        $query = "select topic_id from {$prfx}_favourite_topics where user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["favourite_topics"][$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
        }
        
        $dbw->free_result();
        
        // favourite posts
        
        $_SESSION["favourite_posts"] = array();
        
        $query = "select post_id from {$prfx}_favourite_posts where user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["favourite_posts"][$dbw->field_by_name("post_id")] = $dbw->field_by_name("post_id");
        }
        
        $dbw->free_result();
        
        // subscribed posts
        
        $_SESSION["subscribed_posts"] = array();
        
        $query = "select post_id from {$prfx}_post_subscription where user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $_SESSION["subscribed_posts"][$dbw->field_by_name("post_id")] = $dbw->field_by_name("post_id");
        }
        
        $dbw->free_result();
        
        $this->update_user_cookies();
        
        // notify user
        
        if (empty($_SESSION["activated"])) {
            if (empty($_SESSION["not_activated_notified"])) {
                $_SESSION["not_activated_notified"] = true;
                MessageHandler::setWarning(text("ErrAccountNotActivated"));
            }
        } else {
            $_SESSION["not_activated_notified"] = false;
        }
        
        if (empty($_SESSION["approved"])) {
            if (empty($_SESSION["not_approved_notified"])) {
                $_SESSION["not_approved_notified"] = true;
                MessageHandler::setWarning(text("ErrAccountNotApproved"));
            }
        } else {
            $_SESSION["not_approved_notified"] = false;
        }
        
        if (!empty($_SESSION["blocked"])) {
            if (empty($_SESSION["blocked_notified"])) {
                $_SESSION["blocked_notified"] = true;
                if (!empty($_SESSION["block_expires"])) {
                    MessageHandler::setWarning(sprintf(text("ErrAccountIsBlockedUntil"), $_SESSION["block_expires"], $_SESSION["block_time_left"]), $block_reason);
                } else {
                    MessageHandler::setWarning(text("ErrAccountIsBlocked"), $block_reason);
                }
            }
        } else {
            $_SESSION["blocked_notified"] = false;
        }
        
        measure_action_time("update user status");
        
        return true;
    } // update_user_status
    
    //-----------------------------------------------------------------
    function login(&$failed_login_count)
    {
        if (session_status() == PHP_SESSION_NONE) {
            MessageHandler::setError(text("ErrCookiesNotEnabled"));
            return false;
        }
        
        if (reqvar_empty("user_login")) {
            MessageHandler::setError(text("ErrWrongLogin"));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        $login = reqvar("user_login");
        $password = reqvar("user_password");
        $autologin = !reqvar_empty("user_autologin");
        
        $failed_login_count = 0;
        $this->count_failed_logins($failed_login_count);
        
        if ($failed_login_count >= 5) {
            $this->track_failed_login($login);
            MessageHandler::setError(sprintf(text("ErrTooManyFailedLogins"), "5", "10"));
            return false;
        }
        
        if ($login == "admin") {
            $password_hash = System::generateHash($password, SALT_KEY);
            if (ADMIN_PASSWORD != $password_hash) {
                $this->track_failed_login($login);
                $failed_login_count++;
                
                MessageHandler::setError(text("ErrWrongLogin"));
                MessageHandler::setErrorElement("user_login");
                return false;
            }
            
            $_SESSION["is_admin"] = 1;
            $_SESSION["is_master_admin"] = 1;
            $_SESSION["logged_in"] = 1;
            $_SESSION["user_login"] = "admin";
            $_SESSION["user_name"] = "admin";
            $_SESSION["user_email"] = "";
            $_SESSION["activated"] = true;
            $_SESSION["approved"] = true;
            $_SESSION["login_date"] = time();
            $_SESSION["blocked_notified"] = false;
            
            $_SESSION["password_hash"] = $password_hash;
            
            if ($autologin) {
                $autologin_hash = System::generateHash($login . $password . time() . rand(100000, 900000), SALT_KEY);
                
                // 30 days
                set_cookie("autologin", $autologin_hash, time() + 30 * 24 * 3600);
            }
        }
        
        // normal user
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        // master admin just logged
        if (!empty($_SESSION["is_master_admin"])) {
            // delete the failed tries
            if (!$dbw->execute_query("delete from {$prfx}_user_login_tries where ip = '$ip'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $failed_login_count = 0;
            
            // invalidate new info cache
            if (!$this->new_checker->invalidate_new_messages_cache()) {
                return false;
            }
            
            return true;
        } // // master admin just logged
        
        $login = $dbw->escape($login);
        $password_hash = $dbw->escape(System::generateHash($password, SALT_KEY));
        $password_hash_old = $dbw->escape(System::generateHashOld($password, SALT_KEY));
        
        if (!$dbw->execute_query("select id, autologin_hash, self_blocked
                             from {$prfx}_user
                             where login = '$login' and (password_hash = '$password_hash' or password_hash = '$password_hash_old')")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            
            $this->track_failed_login(reqvar("user_login"));
            $failed_login_count++;
            
            MessageHandler::setError(text("ErrWrongLogin"));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        if ($dbw->field_by_name("self_blocked") == 2) {
            $dbw->free_result();
            
            MessageHandler::setWarning(text("ErrAccountBlockedBecauseDeath"));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        if ($dbw->field_by_name("self_blocked") == 3) {
            $dbw->free_result();
            
            MessageHandler::setWarning(text("ErrAccountBlockedBecauseLossSuspect"));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        $_SESSION["logged_in"] = 1;
        $_SESSION["user_id"] = $dbw->field_by_name("id");
        $_SESSION["login_date"] = time();
        $_SESSION["blocked_notified"] = false;
        
        $autologin_hash = $dbw->field_by_name("autologin_hash");
        
        $dbw->free_result();
        
        // login was ok, delete the failed tries
        
        if (!$dbw->execute_query("delete from {$prfx}_user_login_tries where ip = '$ip'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $failed_login_count = 0;
        
        $uid = $dbw->escape($_SESSION["user_id"]);
        
        // clear logout status
        
        if (!$dbw->execute_query("update {$prfx}_user set logout = '0' where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $result = $this->update_user_status();
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        if ($result && $autologin) {
            if (empty($autologin_hash)) {
                $autologin_hash = System::generateHash($login . $password . time() . rand(100000, 900000), SALT_KEY);
            }
            
            $autologin_hash_db = $dbw->escape($autologin_hash);
            
            if (!$dbw->execute_query("update {$prfx}_user set autologin_hash = '$autologin_hash_db' where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            // 30 days
            set_cookie("autologin", $autologin_hash, time() + 30 * 24 * 3600);
        }
        
        return $result;
    } // login
    
    //-----------------------------------------------------------------
    function try_auto_login()
    {
        if ($this->is_logged_in()) {
            return true;
        }
        
        if (!empty($_SESSION["autologin_tried"])) {
            return true;
        }
        
        $_SESSION["autologin_tried"] = true;
        
        $autologin_hash = get_cookie("autologin");
        
        if (empty($autologin_hash)) {
            return true;
        }
        
        $failed_login_count = 0;
        $this->count_failed_logins($failed_login_count);
        
        // To prevent fishing the failure counter through autologin
        // we stop it after two tries.
        if ($failed_login_count >= 2) {
            return true;
        }
        
        if (System::generateHash("admin" . ADMIN_PASSWORD, SALT_KEY) == $autologin_hash) {
            $_SESSION["is_admin"] = 1;
            $_SESSION["is_master_admin"] = 1;
            $_SESSION["logged_in"] = 1;
            $_SESSION["user_login"] = "admin";
            $_SESSION["user_name"] = "admin";
            $_SESSION["user_email"] = "";
            $_SESSION["activated"] = true;
            $_SESSION["approved"] = true;
            $_SESSION["login_date"] = time();
            
            $_SESSION["password_hash"] = ADMIN_PASSWORD;
            
            // renew cookie, 30 days
            set_cookie("autologin", $autologin_hash, time() + 30 * 24 * 3600);
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        // master admin just logged
        if (!empty($_SESSION["is_master_admin"])) {
            // delete the failed tries
            if (!$dbw->execute_query("delete from {$prfx}_user_login_tries where ip = '$ip'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            // invalidate new info cache
            if (!$this->new_checker->invalidate_new_messages_cache()) {
                return false;
            }
            
            return true;
        } // // master admin just logged
        
        $autologin_hash_db = $dbw->escape($autologin_hash);
        
        if (!$dbw->execute_query("select id, self_blocked
                             from {$prfx}_user
                             where autologin_hash = '$autologin_hash_db'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            $this->track_failed_login($autologin_hash);
            
            return true;
        }
        
        if ($dbw->field_by_name("self_blocked") == 2 || $dbw->field_by_name("self_blocked") == 3) {
            $dbw->free_result();
            
            set_cookie("autologin", "", time());
            return true;
        }
        
        $_SESSION["logged_in"] = 1;
        $_SESSION["user_id"] = $dbw->field_by_name("id");
        $_SESSION["login_date"] = time();
        
        $dbw->free_result();
        
        // login was ok, delete the failed tries
        
        if (!$dbw->execute_query("delete from {$prfx}_user_login_tries where ip = '$ip'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $failed_login_count = 0;
        
        $uid = $dbw->escape($_SESSION["user_id"]);
        
        // clear logout status
        
        if (!$dbw->execute_query("update {$prfx}_user set logout = '0' where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $result = $this->update_user_status();
        
        // renew cookie, 30 days
        set_cookie("autologin", $autologin_hash, time() + 30 * 24 * 3600);
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        return $result;
    } // try_auto_login
    
    //-----------------------------------------------------------------
    function clear_profile_data()
    {
        $_SESSION = array();
        
        $this->update_user_cookies();
        
        return true;
    } // clear_profile_data
    
    //-----------------------------------------------------------------
    function logout($all_sessions = false)
    {
        $uid = $this->get_user_id();
        
        unset($_SESSION["last_posted_user"]);
        
        unset($_SESSION["logged_in"]);
        unset($_SESSION["login_date"]);
        unset($_SESSION["user_login"]);
        unset($_SESSION["user_name"]);
        unset($_SESSION["user_id"]);
        unset($_SESSION["user_email"]);
        unset($_SESSION["is_admin"]);
        unset($_SESSION["is_master_admin"]);
        unset($_SESSION["activated"]);
        unset($_SESSION["approved"]);
        unset($_SESSION["privileged"]);
        unset($_SESSION["privileged_topic_moderator"]);
        unset($_SESSION["global_ban_allowed"]);
        unset($_SESSION["rating_blocked"]);
        
        unset($_SESSION["forum_member"]);
        unset($_SESSION["forum_moderator"]);
        unset($_SESSION["topic_moderator"]);
        unset($_SESSION["forum_blocked"]);
        
        unset($_SESSION["last_url"]);
        unset($_SESSION["last_url_askpwd"]);
        unset($_SESSION["last_url_asklogin"]);
        
        unset($_SESSION["not_activated_notified"]);
        unset($_SESSION["not_approved_notified"]);
        unset($_SESSION["blocked_notified"]);
        
        unset($_SESSION["blocked"]);
        unset($_SESSION["block_time_left"]);
        unset($_SESSION["block_expires"]);
        unset($_SESSION["block_reason"]);

        unset($_SESSION["ip_blocked"]);
        unset($_SESSION["ip_block_time_left"]);
        unset($_SESSION["ip_block_expires"]);
        unset($_SESSION["ip_block_reason"]);
        
        set_cookie("q_last_guest_name", "", time());
        
        set_cookie("autologin", "", time());
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        if (empty($uid)) {
            return true;
        }
        
        $appendix = "";
        if ($all_sessions) {
            $now = $dbw->format_datetime(time());
            $appendix = ", autologin_hash = NULL, last_logout_date = '$now'";
        }
        
        if (!$dbw->execute_query("update {$prfx}_user set logout = 1 $appendix where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        return true;
    } // logout
    
    //-----------------------------------------------------------------
    function count_failed_logins(&$cnt)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        // delete entries older than 1 hour
        $dt_start = $dbw->format_datetime(time() - 24 * 3600);
        if (!$dbw->execute_query("delete from {$prfx}_user_login_tries where ip = '$ip' and dt < '$dt_start'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // count failed login tries in the last 10 seconds
        $dt_start = $dbw->format_datetime(time() - 10);
        if (!$dbw->execute_query("select count(*) cnt from {$prfx}_user_login_tries where ip = '$ip' and dt > '$dt_start'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $cnt = $dbw->field_by_name("cnt");
        }
        
        $dbw->free_result();
        
        return true;
    } // count_failed_logins
    
    //-----------------------------------------------------------------
    function track_failed_login($login)
    {
        global $settings;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $now = $dbw->format_datetime(time());
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        $login_db = $dbw->escape($login);
        
        if (!$dbw->execute_query("insert into {$prfx}_user_login_tries
                             (login, ip, dt)
                             values
                             ('$login_db', '$ip', '$now')")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $failed_login_count = 0;
        
        if (!$dbw->execute_query("select count(*) cnt from {$prfx}_user_login_tries where login = '$login_db'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $failed_login_count = $dbw->field_by_name("cnt");
        }
        
        $dbw->free_result();
        
        // we notify by reaching 5 failed logins
        // we do not notify by 6,7,...
        // by successful login, the tries are reset and the user will be notified again
        // it again 5 tries will be
        
        if ($failed_login_count != 5) {
            return true;
        }
        
        // notify user
        
        $params = array();
        
        $params["{user_login}"] = $login;
        
        $lng = current_language();
        
        if ($login == "admin") {
            $params["{user_name}"] = text("Administrator");
            $params["{user_email}"] = $settings["receiver"];
            $params["{site_url}"] = get_host_address() . get_url_path();
        } else {
            if (!$dbw->execute_query("select user_name, email, interface_language, last_host from {$prfx}_user where login = '$login_db'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $params["{user_name}"] = $dbw->field_by_name("user_name");
                $params["{user_email}"] = $dbw->field_by_name("email");
                $params["{site_url}"] = get_host_address($dbw->field_by_name("last_host")) . get_url_path();
                $lng = $dbw->field_by_name("interface_language");
            }
            
            $dbw->free_result();
        }
        
        trace_message_to_file(date("d.m.Y, H:i") . ": " . $login . " (IP:" . val_or_empty($_SERVER["REMOTE_ADDR"]) . ")", "failed_logins.log");
        
        // mail notification
        
        if (!empty($params["{user_email}"])) {
            $this->email_manager->send_email($settings["default_sender"], $params["{user_email}"], "email_many_failed_logins.txt", $params, $lng);
        }
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                           from {$prfx}_user
                           where is_admin = 1 and login <> 'demoadmin'
                           ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $administrators = array();
        
        while ($dbw->fetch_row()) {
            $administrators[$dbw->field_by_name("id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // forum has neither moderators nor administrators, send to the master admin
        if (empty($administrators)) {
            $administrators[0] = array(
                "name" => text("Administrator", defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"),
                "email" => $settings["receiver"],
                "last_host" => "",
                "interface_language" => defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"
            );
        }
        
        foreach ($administrators as $uid => $ainfo) {
            $params["{admin_name}"] = $ainfo["name"];
            
            if (!empty($ainfo["email"])) {
                $this->email_manager->send_email($settings["default_sender"], $ainfo["email"], "email_many_failed_logins_admin.txt", $params, $ainfo["interface_language"]);
            }
        }
        
        return true;
    } // track_failed_login
    
    //-----------------------------------------------------------------
    function restore_password()
    {
        global $settings;
        
        if (reqvar_empty("user_email")) {
            MessageHandler::setError(text("ErrEmailEmpty"));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        if (utf8_strlen(reqvar("user_email")) > 100) {
            MessageHandler::setError(sprintf(text("ErrEmailTooLong"), 100));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $user_email_hash = $dbw->escape($this->hash_email(reqvar("user_email")));
        
        if (!$dbw->execute_query("select id, login, user_name, email, interface_language
                             from {$prfx}_user
                             where email_hash = '$user_email_hash'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            MessageHandler::setError(sprintf(text("MsgErrEmailNotFound"), reqvar("user_email")));
            MessageHandler::setFocusElement("user_email");
            
            $dbw->free_result();
            return true;
        }
        
        $uid = $dbw->field_by_name("id");
        $user_login = $dbw->field_by_name("login");
        $user_name = $dbw->field_by_name("user_name");
        $email = $dbw->field_by_name("email");
        $lng = $dbw->field_by_name("interface_language");
        
        $dbw->free_result();
        
        $pwd_reset_hash = System::generateHash(reqvar("user_email") . rand(100000, 900000), SALT_KEY);
        $pwd_reset_hash_db = quotes_or_null($dbw->escape($pwd_reset_hash));
        $pwd_reset_hash_expire = $dbw->format_datetime(time() + 3600);
        
        if (!$dbw->execute_query("update {$prfx}_user set pwd_reset_hash = $pwd_reset_hash_db, pwd_reset_expire = '$pwd_reset_hash_expire'
                             where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $params = array();
        
        $params["{user_login}"] = $user_login;
        $params["{user_name}"] = $user_name;
        $params["{user_email}"] = $email;
        
        $params["{site_url}"] = get_host_address() . get_url_path();
        $params["{password_reset_url}"] = get_host_address() . get_url_path() . "password_reset.php?code=" . xrawurlencode($pwd_reset_hash);
        
        $this->email_manager->send_email($settings["default_sender"], reqvar("user_email"), "email_password_restore.txt", $params, $lng);
        
        MessageHandler::setInfo(text("MsgPasswordRestore"), null, false);
        MessageHandler::setFocusElement("user_email");
        
        return true;
    } // restore_password
    
    //-----------------------------------------------------------------
    function verify_reset_link(&$user_data)
    {
        if (reqvar_empty("code")) {
            MessageHandler::setError(text("PasswordResetLinkInvalid"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $now = $dbw->format_datetime(time());
        $code = quotes_or_null($dbw->escape(reqvar("code")));
        
        $query = "select id, login, user_name from {$prfx}_user where pwd_reset_hash = $code and pwd_reset_expire > '$now'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            MessageHandler::setError(text("PasswordResetLinkInvalid"));
            $dbw->free_result();
            return false;
        }
        
        $_SESSION["user_for_pwd_reset"] = $dbw->field_by_name("id");
        
        $user_data["user_login"] = $dbw->field_by_name("login");
        $user_data["user_name"] = $dbw->field_by_name("user_name");
        
        $dbw->free_result();
        
        return true;
    } // verify_reset_link
    
    //-----------------------------------------------------------------
    function reset_password()
    {
        if (empty($_SESSION["user_for_pwd_reset"])) {
            MessageHandler::setError(text("PasswordResetLinkInvalid"));
            return false;
        }
        
        if (reqvar_empty("password")) {
            MessageHandler::setError(text("ErrPasswordEmpty"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        if (reqvar("password") != reqvar("password2")) {
            MessageHandler::setError(text("ErrPwdNotIdentical"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($_SESSION["user_for_pwd_reset"]);
        $password_hash = quotes_or_null($dbw->escape(System::generateHash(reqvar("password"), SALT_KEY)));
        
        unset($_SESSION["user_for_pwd_reset"]);
        
        $query = "update {$prfx}_user set
              password_hash = $password_hash, pwd_reset_hash = NULL, pwd_reset_expire = NULL,
              autologin_hash = NULL
              where id = $uid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgPasswordResetSuccess"));
        
        return true;
    } // reset_password
    
    //-----------------------------------------------------------------
    function get_moderated_forums(&$moderated_forum_list, &$moderated_restricted_forum_list)
    {
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if ($this->is_admin()) {
            $query = "select id forum_id, name, restricted_access
                from {$prfx}_forum
                where deleted <> 1
                order by name";
        } else {
            $uid = $dbw->escape($this->get_user_id());
            if (empty($uid)) {
                $uid = 0;
            }
            
            $query = "select forum_id, name, restricted_access
                from {$prfx}_forum
                inner join {$prfx}_forum_moderator on ({$prfx}_forum.id = {$prfx}_forum_moderator.forum_id)
                where user_id = $uid and {$prfx}_forum.name <> 'PRIVATE_MESSAGES' and deleted <> 1
                order by name";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $private_fid = "";
        
        while ($dbw->fetch_row()) {
            if ($dbw->field_by_name("name") == "PRIVATE_MESSAGES") {
                $private_fid = $dbw->field_by_name("forum_id");
                continue;
            }
            
            $moderated_forum_list[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("name");
            
            if ($dbw->field_by_name("restricted_access") == "1") {
                $moderated_restricted_forum_list[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("name");
            }
        }
        
        $dbw->free_result();
        
        if (!empty($private_fid)) {
            $moderated_forum_list[$private_fid] = text("PrivateTopics");
        }
        
        measure_action_time("get moder. forums");
        
        return true;
    } // get_moderated_forums
    
    //-----------------------------------------------------------------
    function check_post_ip($ip)
    {
        if (empty($ip) || !defined("MAX_POSTS_PER_MINUTE") || MAX_POSTS_PER_MINUTE < 1) {
            return true;
        }
        
        if ($this->is_admin() || $this->is_privileged()) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $ip = $dbw->escape($ip);
        
        $now = $dbw->format_datetime(time());
        
        if (!$dbw->execute_query("select 1
                             from {$prfx}_banned_ips
                             where banned_until > '$now' and ip = '$ip'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            
            return false;
        }
        
        $dbw->free_result();
        
        // check the count of the posts in a minute
        
        $now = $dbw->format_datetime(time() - 1 * 60);
        
        if (!$dbw->execute_query("select count(*) cnt
                             from {$prfx}_post
                             where creation_date >= '$now' and ip = '$ip'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $hits = 0;
        
        if ($dbw->fetch_row()) {
            $hits = $dbw->field_by_name("cnt");
        }
        
        $dbw->free_result();
        
        $wait_time_after_attack = 30;
        if (defined("WAIT_TIME_AFTER_ATTACK") && WAIT_TIME_AFTER_ATTACK > 0) {
            $wait_time_after_attack = WAIT_TIME_AFTER_ATTACK;
        }
        
        if ($hits <= MAX_POSTS_PER_MINUTE) {
            // second check - MAX_POSTS_PER_MINUTE x 2 per 3 minutes
            
            $now = $dbw->format_datetime(time() - 3 * 60);
            
            if (!$dbw->execute_query("select count(*) cnt
                             from {$prfx}_post
                             where creation_date >= '$now' and ip = '$ip'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $hits = 0;
            
            if ($dbw->fetch_row()) {
                $hits = $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
            
            if ($hits <= 2 * MAX_POSTS_PER_MINUTE) {
                return true;
            }
        }
        
        $now = $dbw->format_datetime(time() + $wait_time_after_attack * 60);
        
        if (!$dbw->execute_query("insert into {$prfx}_banned_ips (banned_until, ip, hits, atype) values ('$now', '$ip', $hits, 'POST')")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // get the list of the administrators
        
        $administrators = array();
        
        if (!$dbw->execute_query("select id, email, user_name, interface_language, last_host, time_zone
                             from {$prfx}_user
                             where is_admin = 1 and login <> 'demoadmin'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $administrators[$dbw->field_by_name("id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "last_host" => $dbw->field_by_name("last_host"),
                "author_time_zone" => $dbw->field_by_name("time_zone") ? $dbw->field_by_name("time_zone") : TIME_ZONE,
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        $settings = array();
        $this->get_settings($settings);
        
        // there is no administrators, send to the master admin
        
        if (empty($administrators)) {
            $administrators[0] = array(
                "name" => text("Administrator", defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"),
                "email" => $settings["receiver"],
                "last_host" => "",
                "author_time_zone" => TIME_ZONE,
                "interface_language" => defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"
            );
        }
        
        $params = array();
        $params["{ip}"] = $ip;
        $params["{hits}"] = $hits;
        $params["{atype}"] = 'POST';
        $params["{check_period}"] = 1;
        
        $params["{total_attacks}"] = '-';
        $attack_data["{first_attack}"] = '-';
        $attack_data["{last_attack}"] = '-';
        
        if (!$dbw->execute_query("select
                                  min(banned_until) first_attack,
                                  max(banned_until) last_attack,
                                  count(*) cnt
                                  from {$prfx}_banned_ips
                                  where ip = '$ip'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $params["{total_attacks}"] = $dbw->field_by_name("cnt");
            $attack_data["{first_attack}"] = xstrtotime($dbw->field_by_name("first_attack"));
            $attack_data["{last_attack}"] = xstrtotime($dbw->field_by_name("last_attack"));
        }
        
        $dbw->free_result();
        
        foreach ($administrators as $id => $uinfo) {
            $params["{administrator_name}"] = $uinfo["name"];
            
            $params["{site_url}"] = get_host_address($uinfo["last_host"]) . get_url_path();
            $params["{statistics_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "load_statistics.php#banned_ips";
            
            $params["{first_attack}"] = date(text("DateTimeFormat", $uinfo["interface_language"]), convert_timezone($attack_data["{first_attack}"], TIME_ZONE, $uinfo["author_time_zone"]));
            $params["{last_attack}"] = date(text("DateTimeFormat", $uinfo["interface_language"]), convert_timezone($attack_data["{last_attack}"], TIME_ZONE, $uinfo["author_time_zone"]));
            $this->email_manager->send_email($settings["default_sender"], $uinfo["email"], "email_attack_detected.txt", $params, $uinfo["interface_language"]);
        }
        
        return true;
    } // check_post_ip
    
    //-----------------------------------------------------------------
    function check_ip($ip, $user_agent)
    {
        if (empty($ip) || !defined("MAX_REQUESTS_PER_MINUTE") || MAX_REQUESTS_PER_MINUTE < 1) {
            return true;
        }
        
        if ($this->is_admin() || $this->is_privileged()) {
            return true;
        }
        
        // we allow the search bot to make many requests
        $bot = detect_bot($user_agent);
        if (!empty($bot)) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $ip = $dbw->escape($ip);
        
        $now = $dbw->format_datetime(time());
        
        if (!$dbw->execute_query("select 1
                             from {$prfx}_banned_ips
                             where banned_until > '$now' and ip = '$ip'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            
            exit("<h3>Too many requests! Try again later!</h3>");
        }
        
        $dbw->free_result();
        
        $now = $dbw->format_datetime(time() - 1 * 60);
        
        if (!$dbw->execute_query("select 1
                             from {$prfx}_forum_hits
                             where dt >= '$now' and ip = '$ip'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $hits = 0;
        
        while ($dbw->fetch_row()) {
            $hits++;
        }
        
        $dbw->free_result();
        
        if ($hits <= MAX_REQUESTS_PER_MINUTE) {
            return true;
        }
        
        $wait_time_after_attack = 30;
        if (defined("WAIT_TIME_AFTER_ATTACK") && WAIT_TIME_AFTER_ATTACK > 0) {
            $wait_time_after_attack = WAIT_TIME_AFTER_ATTACK;
        }
        
        $now = $dbw->format_datetime(time() + $wait_time_after_attack * 60);
        
        if (!$dbw->execute_query("insert into {$prfx}_banned_ips (banned_until, ip, hits, atype) values ('$now', '$ip', $hits, 'REQUEST')")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // get the list of the administrators
        
        $administrators = array();
        
        if (!$dbw->execute_query("select id, email, user_name, interface_language, last_host, time_zone
                             from {$prfx}_user
                             where is_admin = 1 and login <> 'demoadmin'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $administrators[$dbw->field_by_name("id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "last_host" => $dbw->field_by_name("last_host"),
                "author_time_zone" => $dbw->field_by_name("time_zone") ? $dbw->field_by_name("time_zone") : TIME_ZONE,
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        $settings = array();
        $this->get_settings($settings);
        
        // there is no administrators, send to the master admin
        
        if (empty($administrators)) {
            $administrators[0] = array(
                "name" => text("Administrator", defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"),
                "email" => $settings["receiver"],
                "last_host" => "",
                "author_time_zone" => TIME_ZONE,
                "interface_language" => defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"
            );
        }
        
        $params = array();
        $params["{ip}"] = $ip;
        $params["{hits}"] = $hits;
        $params["{atype}"] = 'REQUEST';
        $params["{check_period}"] = 1;
        
        $params["{total_attacks}"] = '-';
        $attack_data["{first_attack}"] = '-';
        $attack_data["{last_attack}"] = '-';
        
        if (!$dbw->execute_query("select
                                  min(banned_until) first_attack,
                                  max(banned_until) last_attack,
                                  count(*) cnt
                                  from {$prfx}_banned_ips
                                  where ip = '$ip'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $params["{total_attacks}"] = $dbw->field_by_name("cnt");
            $attack_data["{first_attack}"] = xstrtotime($dbw->field_by_name("first_attack"));
            $attack_data["{last_attack}"] = xstrtotime($dbw->field_by_name("last_attack"));
        }
        
        $dbw->free_result();
        
        foreach ($administrators as $id => $uinfo) {
            $params["{administrator_name}"] = $uinfo["name"];
            
            $params["{site_url}"] = get_host_address($uinfo["last_host"]) . get_url_path();
            $params["{statistics_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "load_statistics.php";
            
            $params["{first_attack}"] = date(text("DateTimeFormat", $uinfo["interface_language"]), convert_timezone($attack_data["{first_attack}"], TIME_ZONE, $uinfo["author_time_zone"]));
            $params["{last_attack}"] = date(text("DateTimeFormat", $uinfo["interface_language"]), convert_timezone($attack_data["{last_attack}"], TIME_ZONE, $uinfo["author_time_zone"]));
            $this->email_manager->send_email($settings["default_sender"], $uinfo["email"], "email_attack_detected.txt", $params, $uinfo["interface_language"]);
        }
        
        return true;
    } // check_ip
    
    //-----------------------------------------------------------------
    function get_online_users(&$online_users, &$forum_readers, &$topic_readers, &$topic_ignorers, $current_fid, $current_tid)
    {
        if (detect_bot(val_or_empty($_SERVER["HTTP_USER_AGENT"])) != "") {
            return true;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $now = $dbw->format_datetime(time() - KEEP_ONLINE_PERIOD);
        
        if (!$dbw->execute_query("select {$prfx}_user.id, {$prfx}_user.user_name, forum_id, topic_id, guest_name, {$prfx}_forum_hits.ip, user_agent, logout,
                             max(dt) last_time
                             from {$prfx}_forum_hits
                             left join {$prfx}_user on ({$prfx}_forum_hits.user_id = {$prfx}_user.id)
                             where dt >= '$now'
                             group by {$prfx}_user.id, {$prfx}_user.user_name, forum_id, topic_id, guest_name, {$prfx}_forum_hits.ip, user_agent, logout
                             order by max(dt) desc")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $uid = $dbw->field_by_name("id");
            $fid = $dbw->field_by_name("forum_id");
            $tid = $dbw->field_by_name("topic_id");
            
            $time_ago = smart_date2(xstrtotime($dbw->field_by_name("last_time")));
            
            if (!empty($uid)) {
                if (!empty($_SESSION["hide_ignored"]) && $this->is_user_ignored($uid)) {
                    continue;
                }
                
                $idx = "u_" . $dbw->field_by_name("id");
                $user = array(
                    "id" => $dbw->field_by_name("id"),
                    "name" => $dbw->field_by_name("user_name"),
                    "time_ago" => $time_ago
                );
            } elseif ($bot = detect_bot($dbw->field_by_name("user_agent"))) {
                $idx = "b_" . $bot;
                $user = array(
                    "name" => $bot,
                    "bot" => true,
                    "time_ago" => $time_ago
                );
            } elseif ($guest = $dbw->field_by_name("guest_name")) {
                if (!empty($_SESSION["hide_ignored"]) && $this->is_guest_ignored($guest, "")) {
                    continue;
                }
                
                $idx = "g_" . $guest;
                $user = array(
                    "name" => $guest,
                    "time_ago" => $time_ago
                );
            } else {
                $idx = "g_#anonyms#";
                $user = array(
                    "name" => text("Anonyms") . " (1)",
                    "count" => 1,
                    "time_ago" => $time_ago
                );
            }
            
            if (!$dbw->field_by_name("logout")) {
                if (empty($online_users[$idx])) {
                    $online_users[$idx] = $user;
                } elseif ($idx == "g_#anonyms#") {
                    $online_users[$idx]["count"]++;
                    $online_users[$idx]["name"] = text("Anonyms") . " (" . $online_users[$idx]["count"] . ")";
                }
            }
            
            if (!empty($current_fid) && !empty($fid) && $current_fid == $fid) {
                if (empty($forum_readers[$idx])) {
                    $forum_readers[$idx] = $user;
                } elseif ($idx == "g_#anonyms#") {
                    $forum_readers[$idx]["count"]++;
                    $forum_readers[$idx]["name"] = text("Anonyms") . " (" . $forum_readers[$idx]["count"] . ")";
                }
            }
            
            if (!empty($current_tid) && !empty($tid) && $current_tid == $tid) {
                if (empty($topic_readers[$idx])) {
                    $topic_readers[$idx] = $user;
                } elseif ($idx == "g_#anonyms#") {
                    $topic_readers[$idx]["count"]++;
                    $topic_readers[$idx]["name"] = text("Anonyms") . " (" . $topic_readers[$idx]["count"] . ")";
                }
            }
        }
        
        $dbw->free_result();
        
        if(!empty($current_tid))
        {
            $current_tid = $dbw->escape($current_tid);
            
            $query = "select {$prfx}_user.id, {$prfx}_user.user_name, last_visit_date, logout, auto_ignored
                      from {$prfx}_user
                      inner join {$prfx}_ignored_topics on ({$prfx}_ignored_topics.user_id = {$prfx}_user.id and {$prfx}_ignored_topics.topic_id = $current_tid)
                      union
                      select {$prfx}_user.id, {$prfx}_user.user_name, last_visit_date, logout, auto_ignored
                      from {$prfx}_user
                      inner join {$prfx}_ignored_topics_archive on ({$prfx}_ignored_topics_archive.user_id = {$prfx}_user.id and {$prfx}_ignored_topics_archive.topic_id = $current_tid)
                      order by last_visit_date desc";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $uid = $dbw->field_by_name("id");
                
                if (!empty($_SESSION["hide_ignored"]) && $this->is_user_ignored($uid)) {
                    continue;
                }

                $topic_ignorers[$uid]["name"] = $dbw->field_by_name("user_name");
                $topic_ignorers[$uid]["online"] = (xstrtotime($dbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $dbw->field_by_name("logout") == 0);
                $topic_ignorers[$uid]["auto_ignored"] = $dbw->field_by_name("auto_ignored");
            }
            
            $dbw->free_result();
        }
        
        measure_action_time("get online users");
        
        return true;
    } // get_online_users
    
    //-----------------------------------------------------------------
    function get_user_tags(&$user_tags, $uid = null)
    {
        if (empty($uid)) {
            return true;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $where = "";
        if ($uid != -1) {
            $uid = $dbw->escape($uid);
            $where = "where user_id = $uid";
        }
        
        if (!$dbw->execute_query("select id, name
                             from {$prfx}_user_tags
                             $where
                             order by name
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $user_tags[$dbw->field_by_name("id")] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        measure_action_time("get user tags");
        
        return true;
    } // get_user_tags
    
    //-----------------------------------------------------------------
    function get_user_data($uid, &$user_data)
    {
        global $settings;
        global $READ_MARKER;
        
        start_action_time_measure();
        
        $user_data["id"] = "";
        $user_data["user_name"] = "";
        $user_data["user_login"] = "";
        $user_data["user_email"] = "";
        $user_data["location"] = "";
        $user_data["homepage"] = "";
        $user_data["info"] = "";
        $user_data["info_formatted"] = "";
        $user_data["message"] = "";
        $user_data["signature"] = "";
        $user_data["my_notes"] = "";
        $user_data["my_notes_bb"] = "";
        
        $user_data["hide_email"] = "";
        $user_data["approved"] = "";
        $user_data["activated"] = "";
        $user_data["hidden"] = "";
        
        $user_data["is_admin"] = "";
        $user_data["privileged"] = "";
        $user_data["privileged_topic_moderator"] = "";
        $user_data["global_ban_allowed"] = "";
        $user_data["hide_ignored"] = "";
        $user_data["hide_pictures"] = "";
        $user_data["donot_hide_adult_pictures"] = "";
        $user_data["hide_user_info"] = "";
        $user_data["hide_user_avatars"] = "";
        $user_data["no_private_messages"] = "";
        $user_data["hide_comments"] = "";
        $user_data["thematic_per_default"] = "";
        $user_data["ignore_new_guests"] = "";
        $user_data["ignore_guests_blacklist"] = "";
        $user_data["ignore_guests_whitelist"] = "";
        $user_data["ignored_guests_blacklist"] = "";
        $user_data["ignored_guests_whitelist"] = "";
        $user_data["turnoff_events"] = "";
        $user_data["turnoff_personal_appeals"] = "";
        $user_data["send_notifications"] = "";
        $user_data["last_host"] = "";
        $user_data["donot_notify_on_rates"] = "";
        
        $user_data["notify_about_new_users"] = "";
        $user_data["notify_citation"] = "";
        $user_data["notify_on_words"] = "";
        $user_data["custom_css"] = "";
        $user_data["custom_smiles"] = "";
        $user_data["skin_properties"] = array();
        
        $user_data["online"] = "";
        $user_data["blocked"] = "";
        $user_data["block_expires"] = "";
        $user_data["block_time_left"] = "";
        
        $user_data["carma_minus"] = "0";
        $user_data["carma_plus"] = "0";
        $user_data["carma_minus_weighed"] = "0";
        $user_data["carma_plus_weighed"] = "0";
        
        $user_data["registration_date"] = "";
        $user_data["last_visit_date"] = "";
        $user_data["ip"] = "";
        $user_data["last_ip"] = "";
        $user_data["ip_blocked"] = "";
        $user_data["last_ip_blocked"] = "";
        $user_data["skin"] = "";
        $user_data["interface_language"] = "";
        $user_data["read_marker"] = "";
        
        $user_data["time_zone"] = TIME_ZONE;
        
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        $dbw = System::getRODBWorker();
        if (!$dbw) {
            return false;
        }
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        
        if (!$dbw->execute_query("select
                             id, login, user_name, email, hide_email, message, homepage, signature, activated, approved, hidden, hide_comments, thematic_per_default,
                             rating_blocked, is_admin, privileged_topic_moderator, privileged, global_ban_allowed, show_ip, location, info, skin, interface_language, notify_citation,
                             notify_about_new_users, notify_on_words, words_to_notify, hide_pictures, hide_user_info, hide_user_avatars, hide_ignored, no_private_messages,
                             ignore_new_guests, ignore_guests_blacklist, ignore_guests_whitelist, 
                             last_host, send_notifications, donot_notify_on_rates, turnoff_events, turnoff_personal_appeals,
                             blocked, self_blocked, block_expires, time_zone, donot_hide_adult_pictures,
                             registration_date, last_visit_date, logout, ip, last_ip, custom_css, custom_smiles, skin_properties,
                             read_marker, 
                             
                             post_count,
                             like_count,
                             dislike_count,

                             100.0 * {$prfx}_user_statistics.like_count / case when {$prfx}_user_statistics.post_count > 1000 then {$prfx}_user_statistics.post_count else 1000 end like_count_weighed,
                             100.0 * {$prfx}_user_statistics.dislike_count / case when {$prfx}_user_statistics.post_count > 1000 then {$prfx}_user_statistics.post_count else 1000 end dislike_count_weighed,
                             
                             topic_count,
                             time_online
                             
                             from {$prfx}_user
                             
                             left join {$prfx}_user_statistics
                             on ({$prfx}_user.id = {$prfx}_user_statistics.user_id)

                             where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $user_data["id"] = $dbw->field_by_name("id");
            $user_data["user_name"] = $dbw->field_by_name("user_name");
            $user_data["user_login"] = $dbw->field_by_name("login");
            $user_data["user_email"] = $dbw->field_by_name("email");
            $user_data["location"] = Emoji::Decode($dbw->field_by_name("location"));
            $user_data["homepage"] = $dbw->field_by_name("homepage");
            $user_data["info"] = Emoji::Decode($dbw->field_by_name("info"));
            $user_data["info_formatted"] = $user_data["info"];
            $user_data["message"] = Emoji::Decode($dbw->field_by_name("message"));
            $user_data["signature"] = Emoji::Decode($dbw->field_by_name("signature"));
            $user_data["read_marker"] = $dbw->field_by_name("read_marker");
            
            $user_data["skin"] = val_or_empty($_SESSION["skin"]);
            if (!empty($_SESSION["skin_properties"])) {
                $user_data["skin_properties"] = $_SESSION["skin_properties"];
            } else {
                $user_data["skin_properties"] = array();
            }
            
            $user_data["custom_css"] = $dbw->field_by_name("custom_css");
            $user_data["custom_smiles"] = $dbw->field_by_name("custom_smiles");
            
            $user_data["interface_language"] = $dbw->field_by_name("interface_language");
            if (empty($user_data["interface_language"])) {
                $user_data["interface_language"] = current_language();
            }
            
            $user_data["hide_email"] = $dbw->field_by_name("hide_email");
            $user_data["activated"] = $dbw->field_by_name("activated");
            $user_data["approved"] = $dbw->field_by_name("approved");
            $user_data["hidden"] = $dbw->field_by_name("hidden");
            $user_data["rating_blocked"] = $dbw->field_by_name("rating_blocked");
            $user_data["time_zone"] = $dbw->field_by_name("time_zone");
            if (empty($user_data["time_zone"]) || !in_array($user_data["time_zone"], $GLOBALS['time_zones'])) {
                $user_data["time_zone"] = TIME_ZONE;
            }
            
            $user_data["is_admin"] = $dbw->field_by_name("is_admin");
            $user_data["privileged"] = $dbw->field_by_name("privileged");
            $user_data["privileged_topic_moderator"] = $dbw->field_by_name("privileged_topic_moderator");
            $user_data["global_ban_allowed"] = $dbw->field_by_name("global_ban_allowed");
            $user_data["show_ip"] = $dbw->field_by_name("show_ip");
            
            $user_data["hide_ignored"] = $dbw->field_by_name("hide_ignored");
            $user_data["hide_pictures"] = $dbw->field_by_name("hide_pictures");
            $user_data["donot_hide_adult_pictures"] = $dbw->field_by_name("donot_hide_adult_pictures");
            $user_data["hide_user_info"] = $dbw->field_by_name("hide_user_info");
            $user_data["hide_user_avatars"] = $dbw->field_by_name("hide_user_avatars");
            $user_data["no_private_messages"] = $dbw->field_by_name("no_private_messages");
            
            $user_data["hide_comments"] = $dbw->field_by_name("hide_comments");
            $user_data["thematic_per_default"] = $dbw->field_by_name("thematic_per_default");
            
            $user_data["ignores_all_guests"] = $dbw->field_by_name("ignore_guests_whitelist"); // will be cleared if whitelist is not empty
            $user_data["ignore_new_guests"] = $dbw->field_by_name("ignore_new_guests");
            $user_data["ignore_guests_blacklist"] = $dbw->field_by_name("ignore_guests_blacklist");
            $user_data["ignore_guests_whitelist"] = $dbw->field_by_name("ignore_guests_whitelist");
            
            $user_data["turnoff_events"] = $dbw->field_by_name("turnoff_events");
            $user_data["turnoff_personal_appeals"] = $dbw->field_by_name("turnoff_personal_appeals");
            $user_data["send_notifications"] = $dbw->field_by_name("send_notifications");
            $user_data["last_host"] = $dbw->field_by_name("last_host");
            $user_data["donot_notify_on_rates"] = $dbw->field_by_name("donot_notify_on_rates");
            
            $user_data["notify_about_new_users"] = $dbw->field_by_name("notify_about_new_users");
            $user_data["notify_citation"] = $dbw->field_by_name("notify_citation");
            $user_data["notify_on_words"] = $dbw->field_by_name("notify_on_words");
            $user_data["words_to_notify"] = $dbw->field_by_name("words_to_notify");
            
            $user_data["blocked"] = $dbw->field_by_name("blocked");
            $user_data["self_blocked"] = $dbw->field_by_name("self_blocked");
            
            $user_data["block_expires"] = "";
            $user_data["block_time_left"] = "";
            if ($dbw->field_by_name("block_expires")) {
                if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                    $user_data["blocked"] = "";
                } else {
                    $user_data["block_expires"] = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                    $user_data["block_time_left"] = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                }
            }
            
            $user_data["carma_minus"] = $dbw->field_by_name("dislike_count");
            $user_data["carma_plus"] = $dbw->field_by_name("like_count");
            
            $user_data["carma_minus_weighed"] = $dbw->field_by_name("dislike_count_weighed");
            $user_data["carma_plus_weighed"] = $dbw->field_by_name("like_count_weighed");
            
            if (empty($user_data["carma_minus"])) {
                $user_data["carma_minus"] = 0;
            }
            if (empty($user_data["carma_plus"])) {
                $user_data["carma_plus"] = 0;
            }
            
            $user_data["registration_date"] = smart_date2(xstrtotime($dbw->field_by_name("registration_date")));
            $user_data["last_visit_date"] = smart_date2(xstrtotime($dbw->field_by_name("last_visit_date")));
            
            $user_data["online"] = (xstrtotime($dbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $dbw->field_by_name("logout") == 0);
            
            $user_data["ip"] = $dbw->field_by_name("ip");
            $user_data["last_ip"] = $dbw->field_by_name("last_ip");
            
            $user_data["post_count"] = $dbw->field_by_name("post_count");
            if (empty($user_data["post_count"])) {
                $user_data["post_count"] = 0;
            }
            $user_data["topic_count"] = $dbw->field_by_name("topic_count");
            if (empty($user_data["topic_count"])) {
                $user_data["topic_count"] = 0;
            }
            $user_data["time_online"] = $dbw->field_by_name("time_online");
            if (empty($user_data["time_online"])) {
                $user_data["time_online"] = 0;
            }
        } else {
            $dbw->free_result();
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        $dbw->free_result();
        
        $this->format_manager->format_message_simple($dbw, $prfx, $user_data["info_formatted"], "message");
        postprocess_message($user_data["info_formatted"]);
        
        // statistics, use rodbw
        
        $start_date = $rodbw->format_date(time() - 7 * 24 * 3600);
        
        // current day may be no complete, exclude it from the statistics
        if (!$rodbw->execute_query("select sum(hits_count) hits_count, sum(post_count) post_count, sum(time_online) time_online
                                  from  {$prfx}_daily_statistics
                                  where user_id = $uid and dt > '$start_date'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $user_data["week_post_count"] = 0;
        $user_data["week_view_count"] = 0;
        $user_data["week_time_online"] = 0;
        if ($rodbw->fetch_row()) {
            $user_data["week_view_count"] = $rodbw->field_by_name("hits_count") / 7;
            $user_data["week_time_online"] = $rodbw->field_by_name("time_online") / 7;
            $user_data["week_post_count"] = $rodbw->field_by_name("post_count") / 7;
        }
        
        $rodbw->free_result();
        
        // statistics, use rodbw
        
        // time online today, we concider the time zone
        $start_date = $rodbw->format_datetime(time() - 24*3600);
        
        if (!$rodbw->execute_query("select duration
                                  from  {$prfx}_forum_hits
                                  where user_id = $uid and dt >= '$start_date'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $user_data["today_time_online"] = 0;
        while ($rodbw->fetch_row()) {
            $user_data["today_time_online"] += $rodbw->field_by_name("duration");
        }
        
        $rodbw->free_result();
        
        if (!$dbw->execute_query("select forum_id, name
                             from {$prfx}_forum
                             inner join {$prfx}_forum_moderator on ({$prfx}_forum.id = {$prfx}_forum_moderator.forum_id)
                             where user_id = $uid and {$prfx}_forum.name <> 'PRIVATE_MESSAGES' and deleted <> 1
                             order by name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $user_data["moderator"][$dbw->field_by_name("forum_id")] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        $now = $dbw->format_datetime(time());
        $forum_restriction_appendix = $this->get_forum_restriction_appendix($rodbw, $prfx);
        if (!empty($forum_restriction_appendix)) {
            $forum_restriction_appendix = "and " . $forum_restriction_appendix;
        }
        
        if (!$dbw->execute_query("select forum_id, name, block_expires
                             from {$prfx}_forum
                             inner join {$prfx}_forum_blocked on ({$prfx}_forum.id = {$prfx}_forum_blocked.forum_id)
                             where user_id = $uid and deleted <> 1 and
                             (block_expires is NULL or block_expires > '$now')
                             $forum_restriction_appendix
                             order by name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $private_fid = "";
        $private_record = array();
        
        while ($dbw->fetch_row()) {
            $block_expires = "";
            $block_time_left = "";
            if ($dbw->field_by_name("block_expires")) {
                $block_expires = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                $block_time_left = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
            }
            
            if ($dbw->field_by_name("name") == "PRIVATE_MESSAGES") {
                $private_fid = $dbw->field_by_name("forum_id");
                
                $private_record = array(
                    "fid_for_url" => "private",
                    "name" => text("PrivateTopics"),
                    "block_expires" => $block_expires,
                    "block_time_left" => $block_time_left
                );
                
                continue;
            }
            
            $user_data["forum_blocked"][$dbw->field_by_name("forum_id")] = array(
                "fid_for_url" => $dbw->field_by_name("forum_id"),
                "name" => $dbw->field_by_name("name"),
                "block_expires" => $block_expires,
                "block_time_left" => $block_time_left
            );
        }
        
        if (!empty($private_record)) {
            $user_data["forum_blocked"][$private_fid] = $private_record;
        }
        
        $dbw->free_result();
        
        if (!$dbw->execute_query("select forum_id, name
                             from {$prfx}_forum
                             inner join {$prfx}_forum_member on ({$prfx}_forum.id = {$prfx}_forum_member.forum_id)
                             where user_id = $uid and {$prfx}_forum.name <> 'PRIVATE_MESSAGES' and deleted <> 1
                             order by name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $user_data["forum_access"][$dbw->field_by_name("forum_id")] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        // ip blocked
        
        if (!empty($user_data["ip"])) {
            $ip = $dbw->escape($user_data["ip"]);
            if (!$dbw->execute_query("select ip
                               from {$prfx}_ip_blocked
                               where ip = '$ip' and (block_expires is NULL or block_expires > '$now')")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $user_data["ip_blocked"] = 1;
            }
            
            $dbw->free_result();
            
            if (!$dbw->execute_query("select block_level from {$prfx}_tor_ips where ip = '$ip'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $user_data["tor_ip"] = 1;
                
                $user_data["tor_ip_block_level"] = "tor_allow";
                if (!empty($settings["block_tor_ips"])) {
                    $user_data["tor_ip_block_level"] = "tor_block_write";
                }
                
                switch ($dbw->field_by_name("block_level")) {
                    case 1:
                        $user_data["tor_ip_block_level"] = "tor_block_write";
                        break;
                    
                    case 2:
                        $user_data["tor_ip_block_level"] = "tor_block_read";
                        break;
                    
                    case 3:
                        $user_data["tor_ip_block_level"] = "tor_allow";
                        break;
                }
            }
            
            $dbw->free_result();
        }
        
        if (!empty($user_data["last_ip"])) {
            $ip = $dbw->escape($user_data["last_ip"]);
            if (!$dbw->execute_query("select ip
                               from {$prfx}_ip_blocked
                               where ip = '$ip' and (block_expires is NULL or block_expires > '$now')")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $user_data["last_ip_blocked"] = 1;
            }
            
            $dbw->free_result();
            
            if (!$dbw->execute_query("select block_level from {$prfx}_tor_ips where ip = '$ip'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $user_data["last_tor_ip"] = 1;
                
                $user_data["last_tor_ip_block_level"] = "tor_allow";
                if (!empty($settings["block_tor_ips"])) {
                    $user_data["last_tor_ip_block_level"] = "tor_block_write";
                }
                
                switch ($dbw->field_by_name("block_level")) {
                    case 1:
                        $user_data["last_tor_ip_block_level"] = "tor_block_write";
                        break;
                    
                    case 2:
                        $user_data["last_tor_ip_block_level"] = "tor_block_read";
                        break;
                    
                    case 3:
                        $user_data["last_tor_ip_block_level"] = "tor_allow";
                        break;
                }
            }
            
            $dbw->free_result();
        }
        
        // guest ips
        
        $ip_rules = array();
        $ips = "";
        $matched_rule = "";
        $this->get_white_list_ips($ips, $ip_rules);
        
        if ($this->is_ip_whitelisted($user_data["ip"], $ip_rules, $matched_rule)) {
            $user_data["guest_ip_whitelisted"] = 1;
        }
        
        if ($this->is_ip_whitelisted($user_data["last_ip"], $ip_rules, $matched_rule)) {
            $user_data["last_ip_whitelisted"] = 1;
        }
        
        // preferred forums
        
        $query = "select id
                  from {$prfx}_forum
                  where 
                  exists (select 1 from {$prfx}_ignored_forums where user_id = $uid) and
                  id not in (select forum_id from {$prfx}_ignored_forums where user_id = $uid) and {$prfx}_forum.name <> 'PRIVATE_MESSAGES'";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("id");
            $user_data["preferred_forums"][$fid] = $fid;
        }
        
        $dbw->free_result();
        
        // user avatar
        
        $exts = AttachmentManager::get_picture_exts();
        foreach ($exts as $ext) {
            if (file_exists(APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . $ext)) {
                $user_data["avatar"] = "user_data/avatars/" . $uid . "." . $ext;
                $user_data["avatar_ctime"] = filectime(APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . $ext);
                
            }
            
            if (file_exists(APPLICATION_ROOT . "user_data/photos/" . $uid . "." . $ext)) {
                $user_data["photo"] = "user_data/photos/" . $uid . "." . $ext;
                $user_data["photo_ctime"] = filectime(APPLICATION_ROOT . "user_data/photos/" . $uid . "." . $ext);
                
                $img_info = array();
                if (get_image_info(APPLICATION_ROOT . "user_data/photos/" . $uid . "." . $ext, $img_info)) {
                    $user_data["photo_width"] = $img_info["width"];
                }
            }
        }
        
        if (!empty($user_data["hidden"]) && !$this->global_ban_allowed() && $uid != $this->get_user_id()) {
            $user_data["location"] = "";
            $user_data["homepage"] = "";
            $user_data["info"] = "";
            $user_data["avatar"] = "";
            $user_data["photo"] = "";
        }
        
        // ignored guests
        
        $query = "select guest_name, whitelist
              from {$prfx}_ignored_guests
              where user_id = $uid
              order by guest_name";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $guest_name = $dbw->field_by_name("guest_name");
            if ($guest_name == "admin") {
                $guest_name = text("MasterAdministrator");
            }
            
            if ($dbw->field_by_name("whitelist")) {
                $user_data["ignored_guests_whitelist"] .= $guest_name . "\n";
            } else {
                $user_data["ignored_guests_blacklist"] .= $guest_name . "\n";
            }
        }
        
        $dbw->free_result();
        
        $user_data["ignored_guests_whitelist"] = trim($user_data["ignored_guests_whitelist"]);
        $user_data["ignored_guests_blacklist"] = trim($user_data["ignored_guests_blacklist"]);
        
        // if the user ignores single guests, not all, we have to reset the ignores_all_guests to false
        
        if (!empty($user_data["ignored_guests_whitelist"])) {
            $user_data["ignores_all_guests"] = false;
        }
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = 0;
        }
        
        // is ignored by the current user or guest
        
        if (!empty($_SESSION["ignored_users"][$uid])) {
            $user_data["ignored"] = true;
            
            if (!$dbw->execute_query("select comment
                             from {$prfx}_ignored_users
                             where user_id = $current_uid and ignored_user_id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $user_data["ignored_comment"] = Emoji::Decode($dbw->field_by_name("comment"));
            }
            
            $dbw->free_result();
            
            if (!empty($user_data["ignored_comment"])) {
                $this->format_manager->format_message_simple($dbw, $prfx, $user_data["ignored_comment"], "message");
                postprocess_message($user_data["ignored_comment"]);
            }
        }
        
        // is hidden by the current user or guest
        
        if (!empty($_SESSION["hidden_profiles"][$uid])) {
            $user_data["hidden_by_me"] = true;
        }
        
        // is ignoring me
        
        $query = "select 1
              from {$prfx}_ignored_users
              where user_id = $uid and ignored_user_id = $current_uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $user_data["ignoring_me"] = true;
        }
        
        $dbw->free_result();
        
        // is hiding me
        
        $query = "select 1
              from {$prfx}_hide_profile
              where user_id = $uid and hidden_user_id = $current_uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $user_data["hiding_me"] = true;
        }
        
        $dbw->free_result();
        
        // is subscribed by me
        
        $query = "select 1
              from {$prfx}_user_subscription
              where user_id = $current_uid and subscribed_user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $user_data["subscribed"] = true;
        }
        
        $dbw->free_result();
        
        // my notes
        
        if (!$dbw->execute_query("select comment
                             from {$prfx}_user_comment
                             where user_id = $current_uid and commented_user_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $user_data["my_notes"] = Emoji::Decode($dbw->field_by_name("comment"));
            $user_data["my_notes_bb"] = $user_data["my_notes"];
        }
        
        $dbw->free_result();
        
        if (!empty($user_data["my_notes"])) {
            $this->format_manager->format_message_simple($dbw, $prfx, $user_data["my_notes"], "message");
            postprocess_message($user_data["my_notes"]);
        }
        
        if ($current_uid == $uid) {
            $user_data["my_profile"] = true;
        }
        
        if (!empty($current_uid)) {
            measure_action_time("get user data");
            
            return true;
        }
        
        // is ignoring me as a guest
        
        $guest_name = $dbw->escape($this->get_user_name());

        // the mode is ignore listed guests
        
        $query = "select user_id
              from {$prfx}_ignored_guests
              where user_id in (select id from {$prfx}_user where id = $uid and ignore_guests_blacklist = 1) and guest_name = '$guest_name' and whitelist = 0";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            if ($user_data["read_marker"] != $READ_MARKER) {
                $user_data["ignoring_me"] = 1;
            }
        }
        
        $dbw->free_result();
        
        // the mode is ignore all except listed guests
        
        $query = "select id
              from
              (select id from {$prfx}_user where id = $uid and ignore_guests_whitelist = 1) except_user
              left join {$prfx}_ignored_guests on (except_user.id = {$prfx}_ignored_guests.user_id and guest_name = '$guest_name' and whitelist = 1)
              group by id
              having count(user_id) = 0
              ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            if ($user_data["read_marker"] != $READ_MARKER) {
                $user_data["ignoring_me"] = 2;
            }
        }
        
        $dbw->free_result();
        
        // the mode is ignore new guests
        
        if (!empty($user_data["ignore_new_guests"]) &&
            !empty($_SESSION["ignored_new_guests"][$READ_MARKER]) &&
            $user_data["read_marker"] != $READ_MARKER) {
            $user_data["ignoring_me"] = 3;
        }        
        
        measure_action_time("get user data");
        
        return true;
    } // get_user_data
    
    //-----------------------------------------------------------------
    function display_name_to_name($author_name)
    {
        foreach ($GLOBALS['LANGUAGES'] as $lng) {
            if ($author_name == try_translate("MasterAdministrator", $lng)) {
                return "admin";
            }
        }
        
        return $author_name;
    } // display_name_to_name
    
    //-----------------------------------------------------------------
    function get_display_name($guest_name)
    {
        if ($guest_name == "admin") {
            return text("MasterAdministrator");
        }
        
        return $guest_name;
    } // get_display_name
    
    //-----------------------------------------------------------------
    function get_bot_data_for_view($bot, &$bot_data)
    {
        global $settings;
        
        $exts = AttachmentManager::get_picture_exts();
        
        $bot_data["user_name"] = $bot;
        if (empty($bot_data["user_name"])) {
            $bot_data["user_name"] = text("Guest");
            MessageHandler::setError(text("ErrUserNameEmpty"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $bot = $dbw->escape($bot);
        
        if (!$dbw->execute_query($this->get_query_last_guest_activity($prfx, "where bot = '$bot'"))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $bot_data["last_ip"] = "";
        
        if ($dbw->fetch_row()) {
            $bot_data["last_visit_date"] = smart_date2(xstrtotime($dbw->field_by_name("dt")));
            $bot_data["last_ip"] = $dbw->field_by_name("ip");
        }
        
        $dbw->free_result();
        
        if (empty($bot_data["last_visit_date"])) {
            if (!$dbw->execute_query($this->get_query_guest_last_activity($prfx, "#bot#" . $bot))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $bot_data["last_visit_date"] = smart_date2(xstrtotime($dbw->field_by_name("dt")));
                $bot_data["last_ip"] = $dbw->field_by_name("ip");
            }
            
            $dbw->free_result();
        }
        
        if (empty($bot_data["last_visit_date"])) {
            $bot_data["last_visit_date"] = text("Never");
        }
        
        if (!empty($bot_data["last_ip"])) {
            $ip_rules = array();
            $ips = "";
            $matched_rule = "";
            $this->get_white_list_ips($ips, $ip_rules);
            
            if ($this->is_ip_whitelisted($bot_data["last_ip"], $ip_rules, $matched_rule)) {
                $bot_data["last_ip_whitelisted"] = 1;
            }
            
            $now = $dbw->format_datetime(time());
            
            $ip = $dbw->escape($bot_data["last_ip"]);
            if (!$dbw->execute_query("select ip
                               from {$prfx}_ip_blocked
                               where ip = '$ip' and (block_expires is NULL or block_expires > '$now')")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $bot_data["last_ip_blocked"] = 1;
            }
            
            $dbw->free_result();
            
            if (!$dbw->execute_query("select block_level from {$prfx}_tor_ips where ip = '$ip'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $bot_data["last_tor_ip"] = 1;
                
                $bot_data["last_tor_ip_block_level"] = "tor_allow";
                if (!empty($settings["block_tor_ips"])) {
                    $bot_data["last_tor_ip_block_level"] = "tor_block_write";
                }
                
                switch ($dbw->field_by_name("block_level")) {
                    case 1:
                        $bot_data["last_tor_ip_block_level"] = "tor_block_write";
                        break;
                    
                    case 2:
                        $bot_data["last_tor_ip_block_level"] = "tor_block_read";
                        break;
                    
                    case 3:
                        $bot_data["last_tor_ip_block_level"] = "tor_allow";
                        break;
                }
            }
            
            $dbw->free_result();
        }
        
        return true;
    } // get_bot_data_for_view
    
    //-----------------------------------------------------------------
    function get_guest_data_for_view($guest, $aname, &$guest_data)
    {
        global $settings;
        global $READ_MARKER;
        
        $exts = AttachmentManager::get_picture_exts();
        
        $guest_data["user_name"] = $guest;
        if (empty($guest_data["user_name"])) {
            $guest_data["user_name"] = text("Guest");
            MessageHandler::setError(text("ErrUserNameEmpty"));
            return false;
        }
        
        $guest_data["aname"] = $aname;
        
        foreach ($exts as $ext) {
            if (file_exists(APPLICATION_ROOT . "user_data/avatars/" . $aname . "." . $ext)) {
                $guest_data["avatar"] = "user_data/avatars/" . $aname . "." . $ext;
                $guest_data["avatar_ctime"] = filectime(APPLICATION_ROOT . "user_data/avatars/" . $aname . "." . $ext);
            }
        }
        
        $guest_data["hidden_by_me"] = !empty($_SESSION["hidden_guest_profiles"][$aname]);
        $guest_data["guest_ignored"] = $this->is_guest_ignored($guest, "");
        
        // viewing own profile
        if ($aname == System::generateHash($READ_MARKER . $guest, SALT_KEY) || ($aname == "admin" && $this->is_master_admin())) {
            $guest_data["my_profile"] = true;
            $guest_data["hidden_by_me"] = false;
            $guest_data["guest_ignored"] = false;
        }        
        
        $guest_data["guest_subscribed"] = !empty($_SESSION["subscribed_authors"]["g_" . utf8_strtolower($guest)]);
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $guest = $dbw->escape($guest);
        
        if (!$dbw->execute_query($this->get_query_last_guest_activity($prfx, "where guest_name = '$guest'"))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $guest_data["last_ip"] = "";
        
        if ($dbw->fetch_row()) {
            $guest_data["last_visit_date"] = smart_date2(xstrtotime($dbw->field_by_name("dt")));
            $guest_data["last_ip"] = $dbw->field_by_name("ip");
        }
        
        $dbw->free_result();
        
        $ip_rules = array();
        $ips = "";
        $matched_rule = "";
        $this->get_white_list_ips($ips, $ip_rules);
        
        if ($this->is_ip_whitelisted($guest_data["last_ip"], $ip_rules, $matched_rule)) {
            $guest_data["last_ip_whitelisted"] = 1;
        }
        
        if (empty($guest_data["last_visit_date"])) {
            if (!$dbw->execute_query($this->get_query_guest_last_activity($prfx, $guest))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $guest_data["last_visit_date"] = smart_date2(xstrtotime($dbw->field_by_name("dt")));
                $guest_data["last_ip"] = $dbw->field_by_name("ip");
            }
            
            $dbw->free_result();
        }
        
        if (empty($guest_data["last_visit_date"])) {
            $guest_data["last_visit_date"] = text("Never");
        }
        
        if (!empty($guest_data["last_ip"])) {
            $now = $dbw->format_datetime(time());
            
            $ip = $dbw->escape($guest_data["last_ip"]);
            if (!$dbw->execute_query("select ip
                               from {$prfx}_ip_blocked
                               where ip = '$ip' and (block_expires is NULL or block_expires > '$now')")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $guest_data["last_ip_blocked"] = 1;
            }
            
            $dbw->free_result();
            
            if (!$dbw->execute_query("select block_level from {$prfx}_tor_ips where ip = '$ip'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $guest_data["last_tor_ip"] = 1;
                
                $guest_data["last_tor_ip_block_level"] = "tor_allow";
                if (!empty($settings["block_tor_ips"])) {
                    $guest_data["last_tor_ip_block_level"] = "tor_block_write";
                }
                
                switch ($dbw->field_by_name("block_level")) {
                    case 1:
                        $guest_data["last_tor_ip_block_level"] = "tor_block_write";
                        break;
                    
                    case 2:
                        $guest_data["last_tor_ip_block_level"] = "tor_block_read";
                        break;
                    
                    case 3:
                        $guest_data["last_tor_ip_block_level"] = "tor_allow";
                        break;
                }
            }
            
            $dbw->free_result();
        }
        
        return true;
    } // get_guest_data_for_view
    
    //-----------------------------------------------------------------
    function get_guest_ignore_info($author, $aname, &$ignores, &$ignored, &$ignored_topics, &$hides, &$hidden)
    {
        global $READ_MARKER;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (empty($author)) {
            $author = val_or_empty($_SESSION["user_name"]);
            
            // works only for own profile view
            if (!empty($_SESSION["hidden_profiles"])) {
                $in_list = $dbw->escape(implode(",", $_SESSION["hidden_profiles"]));
                $query = "select id, user_name
                from {$prfx}_user
                where id in ($in_list)
                order by user_name";
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                while ($dbw->fetch_row()) {
                    $hides[$dbw->field_by_name("id")] = $dbw->field_by_name("user_name");
                }
                
                $dbw->free_result();
            }
            
            // works only for own profile view
            if (!empty($_SESSION["ignored_users"])) {
                $in_list = $dbw->escape(implode(",", $_SESSION["ignored_users"]));
                $query = "select id, user_name
                from {$prfx}_user
                where id in ($in_list)
                order by user_name";
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                while ($dbw->fetch_row()) {
                    $ignores[$dbw->field_by_name("id")] = $dbw->field_by_name("user_name");
                }
                
                $dbw->free_result();
            }
            
            // works only for own profile view
            if (!empty($_SESSION["ignored_topics"])) {
                $ignored_in_list = $dbw->escape(implode(",", $_SESSION["ignored_topics"]));
                
                if (!$dbw->execute_query("select {$prfx}_topic.id, forum_id, {$prfx}_topic.name, {$prfx}_forum.name forum_name
                               from {$prfx}_topic
                               inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
                               inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                               where
                               {$prfx}_forum.name <> 'PRIVATE_MESSAGES' and ({$prfx}_forum.deleted + {$prfx}_topic.deleted + {$prfx}_topic.is_private) = 0 and
                               {$prfx}_topic.id in ($ignored_in_list)
                               order by {$prfx}_topic_statistics.last_message_id desc
                               ")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                while ($dbw->fetch_row()) {
                    $ignored_topics[] = array(
                        "tid" => $dbw->field_by_name("id"),
                        "fid" => $dbw->field_by_name("forum_id"),
                        "name" => $dbw->field_by_name("name"),
                        "forum_name" => $dbw->field_by_name("forum_name")
                    );
                }
                
                $dbw->free_result();
            }
        }
        
        $author = $dbw->escape($author);
        
        // 1) Users ignoring all guests
        // 2) Users ignoring this guest
        // 3) Users ignoring all guests except some.
        
        $query = "
              select id, user_name
              from
              {$prfx}_user where ignore_guests_whitelist = 1 and id not in (select user_id from {$prfx}_ignored_guests where whitelist = 1)
              
              union
              
              select id, user_name
              from
              {$prfx}_user
              inner join {$prfx}_ignored_guests on ({$prfx}_user.id = {$prfx}_ignored_guests.user_id and whitelist = 0)
              where
              ignore_guests_blacklist = 1 and guest_name = '$author'
              
              union
              
              select id, user_name
              from
              (select id, user_name from {$prfx}_user where ignore_guests_whitelist = 1) except_user
              left join {$prfx}_ignored_guests on (except_user.id = {$prfx}_ignored_guests.user_id and guest_name = '$author' and whitelist = 1)
              group by id, user_name
              having count(user_id) = 0
              order by user_name
              ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $ignored[$dbw->field_by_name("id")] = $dbw->field_by_name("user_name");
        }
        
        $dbw->free_result();
        
        if (empty($aname)) {
            return true;
        }
        
        $aname = $dbw->escape($aname);
        $query = "select id, user_name
                from {$prfx}_user
                where id in (select user_id from {$prfx}_hide_guest_avatars where avatar = '$aname')
                order by user_name";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $hidden[$dbw->field_by_name("id")] = $dbw->field_by_name("user_name");
        }
        
        $dbw->free_result();
        
        return true;
    } // get_guest_ignore_info
    
    //-----------------------------------------------------------------
    function get_user_names($in_list, &$user_names)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $in_list = $dbw->escape($in_list);
        
        $query = "select id, user_name
              from {$prfx}_user
              where id in ($in_list)
              order by user_name";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $user_names[$dbw->field_by_name("id")] = $dbw->field_by_name("user_name");
        }
        
        $dbw->free_result();
        
        return true;
    } // get_user_names
    
    //-----------------------------------------------------------------
    function get_user_ignore_info($uid, &$ignores, &$ignored)
    {
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($uid);
        
        $query = "select id, user_name
              from {$prfx}_user
              where id in (select ignored_user_id from {$prfx}_ignored_users where user_id = $uid)
              order by user_name";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ignores[$rodbw->field_by_name("id")] = $rodbw->field_by_name("user_name");
        }
        
        $rodbw->free_result();
        
        $query = "select id, user_name
              from {$prfx}_user
              where id in (select user_id from {$prfx}_ignored_users where ignored_user_id = $uid)
              order by user_name";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ignored[$rodbw->field_by_name("id")] = $rodbw->field_by_name("user_name");
        }
        
        $rodbw->free_result();
        
        measure_action_time("get user ignore info");
        
        return true;
    } // get_user_ignore_info
    
    //-----------------------------------------------------------------
    function get_user_hide_info($uid, &$hides, &$hidden)
    {
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($uid);
        
        $query = "select id, user_name
              from {$prfx}_user
              where id in (select hidden_user_id from {$prfx}_hide_profile where user_id = $uid)
              order by user_name";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $hides[$rodbw->field_by_name("id")] = $rodbw->field_by_name("user_name");
        }
        
        $rodbw->free_result();
        
        $query = "select id, user_name
              from {$prfx}_user
              where id in (select user_id from {$prfx}_hide_profile where hidden_user_id = $uid)
              order by user_name";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $hidden[$rodbw->field_by_name("id")] = $rodbw->field_by_name("user_name");
        }
        
        $rodbw->free_result();
        
        measure_action_time("get user hide info");
        
        return true;
    } // get_user_hide_info
    
    //-----------------------------------------------------------------
    function get_last_user_rates($uid, &$rate_info)
    {
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $uid = $dbw->escape($uid);
        
        // last 30 days
        $start = $dbw->format_datetime(time() - 30 * 24 * 3600);
        
        $moderator_restriction = "";
        if (!$this->is_admin()) {
            $current_uid = $dbw->escape($this->get_user_id());
            $moderator_restriction = "and forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $current_uid)";
        }
        
        $query = "select {$prfx}_user.id, {$prfx}_user.user_name, rating, count(*) cnt
              from {$prfx}_post_rating
              inner join {$prfx}_post on ({$prfx}_post_rating.post_id = {$prfx}_post.id)
              inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
              inner join {$prfx}_user on ({$prfx}_user.id = {$prfx}_post.user_id)
              where {$prfx}_post_rating.user_id = $uid and {$prfx}_post_rating.dt > '$start'
              $moderator_restriction
              group by {$prfx}_user.id, {$prfx}_user.user_name, rating
              order by max({$prfx}_post_rating.dt) desc";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $uid = $dbw->field_by_name("id");
            
            $type = $dbw->field_by_name("rating") == -1 ? "dislikes" : "likes";
            
            $rate_info[$uid]["user_name"] = $dbw->field_by_name("user_name");
            $rate_info[$uid][$type] = $dbw->field_by_name("cnt");
        }
        
        $dbw->free_result();
        
        return true;
    } // get_last_user_rates
    
    //-----------------------------------------------------------------
    function get_total_rating_info($fid, $period, &$total_likes, &$total_dislikes, &$total_rates)
    {
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $now_rounded = mktime(0, 0, 0, date("n"), date("j"), date("Y"));
        
        switch ($period) {
            case "last_month":
                $start_date_rounded = xstrtotime("-1 month", $now_rounded);
                break;
            case "last_half_year":
                $start_date_rounded = xstrtotime("-6 months", $now_rounded);
                break;
            case "last_year":
                $start_date_rounded = xstrtotime("-1 year", $now_rounded);
                break;
            case "whole_period":
                $start_date_rounded = 0;
                break;
            default:
                $start_date_rounded = xstrtotime("-6 months", $now_rounded);
                break;
        }
        
        $forum_appendix = "";
        $post_date_appendix = "";
        
        if (!empty($fid)) {
            $fid = $rodbw->escape($fid);
            $forum_appendix = "and forum_id = $fid";
        }
        
        if (!empty($start_date_rounded)) {
            $dt = $rodbw->format_datetime($start_date_rounded);
            $post_date_appendix .= " and {$prfx}_post.creation_date >= '$dt'";
        }
        
        $where = "where is_private < 1
                  $forum_appendix
                  $post_date_appendix
                  ";
        
        if (!$rodbw->execute_query($this->get_query_rating_info($prfx, $where))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $total_likes = $rodbw->field_by_name("likes");
            $total_dislikes = $rodbw->field_by_name("dislikes");
            $total_rates = $rodbw->field_by_name("rates");
        }
        
        $rodbw->free_result();
        
        if (empty($total_likes)) {
            $total_likes = 0;
        }
        
        if (empty($total_dislikes)) {
            $total_dislikes = 0;
        }
        
        if (empty($total_rates)) {
            $total_rates = 0;
        }
        
        measure_action_time("get total rating info");
        
        return true;
    } // get_total_rating_info
    
    //-----------------------------------------------------------------
    function get_user_rating_info(
        $uid,
        &$likes,
        &$liked,
        &$total_likes,
        &$total_liked,
        &$dislikes,
        &$disliked,
        &$total_dislikes,
        &$total_disliked
    ) {
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($uid);
        
        $query = "select {$prfx}_user.id, {$prfx}_user.user_name, {$prfx}_user.read_marker, last_visit_date, logout,
              sum(case when rating = 1 then 1 else 0 end) likes,
              sum(case when rating = -1 then 1 else 0 end) dislikes
              from {$prfx}_post_rating
              inner join {$prfx}_post on ({$prfx}_post_rating.post_id = {$prfx}_post.id)
              inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
              inner join {$prfx}_user on ({$prfx}_user.id = {$prfx}_post.user_id)
              where {$prfx}_post_rating.user_id = $uid and is_private < 1
              group by {$prfx}_user.id, {$prfx}_user.user_name, last_visit_date, logout
              order by count(*) desc";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $total_likes = 0;
        $total_dislikes = 0;
        while ($rodbw->fetch_row()) {
            $user_ignored = false;
            $user_online = (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0);
            $user_id = $rodbw->field_by_name("id");
            $user = $rodbw->field_by_name("user_name");
            $user_readmarker = $rodbw->field_by_name("read_marker");
            $this->clear_if_ignored($user_id, $user, $user_readmarker, $user_online, $user_ignored, -1, -1);
            
            if ($rodbw->field_by_name("likes") > 0) {
                $total_likes += $rodbw->field_by_name("likes");
                $likes[] = array(
                    "user_id" => $user_id,
                    "user" => $user,
                    "user_name" => $rodbw->field_by_name("user_name"),
                    "user_ignored" => $user_ignored,
                    "user_online" => $user_online,
                    "cnt" => $rodbw->field_by_name("likes")
                );
            }
            
            if ($rodbw->field_by_name("dislikes") > 0) {
                $total_dislikes += $rodbw->field_by_name("dislikes");
                $dislikes[] = array(
                    "user_id" => $user_id,
                    "user" => $user,
                    "user_name" => $rodbw->field_by_name("user_name"),
                    "user_ignored" => $user_ignored,
                    "user_online" => $user_online,
                    "cnt" => $rodbw->field_by_name("dislikes")
                );
            }
        }
        
        $rodbw->free_result();
        
        usort($likes, "cmp_rates");
        usort($dislikes, "cmp_rates");
        
        $query = "select {$prfx}_user.id, {$prfx}_user.user_name, {$prfx}_user.read_marker, last_visit_date, logout,
              sum(case when rating = 1 then 1 else 0 end) likes,
              sum(case when rating = -1 then 1 else 0 end) dislikes
              from {$prfx}_post_rating
              inner join {$prfx}_user on ({$prfx}_user.id = {$prfx}_post_rating.user_id)
              inner join {$prfx}_post on ({$prfx}_post_rating.post_id = {$prfx}_post.id)
              inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
              where {$prfx}_post.user_id = $uid and is_private < 1
              group by {$prfx}_user.id, {$prfx}_user.user_name, last_visit_date, logout
              order by count(*) desc";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $user_ignored = false;
            $user_online = (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0);
            $user_id = $rodbw->field_by_name("id");
            $user = $rodbw->field_by_name("user_name");
            $user_readmarker = $rodbw->field_by_name("read_marker");
            $this->clear_if_ignored($user_id, $user, $user_readmarker, $user_online, $user_ignored, -1, -1);
            
            if ($rodbw->field_by_name("likes") > 0) {
                $total_liked += $rodbw->field_by_name("likes");
                $liked[] = array(
                    "user_id" => $user_id,
                    "user" => $user,
                    "user_name" => $rodbw->field_by_name("user_name"),
                    "user_ignored" => $user_ignored,
                    "user_online" => $user_online,
                    "cnt" => $rodbw->field_by_name("likes")
                );
            }
            
            if ($rodbw->field_by_name("dislikes") > 0) {
                $total_disliked += $rodbw->field_by_name("dislikes");
                $disliked[] = array(
                    "user_id" => $user_id,
                    "user" => $user,
                    "user_name" => $rodbw->field_by_name("user_name"),
                    "user_ignored" => $user_ignored,
                    "user_online" => $user_online,
                    "cnt" => $rodbw->field_by_name("dislikes")
                );
            }
        }
        
        $rodbw->free_result();
        
        usort($liked, "cmp_rates");
        usort($disliked, "cmp_rates");
        
        measure_action_time("get user rating info");
        
        return true;
    } // get_user_rating_info
    
    //-----------------------------------------------------------------
    function get_browser_stat(&$browser_stat, &$os_stat, &$bot_stat)
    {
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        $now = $rodbw->format_datetime(time());

        $start = $rodbw->format_datetime(time() - 30*60);
        
        $query = "delete from {$prfx}_browser_statistics_cache where tm < '$start'";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }

        $query = "select count(*) cnt from
                    {$prfx}_browser_statistics_cache
                    order by cnt desc";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $exist = 0;
        if ($rodbw->fetch_row()) {
            $exist = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        debug_message("Exists: " . $exist);

        if (!$exist) {
            $query = "insert into {$prfx}_browser_statistics_cache
                      (tm, tp, name, cnt)
                      select '$now', 'browser', browser, count(*) cnt from
                        (select read_marker, browser
                        from {$prfx}_forum_hits
                        where browser is not NULL
                        group by read_marker, browser) stat
                        group by browser";
            
            if (!$rodbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $query = "insert into {$prfx}_browser_statistics_cache
                      (tm, tp, name, cnt)
                      select '$now', 'os', os, count(*) cnt from
                        (select read_marker, os
                        from {$prfx}_forum_hits
                        where os is not NULL
                        group by read_marker, os) stat
                        group by os";
            
            if (!$rodbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $query = "insert into {$prfx}_browser_statistics_cache
                      (tm, tp, name, cnt)
                      select '$now', 'bot', bot, count(*) cnt from
                        (select read_marker, bot
                        from {$prfx}_forum_hits
                        where bot is not NULL
                        group by read_marker, bot) stat
                        group by bot";
            
            if (!$rodbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
        }

        $query = "select name, cnt from
                    {$prfx}_browser_statistics_cache
                    where tp = 'browser'
                    order by cnt desc";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $total = 0;
        while ($rodbw->fetch_row()) {
            $total += $rodbw->field_by_name("cnt");
            $browser_stat[$rodbw->field_by_name("name")] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        foreach ($browser_stat as $browser => $val) {
            $browser_stat[$browser] = 100 * $val / $total;
        }
        
        $query = "select name, cnt from
                    {$prfx}_browser_statistics_cache
                    where tp = 'os'
                    order by cnt desc";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $total = 0;
        while ($rodbw->fetch_row()) {
            $total += $rodbw->field_by_name("cnt");
            $os_stat[$rodbw->field_by_name("name")] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        foreach ($os_stat as $os => $val) {
            $os_stat[$os] = 100 * $val / $total;
        }
        
        $query = "select name, cnt from
                    {$prfx}_browser_statistics_cache
                    where tp = 'bot'
                    order by cnt desc";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $total = 0;
        while ($rodbw->fetch_row()) {
            $total += $rodbw->field_by_name("cnt");
            $bot_stat[$rodbw->field_by_name("name")] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        foreach ($bot_stat as $bot => $val) {
            $bot_stat[$bot] = 100 * $val / $total;
        }
        
        measure_action_time("get browser stat");
        
        return true;
    } // get_browser_stat
    
    //-----------------------------------------------------------------
    function save_profile()
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        global $settings;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        if (reqvar_empty("user_email")) {
            MessageHandler::setError(text("ErrEmailEmpty"));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("user_email"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        if (utf8_strlen(reqvar("user_email")) > 250) {
            MessageHandler::setError(sprintf(text("ErrEmailTooLong"), 250));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        $domain = strtolower(reqvar("user_email"));
        if (preg_match("/[^@]+@(.*)/", $domain, $matches)) {
            $domain = $matches[1];
        }
        if (!$this->check_email_domain($domain)) {
            MessageHandler::setError(sprintf(text("ErrEmailDomainNotAllowed"), $domain));
            MessageHandler::setErrorElement("user_email");
            return false;
        }

        if (Emoji::HasEmoji(reqvar("password"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        if (utf8_strlen(reqvar("location")) > 100) {
            MessageHandler::setError(sprintf(text("ErrLocationTooLong"), 100));
            MessageHandler::setErrorElement("location");
            return false;
        }
        
        if (utf8_strlen(reqvar("homepage")) > 150) {
            MessageHandler::setError(sprintf(text("ErrHomepageTooLong"), 150));
            MessageHandler::setErrorElement("homepage");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("homepage"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("homepage");
            return false;
        }
        
        $_REQUEST["message"] = preg_replace("/(\r\n|\n\r|\n\n){2,}/", "\n\n", val_or_empty($_REQUEST["message"]));
        $_REQUEST["signature"] = preg_replace("/(\r\n|\n\r|\n\n){2,}/", "\n\n", val_or_empty($_REQUEST["signature"]));
        $_REQUEST["info"] = preg_replace("/(\r\n|\n\r|\n\n){2,}/", "\n\n", val_or_empty($_REQUEST["info"]));
        
        if (utf8_strlen(reqvar("message")) > 200) {
            MessageHandler::setError(sprintf(text("ErrMessageTooLong"), 200));
            MessageHandler::setErrorElement("message");
            return false;
        }
        
        if (utf8_strlen(reqvar("signature")) > 1000) {
            MessageHandler::setError(sprintf(text("ErrSignatureTooLong"), 1000));
            MessageHandler::setErrorElement("signature");
            return false;
        }
        
        if (utf8_strlen(reqvar("info")) > 3000) {
            MessageHandler::setError(sprintf(text("ErrInformationTooLong"), 3000));
            MessageHandler::setErrorElement("info");
            return false;
        }
        
        $additional_updates = "";
        
        // check e-mail
        
        if (!$dbw->execute_query("select
                             email_hash, password_hash
                             from {$prfx}_user
                             where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            
            return false;
        }
        
        $password_hash = "";
        $old_email_hash = "";
        $activation_hash = "";
        
        if ($dbw->fetch_row()) {
            $password_hash = $dbw->field_by_name("password_hash");
            $old_email_hash = $dbw->field_by_name("email_hash");
        }
        
        $dbw->free_result();
        
        // check unique
        $user_email_hash = quotes_or_null($dbw->escape($this->hash_email(reqvar("user_email"))));

        $query = "select 1 from {$prfx}_user where email_hash = $user_email_hash and id <> $uid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setError(text("ErrUserEmailInUseShort"));
            MessageHandler::setErrorElement("user_email");
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // check the password if necessary
        
        if ($old_email_hash != $this->hash_email(reqvar("user_email")) || !reqvar_empty("password")) {
            if (reqvar_empty("current_password")) {
                MessageHandler::setWarning(text("ErrCurrentPasswordRequired"));
                MessageHandler::setErrorElement("current_password");
                return false;
            }
            
            if (System::generateHash(reqvar("current_password"), SALT_KEY) != $password_hash && System::generateHashOld(reqvar("current_password"), SALT_KEY) != $password_hash) {
                MessageHandler::setError(text("ErrWrongPassword"));
                MessageHandler::setErrorElement("current_password");
                return false;
            }
        } // current password required
        
        if (!reqvar_empty("password")) {
            if (reqvar("password") != reqvar("password2")) {
                MessageHandler::setError(text("ErrPwdNotIdentical"));
                MessageHandler::setErrorElement("password");
                return false;
            }
        }
        
        $words_to_notify = reqvar("words_to_notify");
        
        $words_array = preg_split("/[\r\n]+/", $words_to_notify, -1, PREG_SPLIT_NO_EMPTY);
        
        $max_allowed = 50;
        if (count($words_array) > $max_allowed) {
            MessageHandler::setError(sprintf(text("ErrNotifyOnWordsLimit"), $max_allowed, 2, 30));
            MessageHandler::setErrorElement("words_to_notify");
            return false;
        }
        
        foreach ($words_array as $word) {
            if (utf8_strlen($word) < 2 || utf8_strlen($word) > 30) {
                MessageHandler::setError(sprintf(text("ErrNotifyOnWordsLimit"), $max_allowed, 2, 30));
                MessageHandler::setErrorElement("words_to_notify");
                return false;
            }
        }
        
        $words_to_notify = implode("\n", $words_array);
        
        $user_email = quotes_or_null($dbw->escape(reqvar("user_email")));
        $location = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("location"))));
        $homepage = quotes_or_null($dbw->escape(reqvar("homepage")));
        $message = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("message"))));
        $signature = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("signature"))));
        $info = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("info"))));
        $skin = quotes_or_null($dbw->escape(reqvar("skin")));
        $custom_css = quotes_or_null($dbw->escape(reqvar("custom_css")));
        $interface_language = quotes_or_null($dbw->escape(reqvar("interface_language")));
        $time_zone = quotes_or_null($dbw->escape(reqvar("time_zone")));
        
        $custom_smiles = reqvar("custom_smiles");
        $this->handle_custom_smiles($custom_smiles, $uid);
        $custom_smiles = quotes_or_null($custom_smiles);
        
        $hide_email = reqvar_empty("hide_email") ? "0" : "1";
        $hide_ignored = reqvar_empty("hide_ignored") ? "0" : "1";
        $hide_pictures = reqvar_empty("hide_pictures") ? "0" : "1";
        $donot_hide_adult_pictures = reqvar_empty("donot_hide_adult_pictures") ? "0" : "1";
        $hide_user_info = reqvar_empty("hide_user_info") ? "0" : "1";
        $hide_user_avatars = reqvar_empty("hide_user_avatars") ? "0" : "1";
        $no_private_messages = reqvar_empty("no_private_messages") ? "0" : "1";
        $hide_comments = reqvar_empty("hide_comments") ? "0" : "1";
        $thematic_per_default = reqvar_empty("thematic_per_default") ? "0" : "1";
        $turnoff_events = reqvar_empty("turnoff_events") ? "0" : "1";
        $turnoff_personal_appeals = reqvar_empty("turnoff_personal_appeals") ? "0" : "1";
        $send_notifications = reqvar_empty("send_notifications") ? "0" : "1";
        $donot_notify_on_rates = reqvar_empty("donot_notify_on_rates") ? "0" : "1";
        $notify_about_new_users = reqvar_empty("notify_about_new_users") ? "0" : "1";
        $notify_citation = reqvar_empty("notify_citation") ? "0" : "1";
        
        $notify_on_words = reqvar_empty("notify_on_words") ? "0" : "1";
        $words_to_notify = quotes_or_null($dbw->escape($words_to_notify));
        
        $ignore_new_guests = reqvar_empty("ignore_new_guests") ? "0" : "1";
        $ignore_guests_blacklist = reqvar_empty("ignore_guests_blacklist") ? "0" : "1";
        $ignore_guests_whitelist = reqvar_empty("ignore_guests_whitelist") ? "0" : "1";
        
        if ($old_email_hash != $this->hash_email(reqvar("user_email"))) {
            $activation_hash = System::generateHash(reqvar("user_login") . rand(100000, 900000), SALT_KEY);
            $activation_hash_db = quotes_or_null($dbw->escape($activation_hash));
            $activation_expire = $dbw->format_datetime(time() + 3600);
            
            $additional_updates .= "ACTIVATED = 0,
                              ACTIVATION_HASH = $activation_hash_db,
                              ACTIVATION_EXPIRE = '$activation_expire',
                             ";
        }
        
        // skin properties
        $skin_properties_input = array();
        if (!empty($_REQUEST["skin_properties_placeholders"])) {
            $skin_properties_input = $_REQUEST["skin_properties_placeholders"];
        }
        
        $skin_properties = "";
        if (!empty($_REQUEST["skin_properties"])) {
            foreach ($_REQUEST["skin_properties"] as $skin_name => $properties) {
                foreach ($properties as $property_name => $property_value) {
                    $skin_properties_input[$skin_name][$property_name] = $property_value;
                }
            }
            
            $skin_properties = $dbw->escape(array_to_json($skin_properties_input));
        }
        
        $skin_properties = quotes_or_null($skin_properties);
        
        $now = $dbw->format_datetime(time());
        
        $autologin_hash_was_active = "";
        if (!reqvar_empty("password")) {
            $password_hash = System::generateHash(reqvar("password"), SALT_KEY);
            $password_hash_db = quotes_or_null($dbw->escape($password_hash));
            
            if (get_cookie("autologin") != "") {
                $autologin_hash_was_active = System::generateHash(val_or_empty($_SESSION["user_login"]) . reqvar("password") . time() . rand(100000, 900000), SALT_KEY);
            }
            
            $autologin_hash_db = quotes_or_null($dbw->escape($autologin_hash_was_active));
            
            $additional_updates .= "password_hash = $password_hash_db,
                                    autologin_hash = $autologin_hash_db,
                                    last_logout_date = '$now',";
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "update {$prfx}_user set
              $additional_updates
              email = $user_email,
              email_hash = $user_email_hash,
              location = $location,
              time_zone = $time_zone,
              homepage = $homepage,
              message = $message,
              signature = $signature,
              info = $info,
              skin = $skin,
              custom_css = $custom_css,
              custom_smiles = $custom_smiles,
              skin_properties = $skin_properties,
              interface_language = $interface_language,
              hide_email = $hide_email,
              hide_ignored = $hide_ignored,
              hide_pictures = $hide_pictures,
              donot_hide_adult_pictures = $donot_hide_adult_pictures,
              hide_user_info = $hide_user_info,
              hide_user_avatars = $hide_user_avatars,
              no_private_messages = $no_private_messages,
              hide_comments = $hide_comments,
              thematic_per_default = $thematic_per_default,
              ignore_new_guests = $ignore_new_guests,
              ignore_guests_blacklist = $ignore_guests_blacklist,
              ignore_guests_whitelist = $ignore_guests_whitelist,
              turnoff_events = $turnoff_events,
              turnoff_personal_appeals = $turnoff_personal_appeals,
              notify_about_new_users = $notify_about_new_users,
              notify_citation = $notify_citation,
              notify_on_words = $notify_on_words,
              words_to_notify = $words_to_notify,
              send_notifications = $send_notifications,
              donot_notify_on_rates = $donot_notify_on_rates
              where id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // ignored guests
        
        $blacklisted_guest_exists = false;
        
        $query = "delete from {$prfx}_ignored_guests where user_id = $uid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!reqvar_empty("ignored_guests_blacklist")) {
            $ignored_guests = preg_split("/[\n\r]+/", Emoji::Encode(reqvar("ignored_guests_blacklist")), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($ignored_guests as $guest) {
                shrink_spaces($guest);

                $guest = $this->display_name_to_name($guest);
                
                if ($guest == "") {
                    continue;
                }
                
                $blacklisted_guest_exists = true;
                
                $guest = $dbw->escape($guest);
                
                $query = "insert into {$prfx}_ignored_guests
                 (user_id, guest_name, whitelist)
                 select $uid, '$guest', 0 from {$prfx}_dual
                 where '$guest' not in (select guest_name from {$prfx}_ignored_guests where user_id = $uid and whitelist = 0)
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        if (!$blacklisted_guest_exists) {
            $query = "update {$prfx}_user set ignore_guests_blacklist = 0 where id = $uid";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!reqvar_empty("ignored_guests_whitelist")) {
            $ignored_guests = preg_split("/[\n\r]+/", Emoji::Encode(reqvar("ignored_guests_whitelist")), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($ignored_guests as $guest) {
                shrink_spaces($guest);
                
                $guest = $this->display_name_to_name($guest);

                if ($guest == "") {
                    continue;
                }
                
                $guest = $dbw->escape($guest);
                
                $query = "insert into {$prfx}_ignored_guests
                 (user_id, guest_name, whitelist)
                 select $uid, '$guest', 1 from {$prfx}_dual
                 where '$guest' not in (select guest_name from {$prfx}_ignored_guests where user_id = $uid and whitelist = 1)
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        // ignored users
        
        if (!empty($_REQUEST["remove_from_ignore"])) {
            $in_list = $dbw->escape(implode(",", $_REQUEST["remove_from_ignore"]));
            $query = "delete from {$prfx}_ignored_users
                where user_id = $uid and ignored_user_id in ($in_list)";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }

            $events = array();
            
            if (!$dbw->execute_query("select id, user_name from {$prfx}_user where id in ($in_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $events[] = array(
                    "action" => "ignore_user",
                    "author_id" => $dbw->field_by_name("id"),
                    "author_name" => $dbw->field_by_name("user_name")
                );
            }
            
            $dbw->free_result();
            
            foreach($events as $event_data) {
                if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }

        // preferred forums
        
        $query = "delete from {$prfx}_ignored_forums where user_id = $uid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!empty($_REQUEST["preferred_forums"])) {
            $in_list = $dbw->escape(implode(",", $_REQUEST["preferred_forums"]));

            $query = "insert into {$prfx}_ignored_forums
                (user_id, forum_id)
                select $uid, id from {$prfx}_forum where id not in ($in_list) and {$prfx}_forum.name <> 'PRIVATE_MESSAGES'";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // self block
        $period = 24 * 3600 * (int)reqvar("days") + 3600 * (int)reqvar("hours") + 60 * (int)reqvar("minutes");
        if (!empty($period)) {
            if ($period > 24 * 3600 * 30 + 3600 * 23 + 60 * 59) {
                $period = 24 * 3600 * 30 + 3600 * 23 + 60 * 59;
            }
            
            if ($this->is_moderator()) {
                MessageHandler::setError(text("ErrModeratorBlockNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            $event_data = array();
            $event_data["author_id"] = $uid;
            $event_data["author_name"] = $this->get_user_name();
            $event_data["author_email"] = reqvar("user_email");
            $event_data["action_expires"] = time() + $period;
            $event_data["action"] = "block_user";
            
            $block_reason = "MSG(" . self::get_reason_lang_code("author_wish") . ")";
            $event_data["comment"] = $block_reason;
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $block_reason = $dbw->escape($block_reason);
            $action_expires = "'" . $dbw->format_datetime(time() + $period) . "'";
            if (!$dbw->execute_query("update {$prfx}_user set blocked = 1, self_blocked = 1, block_expires = $action_expires, block_reason = '$block_reason' where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$this->handle_topic_unignorance($dbw, $prfx, $uid)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $block_message = "";
        if (!empty($period)) {
            $block_message = text("MsgUserBlocked");
        }
        
        $pwd_change_message = "";
        if (!reqvar_empty("password")) {
            $_SESSION["login_date"] = time();
            
            if (!empty($autologin_hash_was_active)) {
                set_cookie("autologin", $autologin_hash_was_active, time() + 30 * 24 * 3600);
            }
            
            $pwd_change_message = text("MsgPasswordChangeWarning");
        }
        
        $email_change_message = "";
        $email_change_message2 = "";
        if ($old_email_hash != $this->hash_email(reqvar("user_email"))) {
            $email_change_message = text("MsgNewActivationRequired");
            $email_change_message2 = text("RegistrationWarning");
        }
        
        if (!empty($pwd_change_message) || !empty($email_change_message) || !empty($block_message)) {
            MessageHandler::setWarning(text("MsgDataSaved"));
            
            if (!empty($block_message)) {
                MessageHandler::setWarning($block_message);
            }
            
            if (!empty($pwd_change_message)) {
                MessageHandler::setWarning($pwd_change_message);
            }
            
            if (!empty($email_change_message)) {
                $_SESSION["not_activated_notified"] = true;
                MessageHandler::setWarning($email_change_message);
                MessageHandler::setWarning($email_change_message2);
            }
        } else {
            MessageHandler::setInfo(text("MsgDataSaved"));
        }
        
        $this->update_user_status();
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        $this->handle_avatar($uid);
        $this->handle_photo($uid);
        
        // send email about self blocking
        if (!empty($period) && !empty($_SESSION["send_notifications"])) {
            $params = array();
            $params["{user_name}"] = reqvar("user_name");
            $params["{block_expires}"] = $event_data["action_expires"];
            $params["{site_url}"] = get_host_address() . get_url_path();
            
            $this->email_manager->send_email($settings["default_sender"], reqvar("user_email"), "email_user_self_blocked.txt", $params, current_language());
        }
        
        if ($old_email_hash != $this->hash_email(reqvar("user_email"))) {
            $_SESSION["activated"] = false;
            $_SESSION["user_email"] = reqvar("user_email");
            
            $params = array();
            
            $params["{user_login}"] = $_SESSION["user_login"];
            $params["{user_name}"] = $_SESSION["user_name"];
            $params["{user_email}"] = $_SESSION["user_email"];
            $params["{user_email}"] = $_SESSION["user_email"];
            
            $params["{site_url}"] = get_host_address() . get_url_path();
            $params["{activation_url}"] = get_host_address() . get_url_path() . "activate.php?code=" . xrawurlencode($activation_hash);
            
            $this->email_manager->send_email($settings["default_sender"], reqvar("user_email"), "email_activation.txt", $params, current_language());
        }
        
        return true;
    } // save_profile
    
    //-----------------------------------------------------------------
    function request_activation()
    {
        global $settings;
        
        if (empty($_SESSION["user_id"])) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        $activation_hash = System::generateHash(reqvar("user_login") . rand(100000, 900000), SALT_KEY);
        $activation_hash_db = quotes_or_null($dbw->escape($activation_hash));
        $activation_expire = $dbw->format_datetime(time() + 3600);
        
        $query = "update {$prfx}_user set
              activation_hash = $activation_hash_db,
              activation_expire = '$activation_expire'
              where id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $params = array();
        
        $params["{user_login}"] = $_SESSION["user_login"];
        $params["{user_name}"] = $_SESSION["user_name"];
        $params["{user_email}"] = $_SESSION["user_email"];
        
        $params["{site_url}"] = get_host_address() . get_url_path();
        $params["{activation_url}"] = get_host_address() . get_url_path() . "activate.php?code=" . xrawurlencode($activation_hash);
        
        $this->email_manager->send_email($settings["default_sender"], $_SESSION["user_email"], "email_activation.txt", $params, current_language());
        
        MessageHandler::setInfo(text("MsgActivationLinkSent"));
        
        return true;
    } // request_activation
    
    //-----------------------------------------------------------------
    function handle_custom_smiles(&$custom_smiles, $uid)
    {
        return $this->attachment_manager->handle_custom_smiles($custom_smiles, $uid);
    } // handle_custom_smiles
    
    //-----------------------------------------------------------------
    function handle_avatar($uid)
    {
        return $this->attachment_manager->handle_avatar($uid);
    } // handle_avatar
    
    //-----------------------------------------------------------------
    function handle_photo($uid)
    {
        return $this->attachment_manager->handle_photo($uid);
    } // handle_photo
    
    //-----------------------------------------------------------------
    function save_user()
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape(reqvar("uid"));
        
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        if (reqvar_empty("user_login")) {
            MessageHandler::setError(text("ErrUserLoginEmpty"));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("user_login"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        if (utf8_strlen(reqvar("user_login")) > $settings["max_user_name_symbols"]) {
            MessageHandler::setError(sprintf(text("ErrUserLoginTooLong"), $settings["max_user_name_symbols"]));
            MessageHandler::setErrorElement("user_login");
            return false;
        }
        
        shrink_spaces($_REQUEST["user_name"]);
        
        if (reqvar_empty("user_name")) {
            MessageHandler::setError(text("ErrUserNameEmpty"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("user_name"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        if (utf8_strlen(reqvar("user_name")) > $settings["max_user_name_symbols"]) {
            MessageHandler::setError(sprintf(text("ErrUserNameTooLong"), $settings["max_user_name_symbols"]));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        if (reqvar_empty("user_email")) {
            MessageHandler::setError(text("ErrEmailEmpty"));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("user_email"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        if (utf8_strlen(reqvar("user_email")) > 250) {
            MessageHandler::setError(sprintf(text("ErrEmailTooLong"), 250));
            MessageHandler::setErrorElement("user_email");
            return false;
        }
        
        if (utf8_strlen(reqvar("location")) > 100) {
            MessageHandler::setError(sprintf(text("ErrLocationTooLong"), 100));
            MessageHandler::setErrorElement("location");
            return false;
        }
        
        if (utf8_strlen(reqvar("homepage")) > 150) {
            MessageHandler::setError(sprintf(text("ErrHomepageTooLong"), 150));
            MessageHandler::setErrorElement("homepage");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("homepage"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("homepage");
            return false;
        }
        
        $_REQUEST["message"] = preg_replace("/(\r\n|\n\r|\n\n){2,}/", "\n\n", val_or_empty($_REQUEST["message"]));
        $_REQUEST["signature"] = preg_replace("/(\r\n|\n\r|\n\n){2,}/", "\n\n", val_or_empty($_REQUEST["signature"]));
        $_REQUEST["info"] = preg_replace("/(\r\n|\n\r|\n\n){2,}/", "\n\n", val_or_empty($_REQUEST["info"]));
        
        if (utf8_strlen(reqvar("message")) > 200) {
            MessageHandler::setError(sprintf(text("ErrMessageTooLong"), 200));
            MessageHandler::setErrorElement("message");
            return false;
        }
        
        if (utf8_strlen(reqvar("signature")) > 700) {
            MessageHandler::setError(sprintf(text("ErrSignatureTooLong"), 700));
            MessageHandler::setErrorElement("signature");
            return false;
        }
        
        if (utf8_strlen(reqvar("info")) > 1000) {
            MessageHandler::setError(sprintf(text("ErrInformationTooLong"), 1000));
            MessageHandler::setErrorElement("info");
            return false;
        }
        
        $additional_updates = "";
        
        $user_login = quotes_or_null($dbw->escape(reqvar("user_login")));
        
        // check unique
        
        $query = "select 1 from {$prfx}_user where login = $user_login and id <> $uid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row() || strtolower(reqvar("user_login")) == "admin") {
            MessageHandler::setError(text("ErrUserLoginInUse"));
            MessageHandler::setErrorElement("user_login");
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // check the user_name
        
        $check = $this->check_name_usage(reqvar("user_name"), $uid, false);
        if ($check == 1) {
            MessageHandler::setError(text("ErrUserNameInUse"));
            MessageHandler::setErrorElement("user_name");
            return false;
        } elseif ($check == 2) {
            MessageHandler::setError(text("ErrUserNameReserved"));
            MessageHandler::setErrorElement("user_name");
            return false;
        } elseif ($check == 3) {
            MessageHandler::setError(text("ErrUserNameProtected"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        // check the email
        
        $user_email_hash = quotes_or_null($dbw->escape($this->hash_email(reqvar("user_email"))));

        $query = "select 1 from {$prfx}_user where email_hash = $user_email_hash and id <> $uid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setError(text("ErrUserEmailInUseShort"));
            MessageHandler::setErrorElement("user_email");
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // check the password if necessary
        
        if (Emoji::HasEmoji(reqvar("password"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        if (!reqvar_empty("password")) {
            if (reqvar("password") != reqvar("password2")) {
                MessageHandler::setError(text("ErrPwdNotIdentical"));
                MessageHandler::setErrorElement("password");
                return false;
            }
        }
        
        // old approval state and name
        if (!$dbw->execute_query("select user_name, approved, is_admin, last_host, interface_language from {$prfx}_user where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $last_host = "";
        $lng = current_language();
        $old_approved = "0";
        $old_user_name = "0";
        $old_is_admin = "0";
        while ($dbw->fetch_row()) {
            $last_host = $dbw->field_by_name("last_host");
            $old_approved = $dbw->field_by_name("approved");
            $lng = $dbw->field_by_name("interface_language");
            $old_user_name = $dbw->field_by_name("user_name");
            $old_is_admin = $dbw->field_by_name("is_admin");
        }
        
        $dbw->free_result();
        
        $user_name = quotes_or_null($dbw->escape(reqvar("user_name")));
        $user_name_hash = quotes_or_null($dbw->escape($this->hash_user_name(reqvar("user_name"))));
        
        $user_email = quotes_or_null($dbw->escape(reqvar("user_email")));

        $location = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("location"))));
        $homepage = quotes_or_null($dbw->escape(reqvar("homepage")));
        $message = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("message"))));
        $signature = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("signature"))));
        $info = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("info"))));
        
        $activated = reqvar_empty("activated") ? "0" : "1";
        $approved = reqvar_empty("approved") ? "0" : "1";
        
        $now = $dbw->format_datetime(time());
        
        if (!reqvar_empty("password")) {
            $password_hash = quotes_or_null($dbw->escape(System::generateHash(reqvar("password"), SALT_KEY)));
            
            $additional_updates .= "password_hash = $password_hash,
                                    autologin_hash = NULL,
                                    last_logout_date = '$now',
                                    logout = 1,";
        }
        
        $is_admin = "0";
        if ($this->is_master_admin()) {
            $is_admin = reqvar_empty("is_admin") ? "0" : "1";
            
            $additional_updates .= "IS_ADMIN = $is_admin,";
        }
        
        if ($this->is_admin()) {
            $privileged = reqvar_empty("privileged") ? "0" : "1";
            $privileged_topic_moderator = reqvar_empty("privileged_topic_moderator") ? "0" : "1";
            
            $additional_updates .= "privileged = $privileged,";
            $additional_updates .= "privileged_topic_moderator = $privileged_topic_moderator,";
            
            $global_ban_allowed = reqvar_empty("global_ban_allowed") ? "0" : "1";
            
            $additional_updates .= "GLOBAL_BAN_ALLOWED = $global_ban_allowed,";
            
            $show_ip = reqvar_empty("show_ip") ? "0" : "1";
            
            $additional_updates .= "SHOW_IP = $show_ip,";
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "update {$prfx}_user set
              $additional_updates
              user_name = $user_name,
              user_name_hash = $user_name_hash,
              login = $user_login,
              email = $user_email,
              email_hash = $user_email_hash,
              location = $location,
              homepage = $homepage,
              message = $message,
              signature = $signature,
              info = $info,
              activated = $activated,
              approved = $approved
              where id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($this->is_master_admin() && $is_admin != $old_is_admin) {
            $event_data["author_id"] = $uid;
            $event_data["author_name"] = reqvar("user_name");
            
            if ($old_is_admin == "0") {
                $event_data["action"] = "make_administrator";
            } else {
                $event_data["action"] = "revoke_administrator";
            }
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if ($old_user_name != reqvar("user_name")) {
            if (!$dbw->execute_query("update {$prfx}_topic set author = $user_name where user_id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("update {$prfx}_post set author = $user_name where user_id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $event_data["action"] = "rename_user";
            $event_data["author_id"] = $uid;
            $event_data["author_name"] = reqvar("user_name");
            $event_data["comment"] = "MSG(PreviousName): " . $old_user_name;
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // final existing moderators
        
        $existing_administrators = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language, last_host
                             from {$prfx}_user
                             where id <> $uid and is_admin = 1
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $existing_administrators[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        if ($this->get_user_id() == $uid) {
            $_SESSION["activated"] = $activated;
            $_SESSION["user_email"] = reqvar("user_email");
            $_SESSION["user_name"] = reqvar("user_name");
            $_SESSION["user_login"] = reqvar("user_login");
        }
        
        $this->handle_avatar($uid);
        $this->handle_photo($uid);
        
        MessageHandler::setInfo(text("MsgDataSaved"));
        
        // mail notification, if approved
        
        $params = array();
        $params["{user_name}"] = $old_user_name;
        $params["{site_url}"] = get_host_address($last_host) . get_url_path();
        
        if ($approved == 1 && $old_approved == 0) {
            $this->email_manager->send_email($settings["default_sender"], reqvar("user_email"), "email_user_approved.txt", $params, $lng);
        }
        
        if ($old_user_name != reqvar("user_name")) {
            $params["{administrator_name}"] = $this->get_user_name();
            $params["{old_user_name}"] = $old_user_name;
            $params["{new_user_name}"] = reqvar("user_name");
            
            $email_template = "email_user_renamed.txt";
            $event_code = "MsgEventNickRenamed";
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params);
            
            $this->email_manager->send_email($settings["default_sender"], reqvar("user_email"), $email_template, $params, $lng);
        }
        
        if ($this->is_master_admin() && $old_is_admin != $is_admin) {
            if ($old_is_admin == "0") {
                $email_template = "email_grant_administrator.txt";
                $event_code = "MsgEventGrantAdministrator";
                
                $email_template2 = "email_administrator_added.txt";
                $event_code2 = "MsgEventNewAdministratorAdded";
            } else {
                $email_template = "email_revoke_administrator.txt";
                $event_code = "MsgEventRevokeAdministrator";
                
                $email_template2 = "email_administrator_removed.txt";
                $event_code2 = "MsgEventAdministratorRemoved";
            }
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params);
            
            $this->email_manager->send_email($settings["default_sender"], reqvar("user_email"), $email_template, $params, $lng);
            
            foreach ($existing_administrators as $id => $minfo) {
                // if the actor and the receiver are the same, do not notify
                if ($id == $this->get_user_id()) {
                    continue;
                }
                
                $params["{user_name}"] = $minfo["user_name"];
                
                $params["{administrator_id}"] = $uid;
                $params["{administrator_name}"] = reqvar("user_name");
                
                $this->log_user_event($id, $this->get_user_id(), $this->get_user_name(), $event_code2, $params);
                
                if (!empty($minfo["user_email"]) && !empty($minfo["send_notifications"])) {
                    $this->email_manager->send_email($settings["default_sender"], $minfo["user_email"], $email_template2, $params, $minfo["interface_language"]);
                }
            }
        }
        
        return true;
    } // save_user
    
    //-----------------------------------------------------------------
    function delete_user()
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape(reqvar("uid"));
        
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        if ($this->get_user_id() == $uid) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        $event_data = array();
        
        if (!$dbw->execute_query("select id, user_name, email, send_notifications, interface_language, last_host from {$prfx}_user where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $event_data["interface_language"] = current_language();
        
        if ($dbw->fetch_row()) {
            $event_data["action"] = "delete_user";
            
            $event_data["author_id"] = $dbw->field_by_name("id");
            $event_data["author_name"] = $dbw->field_by_name("user_name");
            $event_data["author_email"] = $dbw->field_by_name("email");
            $event_data["send_notifications"] = $dbw->field_by_name("send_notifications");
            $event_data["last_host"] = $dbw->field_by_name("last_host");
            $event_data["interface_language"] = $dbw->field_by_name("interface_language");
        }
        
        $dbw->free_result();
        
        $forums = array();
        $topics = array();
        
        if (!$dbw->execute_query("select forum_id, topic_id
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where {$prfx}_post.user_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $forums[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("forum_id");
            
            $topics[$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
        }
        
        $dbw->free_result();
        
        $affected_users = array();
        
        $query = "select
                {$prfx}_user.id, email, user_name, last_host, donot_notify_on_rates, send_notifications, interface_language, count(*) cnt
                from {$prfx}_post
                inner join {$prfx}_post_rating on ({$prfx}_post_rating.post_id = {$prfx}_post.id)
                inner join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                where {$prfx}_post_rating.user_id = $uid
                group by {$prfx}_user.id, email, user_name, last_host, donot_notify_on_rates, send_notifications, interface_language
                ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $affected_users[$dbw->field_by_name("id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "cnt" => $dbw->field_by_name("cnt"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "donot_notify_on_rates" => $dbw->field_by_name("donot_notify_on_rates"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // Evaluate before deletion
        $du_anonym_appendix = "";
        $du_anonym_appendix2 = "";
        $this->get_anonym_appendixes($uid, $du_anonym_appendix, $du_anonym_appendix2);
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$this->cascade_delete_user($dbw, "id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        // find topics with 0 posts
        
        $topics_with_no_posts_list = "";

        foreach ($topics as $tid) {
            if (!$dbw->execute_query($this->get_query_empty_topic($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $topics_with_no_posts_list .= $dbw->field_by_name("id") . ",";
            }
            
            $dbw->free_result();
        }

        $topic_notifications = array();

        $topics_with_no_posts_list = trim($topics_with_no_posts_list, ",");
        
        if (!empty($topics_with_no_posts_list)) {
            if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                             {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name,
                             email, user_name, author, last_host, send_notifications
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                             where {$prfx}_topic.id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $topics_with_no_posts = array();

            while ($dbw->fetch_row()) {
                $topics_with_no_posts[$dbw->field_by_name("id")] = array(
                    "topic_id" => $dbw->field_by_name("id"),
                    "topic_name" => $dbw->field_by_name("topic_name"),
                    "forum_id" => $dbw->field_by_name("forum_id"),
                    "forum_name" => $dbw->field_by_name("forum_name"),
                    "author_id" => $dbw->field_by_name("user_id"),
                    "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                    "author_email" => $dbw->field_by_name("email"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "action" => "delete_topic",
                    "comment" => reqvar("comment")
                );
            }
            
            $dbw->free_result();            
            
            if (!$this->collect_notifiable_topic_users($dbw, $topic_notifications, $topics_with_no_posts_list, "delete_topic")) {
                return false;
            }

            if (!$dbw->execute_query("delete from {$prfx}_topic_moderator where topic_id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }

            foreach ($topics_with_no_posts as $tid => $tdata) {
                if (!$this->log_moderator_event($dbw, $prfx, $tdata)) {
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        } // if topics with no posts exist            

        // update post count in the affected topics

        foreach ($topics as $tid) {
            if (!$dbw->execute_query($this->get_query_post_cnt_update($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
    
        // update topic count in the affected forums

        foreach ($forums as $fid) {
            if (!$dbw->execute_query($this->get_query_topic_cnt_update($prfx, $fid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        foreach ($affected_users as $uid => $uinfo) {
            if (!$dbw->execute_query($this->get_query_user_rate_cnt_update($prfx, $uid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgUserDeleted"));
        
        // mail notification
        
        $params = array();
        $params["{moderator_name}"] = $this->get_user_name();
        
        foreach ($affected_users as $auid => $uinfo) {
            // if the actor and the receiver are the same, do not notify
            if ($auid == $this->get_user_id()) {
                continue;
            }
            
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($auid, $anonym_appendix, $anonym_appendix2);
            
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{site_url}"] = get_host_address($uinfo["last_host"]) . get_url_path();
            $params["{rated_user_id}"] = $event_data["author_id"];
            $params["{rated_user_name}"] = $event_data["author_name"];
            $params["{count}"] = $uinfo["cnt"];
            
            $this->log_user_event($auid, $this->get_user_id(), $this->get_user_name(), "MsgEventPostRatesDeleted{$anonym_appendix2}", $params, null, !empty($uinfo["donot_notify_on_rates"]));
            
            if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"]) && empty($uinfo["donot_notify_on_rates"])) {
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_post_rates_deleted{$anonym_appendix}.txt", $params, $uinfo["interface_language"]);
            }
        }
        
        if (empty($event_data["author_email"]) || empty($event_data["send_notifications"])) {
            return true;
        }
        
        $params = array();
        
        $params["{user_name}"] = $event_data["author_name"];
        $params["{moderator_name}"] = $this->get_user_name();
        $params["{site_url}"] = get_host_address($event_data["last_host"]) . get_url_path();
        
        $this->email_manager->send_email($settings["default_sender"], $event_data["author_email"], "email_user_deleted{$du_anonym_appendix}.txt", $params, $event_data["interface_language"]);
        
        $this->do_topic_notifications($dbw, $prfx, $topic_notifications, $settings, "delete_topic");

        return true;
    } // delete_user
    
    //-----------------------------------------------------------------
    function get_user_sort_name()
    {
        global $settings;
        
        if (empty($_SESSION["last_user_sort"])) {
            $_SESSION["last_user_sort"] = "new_members";
        }
        
        switch ($_SESSION["last_user_sort"]) {
            case "max_count":
                return text("MaxMessagesCount");
                break;
            case "active_readers":
                return text("ActiveReaders");
                break;
            case "blocked_users":
                return text("BlockedUsers");
                break;
            case "left_users":
                return text("LeftUsers");
                break;
            case "moderators":
                return text("ForumModerators");
                break;
            case "administrators":
                return text("Administrators");
                break;
            case "active_writers":
                return text("ActiveWriters");
                break;
            case "regulars":
                return text("Regulars");
                break;
            case "best_rating":
                if (!empty($settings["rates_active"])) {
                    return text("BestRating");
                }
                break;
            case "worst_rating":
                if (!empty($settings["dislikes_active"])) {
                    return text("WorstRating");
                }
                break;
            case "last_activity":
                if (empty($settings["hide_online_status"])) {
                    return text("LastActivity");
                }
                break;
        }
        
        return text("NewUsers");
    } // get_user_sort_name
    
    //-----------------------------------------------------------------
    function collect_notifiable_topic_users(&$dbw, &$topic_notifications, $topic_in_list, $action)
    {
        if ($action != "delete_topic" && $action != "close_topic" && $action != "restore_topic" && $action != "open_topic") {
            return true;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                             {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name, is_private,
                             email, user_name, author, last_host, send_notifications, interface_language
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                             where {$prfx}_topic.id in ($topic_in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topic_notifications[$dbw->field_by_name("id")]["topic_data"] = array(
                "topic_id" => $dbw->field_by_name("id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "is_private" => $dbw->field_by_name("is_private"),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_id_for_url" => $dbw->field_by_name("is_private") ? "private" : $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "action" => $action
            );
        }
        
        $dbw->free_result();
        
        // get list of the subscribers
        
        if (!$dbw->execute_query("select user_id, topic_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_topic_subscription
                             inner join {$prfx}_user on ({$prfx}_topic_subscription.user_id = {$prfx}_user.id)
                             where topic_id in ($topic_in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topic_notifications[$dbw->field_by_name("topic_id")]["subscribers"][$dbw->field_by_name("user_id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // get list of the moderators
        
        if (!$dbw->execute_query("select user_id, topic_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_topic_moderator
                             inner join {$prfx}_user on ({$prfx}_topic_moderator.user_id = {$prfx}_user.id)
                             where topic_id in ($topic_in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topic_notifications[$dbw->field_by_name("topic_id")]["moderators"][$dbw->field_by_name("user_id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // get list of the participants
        
        if (!$dbw->execute_query("select participant_id, topic_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_private_topics
                             inner join {$prfx}_user on ({$prfx}_private_topics.participant_id = {$prfx}_user.id)
                             where topic_id in ($topic_in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topic_notifications[$dbw->field_by_name("topic_id")]["participants"][$dbw->field_by_name("participant_id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        return true;
    } // collect_notifiable_topic_users
    
    //-----------------------------------------------------------------
    function do_topic_notifications($dbw, $prfx, &$topic_notifications, &$settings, $action)
    {
        if ($action != "delete_topic" && $action != "restore_topic" &&
            $action != "delete_topics" && $action != "restore_topics" &&
            $action != "close_topic" && $action != "open_topic") {
            return true;
        }
        
        $already_notified = array();
        
        foreach ($topic_notifications as $tid => &$topic_record) {
            $params = array();
            
            $params["{user_name}"] = $topic_record["topic_data"]["author_name"];
            $params["{moderator_name}"] = $this->get_user_name();
            
            $params["{site_url}"] = get_host_address($topic_record["topic_data"]["last_host"]) . get_url_path();
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_record["topic_data"]["topic_name"];
            $params["{topic_url}"] = get_host_address($topic_record["topic_data"]["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]) . "&tid=" . xrawurlencode($tid);
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]) . "&tid=" . xrawurlencode($tid);
            
            $params["{forum_id}"] = $topic_record["topic_data"]["forum_id"];
            $params["{forum_name}"] = $topic_record["topic_data"]["forum_name"];
            $params["{forum_url}"] = get_host_address($topic_record["topic_data"]["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]);
            
            $comment_for_log = reqvar("comment");
            // will be parsed by reading
            
            $comment_for_email = reqvar("comment");
            $this->format_manager->format_email_message($dbw, $prfx, $comment_for_email, $topic_record["topic_data"]["interface_language"], get_host_address($topic_record["topic_data"]["last_host"]) . get_url_path());
            
            // if the actor and the receiver are the same, do not notify
            if (!empty($topic_record["topic_data"]["author_id"]) &&
                val_or_empty($topic_record["topic_data"]["author_id"]) != $this->get_user_id()
            ) {
                $anonym_appendix = "";
                $anonym_appendix2 = "";
                $this->get_anonym_appendixes($topic_record["topic_data"]["author_id"], $anonym_appendix, $anonym_appendix2);
                
                $email_template = "email_topic_deleted{$anonym_appendix}.txt";
                $event_code = "MsgEventTopicDeleted{$anonym_appendix2}";
                if ($action == "close_topic") {
                    $email_template = "email_topic_closed{$anonym_appendix}.txt";
                    $event_code = "MsgEventTopicClosed{$anonym_appendix2}";
                } elseif ($action == "open_topic") {
                    $email_template = "email_topic_opened{$anonym_appendix}.txt";
                    $event_code = "MsgEventTopicOpened{$anonym_appendix2}";
                } elseif ($action == "restore_topic") {
                    $email_template = "email_topic_restored{$anonym_appendix}.txt";
                    $event_code = "MsgEventTopicRestored{$anonym_appendix2}";
                }
                
                $params["{comment}"] = $comment_for_log;
                $this->log_user_event($topic_record["topic_data"]["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params);
                
                if (!empty($topic_record["topic_data"]["author_email"]) && !empty($topic_record["topic_data"]["send_notifications"])) {
                    $params["{comment}"] = $comment_for_email;
                    $this->email_manager->send_email($settings["default_sender"], $topic_record["topic_data"]["author_email"], $email_template, $params, $topic_record["topic_data"]["interface_language"]);
                }
                
                $already_notified[$tid][$topic_record["topic_data"]["author_id"]] = 1;
            }
            
            if (!empty($topic_record["moderators"])) {
                foreach ($topic_record["moderators"] as $mid => $uinfo) {
                    // if the actor and the receiver are the same, do not notify
                    if ($mid == $this->get_user_id()) {
                        continue;
                    }
                    
                    if (!empty($already_notified[$tid][$mid])) {
                        continue;
                    }
                    
                    $anonym_appendix = "";
                    $anonym_appendix2 = "";
                    $this->get_anonym_appendixes($mid, $anonym_appendix, $anonym_appendix2);
                    
                    $email_template = "email_topic_deleted_moderators{$anonym_appendix}.txt";
                    $event_code = "MsgEventTopicDeletedModerators{$anonym_appendix2}";
                    if ($action == "close_topic") {
                        $email_template = "email_topic_closed_moderators{$anonym_appendix}.txt";
                        $event_code = "MsgEventTopicClosedModerators{$anonym_appendix2}";
                    } elseif ($action == "open_topic") {
                        $email_template = "email_topic_opened_moderators{$anonym_appendix}.txt";
                        $event_code = "MsgEventTopicOpenedModerators{$anonym_appendix2}";
                    } elseif ($action == "restore_topic") {
                        $email_template = "email_topic_restored_moderators{$anonym_appendix}.txt";
                        $event_code = "MsgEventTopicRestoredModerators{$anonym_appendix2}";
                    }
                    
                    $already_notified[$tid][$mid] = 1;
                    
                    $params["{user_name}"] = $uinfo["user_name"];
                    $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]) . "&tid=" . xrawurlencode($tid);
                    $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]) . "&tid=" . xrawurlencode($tid);
                    $params["{forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]);
                    $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]);
                    
                    $params["{comment}"] = $comment_for_log;
                    $this->log_user_event($mid, $this->get_user_id(), $this->get_user_name(), $event_code, $params);
                    
                    if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                        $params["{comment}"] = $comment_for_email;
                        $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], $email_template, $params, $uinfo["interface_language"]);
                    }
                }
            }
            
            if (!empty($topic_record["participants"])) {
                foreach ($topic_record["participants"] as $pid => $uinfo) {
                    // if the actor and the receiver are the same, do not notify
                    if ($pid == $this->get_user_id()) {
                        continue;
                    }
                    
                    if (!empty($already_notified[$tid][$pid])) {
                        continue;
                    }
                    
                    $anonym_appendix = "";
                    $anonym_appendix2 = "";
                    $this->get_anonym_appendixes($pid, $anonym_appendix, $anonym_appendix2);
                    
                    $email_template = "email_topic_deleted_participants{$anonym_appendix}.txt";
                    $event_code = "MsgEventTopicDeletedParticipants{$anonym_appendix2}";
                    if ($action == "restore_topic") {
                        $email_template = "email_topic_restored_participants{$anonym_appendix}.txt";
                        $event_code = "MsgEventTopicRestoredParticipants{$anonym_appendix2}";
                    } elseif ($action == "close_topic") {
                        $email_template = "email_topic_closed_participants{$anonym_appendix}.txt";
                        $event_code = "MsgEventTopicClosedParticipants{$anonym_appendix2}";
                    } elseif ($action == "open_topic") {
                        $email_template = "email_topic_opened_participants{$anonym_appendix}.txt";
                        $event_code = "MsgEventTopicOpenedParticipants{$anonym_appendix2}";
                    }
                    
                    $already_notified[$tid][$pid] = 1;
                    
                    $params["{user_name}"] = $uinfo["user_name"];
                    $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]) . "&tid=" . xrawurlencode($tid);
                    $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]) . "&tid=" . xrawurlencode($tid);
                    $params["{forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]);
                    $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]);
                    
                    $params["{comment}"] = $comment_for_log;
                    $this->log_user_event($pid, $this->get_user_id(), $this->get_user_name(), $event_code, $params);
                    
                    if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                        $params["{comment}"] = $comment_for_email;
                        $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], $email_template, $params, $uinfo["interface_language"]);
                    }
                }
            }
            
            if (!empty($topic_record["subscribers"])) {
                foreach ($topic_record["subscribers"] as $sid => $uinfo) {
                    // if the actor and the receiver are the same, do not notify
                    if ($sid == $this->get_user_id()) {
                        continue;
                    }
                    
                    if (!empty($already_notified[$tid][$sid])) {
                        continue;
                    }
                    
                    $anonym_appendix = "";
                    $anonym_appendix2 = "";
                    $this->get_anonym_appendixes($sid, $anonym_appendix, $anonym_appendix2);
                    
                    $email_template = "email_topic_deleted_subscribers{$anonym_appendix}.txt";
                    $event_code = "MsgEventTopicDeletedSubscribers{$anonym_appendix2}";
                    if ($action == "restore_topic") {
                        $email_template = "email_topic_restored_subscribers{$anonym_appendix}.txt";
                        $event_code = "MsgEventTopicRestoredSubscribers{$anonym_appendix2}";
                    } elseif ($action == "close_topic") {
                        $email_template = "email_topic_closed_subscribers{$anonym_appendix}.txt";
                        $event_code = "MsgEventTopicClosedSubscribers{$anonym_appendix2}";
                    } elseif ($action == "open_topic") {
                        $email_template = "email_topic_opened_subscribers{$anonym_appendix}.txt";
                        $event_code = "MsgEventTopicOpenedSubscribers{$anonym_appendix2}";
                    }
                    
                    $already_notified[$tid][$sid] = 1;
                    
                    $params["{user_name}"] = $uinfo["user_name"];
                    $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]) . "&tid=" . xrawurlencode($tid);
                    $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]) . "&tid=" . xrawurlencode($tid);
                    $params["{forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]);
                    $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($topic_record["topic_data"]["forum_id_for_url"]);
                    
                    $params["{comment}"] = $comment_for_log;
                    $this->log_user_event($sid, $this->get_user_id(), $this->get_user_name(), $event_code, $params);
                    
                    if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                        $params["{comment}"] = $comment_for_email;
                        $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], $email_template, $params, $uinfo["interface_language"]);
                    }
                }
            }
        }
        
        return true;
    } // do_topic_notifications
    
    //-----------------------------------------------------------------
    function do_topic_action($tid, $action)
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($tid) || !is_numeric($tid)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape($tid);
        $fid = "";
        
        if (!$dbw->execute_query("select id, name from {$prfx}_forum where id in (select forum_id from {$prfx}_topic where id = $tid)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("id");
        } else {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if ($this->check_blocked($fid)) {
            return false;
        }
        
        $set_statement = "";
        $sys_msg = "";
        $imsg = "";
        
        switch ($action) {
            case "delete_topic":
                $set_statement = "deleted = 1, pinned = 0, publish_delay = 0";
                $imsg = text("MsgTopicDeleted");
                break;
            case "restore_topic":
                $set_statement = "deleted = 0";
                $imsg = text("MsgTopicRestored");
                break;
            case "open_topic":
                $set_statement = "closed = 0";
                $imsg = text("MsgTopicOpened");
                break;
            case "close_topic":
                $set_statement = "closed = 1";
                $imsg = text("MsgTopicClosed");
                break;
            case "pin_topic":
                $set_statement = "pinned = 1";
                $imsg = text("MsgTopicPinned");
                break;
            case "unpin_topic":
                $set_statement = "pinned = 0";
                $imsg = text("MsgTopicUnpinned");
                break;
            case "allow_guests":
                $set_statement = "no_guests = 0";
                $sys_msg = "MSG(MsgGuestsAllowed)";
                $imsg = text("MsgGuestsAllowed");
                break;
            case "disallow_guests":
                $set_statement = "no_guests = 1";
                $sys_msg = "MSG(MsgGuestsDisallowed)";
                $imsg = text("MsgGuestsDisallowed");
                break;
            case "profiled_topic_on":
                $set_statement = "profiled_topic = 1";
                $sys_msg = "MSG(MsgProfiledModeTurnedOn)";
                $imsg = text("MsgProfiledModeTurnedOn");
                break;
            case "profiled_topic_off":
                $set_statement = "profiled_topic = 0";
                $sys_msg = "MSG(MsgProfiledModeTurnedOff)";
                $imsg = text("MsgProfiledModeTurnedOff");
                break;
        }
        
        if ($action == "pin_topic") {
            if (!$dbw->execute_query("select count(*) cnt
                               from
                               {$prfx}_topic
                               where pinned = 1 and
                               {$prfx}_topic.forum_id in (select forum_id from {$prfx}_topic where id = $tid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $cnt = 0;
            if ($dbw->fetch_row()) {
                $cnt = $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
            
            if (!$this->is_admin() && !empty($settings["max_pinned_topics"]) && $cnt >= $settings["max_pinned_topics"]) {
                MessageHandler::setError(sprintf(text("MsgErrMaxPinnedTopicsPerForum"), $settings["max_pinned_topics"]));
                return false;
            }
        }
        
        $topic_data = array();
        
        if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                             {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name, is_private,
                             email, user_name, author, last_host, send_notifications, interface_language
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topic_data = array(
                "topic_id" => $dbw->field_by_name("id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "is_private" => $dbw->field_by_name("is_private"),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "action" => $action,
                "comment" => reqvar("comment")
            );
        }
        
        $dbw->free_result();
        
        $may_do = false;
        if ($action == "allow_guests" || $action == "disallow_guests") {
            if ($this->is_admin() || $this->is_forum_moderator($fid) || $this->is_topic_moderator($tid)) {
                $may_do = true;
            }
        } elseif (val_or_empty($topic_data["is_private"]) == 2 && ($action == "delete_topic" || $action == "restore_topic" || $action == "open_topic" || $action == "close_topic")) {
            if ($this->is_topic_moderator($tid)) {
                $may_do = true;
            }
        } else {
            if ($this->is_admin() || $this->is_forum_moderator($fid)) {
                $may_do = true;
            }
        }
        
        if (!$may_do) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        $topic_notifications = array();
        if (!$this->collect_notifiable_topic_users($dbw, $topic_notifications, $tid, $action)) {
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_topic set $set_statement where id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!empty($sys_msg)) {
            $sys_post_id = "";
            if (!$this->post_sys_message($dbw, $tid, $sys_msg, $sys_post_id)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // No tracking for private topic actions
        if ($topic_data["forum_name"] == "PRIVATE_MESSAGES") {
            $topic_data["forum_name"] = text("PrivateTopics");
            $topic_data["forum_id"] = "private";
        } else {
            if (!$this->log_moderator_event($dbw, $prfx, $topic_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->execute_query($this->get_query_topic_cnt_update($prfx, $fid))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo($imsg);
        
        $this->do_topic_notifications($dbw, $prfx, $topic_notifications, $settings, $action);
        
        return true;
    } // do_topic_action
    
    //-----------------------------------------------------------------
    function do_topic_bulk_action($action)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        global $settings;
        
        if (empty($_REQUEST["topics"])) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $in_list = $dbw->escape(implode(",", $_REQUEST["topics"]));
        
        $set_statement = "";
        $single_action = "";
        $imsg = "";
        
        switch ($action) {
            case "delete_topics":
                $single_action = "delete_topic";
                $set_statement = "deleted = 1, publish_delay = 0";
                $imsg = text("MsgTopicsDeleted");
                break;
            case "restore_topics":
                $single_action = "restore_topic";
                $set_statement = "deleted = 0";
                $imsg = text("MsgTopicsRestored");
                break;
            case "open_topics":
                $single_action = "open_topic";
                $set_statement = "closed = 0";
                $imsg = text("MsgTopicsOpened");
                break;
            case "close_topics":
                $single_action = "close_topic";
                $set_statement = "closed = 1";
                $imsg = text("MsgTopicsClosed");
                break;
        }
        
        $forums = array();
        $private_topics = array();
        $topics = array();
        
        if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                             {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name, is_private,
                             email, user_name, author, last_host, send_notifications, interface_language
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                             where {$prfx}_topic.id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            if ($dbw->field_by_name("is_private")) {
                $private_topics[$dbw->field_by_name("id")] = $dbw->field_by_name("id");
            } else {
                $forums[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("forum_id");
            }
            
            $topics[$dbw->field_by_name("id")] = array(
                "topic_id" => $dbw->field_by_name("id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "action" => $single_action,
                "comment" => reqvar("comment")
            );
        }
        
        $dbw->free_result();
        
        // check if the current user is the forum moderator
        
        foreach ($private_topics as $tid) {
            if (!$this->is_topic_moderator($tid)) {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
        }
        
        foreach ($forums as $fid) {
            if (!$this->is_admin() && !$this->is_forum_moderator($fid)) {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
        }
        
        $topic_notifications = array();
        
        if (!$this->collect_notifiable_topic_users($dbw, $topic_notifications, $in_list, $single_action)) {
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_topic set $set_statement where id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        foreach ($topics as $tid => $tdata) {
            if (!$this->log_moderator_event($dbw, $prfx, $tdata)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!empty($forums)) {
            foreach ($forums as $fid) {
                if (!$dbw->execute_query($this->get_query_topic_cnt_update($prfx, $fid))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }

        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo($imsg);
        
        // mail notification
        
        $this->do_topic_notifications($dbw, $prfx, $topic_notifications, $settings, $single_action);
        
        return true;
    } // do_topic_bulk_action
    
    //-----------------------------------------------------------------
    function bulk_add_remove_ignored($action)
    {
        if (empty($_REQUEST["topics"])) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            foreach ($_REQUEST["topics"] as $tid) {
                if ($action == "bulk_add_to_ignored") {
                    $_SESSION["ignored_topics"][$tid] = $tid;
                } else {
                    unset($_SESSION["ignored_topics"][$tid]);
                }
            }
            
            $this->update_user_cookies();
            
            $this->new_checker->invalidate_new_messages_cache();
            
            MessageHandler::setInfo(text("MsgTopicsAddedToIgnored"));
            
            return true;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "bulk_add_to_ignored") {
            $info = text("MsgTopicsAddedToIgnored");
            
            foreach ($_REQUEST["topics"] as $tid) {
                $tid = $dbw->escape($tid);
                
                if (!$dbw->execute_query("insert into {$prfx}_ignored_topics
                               (user_id, topic_id)
                               select $uid, $tid from {$prfx}_dual
                               where $tid not in (select topic_id from {$prfx}_ignored_topics where user_id = $uid)")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if (!$dbw->execute_query("delete from {$prfx}_topic_subscription
                               where user_id = $uid and topic_id = $tid")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        } else {
            $in_list = $dbw->escape(implode(",", $_REQUEST["topics"]));
            
            if (!$dbw->execute_query("delete from {$prfx}_ignored_topics
                               where user_id = $uid and topic_id in ($in_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $info = text("MsgTopicsRemovedFromIgnored");
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $this->update_user_status();
        
        MessageHandler::setInfo($info);
        
        return true;
    } // bulk_add_remove_ignored
    
    //-----------------------------------------------------------------
    function do_topic_guest_action($tid, $action, &$response)
    {
        global $settings;
        global $READ_MARKER;
        
        if (empty($tid) || !is_numeric($tid)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if ($action == "pin_user_topic" && !empty($_SESSION["pinned_topics"])) {
            $in_list = $dbw->escape(implode(",", $_SESSION["pinned_topics"]));
            
            if (!$dbw->execute_query("select count(*) cnt from {$prfx}_topic
                               where
                               id in ($in_list) and
                               forum_id in (select forum_id from {$prfx}_topic where id = $tid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $cnt = 0;
            if ($dbw->fetch_row()) {
                $cnt = $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
            
            if (!$this->is_admin() && !empty($settings["max_pinned_topics"]) && $cnt >= $settings["max_pinned_topics"]) {
                MessageHandler::setError(sprintf(text("MsgErrMaxPinnedTopics"), $settings["max_pinned_topics"]));
                return false;
            }
        }
        
        if ($action == "remove_from_favourites") {
            unset($_SESSION["favourite_topics"][$tid]);
            
            // invalidate new info cache
            $this->new_checker->invalidate_new_messages_cache();
            
            $imsg = text("MsgTopicRemovedFromFavourites");
            $response['convert_action_link'] = "add_to_favourites";
        } elseif ($action == "add_to_favourites") {
            $_SESSION["favourite_topics"][$tid] = $tid;
            
            // invalidate new info cache
            $this->new_checker->invalidate_new_messages_cache();
            
            $imsg = text("MsgTopicAddedToFavourites");
            $response['convert_action_link'] = "remove_from_favourites";
        } elseif ($action == "remove_from_ignored") {
            unset($_SESSION["ignored_topics"][$tid]);
            
            // invalidate new info cache
            $this->new_checker->invalidate_new_messages_cache();
            
            $imsg = text("MsgTopicRemovedFromIgnored");
            $response['convert_action_link'] = "add_to_ignored";
        } elseif ($action == "add_to_ignored") {
            $_SESSION["ignored_topics"][$tid] = $tid;
            
            // invalidate new info cache
            $this->new_checker->invalidate_new_messages_cache();
            
            $imsg = text("MsgTopicAddedToIgnored");
            $response['convert_action_link'] = "remove_from_ignored";
        } elseif ($action == "unpin_user_topic") {
            unset($_SESSION["pinned_topics"][$tid]);
            
            $imsg = text("MsgTopicUnpinned");
            $response['convert_action_link'] = "pin_user_topic";
        } elseif ($action == "pin_user_topic") {
            $_SESSION["pinned_topics"][$tid] = $tid;
            
            $imsg = text("MsgTopicPinned");
            $response['convert_action_link'] = "unpin_user_topic";
        }
        
        $this->update_user_cookies();
        
        MessageHandler::setInfo($imsg);
        
        return true;
    } // do_topic_guest_action
    
    //-----------------------------------------------------------------
    function do_topic_user_action($tid, $action, &$response)
    {
        global $settings;
        
        if (empty($tid) || !is_numeric($tid)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape($tid);
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            return $this->do_topic_guest_action($tid, $action, $response);
        }
        
        if (!$this->has_access_to_topic($tid, false)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "add_to_favourites" || $action == "remove_from_favourites") {
            if (!$dbw->execute_query("delete from {$prfx}_favourite_topics
                               where user_id = $uid and topic_id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            // invalidate new info cache
            if (!$this->new_checker->invalidate_new_messages_cache()) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgTopicRemovedFromFavourites");
            $response['convert_action_link'] = "add_to_favourites";
        }
        
        if ($action == "add_to_favourites") {
            if (!$dbw->execute_query("insert into {$prfx}_favourite_topics
                               (user_id, topic_id)
                               values
                               ($uid, $tid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            // invalidate new info cache
            if (!$this->new_checker->invalidate_new_messages_cache()) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgTopicAddedToFavourites");
            $response['convert_action_link'] = "remove_from_favourites";
        }
        
        if ($action == "add_to_ignored" || $action == "remove_from_ignored") {
            if (!$dbw->execute_query("delete from {$prfx}_ignored_topics
                               where user_id = $uid and topic_id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            // invalidate new info cache
            if (!$this->new_checker->invalidate_new_messages_cache()) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgTopicRemovedFromIgnored");
            $response['convert_action_link'] = "add_to_ignored";
        }
        
        if ($action == "add_to_ignored") {
            if (!$dbw->execute_query("insert into {$prfx}_ignored_topics
                               (user_id, topic_id)
                               values
                               ($uid, $tid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("delete from {$prfx}_topic_subscription
                               where user_id = $uid and topic_id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            // invalidate new info cache
            if (!$this->new_checker->invalidate_new_messages_cache()) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgTopicAddedToIgnored");
            $response['convert_action_link'] = "remove_from_ignored";
        }
        
        if ($action == "subscribe" || $action == "unsubscribe") {
            if (!$dbw->execute_query("delete from {$prfx}_topic_subscription
                               where user_id = $uid and topic_id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgTopicUnsubscribed");
            $response['convert_action_link'] = "subscribe";
        }
        
        if ($action == "subscribe") {
            if (!$dbw->execute_query("insert into {$prfx}_topic_subscription
                               (user_id, topic_id)
                               values
                               ($uid, $tid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgTopicSubscribed");
            $response['convert_action_link'] = "unsubscribe";
        }
        
        if ($action == "pin_user_topic") {
            if (!$dbw->execute_query("select count(*) cnt
                               from
                               {$prfx}_pinned_topics
                               where user_id = $uid and
                               topic_id in (select id from {$prfx}_topic where forum_id in (select forum_id from {$prfx}_topic where id = $tid))")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $cnt = 0;
            if ($dbw->fetch_row()) {
                $cnt = $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
            
            if (!$this->is_admin() && !empty($settings["max_pinned_topics"]) && $cnt >= $settings["max_pinned_topics"]) {
                MessageHandler::setError(sprintf(text("MsgErrMaxPinnedTopics"), $settings["max_pinned_topics"]));
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if ($action == "pin_user_topic" || $action == "unpin_user_topic") {
            if (!$dbw->execute_query("delete from {$prfx}_pinned_topics
                               where user_id = $uid and topic_id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgTopicUnpinned");
            $response['convert_action_link'] = "pin_user_topic";
        }
        
        if ($action == "pin_user_topic") {
            if (!$dbw->execute_query("insert into {$prfx}_pinned_topics
                               (user_id, topic_id)
                               values
                               ($uid, $tid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgTopicPinned");
            $response['convert_action_link'] = "unpin_user_topic";
        }
        
        if ($action == "publish") {
            if (!$dbw->execute_query("select forum_id from {$prfx}_topic where id = $tid and user_id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->fetch_row()) {
                $dbw->free_result();
                
                MessageHandler::setError(text("ErrActionNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            $fid = $dbw->field_by_name("forum_id");
            
            $dbw->free_result();
            
            $where = "where topic_id = $tid and {$prfx}_post.deleted <> 1";

            if (!$dbw->execute_query($this->get_query_topic_first_post($prfx, $where, "order by {$prfx}_post.id desc"))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if (!$dbw->fetch_row()) {
                $dbw->free_result();
                
                MessageHandler::setError(text("ErrActionNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }

            $dbw->free_result();

            if ($this->check_blocked($fid)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $limit = 0;
            $time_to_next = 0;
            
            if (!$this->check_topic_limit($fid, $limit, $time_to_next)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            if ($time_to_next > 0) {
                MessageHandler::setWarning(sprintf(text("ErrTopicLimitExceeded"), $limit, format_duration($time_to_next)));
                $dbw->rollback_transaction();
                return false;
            }
            
            $now = $dbw->format_datetime(time());
            
            if (!$dbw->execute_query("update {$prfx}_post set creation_date = '$now' where topic_id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }

            $sys_post_id = "";
            if (!$this->post_sys_message($dbw, $tid, "MSG(MsgSysTopicPublished)", $sys_post_id)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("update {$prfx}_topic set publish_delay = 0
                                      where id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $query = "update {$prfx}_forum_statistics set
                topic_count = topic_count + 1,
                topic_count_total = topic_count_total + 1
                where forum_id = $fid";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $query = "update {$prfx}_user_statistics set
              topic_count = topic_count + 1
              where user_id = $uid";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$this->handle_topic_ignorance_archive($dbw, $prfx, $tid)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgTopicPublished");
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "publish") {
            if (!$this->notify_on_published_posts($dbw, $prfx, $tid)) {
                return false;
            }
            
            if (!$this->handle_request_moderation($tid)) {
                return false;
            }
        }
        
        MessageHandler::setInfo($imsg);
        
        return true;
    } // do_topic_user_action
    
    //-----------------------------------------------------------------
    function handle_request_moderation($tid)
    {
        global $settings;
        
        if (empty($tid) || !is_numeric($tid)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape($tid);
        
        // get first post
        
        if (!$dbw->execute_query("select {$prfx}_post.id, forum_id, is_private, text_content, request_moderation
                                  from {$prfx}_post
                                  inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                  where {$prfx}_post.topic_id = $tid and {$prfx}_post.deleted <> 1
                                  order by {$prfx}_post.id
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $forum_id = "";
        $post_id = "";
        $short_message = "";
        $request_moderation = false;
        $is_private = false;
        
        if ($dbw->fetch_row()) {
            $post_id = $dbw->field_by_name("id");
            $forum_id = $dbw->field_by_name("forum_id");
            $short_message = $dbw->field_by_name("text_content");
            $request_moderation = $dbw->field_by_name("request_moderation");
            $is_private = $dbw->field_by_name("is_private");
        }
        
        $dbw->free_result();
        
        if ($is_private || empty($request_moderation) || $this->is_admin() || $this->is_forum_moderator($forum_id)) {
            return true;
        }
        
        if (empty($post_id)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $moderator_name = quotes_or_null($dbw->escape($this->get_user_name()));
        // text("MsgAuthorRequestedModeration")
        $message = $dbw->escape("MSG(MsgAuthorRequestedModeration)");
        
        $query = "update {$prfx}_post set
          last_warned_by = $moderator_name,
          last_warning = '$message'
          where id = $post_id";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // get moderators
        
        if (!$dbw->execute_query("select user_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_forum_moderator
                             inner join {$prfx}_user on ({$prfx}_forum_moderator.user_id = {$prfx}_user.id)
                             where forum_id in (select forum_id from {$prfx}_topic where id = $tid)
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $moderators = array();
        
        while ($dbw->fetch_row()) {
            $moderators[$dbw->field_by_name("user_id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // forum has no moderators, send to the administrators
        if (empty($moderators)) {
            if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                               from {$prfx}_user
                               where is_admin = 1
                               ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $moderators = array();
            
            while ($dbw->fetch_row()) {
                $moderators[$dbw->field_by_name("id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language")
                );
            }
            
            $dbw->free_result();
        }
        
        // forum has neither moderators nor administrators, send to the master admin
        if (empty($moderators)) {
            $moderators[0] = array(
                "name" => text("Administrator"),
                "email" => $settings["receiver"],
                "send_notifications" => true,
                "last_host" => "",
                "interface_language" => defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"
            );
        }
        
        // get topic info
        
        $forum_id = "";
        $forum_name = "";
        $topic_name = "";
        
        if (!$dbw->execute_query("select {$prfx}_topic.id, {$prfx}_topic.name topic_name, forum_id, {$prfx}_forum.name forum_name, is_private
                             from {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $topic_name = $dbw->field_by_name("topic_name");
            $forum_id = $dbw->field_by_name("is_private") ? "private" : $dbw->field_by_name("forum_id");
            $forum_name = $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name");
        }
        
        $dbw->free_result();
        
        foreach ($moderators as $uid => $minfo) {
            // if the actor and the receiver are the same, do not notify
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{moderator_name}"] = $minfo["name"];
            
            $params["{user_name}"] = $this->get_user_name();
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($minfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            
            $params["{forum_id}"] = $forum_id;
            $params["{forum_name}"] = $forum_name;
            $params["{forum_url}"] = get_host_address($minfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
            
            $params["{post_id}"] = $post_id;

            $params["{message}"] = $short_message;
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), "MsgEventModerationRequested", $params, $post_id);
            
            if (!empty($minfo["email"])) {
                $params["{message}"] = $short_message;
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $minfo["interface_language"], get_host_address($minfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $minfo["email"], "email_moderation_requested.txt", $params, $minfo["interface_language"]);
            }
        }
        
        return true;
    } // handle_request_moderation
    
    //-----------------------------------------------------------------
    function notify_on_published_posts(&$dbw, $prfx, $tid)
    {
        global $settings;
        
        $tid = $dbw->escape($tid);
        
        // get topic info and post list
        
        $forum_id = "";
        $forum_name = "";
        $topic_name = "";
        
        $posts = array();
        $all_citated_posts = array();
        $appealed_users = array();
        
        if (!$dbw->execute_query("select {$prfx}_topic.name topic_name, forum_id, {$prfx}_forum.name forum_name, is_private,
                             {$prfx}_post.id, text_content, html_content, text_content
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id = $tid and {$prfx}_post.deleted <> 1")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $forum_id = $dbw->field_by_name("is_private") ? "private" : $dbw->field_by_name("forum_id");
            $forum_name = $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name");
            $topic_name = $dbw->field_by_name("topic_name");
            
            $posts[$dbw->field_by_name("id")]["message"] = $dbw->field_by_name("text_content");
            $posts[$dbw->field_by_name("id")]["short_message"] = $dbw->field_by_name("text_content");
            $posts[$dbw->field_by_name("id")]["contained_citated_posts"] = array();
            
            $tmp_html = $dbw->field_by_name("html_content");
            remove_nested_quotes($tmp_html, $tmp_html, 1);
            if (preg_match_all("/data-cmid=\"(\d+)\"/", $tmp_html, $matches)) {
                $posts[$dbw->field_by_name("id")]["contained_citated_posts"] = $matches[1];
                
                $all_citated_posts = array_merge($all_citated_posts, $matches[1]);
            }
            
            $posts[$dbw->field_by_name("id")]["appealed_users"] = array();
            if (preg_match_all("/(@|%)([^%@\r\n\t]+?)\\1/iu", $tmp_html, $matches)) {
                $posts[$dbw->field_by_name("id")]["appealed_users"] = $matches[2];
                $appealed_users += $matches[2];
            }
        }
        
        $dbw->free_result();
        
        $all_appealed_users = array();
        
        if (!empty($appealed_users)) {
            $in_list = "";
            
            foreach ($appealed_users as $user) {
                $in_list .= "'" . $dbw->escape($user) . "', ";
            }
            
            $in_list = trim($in_list, ", ");
            
            if (!$dbw->execute_query("select user_name from {$prfx}_user where user_name in ($in_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $all_appealed_users[$dbw->field_by_name("user_name")] = $dbw->field_by_name("user_name");
            }
            
            $dbw->free_result();
        }
        
        $own_post_citation_subscribers = array();
        $own_citated_post_info = array();
        $other_post_citation_subscribers = array();
        $other_citated_post_info = array();
        
        if (!empty($all_citated_posts)) {
            $in_list = $dbw->escape(implode(", ", $all_citated_posts));
            
            // user subscribed to own messages
            
            if (!$dbw->execute_query("select {$prfx}_post.id, {$prfx}_post.user_id,
                                      email, user_name, last_host, send_notifications, interface_language,
                                      hide_comments, ignore_guests_whitelist, notify_citation, {$prfx}_ignored_topics.topic_id topic_ignored,
                                      {$prfx}_post.topic_id citated_topic_id, citated_topic.forum_id citated_forum_id
                                      from {$prfx}_post
                                      inner join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                                      inner join {$prfx}_topic on ({$prfx}_topic.id = $tid)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      inner join {$prfx}_topic citated_topic on ({$prfx}_post.topic_id = citated_topic.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id in ($in_list) and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      )
                                      order by {$prfx}_post.id")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                // This user ignores the topic, no notification
                if ($dbw->field_by_name("topic_ignored")) {
                    continue;
                }
                
                // The post in the delayed topic cannot be a comment
                // No handling necessary
                
                if (!$dbw->field_by_name("notify_citation")) {
                    continue;
                }
                
                // citations can be from different topics
                $own_citated_post_info[$dbw->field_by_name("id")]["notifiable_user_id"] = $dbw->field_by_name("user_id");
                $own_citated_post_info[$dbw->field_by_name("id")]["topic_id"] = $dbw->field_by_name("citated_topic_id");
                $own_citated_post_info[$dbw->field_by_name("id")]["forum_id"] = $dbw->field_by_name("citated_forum_id");
                
                $own_post_citation_subscribers[$dbw->field_by_name("user_id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
                );
            }
            
            $dbw->free_result();
            
            // user subscribed to a message
            
            if (!$dbw->execute_query("select {$prfx}_post.id, {$prfx}_post_subscription.user_id,
                                      email, user_name, last_host, send_notifications, interface_language,
                                      hide_comments, ignore_guests_whitelist, notify_citation, {$prfx}_ignored_topics.topic_id topic_ignored,
                                      {$prfx}_post.topic_id citated_topic_id, citated_topic.forum_id citated_forum_id
                                      from {$prfx}_post
                                      inner join {$prfx}_post_subscription on ({$prfx}_post.id = {$prfx}_post_subscription.post_id)
                                      inner join {$prfx}_user on ({$prfx}_post_subscription.user_id = {$prfx}_user.id)
                                      inner join {$prfx}_topic on ({$prfx}_topic.id = $tid)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      inner join {$prfx}_topic citated_topic on ({$prfx}_post.topic_id = citated_topic.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id in ($in_list) and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      )
                                      order by {$prfx}_post.id")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                // This user ignores the topic, no notification
                if ($dbw->field_by_name("topic_ignored")) {
                    continue;
                }
                
                // The post in the delayed topic cannot be a comment
                // No handling necessary
                
                // citations can be from different topics
                $other_citated_post_info[$dbw->field_by_name("id")]["notifiable_users"][$dbw->field_by_name("user_id")] = $dbw->field_by_name("user_id");
                $other_citated_post_info[$dbw->field_by_name("id")]["topic_id"] = $dbw->field_by_name("citated_topic_id");
                $other_citated_post_info[$dbw->field_by_name("id")]["forum_id"] = $dbw->field_by_name("citated_forum_id");
                
                $other_post_citation_subscribers[$dbw->field_by_name("user_id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
                );
            }
            
            $dbw->free_result();
            
            if (!$this->get_my_ignore_status_for_users($dbw, $own_post_citation_subscribers)) {
                return false;
            }
            
            if (!$this->get_my_ignore_status_for_users($dbw, $other_post_citation_subscribers)) {
                return false;
            }
        }
        
        $word_subscribers = array();
        
        if (!$dbw->execute_query("select {$prfx}_user.id user_id,
                                      email, user_name, last_host, send_notifications, interface_language, words_to_notify,
                                      hide_comments, ignore_guests_whitelist, notify_citation, {$prfx}_ignored_topics.topic_id topic_ignored
                                      from {$prfx}_post
                                      inner join {$prfx}_user on ({$prfx}_user.notify_on_words = 1)
                                      inner join {$prfx}_topic on ({$prfx}_topic.id = {$prfx}_post.topic_id)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_topic.id = $tid and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      ) and
                                        not exists (
                                            select 1 from
                                            {$prfx}_user usr
                                            left join {$prfx}_ignored_forums on (usr.id = {$prfx}_ignored_forums.user_id)
                                            where usr.id = {$prfx}_user.id and (forum_id = {$prfx}_forum.id or forum_id is NULL)
                                        )
                                      ")
        ) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            // This user ignores the topic, no notification
            if ($dbw->field_by_name("topic_ignored")) {
                continue;
            }
            
            // The post in the delayed topic cannot be a comment
            // No handling necessary
            
            $word_subscribers[$dbw->field_by_name("user_id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist"),
                "words" => preg_split("/[\r\n]+/", $dbw->field_by_name("words_to_notify"), -1, PREG_SPLIT_NO_EMPTY)
            );
        }
        
        $dbw->free_result();
        
        if (!$this->get_my_ignore_status_for_users($dbw, $word_subscribers)) {
            return false;
        }
        
        $search_words_appendix = " " . $topic_name;
        
        $assertion = "[^\s.,;&:!\=\?\-\+\(\)\[\]\{\}\/\*#']";
        
        foreach ($posts as $written_post_id => $post_data) {
            $written_post_id = $dbw->escape($written_post_id);
            
            $appealed_users = array();
            if (!empty($post_data["appealed_users"])) {
                $in_list = "";
                
                foreach ($post_data["appealed_users"] as $user) {
                    $in_list .= "'" . $dbw->escape($user) . "', ";
                }
                
                $in_list = trim($in_list, ", ");
                
                if (!$dbw->execute_query("select {$prfx}_user.id as user_id,
                                      email, user_name, last_host, send_notifications, interface_language,
                                      {$prfx}_ignored_topics.topic_id topic_ignored, ignore_guests_whitelist
                                      from {$prfx}_post
                                      inner join {$prfx}_user on ({$prfx}_user.user_name in ($in_list) and {$prfx}_user.turnoff_personal_appeals = 0)
                                      inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id = $written_post_id and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      )")
                ) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                while ($dbw->fetch_row()) {
                    // This user ignores the topic, no notification
                    if ($dbw->field_by_name("topic_ignored")) {
                        continue;
                    }
                    
                    // The post in the delayed topic cannot be a comment
                    // No handling necessary
                    
                    $appealed_users[$dbw->field_by_name("user_id")] = array(
                        "name" => $dbw->field_by_name("user_name"),
                        "email" => $dbw->field_by_name("email"),
                        "send_notifications" => $dbw->field_by_name("send_notifications"),
                        "last_host" => $dbw->field_by_name("last_host"),
                        "interface_language" => $dbw->field_by_name("interface_language"),
                        "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
                    );
                }
                
                $dbw->free_result();
                
                if (!$this->get_my_ignore_status_for_users($dbw, $appealed_users)) {
                    return false;
                }
            }
            
            // to prevent the sending the redundant notifications about the same action
            // we track the users who are already notified
            $already_notified = array();
            
            foreach ($appealed_users as $uid => $sinfo) {
                // if the author ingnores the user, it cannot appeal him
                if ($this->is_user_ignored($uid)) {
                    continue;
                }            

                // if the user self posted the message, he does not need to be notified about it
                if ($uid == $this->get_user_id()) {
                    continue;
                }
                
                if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                    continue;
                }
                
                $already_notified[$uid] = 1;
                
                $params = array();
                
                $params["todo"] = 1;
                $params["{author_name}"] = $this->get_user_name();
                $params["{user_name}"] = $sinfo["name"];
                
                $params["{topic_id}"] = $tid;
                $params["{topic_name}"] = $topic_name;
                $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                
                $params["{post_id}"] = $written_post_id;
                
                $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($written_post_id);
                $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($written_post_id);
                $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($written_post_id);
                $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($written_post_id);
                
                $params["{forum_id}"] = $forum_id;
                $params["{forum_name}"] = $forum_name;
                $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
                $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
                
                $event_code = "MsgEventAttentionAsked";
                $email_template = "email_personal_appeal.txt";
                
                // to check if someone was not notified
                unset($all_appealed_users[$sinfo["name"]]);
                
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
                
                $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $written_post_id);
                
                if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                    $params["{message}"] = $post_data["short_message"];
                    $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                    
                    $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
                }
            }
            
            foreach ($word_subscribers as $uid => $sinfo) {
                // if the user self posted the message, he does not need to be notified about it
                if ($uid == $this->get_user_id()) {
                    continue;
                }
                
                if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                    continue;
                }
                
                $word_check_text = $post_data["message"] . " " . $search_words_appendix;
                
                // We do not notify on words in the post citations
                // Because the notification has been already done when the original
                // post was posted.
                
                remove_post_citations($word_check_text, $word_check_text);
                
                // We have to handle the case if the phrase is a part of the nick.
                // If the phrase is only a part of a nick - we do not notify.
                // If the phrase is exactly a nick - we DO notify.
                
                if (preg_match_all("~(\[b\](.+?)(#\d+)?\[/b\]|\[quote=(.+?)(#\d+)?\])~u", $word_check_text, $matches, PREG_SET_ORDER)) {
                    foreach ($matches as $match_set) {
                        $nick_name = "";
                        if (!empty($match_set[2])) {
                            $nick_name = $match_set[2];
                        } elseif (!empty($match_set[4])) {
                            $nick_name = $match_set[4];
                        } else {
                            continue;
                        }
                        
                        // If the nick name is exactly a phrase in the search phrase list, we do not remove it from the message
                        if (in_array($nick_name, $sinfo["words"])) {
                            continue;
                        }
                        
                        $word_check_text = str_replace($nick_name, "", $word_check_text);
                    }
                }
                
                $pattern = "";
                foreach ($sinfo["words"] as $word) {
                    $word_combinations = array();
                    if ($this->get_unicore_words($word, $word_combinations)) {
                        foreach ($word_combinations as $word_combination) {
                            $pattern .= "(?<!$assertion)" . preg_p_escape($word_combination) . "(?!$assertion)|";
                        }
                    } else {
                        $pattern .= "(?<!$assertion)" . preg_p_escape($word) . "(?!$assertion)|";
                    }
                }
                
                $pattern = "/" . trim($pattern, "|") . "/miu";
                
                if (!preg_match_all($pattern, $word_check_text, $matches)) {
                    continue;
                }
                
                $already_notified[$uid] = 1;
                
                $params = array();
                
                $params["todo"] = 1;
                $params["{author_name}"] = $this->get_user_name();
                $params["{user_name}"] = $sinfo["name"];
                
                $params["{topic_id}"] = $tid;
                $params["{topic_name}"] = $topic_name;
                $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                
                $params["{post_id}"] = $written_post_id;
                
                $highlight = "&search_keys=" . xrawurlencode(implode("|", $matches[0]));
                $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($written_post_id) . $highlight;
                $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($written_post_id) . $highlight;
                $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($written_post_id) . $highlight;
                $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($written_post_id) . $highlight;
                
                $params["{forum_id}"] = $forum_id;
                $params["{forum_name}"] = $forum_name;
                $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
                $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
                
                $params["{words}"] = implode(", ", $matches[0]);
                
                $event_code = "MsgEventWordsMentionedInTopic";
                $email_template = "email_word_mentioned.txt";
                
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
                
                $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $written_post_id);
                
                if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                    $params["{message}"] = $post_data["short_message"];
                    $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                    
                    $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
                }
            }
            
            // clear subject from search, only used by the first post
            $search_words_appendix = "";
            
            $current_own_post_citation_subscribers = array();
            $current_other_post_citation_subscribers = array();
            
            foreach ($post_data["contained_citated_posts"] as $citated_pid) {
                if (!empty($own_citated_post_info[$citated_pid])) {
                    $uid = $own_citated_post_info[$citated_pid]["notifiable_user_id"];
                    
                    $current_own_post_citation_subscribers[$uid] = $own_post_citation_subscribers[$uid];
                    $current_own_post_citation_subscribers[$uid]["citated_post"] = $citated_pid;
                    $current_own_post_citation_subscribers[$uid]["citated_topic"] = $own_citated_post_info[$citated_pid]["topic_id"];
                    $current_own_post_citation_subscribers[$uid]["citated_forum"] = $own_citated_post_info[$citated_pid]["forum_id"];
                }
                
                if (!empty($other_citated_post_info[$citated_pid])) {
                    foreach ($other_citated_post_info[$citated_pid]["notifiable_users"] as $uid) {
                        $current_other_post_citation_subscribers[$uid] = $other_post_citation_subscribers[$uid];
                        $current_other_post_citation_subscribers[$uid]["citated_post"] = $citated_pid;
                        $current_other_post_citation_subscribers[$uid]["citated_topic"] = $other_citated_post_info[$citated_pid]["topic_id"];
                        $current_other_post_citation_subscribers[$uid]["citated_forum"] = $other_citated_post_info[$citated_pid]["forum_id"];
                    }
                }
            }
            
            foreach ($current_own_post_citation_subscribers as $uid => $sinfo) {
                // if the user self posted the message, he does not need to be notified about it
                if ($uid == $this->get_user_id()) {
                    continue;
                }
                
                if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                    continue;
                }
                
                if (!empty($already_notified[$uid])) {
                    continue;
                }
                
                $already_notified[$uid] = 1;
                
                $params = array();
                
                $params["todo"] = 1;
                $params["{author_name}"] = $this->get_user_name();
                $params["{user_name}"] = $sinfo["name"];
                
                $params["{topic_id}"] = $tid;
                $params["{topic_name}"] = $topic_name;
                $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                
                $params["{post_id}"] = $written_post_id;
                $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($written_post_id);
                $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($written_post_id);
                $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($written_post_id);
                $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($written_post_id);
                
                $params["{forum_id}"] = $forum_id;
                $params["{forum_name}"] = $forum_name;
                $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
                $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
                
                $params["{citated_post}"] = $sinfo["citated_post"];
                $params["{citated_post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
                $params["{citated_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
                
                $event_code = "MsgEventCitatedMessageInTopic";
                $email_template = "email_post_citated.txt";
                
                if (!empty($event_code)) {
                    $params["{message}"] = $post_data["short_message"];
                    $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
                    
                    $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $written_post_id);
                }
                
                if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                    $params["{message}"] = $post_data["short_message"];
                    $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                    
                    $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
                }
            }
            
            foreach ($current_other_post_citation_subscribers as $uid => $sinfo) {
                // if the user self posted the message, he does not need to be notified about it
                if ($uid == $this->get_user_id()) {
                    continue;
                }
                
                if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                    continue;
                }
                
                if (!empty($already_notified[$uid])) {
                    continue;
                }
                
                $already_notified[$uid] = 1;
                
                $params = array();
                
                $params["todo"] = 1;
                $params["{author_name}"] = $this->get_user_name();
                $params["{user_name}"] = $sinfo["name"];
                
                $params["{topic_id}"] = $tid;
                $params["{topic_name}"] = $topic_name;
                $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                
                $params["{post_id}"] = $written_post_id;
                $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($written_post_id);
                $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($written_post_id);
                $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($written_post_id);
                $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($written_post_id);
                
                $params["{forum_id}"] = $forum_id;
                $params["{forum_name}"] = $forum_name;
                $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
                $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
                
                $params["{citated_post}"] = $sinfo["citated_post"];
                $params["{citated_post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
                $params["{citated_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
                
                $event_code = "MsgEventCitatedSubscribedMessageInTopic";
                $email_template = "email_subscribed_post_citated.txt";
                
                if (!empty($event_code)) {
                    $params["{message}"] = $post_data["short_message"];
                    $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
                    
                    $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $written_post_id);
                }
                
                if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                    $params["{message}"] = $post_data["short_message"];
                    $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                    
                    $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
                }
            }
        }
        
        if (!empty($all_appealed_users)) {
            MessageHandler::setWarning(sprintf(text("WarnNotAllAppealed"), implode(", ", $all_appealed_users)));
        }
        
        return true;
    } // notify_on_published_posts
    
    //-----------------------------------------------------------------
    function delete_restore_posts($action)
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $imsg = "";
        $set_statement = "";
        $posts_where = "";
        
        switch ($action) {
            case "delete_post":
                if (empty($_REQUEST["posts"])) {
                    MessageHandler::setError(text("ErrNoPostSelected"));
                    return false;
                }
                $set_statement = "deleted = 1, pinned = 0";
                
                $in_list = $dbw->escape(implode(",", $_REQUEST["posts"]));
                $posts_where = "where {$prfx}_post.id in ($in_list)";
                
                $imsg = text("MsgPostsDeleted");
                break;
            case "restore_post":
                if (empty($_REQUEST["posts"])) {
                    MessageHandler::setError(text("ErrNoPostSelected"));
                    return false;
                }
                $set_statement = "deleted = 0";
                
                $in_list = $dbw->escape(implode(",", $_REQUEST["posts"]));
                $posts_where = "where {$prfx}_post.id in ($in_list)";

                $imsg = text("MsgPostsRestored");
                break;
        }
        
        // protection against extra case
        if (empty($posts_where)) {
            return true;
        }
        
        $forums = array();
        $topics = array();
        $topics_with_pinned_post = array();
        $posts = array();
        
        if (!$dbw->execute_query("select {$prfx}_post.id, forum_id, topic_id, {$prfx}_topic.name topic_name, is_private,
                             {$prfx}_forum.name forum_name, {$prfx}_post.user_id, email, user_name, {$prfx}_post.author,
                             {$prfx}_post.read_marker, {$prfx}_post.pinned, is_private, {$prfx}_post.creation_date, text_content,
                             last_host, time_zone, send_notifications, interface_language, publish_delay, is_system
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             $posts_where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $forums[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("forum_id");
            
            $topics[$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
            
            if ($dbw->field_by_name("pinned")) {
                $topics_with_pinned_post[$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
            }
            
            $posts[$dbw->field_by_name("id")] = array(
                "post_id" => $dbw->field_by_name("id"),
                "topic_id" => $dbw->field_by_name("topic_id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "topic_private" => $dbw->field_by_name("is_private"),
                "publish_delay" => $dbw->field_by_name("publish_delay"),
                "is_system" => $dbw->field_by_name("is_system"),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "read_marker" => $dbw->field_by_name("read_marker"),
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "author_time_zone" => $dbw->field_by_name("time_zone") ? $dbw->field_by_name("time_zone") : TIME_ZONE,
                "last_host" => $dbw->field_by_name("last_host"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "post_date" => xstrtotime($dbw->field_by_name("creation_date")),
                "short_message" => $dbw->field_by_name("text_content"),
                "action" => $action,
                "comment" => reqvar("comment")
            );
        }
        
        $dbw->free_result();
        
        $topic_in_list = $dbw->escape(implode(",", $topics));
        
        // simple user cannot delete the first post of the topic
        
        $has_first_post = false;
        
        if ($action == "delete_post") {
            $query = "select min(id) first_id from
                          {$prfx}_post
                          where topic_id in ($topic_in_list)
                          group by topic_id";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $first_id = $dbw->field_by_name("first_id");
                
                if (in_array($first_id, $_REQUEST["posts"])) {
                    $has_first_post = true;
                    break;
                }
            }
            
            $dbw->free_result();
        }
        
        // check if the current user is the forum moderator or topic moderator
        
        $dmsg = text("ErrActionNotAllowed");
        $may_delete = false;
        
        foreach ($posts as $pdata) {
            if ($this->check_blocked($pdata["forum_id"])) {
                return false;
            }
            
            if ($this->is_blocked_in_topic($pdata["topic_id"])) {
                return false;
            }
            
            if (!empty($pdata["is_system"])) {
                MessageHandler::setError(text("ErrSystemMessageСhange"));
                return false;
            }
            
            if ($this->is_admin() || $this->is_forum_moderator($pdata["forum_id"])) {
                $may_delete = true;
            } elseif ($this->may_edit_message($pdata["post_id"])) {
                if (!$has_first_post) {
                    $may_delete = true;
                } elseif (!empty($pdata["publish_delay"])) {
                    $may_delete = true;
                } else {
                    $may_delete = false;
                    break;
                }
            } else {
                $dmsg = text("ErrEditTimeExpired");
                $may_delete = false;
                break;
            }
        }
        
        if (!$may_delete) {
            MessageHandler::setError($dmsg);
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // unset topics with deleted pinned posts
        
        if ($action == "delete_post" && !empty($topics_with_pinned_post)) {
            $topics_with_pinned_post_list = $dbw->escape(implode(",", $topics_with_pinned_post));
            
            $query = "update {$prfx}_topic set has_pinned_post = 0 where id in ($topics_with_pinned_post_list)";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->execute_query("update {$prfx}_post set $set_statement $posts_where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // find topics with 0 posts
        
        $topics_with_no_posts_list = "";

        foreach ($topics as $tid) {
            if (!$dbw->execute_query($this->get_query_empty_topic($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $topics_with_no_posts_list .= $dbw->field_by_name("id") . ",";
            }
            
            $dbw->free_result();
        }

        $topics_with_no_posts_list = trim($topics_with_no_posts_list, ",");
        
        $topic_notifications = array();
        
        $topics_with_no_posts = array();
        if (!empty($topics_with_no_posts_list)) {
            if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                               {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name,
                               is_private, publish_delay, email, user_name, author, last_host, send_notifications, interface_language
                               from
                               {$prfx}_topic
                               inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                               left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                               where {$prfx}_topic.id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $topics_with_no_posts[$dbw->field_by_name("id")] = array(
                    "topic_id" => $dbw->field_by_name("id"),
                    "topic_name" => $dbw->field_by_name("topic_name"),
                    "topic_private" => $dbw->field_by_name("is_private"),
                    "publish_delay" => $dbw->field_by_name("publish_delay"),
                    "forum_id" => $dbw->field_by_name("is_private") ? "private" : $dbw->field_by_name("forum_id"),
                    "forum_name" => $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name"),
                    "author_id" => $dbw->field_by_name("user_id"),
                    "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                    "author_email" => $dbw->field_by_name("email"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "action" => "delete_topic",
                    "comment" => reqvar("comment")
                );
            }
            
            $dbw->free_result();
            
            if (!$this->collect_notifiable_topic_users($dbw, $topic_notifications, $topics_with_no_posts_list, "delete_topic")) {
                return false;
            }
            
            // delete the topic if all posts are deleted
            
            if (!$dbw->execute_query("update {$prfx}_topic set deleted = 1, pinned = 0, publish_delay = 0 where id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("delete from {$prfx}_topic_moderator where topic_id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        } // if topics with no posts
        
        foreach ($posts as $pid => $pdata) {
            // do not track the events in the private or delayed topics
            if (!empty($pdata["topic_private"]) || !empty($pdata["publish_delay"])) {
                continue;
            }
            
            if (!$this->log_moderator_event($dbw, $prfx, $pdata)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        foreach ($topics_with_no_posts as $tid => $tdata) {
            // do not track the events in the private or delayed topics
            if (!empty($tdata["topic_private"]) || $tdata["publish_delay"]) {
                continue;
            }
            
            if (!$this->log_moderator_event($dbw, $prfx, $tdata)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // update post count in the affected topics
        
        foreach ($topics as $tid) {
            if (!$dbw->execute_query($this->get_query_post_cnt_update($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // update topic count in the affected forums
        
        foreach ($forums as $fid) {
            if (!$dbw->execute_query($this->get_query_topic_cnt_update($prfx, $fid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }

        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!empty($imsg)) {
            MessageHandler::setInfo($imsg);
        }
        
        // mail notification
        
        foreach ($posts as $pid => $pdata) {
            // if the actor and the receiver are the same, do not notify
            if (empty($pdata["author_id"]) || val_or_empty($pdata["author_id"]) == $this->get_user_id()) {
                continue;
            }
            
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($pdata["author_id"], $anonym_appendix, $anonym_appendix2);
            
            $event_code = "MsgEventMessageDeleted{$anonym_appendix2}";
            $email_template = "email_post_deleted{$anonym_appendix}.txt";
            
            if ($action == "restore_post") {
                $event_code = "MsgEventMessageRestored{$anonym_appendix2}";
                $email_template = "email_post_restored{$anonym_appendix}.txt";
            }
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{post_id}"] = $pdata["post_id"];
            
            $params["{user_name}"] = $pdata["author_name"];
            $params["{moderator_name}"] = $this->get_user_name();
            
            $fid_for_url = $pdata["forum_name"] == "PRIVATE_MESSAGES" ? "private" : $pdata["forum_id"];
            
            $params["{topic_id}"] = $pdata["topic_id"];
            $params["{topic_name}"] = $pdata["topic_name"];
            $params["{topic_url}"] = get_host_address($pdata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($pdata["topic_id"]) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($pdata["topic_id"]) . "&gotonew=1";
            
            $params["{post_url}"] = get_host_address($pdata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($pdata["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($pdata["post_id"]);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($pdata["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($pdata["post_id"]);
            
            $params["{forum_id}"] = $pdata["forum_id"];
            $params["{forum_name}"] = $pdata["forum_name"];
            $params["{forum_url}"] = get_host_address($pdata["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid_for_url);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid_for_url);
            
            $params["{message}"] = $pdata["short_message"];
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $params["{post_date}"] = $pdata["post_date"];
            $params["{comment}"] = $pdata["comment"];
            // will be parsed by reading
            
            $this->log_user_event($pdata["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params, $pdata["post_id"]);
            
            if (!empty($pdata["author_email"]) && !empty($pdata["send_notifications"])) {
                $params["{comment}"] = $pdata["comment"];
                $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $pdata["interface_language"], get_host_address($pdata["last_host"]) . get_url_path());
                
                $params["{message}"] = $pdata["short_message"];
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $pdata["interface_language"], get_host_address($pdata["last_host"]) . get_url_path(), 600);
                
                $params["{post_date}"] = date(text("DateTimeFormat", $pdata["interface_language"]), convert_timezone($params["{post_date}"], TIME_ZONE, $pdata["author_time_zone"]));
                $this->email_manager->send_email($settings["default_sender"], $pdata["author_email"], $email_template, $params, $pdata["interface_language"]);
            }
        }
        
        $this->do_topic_notifications($dbw, $prfx, $topic_notifications, $settings, "delete_topic");
        
        return true;
    } // delete_restore_posts
    
    //-----------------------------------------------------------------
    function delete_user_rates($uid)
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        $event_data = array();
        
        if (!$dbw->execute_query("select id, user_name, email, last_host, send_notifications, interface_language from {$prfx}_user where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $event_data["action"] = "delete_user_rates";
            
            $event_data["author_id"] = $dbw->field_by_name("id");
            $event_data["author_name"] = $dbw->field_by_name("user_name");
            $event_data["author_email"] = $dbw->field_by_name("email");
            $event_data["send_notifications"] = $dbw->field_by_name("send_notifications");
            $event_data["last_host"] = $dbw->field_by_name("last_host");
            $event_data["interface_language"] = $dbw->field_by_name("interface_language");
        }
        
        $dbw->free_result();
        
        
        $affected_posts = array();
        $affected_users = array();
        $total_deleted = 0;
        
        // let's go
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $has_deleted_dislikes = false;
        if (!empty($_REQUEST["to_delete"])) {
            $moderator_restriction = "";
            
            if (!$this->is_admin()) {
                $current_uid = $dbw->escape($this->get_user_id());
                $moderator_restriction = " and forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $current_uid)";
            }
            
            foreach ($_REQUEST["to_delete"] as $author_id => $to_delete) {
                $rates_to_delete = array();
                
                if (!empty($to_delete["likes"]) && is_numeric($to_delete["likes"]) && $to_delete["likes"] > 0) {
                    $query = $this->get_query_last_n_rates($prfx, $to_delete["likes"], $uid, $author_id, $moderator_restriction, 1);
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    while ($dbw->fetch_row()) {
                        $rates_to_delete[] = $dbw->field_by_name("id");
                        $affected_posts[] = $dbw->field_by_name("post_id");
                    }
                    
                    $dbw->free_result();
                }
                
                if (!empty($to_delete["dislikes"]) && is_numeric($to_delete["dislikes"]) && $to_delete["dislikes"] > 0) {
                    $query = $this->get_query_last_n_rates($prfx, $to_delete["dislikes"], $uid, $author_id, $moderator_restriction, -1);
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    while ($dbw->fetch_row()) {
                        $rates_to_delete[] = $dbw->field_by_name("id");
                        $affected_posts[] = $dbw->field_by_name("post_id");
                        
                        $has_deleted_dislikes = true;
                    }
                    
                    $dbw->free_result();
                }
                
                $cnt = count($rates_to_delete);
                if ($cnt > 0) {
                    $affected_users[$author_id]["rates_to_delete"] = $cnt;
                    $total_deleted += $cnt;
                    
                    $in_list = implode(", ", $rates_to_delete);
                    $query = "delete from {$prfx}_post_rating where id in ($in_list)";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
            }
        }
        
        if (empty($affected_users)) {
            MessageHandler::setError(text("MsgErrNoRatesDeleted"));
            return false;
        }
        
        $event_data["comment"] = "MSG(Rates): " . $total_deleted;
        
        $affected_users_in_list = implode(", ", array_keys($affected_users));
        $query = "select
                {$prfx}_user.id, email, user_name, donot_notify_on_rates, last_host, send_notifications, interface_language
                from {$prfx}_user
                where id in ($affected_users_in_list)
                ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $author_id = $dbw->field_by_name("id");
            
            $affected_users[$author_id]["user_name"] = $dbw->field_by_name("user_name");
            $affected_users[$author_id]["user_email"] = $dbw->field_by_name("email");
            $affected_users[$author_id]["send_notifications"] = $dbw->field_by_name("send_notifications");
            $affected_users[$author_id]["last_host"] = $dbw->field_by_name("last_host");
            $affected_users[$author_id]["donot_notify_on_rates"] = $dbw->field_by_name("donot_notify_on_rates");
            $affected_users[$author_id]["interface_language"] = $dbw->field_by_name("interface_language");
        }
        
        $dbw->free_result();
        
        foreach ($affected_users as $author_id => $uinfo) {
            if (!$dbw->execute_query($this->get_query_user_rate_cnt_update($prfx, $author_id))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        foreach ($affected_posts as $pid) {
            if (!$dbw->execute_query($this->get_query_post_rate_cnt_update($prfx, $pid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgRatesDeleted"));
        
        // mail notification
        
        $params = array();
        $params["{moderator_name}"] = $this->get_user_name();
        
        foreach ($affected_users as $auid => $uinfo) {
            // if the actor and the receiver are the same, do not notify
            if ($auid == $this->get_user_id()) {
                continue;
            }
            
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($auid, $anonym_appendix, $anonym_appendix2);
            
            $email_template = "email_post_rates_deleted{$anonym_appendix}.txt";
            $event_code = "MsgEventPostRatesDeleted{$anonym_appendix2}";
            if (!empty($settings["dislikes_anonym"]) && $has_deleted_dislikes) {
                $email_template = "email_post_dislike_rates_deleted{$anonym_appendix}.txt";
                $event_code = "MsgEventPostDislikeRatesDeleted{$anonym_appendix2}";
            }
            
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{rated_user_id}"] = $event_data["author_id"];
            $params["{rated_user_name}"] = $event_data["author_name"];
            $params["{count}"] = $uinfo["rates_to_delete"];
            $params["{site_url}"] = get_host_address($uinfo["last_host"]) . get_url_path();
            
            $this->log_user_event($auid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, null, !empty($uinfo["donot_notify_on_rates"]));
            
            if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"]) && empty($uinfo["donot_notify_on_rates"])) {
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], $email_template, $params, $uinfo["interface_language"]);
            }
        }
        
        // if the actor and the receiver are the same, do not notify
        if (empty($event_data["author_id"]) || val_or_empty($event_data["author_id"]) == $this->get_user_id()) {
            return true;
        }
        
        $anonym_appendix = "";
        $anonym_appendix2 = "";
        $this->get_anonym_appendixes($event_data["author_id"], $anonym_appendix, $anonym_appendix2);
        
        $email_template = "email_N_rates_deleted{$anonym_appendix}.txt";
        $event_code = "MsgEventNRatesDeleted{$anonym_appendix2}";
        
        $params = array();
        $params["{user_name}"] = $event_data["author_name"];
        $params["{moderator_name}"] = $this->get_user_name();
        $params["{site_url}"] = get_host_address($event_data["last_host"]) . get_url_path();
        $params["{count}"] = $total_deleted;
        
        $this->log_user_event($event_data["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params);
        
        if (!empty($event_data["author_email"]) && !empty($event_data["send_notifications"])) {
            $this->email_manager->send_email($settings["default_sender"], $event_data["author_email"], $email_template, $params, $event_data["interface_language"]);
        }
        
        return true;
    } // delete_user_rates
    
    //-----------------------------------------------------------------
    function bulk_delete_restore_posts($pid, $action, &$response)
    {
        global $settings;
        
        $N = 5;
        if (defined('BULK_DELETE_COUNT') && is_numeric(BULK_DELETE_COUNT)) {
            $N = BULK_DELETE_COUNT;
        }
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pid = $dbw->escape($pid);
        
        // get the author data from post
        
        $event_data = array();
        $email_template = "";
        $event_code = "";
        $posts_where = "";
        
        $days_appendix = "";
        $days_appendix2 = "";
        
        $deletion = true;
        $sql_delete_action = "deleted = 1, pinned = 0";
        $info_msg = text("MsgPostsDeleted");
        if ($action == "restore_posts_in_topic" || $action == "restore_posts_in_topic_from") {
            $deletion = false;
            $sql_delete_action = "deleted = 0";
            $info_msg = text("MsgPostsRestored");
        }
        
        if (!$dbw->execute_query("select forum_id, topic_id,
                             {$prfx}_post.user_id, user_name, email, {$prfx}_post.author, last_host, send_notifications, interface_language,
                             {$prfx}_post.read_marker, {$prfx}_topic.name topic_name, is_private,
                             {$prfx}_forum.name forum_name
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $source_topic_id = "";
        $source_forum_id = "";
        
        if ($dbw->fetch_row()) {
            $author_id = $dbw->field_by_name("user_id");
            $author_rm = quotes_or_null($dbw->field_by_name("read_marker"));
            
            $topic_id = $dbw->field_by_name("topic_id");
            $forum_id = $dbw->field_by_name("forum_id");
            
            $source_topic_id = $dbw->field_by_name("topic_id");
            $source_forum_id = $dbw->field_by_name("forum_id");
            
            $posts_where = "where {$prfx}_post.read_marker = $author_rm and {$prfx}_post.user_id is NULL";
            if ($action == "restore_posts_in_topic_from") {
                $posts_where = " where {$prfx}_post.id >= $pid";
            } elseif (!empty($author_id)) {
                $posts_where = "where {$prfx}_post.user_id = $author_id";
            } 

            if (!$this->is_admin() && !$this->is_forum_moderator($forum_id)) {
                $posts_where .= " and {$prfx}_post.is_system = 0";
            }
            
            switch ($action) {
                case "delete_posts_in_topic":
                case "restore_posts_in_topic":
                case "restore_posts_in_topic_from":
                    $comment = reqvar("comment");
                    
                    $topic_moderator_appendix = "";
                    $topic_allow_moderate = (time() - get_allow_moderate_period()); // moderate period not expired
                    $topic_allow_moderate = $dbw->format_datetime($topic_allow_moderate);
                    if (!$this->is_admin() &&
                        !$this->is_privileged_topic_moderator() &&
                        $this->is_topic_moderator($topic_id)
                    ) {
                        $topic_moderator_appendix = " and {$prfx}_post.creation_date >= '$topic_allow_moderate'";
                        
                        $days_appendix = "_days";
                        $days_appendix2 = "ForDays";
                        
                        $comment = "MSG(ForDays\t" . get_allow_moderate_period_days() . ")";
                        if (!reqvar_empty("comment")) {
                            $comment .= "\n\n" . reqvar("comment");
                        }
                    }
                    
                    $posts_where .= " and {$prfx}_post.topic_id = $topic_id $topic_moderator_appendix";
                    
                    $event_data = array(
                        "topic_id" => $dbw->field_by_name("topic_id"),
                        "topic_name" => $dbw->field_by_name("topic_name"),
                        "topic_private" => $dbw->field_by_name("is_private"),
                        "forum_id" => $dbw->field_by_name("forum_id"),
                        "forum_name" => $dbw->field_by_name("forum_name"),
                        "days" => get_allow_moderate_period_days(),
                        "author_id" => $dbw->field_by_name("user_id"),
                        "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                        "author_email" => $dbw->field_by_name("email"),
                        "send_notifications" => $dbw->field_by_name("send_notifications"),
                        "last_host" => $dbw->field_by_name("last_host"),
                        "interface_language" => $dbw->field_by_name("interface_language"),
                        "action" => $action,
                        "comment" => $comment
                    );
                    break;
                case "delete_posts_in_forum":
                    if ($dbw->field_by_name("forum_name") == "PRIVATE_MESSAGES") {
                        $dbw->free_result();
                        MessageHandler::setError(text("ErrActionNotAllowed"));
                        return false;
                    }
                    
                    $posts_where .= " and {$prfx}_post.topic_id in (select id from {$prfx}_topic where forum_id = $forum_id and is_private < 1)";
                    
                    $event_data = array(
                        "forum_id" => $dbw->field_by_name("forum_id"),
                        "forum_name" => $dbw->field_by_name("forum_name"),
                        "author_id" => $dbw->field_by_name("user_id"),
                        "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                        "author_email" => $dbw->field_by_name("email"),
                        "send_notifications" => $dbw->field_by_name("send_notifications"),
                        "last_host" => $dbw->field_by_name("last_host"),
                        "interface_language" => $dbw->field_by_name("interface_language"),
                        "action" => $action,
                        "comment" => reqvar("comment")
                    );
                    break;
                case "delete_last_N_posts":
                    // $posts_where will be formed later
                    
                    $comment = "MSG(Messages): " . $N;
                    if (!reqvar_empty("comment")) {
                        $comment .= "\n\n" . reqvar("comment");
                    }
                    
                    $event_data = array(
                        "author_id" => $dbw->field_by_name("user_id"),
                        "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                        "author_email" => $dbw->field_by_name("email"),
                        "forum_id" => $dbw->field_by_name("forum_id"),
                        "forum_name" => $dbw->field_by_name("forum_name"),
                        "send_notifications" => $dbw->field_by_name("send_notifications"),
                        "last_host" => $dbw->field_by_name("last_host"),
                        "interface_language" => $dbw->field_by_name("interface_language"),
                        "action" => $action,
                        "comment" => $comment
                    );
                    break;
                case "delete_all_posts":
                    $posts_where .= " and {$prfx}_post.topic_id in (select id from {$prfx}_topic where is_private < 1)";

                    $event_data = array(
                        "author_id" => $dbw->field_by_name("user_id"),
                        "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                        "author_email" => $dbw->field_by_name("email"),
                        "send_notifications" => $dbw->field_by_name("send_notifications"),
                        "last_host" => $dbw->field_by_name("last_host"),
                        "interface_language" => $dbw->field_by_name("interface_language"),
                        "action" => $action,
                        "comment" => reqvar("comment")
                    );
                    break;
            }
        } else {
            $dbw->free_result();
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw->free_result();
        
        if (!$this->is_admin() && !$this->is_forum_moderator($forum_id) && !$this->is_topic_moderator($topic_id)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if ($this->check_blocked($forum_id)) {
            return false;
        }
        
        // if delete_last_N_posts we collect these posts
        if ($action == "delete_last_N_posts") {
            if (!$dbw->execute_query($this->get_query_last_n_posts($N, $prfx, $source_forum_id, $author_id, $author_rm))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $post_clause = "";
            
            while ($dbw->fetch_row()) {
                $post_clause .= $dbw->field_by_name("id") . ",";
            }
            
            $dbw->free_result();
            
            $post_clause = trim($post_clause, ",");
            if (empty($post_clause)) {
                $post_clause = "NULL";
            }
            
            $posts_where .= " and {$prfx}_post.id in ($post_clause)";
        } // delete last N
        
        $affected_users = array();
        $affected_guests = array();

        if ($action == "restore_posts_in_topic_from") {
            $event_data["action"] = "bulk_restore_posts";
          
            if (!$dbw->execute_query("select {$prfx}_user.id, email, user_name, last_host, send_notifications, interface_language, is_admin, count(*) cnt, min({$prfx}_post.id) first_post
                                 from {$prfx}_post
                                 inner join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                                 $posts_where and {$prfx}_post.deleted = 1
                                 group by {$prfx}_user.id, email, user_name, last_host, send_notifications, interface_language, is_admin
                                 ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                if ($dbw->field_by_name("is_admin") && !reqvar_empty("block_users")) {
                    MessageHandler::setError(text("ErrModeratorBlockNotAllowed"));
                    $dbw->free_result();
                    return false;
                }
                
                $affected_users[$dbw->field_by_name("id")] = array(
                    "user_name" => $dbw->field_by_name("user_name"),
                    "user_email" => $dbw->field_by_name("email"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "post_count" => $dbw->field_by_name("cnt"),
                    "first_post" => $dbw->field_by_name("first_post")
                );
            }
            
            $dbw->free_result();
            
            
            if (!$dbw->execute_query("select author, count(*) cnt
                                 from {$prfx}_post
                                 $posts_where and {$prfx}_post.deleted = 1 and {$prfx}_post.user_id is NULL
                                 group by author")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $affected_guests[] = array(
                    "guest_name" => $dbw->field_by_name("author"),
                    "post_count" => $dbw->field_by_name("cnt")
                );
            }
            
            $dbw->free_result();
        } // restore_posts_in_topic_from       
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // unset topics with deleted pinned posts
        
        if ($deletion) {
            $topics_with_pinned_post = array();
            
            $query = "select topic_id from {$prfx}_post $posts_where and pinned = 1";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $topics_with_pinned_post[$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
            }
            
            $dbw->free_result();
            
            if (!empty($topics_with_pinned_post)) {
                $topics_with_pinned_post_list = $dbw->escape(implode(",", $topics_with_pinned_post));

                $query = "update {$prfx}_topic set has_pinned_post = 0 where id in ($topics_with_pinned_post_list)";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        if (!$dbw->execute_query("update {$prfx}_post set $sql_delete_action $posts_where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $forums = array();
        $topics = array();
        
        if (!$dbw->execute_query("select distinct topic_id, forum_id
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             $posts_where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topics[$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
            $forums[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("forum_id");
        }
        
        $dbw->free_result();
        
        $topic_in_list = $dbw->escape(implode(",", $topics));
        if (empty($topic_in_list)) {
            $topic_in_list = "NULL";
        }
        
        // find topics with 0 posts
        
        $source_topic_deleted = false;
        $topics_with_no_posts_list = "";

        if ($deletion) {
            foreach ($topics as $tid) {
                if (!$dbw->execute_query($this->get_query_empty_topic($prfx, $tid))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                while ($dbw->fetch_row()) {
                    if ($source_topic_id == $dbw->field_by_name("id")) {
                        $source_topic_deleted = true;
                    }
                    
                    $topics_with_no_posts_list .= $dbw->field_by_name("id") . ",";
                }
                
                $dbw->free_result();
            }

            $topics_with_no_posts_list = trim($topics_with_no_posts_list, ",");
        }
        
        $topic_notifications = array();
        
        $topics_with_no_posts = array();
        if (!empty($topics_with_no_posts_list)) {
            if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                               {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name, is_private,
                               email, user_name, author, last_host, send_notifications
                               from
                               {$prfx}_topic
                               inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                               left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                               where {$prfx}_topic.id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $topics_with_no_posts[$dbw->field_by_name("id")] = array(
                    "topic_id" => $dbw->field_by_name("id"),
                    "topic_name" => $dbw->field_by_name("topic_name"),
                    "forum_id" => $dbw->field_by_name("forum_id"),
                    "forum_name" => $dbw->field_by_name("forum_name"),
                    "author_id" => $dbw->field_by_name("user_id"),
                    "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                    "author_email" => $dbw->field_by_name("email"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "action" => "delete_topic",
                    "comment" => reqvar("comment")
                );
            }
            
            $dbw->free_result();
            
            if (!$this->collect_notifiable_topic_users($dbw, $topic_notifications, $topics_with_no_posts_list, "delete_topic")) {
                return false;
            }
            
            // delete the topic if all posts are deleted
            
            if (!$dbw->execute_query("update {$prfx}_topic set deleted = 1, pinned = 0, publish_delay = 0 where id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("delete from {$prfx}_topic_moderator where topic_id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        } // topics with no posts
        
        // do not track the private events
        
        if (empty($event_data["topic_private"])) {
            if ($action == "restore_posts_in_topic_from") {
                foreach ($affected_users as $uid => $uinfo) {
                    $event_data["author_id"] = $uid;
                    $event_data["author_name"] = $uinfo["user_name"];
                    $event_data["comment"] = "MSG(Messages): " . $uinfo["post_count"];
                    if (!reqvar_empty("comment")) {
                        $event_data["comment"] .= "\n\n" . reqvar("comment");
                    }
                    
                    if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
                
                foreach ($affected_guests as $guest_info) {
                    $event_data["author_id"] = "";
                    $event_data["author_name"] = $guest_info["guest_name"];
                    $event_data["comment"] = "MSG(Messages): " . $guest_info["post_count"];
                    if (!reqvar_empty("comment")) {
                        $event_data["comment"] .= "\n\n" . reqvar("comment");
                    }
                    
                    if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
            } else {
                if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
            }
            
            foreach ($topics_with_no_posts as $tid => $tdata) {
                if (!$this->log_moderator_event($dbw, $prfx, $tdata)) {
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        } // track moderator event if not private

        // update post count in the affected topics
        
        foreach ($topics as $tid) {
            if (!$dbw->execute_query($this->get_query_post_cnt_update($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // update topic count in the affected forums
        
        foreach ($forums as $fid) {
            if (!$dbw->execute_query($this->get_query_topic_cnt_update($prfx, $fid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo($info_msg);
        
        $response['target_url'] = "topic.php?fid=" . $source_forum_id;
        if (!reqvar_empty("fpage")) {
            $response["target_url"] .= "&fpage=" . reqvar("fpage");
        }
        $response["target_url"] .= "&tid=" . $source_topic_id . "&msg=" . $pid;
        
        // mail notification
        
        // if the actor and the receiver are the same, do not notify
        if (!empty($event_data["author_id"]) && val_or_empty($event_data["author_id"]) != $this->get_user_id() &&
            $action != "restore_posts_in_topic_from") {
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($event_data["author_id"], $anonym_appendix, $anonym_appendix2);
            
            $email_template = "";
            $event_code = "";
            switch ($action) {
                case "delete_posts_in_topic":
                    $email_template = "email_posts_in_topic_deleted{$days_appendix}{$anonym_appendix}.txt";
                    $event_code = "MsgEventMessagesInTopicDeleted{$days_appendix2}{$anonym_appendix2}";
                    break;
                case "restore_posts_in_topic":
                    $email_template = "email_posts_in_topic_restored{$days_appendix}{$anonym_appendix}.txt";
                    $event_code = "MsgEventMessagesInTopicRestored{$days_appendix2}{$anonym_appendix2}";
                    break;
                case "delete_posts_in_forum":
                    $email_template = "email_posts_in_forum_deleted{$anonym_appendix}.txt";
                    $event_code = "MsgEventMessagesInForumDeleted{$anonym_appendix2}";
                    break;
                case "delete_last_N_posts":
                    $email_template = "email_N_posts_deleted{$anonym_appendix}.txt";
                    $event_code = "MsgEventNMessagesDeleted{$anonym_appendix2}";
                    break;
                case "delete_all_posts":
                    $email_template = "email_all_posts_deleted{$anonym_appendix}.txt";
                    $event_code = "MsgEventAllMessagesDeleted{$anonym_appendix2}";
                    break;
            }
            
            $params = array();
            
            $params["{user_name}"] = $event_data["author_name"];
            $params["{moderator_name}"] = $this->get_user_name();
            $params["{days}"] = get_allow_moderate_period_days();
            $params["{count}"] = $N;
            
            if (!empty($event_data["topic_id"])) {
                $fid_for_url = $event_data["forum_name"] == "PRIVATE_MESSAGES" ? "private" : $event_data["forum_id"];
                
                $params["{topic_id}"] = $event_data["topic_id"];
                $params["{topic_name}"] = $event_data["topic_name"];
                $params["{site_url}"] = get_host_address($event_data["last_host"]) . get_url_path();
                $params["{topic_url}"] = get_host_address($event_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($event_data["topic_id"]);
                $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($event_data["topic_id"]) . "&gotonew=1";
            }
            
            if (!empty($event_data["forum_id"])) {
                $fid_for_url = $event_data["forum_name"] == "PRIVATE_MESSAGES" ? "private" : $event_data["forum_id"];
                
                $params["{forum_id}"] = $event_data["forum_id"];
                $params["{forum_name}"] = $event_data["forum_name"];
                $params["{site_url}"] = get_host_address($event_data["last_host"]) . get_url_path();
                $params["{forum_url}"] = get_host_address($event_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid_for_url);
                $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid_for_url);
            }
            
            $params["{comment}"] = reqvar("comment");
            // will be parsed by reading
            
            $this->log_user_event($event_data["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params);
            
            if (!empty($event_data["author_email"]) && !empty($event_data["send_notifications"])) {
                $params["{comment}"] = reqvar("comment");
                $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $event_data["interface_language"], get_host_address($event_data["last_host"]) . get_url_path());
                
                $this->email_manager->send_email($settings["default_sender"], $event_data["author_email"], $email_template, $params, $event_data["interface_language"]);
            }
        }
        
        $params = array();
        $params["{moderator_name}"] = $this->get_user_name();
        $params["{comment}"] = reqvar("comment");

        foreach ($affected_users as $uid => $uinfo) {
            // if the actor and the receiver are the same, do not notify
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($uid, $anonym_appendix, $anonym_appendix2);
            
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{count}"] = $uinfo["post_count"];
            $params["{site_url}"] = get_host_address($uinfo["last_host"]) . get_url_path();
            
            $params["{topic_id}"] = $event_data["topic_id"];
            $params["{topic_name}"] = $event_data["topic_name"];
            $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($event_data["forum_id"]) . "&tid=" . xrawurlencode($event_data["topic_id"]) . "&msg=" . xrawurlencode($uinfo["first_post"]);
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($event_data["forum_id"]) . "&tid=" . xrawurlencode($event_data["topic_id"]) . "&msg=" . xrawurlencode($uinfo["first_post"]);

            $params["{forum_id}"] = $event_data["forum_id"];
            $params["{forum_name}"] = $event_data["forum_name"];
            $params["{forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($event_data["forum_id"]);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($event_data["forum_id"]);
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), "MsgEventBulkMessagesRestoredInTopic{$anonym_appendix2}", $params);
            
            if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $uinfo["interface_language"], get_host_address($uinfo["last_host"]) . get_url_path());
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_posts_bulk_in_topic_restored{$anonym_appendix}.txt", $params, $uinfo["interface_language"]);
            }
        }

        $this->do_topic_notifications($dbw, $prfx, $topic_notifications, $settings, "delete_topic");
        
        return true;
    } // bulk_delete_restore_posts
    
    //-----------------------------------------------------------------
    function log_moderator_event(&$dbw, $prfx, &$event_data)
    {
        global $READ_MARKER;
        global $settings;

        if (empty($event_data["action"])) {
            return true;
        }
        
        if (!empty($settings["archive_mode"])) {
            return true;
        }

        $event_time = $dbw->format_datetime(time());
        
        $moderator_name = $this->get_user_name();
        if (empty($moderator_name) && !empty($event_data["author_name"])) {
            $moderator_name = $event_data["author_name"];
        }
        
        $moderator_id = $this->get_user_id();
        
        // The user edits his post posted under a guest
        if (val_or_empty($event_data["read_marker"]) == $READ_MARKER &&
            $event_data["author_name"] != $this->get_user_name()
           ) {
            $moderator_id = "";
            $moderator_name = $event_data["author_name"];
        }   
        
        $moderator_name = quotes_or_null($dbw->escape($moderator_name));

        if (empty($moderator_id)) {
            $moderator_id = "NULL";
        }
        
        $action = quotes_or_null($dbw->escape(val_or_empty($event_data["action"])));
        if (empty($event_data["action_expires"])) {
            $action_expires = "NULL";
        } else {
            $action_expires = "'" . $dbw->format_datetime($event_data["action_expires"]) . "'";
        }
        
        $ip = quotes_or_null($dbw->escape(val_or_empty($event_data["ip"])));
        
        $author_name = quotes_or_null($dbw->escape(val_or_empty($event_data["author_name"])));
        $author_id = val_or_empty($event_data["author_id"]);
        if (empty($author_id) || !is_numeric($author_id)) {
            $author_id = "NULL";
        }
        
        $topic_name = quotes_or_null($dbw->escape(val_or_empty($event_data["topic_name"])));
        $topic_id = val_or_empty($event_data["topic_id"]);
        if (empty($topic_id) || !is_numeric($topic_id)) {
            $topic_id = "NULL";
        }
        
        $source_topic_name = quotes_or_null($dbw->escape(val_or_empty($event_data["source_topic_name"])));
        $source_topic_id = val_or_empty($event_data["source_topic_id"]);
        if (empty($source_topic_id) || !is_numeric($source_topic_id)) {
            $source_topic_id = "NULL";
        }
        
        $post_id = val_or_empty($event_data["post_id"]);
        if (empty($post_id) || !is_numeric($post_id)) {
            $post_id = "NULL";
        }
        
        $forum_name = quotes_or_null($dbw->escape(val_or_empty($event_data["forum_name"])));
        $forum_id = val_or_empty($event_data["forum_id"]);
        if (empty($forum_id) || !is_numeric($forum_id)) {
            $forum_id = "NULL";
        }
        
        $comment = quotes_or_null($dbw->escape(Emoji::Encode(val_or_empty($event_data["comment"]))));
        
        // if the same event repeats, delete the previous
        if ($post_id != "NULL") {
            $start_date = $dbw->format_datetime(time() - 30 * 60);
            
            if (!$dbw->execute_query("update {$prfx}_moderator_log set redundant = 1
                                      where action = $action and post_id = $post_id
                                      and moderator_name = $moderator_name and event_time > '$start_date'")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        if (!$dbw->execute_query("insert into {$prfx}_moderator_log
                            (event_time,
                             moderator_name,
                             moderator_id,
                             action,
                             action_expires,
                             author_name,
                             author_id,
                             ip,
                             post_id,
                             topic_name,
                             topic_id,
                             source_topic_name,
                             source_topic_id,
                             forum_name,
                             forum_id,
                             comment
                            )
                            values
                            ('$event_time',
                             $moderator_name,
                             $moderator_id,
                             $action,
                             $action_expires,
                             $author_name,
                             $author_id,
                             $ip,
                             $post_id,
                             $topic_name,
                             $topic_id,
                             $source_topic_name,
                             $source_topic_id,
                             $forum_name,
                             $forum_id,
                             $comment
                            )")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // log_moderator_event
    
    //-----------------------------------------------------------------
    function make_revoke_topic_moderator($pid, $action, &$response)
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        if (empty($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pid = $dbw->escape($pid);
        
        // get the author data from post
        
        $event_data = array();
        
        if (!$dbw->execute_query("select forum_id, topic_id,
                             {$prfx}_post.user_id, {$prfx}_user.user_name, {$prfx}_user.email, {$prfx}_post.author, {$prfx}_user.last_host, {$prfx}_user.send_notifications, {$prfx}_user.interface_language,
                             {$prfx}_topic.user_id creator_user_id, topic_creator.user_name creator_user_name, topic_creator.email creator_email, {$prfx}_topic.author creator_author, topic_creator.last_host creator_last_host, topic_creator.send_notifications creator_send_notifications, topic_creator.interface_language creator_interface_language,
                             {$prfx}_post.read_marker, {$prfx}_topic.name topic_name, is_private,
                             {$prfx}_forum.name forum_name
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             left join {$prfx}_user topic_creator on ({$prfx}_topic.user_id = topic_creator.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $event_data = array(
                "topic_id" => $dbw->field_by_name("topic_id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "forum_id" => $dbw->field_by_name("is_private") ? "private" : $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name"),
                
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                
                "creator_id" => $dbw->field_by_name("creator_user_id"),
                "creator_name" => $dbw->field_by_name("creator_user_name") ? $dbw->field_by_name("creator_user_name") : $dbw->field_by_name("creator_author"),
                "creator_email" => $dbw->field_by_name("creator_email"),
                "creator_send_notifications" => $dbw->field_by_name("creator_send_notifications"),
                "creator_last_host" => $dbw->field_by_name("creator_last_host"),
                "creator_interface_language" => $dbw->field_by_name("creator_interface_language"),
                
                "action" => $action,
                "comment" => reqvar("comment")
            );
        } else {
            $dbw->free_result();
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw->free_result();
        
        if (empty($event_data["topic_id"])) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        if (empty($event_data["author_id"])) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        $tid = $dbw->escape($event_data["topic_id"]);
        $uid = $dbw->escape($event_data["author_id"]);
        
        if (!empty($event_data["forum_id"])) {
            $fid = $dbw->escape($event_data["forum_id"]);
            $query = "select 1 from {$prfx}_forum_moderator
                where forum_id = $fid and user_id = $uid
                ";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row() && $action == "make_topic_moderator") {
                MessageHandler::setError(text("ErrUserAlreadyForumModerator"));
                $dbw->free_result();
                return false;
            }
            
            $dbw->free_result();
        }
        
        // final existing moderators
        
        $existing_moderators = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language, last_host
                             from {$prfx}_user
                             where
                             id in (select user_id from {$prfx}_topic_moderator where topic_id = $tid) 
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $existing_moderators[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "make_topic_moderator" && !empty($existing_moderators[$uid])) {
            MessageHandler::setWarning(sprintf(text("WarnTopicModeratorAuthorAlreadyMade"), $event_data["author_name"]));
            return false;
        }
		
        $imsg = "";
        
        $anonym_appendix = "";
        $anonym_appendix2 = "";
        $this->get_anonym_appendixes($uid, $anonym_appendix, $anonym_appendix2);
        
        if ($action == "make_topic_moderator" || $action == "revoke_topic_moderator") {
            if (!$dbw->execute_query("delete from {$prfx}_topic_moderator
                               where user_id = $uid and topic_id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = sprintf(text("MsgTopicModeratorRevokedAuthor"), $event_data["author_name"]);
            $response['convert_action_link'] = "make_topic_moderator";
            
            $email_template = "email_revoke_topic_moderator{$anonym_appendix}.txt";
            $event_code = "MsgEventRevokeTopicModerator{$anonym_appendix2}";
            
            $email_template2 = "email_topic_moderator_removed{$anonym_appendix}.txt";
            $event_code2 = "MsgEventTopicModeratorRemoved{$anonym_appendix2}";
            
            $email_template3 = "email_topic_moderator_removed_author{$anonym_appendix}.txt";
            $event_code3 = "MsgEventTopicModeratorRemovedAuthor{$anonym_appendix2}";
        }
        
        if ($action == "make_topic_moderator") {
            if (!$dbw->execute_query("insert into {$prfx}_topic_moderator
                               (user_id, topic_id)
                               values
                               ($uid, $tid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            // text("MsgTopicModeratorMade")
            // text("MsgTopicModeratorRevoked")
            
            $imsg = sprintf(text("MsgTopicModeratorMadeAuthor"), $event_data["author_name"]);
            $response['convert_action_link'] = "revoke_topic_moderator";
            
            $email_template = "email_grant_topic_moderator{$anonym_appendix}.txt";
            $event_code = "MsgEventGrantTopicModerator{$anonym_appendix2}";
            
            $email_template2 = "email_topic_moderator_added{$anonym_appendix}.txt";
            $event_code2 = "MsgEventNewTopicModeratorAdded{$anonym_appendix2}";
            
            $email_template3 = "email_topic_moderator_added_author{$anonym_appendix}.txt";
            $event_code3 = "MsgEventNewTopicModeratorAddedAuthor{$anonym_appendix2}";
            
            $sys_post_id = "";
            if (!$this->post_sys_message($dbw, $tid, "MSG(MsgTopicModeratorMade): [uid=$event_data[author_id]].", $sys_post_id)) {
                $dbw->rollback_transaction();
                return false;
            }
        } else {
            if (!$this->post_sys_message($dbw, $tid, "MSG(MsgTopicModeratorRevoked): [uid=$event_data[author_id]].", $sys_post_id)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo($imsg);
        
        // mail notification
        
        // if the actor and the receiver are the same, do not notify
        if (val_or_empty($event_data["author_id"]) == $this->get_user_id()) {
            return true;
        }
        
        $params = array();
        
        $params["{user_name}"] = $event_data["author_name"];
        $params["{moderator_name}"] = $this->get_user_name();
        
        $params["{topic_id}"] = $event_data["topic_id"];
        $params["{topic_name}"] = $event_data["topic_name"];
        $params["{topic_url}"] = get_host_address($event_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($event_data["forum_id"]) . "&tid=" . xrawurlencode($event_data["topic_id"]) . "&gotonew=1";
        $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($event_data["forum_id"]) . "&tid=" . xrawurlencode($event_data["topic_id"]) . "&gotonew=1";
        
        $params["{forum_id}"] = $event_data["forum_id"];
        $params["{forum_name}"] = $event_data["forum_name"];
        $params["{forum_url}"] = get_host_address($event_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($event_data["forum_id"]);
        $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($event_data["forum_id"]);
        
        $params["{comment}"] = reqvar("comment");
        // will be parsed by reading
        
        $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $sys_post_id);
        
        if (!empty($event_data["author_email"]) && !empty($event_data["send_notifications"])) {
            $params["{comment}"] = reqvar("comment");
            $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $event_data["interface_language"], get_host_address($event_data["last_host"]) . get_url_path(), 600);
            
            $this->email_manager->send_email($settings["default_sender"], $event_data["author_email"], $email_template, $params, $event_data["interface_language"]);
        }
        
        // Inform the topic author if other users are granted the topic moderator rights
        
        if (!empty($event_data["creator_id"]) && 
            $event_data["creator_id"] != $this->get_user_id() && 
            $event_data["creator_id"] != $uid) {
            
            $params["{user_name}"] = $event_data["creator_name"];
            
            $params["{topic_moderator_id}"] = $uid;
            $params["{topic_moderator_name}"] = $event_data["author_name"];
            
            $params["{forum_url}"] = get_host_address($event_data["creator_last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $params["{topic_url}"] = get_host_address($event_data["creator_last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($event_data["forum_id"]) . "&tid=" . xrawurlencode($event_data["topic_id"]) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($event_data["forum_id"]) . "&tid=" . xrawurlencode($event_data["topic_id"]) . "&gotonew=1";
            
            $this->log_user_event($event_data["creator_id"], $this->get_user_id(), $this->get_user_name(), $event_code3, $params, $sys_post_id);
            
            if (!empty($event_data["creator_email"]) && !empty($event_data["creator_send_notifications"])) {
                $params["{comment}"] = reqvar("comment");
                $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $event_data["creator_interface_language"], get_host_address($event_data["creator_last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $event_data["creator_email"], $email_template3, $params, $event_data["creator_interface_language"]);
            }
        }
        
        foreach ($existing_moderators as $id => $minfo) {
            // if the actor and the receiver are the same, do not notify
            if ($id == $this->get_user_id()) {
                continue;
            }
            
            $params["{user_name}"] = $minfo["user_name"];
            
            $params["{topic_moderator_id}"] = $uid;
            $params["{topic_moderator_name}"] = $event_data["author_name"];
            
            $params["{forum_url}"] = get_host_address($minfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $params["{topic_url}"] = get_host_address($minfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($event_data["forum_id"]) . "&tid=" . xrawurlencode($event_data["topic_id"]) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($event_data["forum_id"]) . "&tid=" . xrawurlencode($event_data["topic_id"]) . "&gotonew=1";
            
            $this->log_user_event($id, $this->get_user_id(), $this->get_user_name(), $event_code2, $params);
            
            if (!empty($minfo["user_email"]) && !empty($minfo["send_notifications"])) {
                $this->email_manager->send_email($settings["default_sender"], $minfo["user_email"], $email_template2, $params, $minfo["interface_language"]);
            }
        }
        
        return true;
    } // make_revoke_topic_moderator
    
    //-----------------------------------------------------------------
    function pin_unpin_post($pid, $action, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pid = $dbw->escape($pid);
        
        // get the author data from post
        
        $event_data = array();
        
        if (!$dbw->execute_query("select {$prfx}_post.id, forum_id, topic_id, has_pinned_post,
                             {$prfx}_post.user_id, {$prfx}_topic.user_id topic_user_id, user_name, email, {$prfx}_post.author,
                             {$prfx}_post.read_marker, {$prfx}_topic.name topic_name, is_private,
                             {$prfx}_forum.name forum_name, {$prfx}_post.deleted
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $fid = "";
        $tid = "";
        
        $has_pinned_post = false;
        
        if ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("topic_id");
            $fid = $dbw->field_by_name("forum_id");
            
            $has_pinned_post = $dbw->field_by_name("has_pinned_post");
            
            $event_data = array(
                "post_id" => $dbw->field_by_name("id"),
                "topic_id" => $dbw->field_by_name("topic_id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "topic_private" => $dbw->field_by_name("is_private"),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "author_id" => $dbw->field_by_name("user_id"),
                "topic_author_id" => $dbw->field_by_name("topic_user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "deleted" => $dbw->field_by_name("deleted"),
                "action" => $action
            );
        } else {
            $dbw->free_result();
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw->free_result();
        
        if ($this->check_blocked($fid)) {
            return false;
        }
        
        // check if the current user is the forum moderator or topic moderator
        
        $may_pin = false;
        
        if ($this->is_admin() || $this->is_forum_moderator($fid)) {
            $may_pin = true;
        }
        
        if ($this->is_topic_moderator($tid)) {
            $may_pin = true;
        }
        
        if (!$may_pin) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (!empty($event_data["deleted"])) {
            MessageHandler::setError(text("ErrPinDeletedMessage"));
            return false;
        }
        
        switch ($action) {
            case "pin_post":
                $pinned = "1";
                $response['convert_action_link'] = "unpin_post";
                $imsg = text("MsgMessagePinned");
                break;
            case "unpin_post":
                $pinned = "0";
                $response['convert_action_link'] = "pin_post";
                $imsg = text("MsgMessageUnpinned");
                break;
        }
        
        if ($pinned && $has_pinned_post) {
            MessageHandler::setError(text("ErrOnlyOnePostCanBePinned"));
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_post set pinned = $pinned, is_comment = 0 where id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_topic set has_pinned_post = $pinned where id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (empty($event_data["topic_private"]) && !$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo($imsg);
        
        return true;
    } // pin_unpin_post
    
    //-----------------------------------------------------------------
    function add_remove_post_favourites($pid, $action, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        $pid = $dbw->escape($pid);
        
        if (!$dbw->execute_query("select topic_id, deleted
                             from
                             {$prfx}_post
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $deleted = 0;
        
        if ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("topic_id");
            $deleted = $dbw->field_by_name("deleted");
        } else {
            $dbw->free_result();
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw->free_result();
        
        if ($deleted) {
            MessageHandler::setError(text("ErrPostDeleted"));
            return false;
        }
        
        // we do not allow to add the deleted post to favourites,
        // but allow remove all
        if (!$this->has_access_to_topic($tid, false)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (empty($uid)) {
            if ($action == "remove_post_from_favourites") {
                unset($_SESSION["favourite_posts"][$pid]);
                
                $response['convert_action_link'] = "add_post_to_favourites";
            } elseif ($action == "add_post_to_favourites") {
                $_SESSION["favourite_posts"][$pid] = $pid;
                
                $response['convert_action_link'] = "remove_post_from_favourites";
            }
            
            $this->update_user_cookies();
            
            return true;
        } // for guests
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_favourite_posts
                             where user_id = $uid and post_id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $response['convert_action_link'] = "add_post_to_favourites";
        
        if ($action == "add_post_to_favourites") {
            // we do not allow to add the deleted topic to favouties,
            // but allow remove all
            if (!$this->has_access_to_topic($tid, false)) {
                $dbw->rollback_transaction();
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
            
            if (!$dbw->execute_query("insert into {$prfx}_favourite_posts
                               (user_id, post_id)
                               values
                               ($uid, $pid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $response['convert_action_link'] = "remove_post_from_favourites";
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $this->update_user_status();
        
        return true;
    } // add_remove_post_favourites
    
    //-----------------------------------------------------------------
    function subscribe_unsubscribe_post($pid, $action, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            return true;
        }
        
        $pid = $dbw->escape($pid);
        
        if (!$dbw->execute_query("select topic_id, deleted
                             from
                             {$prfx}_post
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $deleted = 0;
        
        if ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("topic_id");
            $deleted = $dbw->field_by_name("deleted");
        } else {
            $dbw->free_result();
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw->free_result();
        
        if ($deleted) {
            MessageHandler::setError(text("ErrPostDeleted"));
            return false;
        }
        
        if (!$this->has_access_to_topic($tid, false)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_post_subscription
                             where user_id = $uid and post_id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $response['convert_action_link'] = "subscribe_to_post";
        
        if ($action == "subscribe_to_post") {
            // we do not allow to subscribe to the deleted post,
            // but allow remove all
            if (!$this->has_access_to_topic($tid, false)) {
                $dbw->rollback_transaction();
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
            
            if (!$dbw->execute_query("insert into {$prfx}_post_subscription
                               (user_id, post_id)
                               values
                               ($uid, $pid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $response['convert_action_link'] = "unsubscribe_from_post";
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $this->update_user_status();
        
        return true;
    } // subscribe_unsubscribe_post
    
    function add_remove_attachment_favourites($id, $action, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($id)) {
            MessageHandler::setError(text("ErrNoAttachmentSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        $id = $dbw->escape($id);
        
        if (empty($uid)) {
            return true;
        } // for guests
        
        if ($action == "add_attachment_to_favourites") {
            if (!$dbw->execute_query("update {$prfx}_attachment set favourite = 1 where id = $id and user_id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $response['convert_action_link'] = "remove_attachment_from_favourites";
        } else {
            if (!$dbw->execute_query("update {$prfx}_attachment set favourite = 0 where id = $id and user_id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $response['convert_action_link'] = "add_attachment_to_favourites";
        }
        
        return true;
    } // add_remove_attachment_favourites
    
    //-----------------------------------------------------------------
    function remove_from_favourites()
    {
        if (empty($_REQUEST["topics"])) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            foreach($_REQUEST["topics"] as $tid) {
                unset($_SESSION["favourite_topics"][$tid]);
                
                // invalidate new info cache
                if (!$this->new_checker->invalidate_new_messages_cache()) {
                    return false;
                }
            }
            
            $this->update_user_cookies();
            
            MessageHandler::setInfo(text("MsgTopicsRemovedFromFavourites"));
            
            return true;
        }
        
        $in_list = $dbw->escape(implode(",", $_REQUEST["topics"]));
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }

        if (!$dbw->execute_query("delete from {$prfx}_favourite_topics
                             where user_id = $uid and topic_id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }

        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }

        MessageHandler::setInfo(text("MsgTopicsRemovedFromFavourites"));
        
        return true;
    } // remove_from_favourites
    
    //-----------------------------------------------------------------
    function delete_restore_attachment($aid, $nr)
    {
        global $READ_MARKER;
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($aid) || !is_numeric($aid)) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $aid = $dbw->escape($aid);
        $nr_db = $dbw->escape($nr);
        if (empty($nr_db)) {
            $nr_db = 1;
        }
        
        if (!$dbw->execute_query("select topic_id, forum_id,
                             {$prfx}_attachment.deleted, is_private
                             from {$prfx}_attachment
                             inner join {$prfx}_post on ({$prfx}_attachment.post_id = {$prfx}_post.id)
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where {$prfx}_attachment.post_id = $aid and nr = $nr_db")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            MessageHandler::setError(sprintf(text("ErrAttachmentDoesNotExist"), $aid . (empty($nr) ? "" : "-" . $nr)));
            $dbw->free_result();
            return true;
        }
        
        $origin_topic_private = $dbw->field_by_name("is_private");
        $origin_topic_id = $dbw->field_by_name("topic_id");
        $origin_forum_id = $dbw->field_by_name("forum_id");
        
        $new_state = $dbw->field_by_name("deleted") ? "0" : "1";
        
        $dbw->free_result();
        
        if (!$dbw->execute_query("select {$prfx}_post.id, topic_id, forum_id, {$prfx}_post.read_marker,
                             {$prfx}_post.user_id, {$prfx}_topic.name topic_name, is_private,
                             {$prfx}_forum.name forum_name, post_user.user_name, {$prfx}_post.author, {$prfx}_post.creation_date, {$prfx}_post.text_content,
                             post_user.email, post_user.time_zone, post_user.send_notifications, post_user.last_host, post_user.interface_language
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user post_user on ({$prfx}_post.user_id = post_user.id)
                             left join {$prfx}_user topic_user on ({$prfx}_topic.user_id = topic_user.id)
                             where {$prfx}_post.id = $aid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            MessageHandler::setError(sprintf(text("ErrMessageDoesNotExist"), $aid));
            $dbw->free_result();
            return true;
        }
        
        $tid = $dbw->field_by_name("topic_id");
        $fid = $dbw->field_by_name("forum_id");
        
        $post_data = array(
            "post_id" => $dbw->field_by_name("id"),
            "post_date" => xstrtotime($dbw->field_by_name("creation_date")),
            "short_message" => $dbw->field_by_name("text_content"),
            "read_marker" => $dbw->field_by_name("read_marker"),
            
            "topic_id" => $dbw->field_by_name("topic_id"),
            "topic_name" => $dbw->field_by_name("topic_name"),
            
            "forum_id" => $dbw->field_by_name("is_private") ? "private" : $dbw->field_by_name("forum_id"),
            "forum_name" => $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name"),
            
            "author_id" => $dbw->field_by_name("user_id"),
            "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
            
            "author_email" => $dbw->field_by_name("email"),
            "author_time_zone" => $dbw->field_by_name("time_zone") ? $dbw->field_by_name("time_zone") : TIME_ZONE,
            "send_notifications" => $dbw->field_by_name("send_notifications"),
            "last_host" => $dbw->field_by_name("last_host"),
            "interface_language" => $dbw->field_by_name("interface_language"),
            
            "action" => $new_state ? "delete_attachment" : "restore_attachment"
        );
        
        $dbw->free_result();
        
        if ($this->check_blocked($fid) || $this->check_blocked($origin_forum_id)) {
            return false;
        }
        
        // attachment of a post maybe referenced from other post.
        // the moderator should be able to moderate the origin and target topic
        
        if ($this->is_admin() || ($this->is_forum_moderator($fid) && $this->is_forum_moderator($origin_forum_id))) {
            // can do that
        } elseif ($this->is_topic_moderator($tid) && $this->is_topic_moderator($origin_topic_id)) {
            if (!$this->may_edit_message($post_data["post_id"])) {
                MessageHandler::setError(text("ErrEditTimeExpired"));
                return false;
            }
            // can do that
        } elseif ($post_data["post_id"] == $this->get_user_id() || $post_data["read_marker"] == $READ_MARKER) {
            if ($this->is_blocked_in_topic($post_data["topic_id"])) {
                return false;
            }
            
            if (!$this->may_edit_message($post_data["post_id"])) {
                MessageHandler::setError(text("ErrEditTimeExpired"));
                return false;
            }
            // can do that
        } else {
            MessageHandler::setError(text("ErrAttachmentDeleteNotAllowed"));
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_attachment set deleted = $new_state where post_id = $aid and nr = $nr_db")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $updated_by = $dbw->escape($this->get_user_name());
        $now = $dbw->format_datetime(time());
        
        if (!$dbw->execute_query("update {$prfx}_post set
                                  last_updated = '$now',
                                  last_updated_by = '$updated_by'
                                  where id = $aid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (empty($origin_topic_private) && !empty($post_data)) {
            if (!$this->log_moderator_event($dbw, $prfx, $post_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // notification
        
        $params = array();
        
        $params["{moderator_name}"] = $this->get_user_name();
        
        $params["{topic_id}"] = $post_data["topic_id"];
        $params["{topic_name}"] = $post_data["topic_name"];
        $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]);
        
        $params["{forum_id}"] = $post_data["forum_id"];
        $params["{forum_name}"] = $post_data["forum_name"];
        $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($post_data["forum_id"]);
        
        $params["{user_name}"] = $post_data["author_name"];
        $params["{site_url}"] = get_host_address($post_data["last_host"]) . get_url_path();
        $params["{topic_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]);
        $params["{forum_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($post_data["forum_id"]);
        $params["todo"] = 1;
        $params["{post_id}"] = $post_data["post_id"];
        $params["{post_date}"] = $post_data["post_date"];
        $params["{post_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($post_data["post_id"]);
        $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($post_data["post_id"]);
        
        // if the actor and the receiver are the same, do not notify
        if (!empty($post_data["author_id"]) && $post_data["author_id"] != $this->get_user_id()) {
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($post_data["author_id"], $anonym_appendix, $anonym_appendix2);
            
            if ($new_state) {
                $event_code = "MsgEventAttachmentDeleted{$anonym_appendix2}";
                $email_template = "email_attachment_deleted{$anonym_appendix}.txt";
            } else {
                $event_code = "MsgEventAttachmentRestored{$anonym_appendix2}";
                $email_template = "email_attachment_restored{$anonym_appendix}.txt";
            }
            
            $params["{message}"] = $post_data["short_message"];
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($post_data["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_data["post_id"]);
            
            if (!empty($post_data["author_email"]) && !empty($post_data["send_notifications"])) {
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $post_data["interface_language"], get_host_address($post_data["last_host"]) . get_url_path(), 600);
                
                $params["{post_date}"] = date(text("DateTimeFormat", $post_data["interface_language"]), convert_timezone($params["{post_date}"], TIME_ZONE, $post_data["author_time_zone"]));
                $this->email_manager->send_email($settings["default_sender"], $post_data["author_email"], $email_template, $params, $post_data["interface_language"]);
            }
        }
        
        return true;
    } // delete_restore_attachment
    
    //-----------------------------------------------------------------
    function convert_posts($action)
    {
        global $settings;
        global $READ_MARKER;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $set_statement = "";
        $imsg = "";
        $posts_where = "";
        
        switch ($action) {
            case "convert_to_thematic":
                if (empty($_REQUEST["posts"])) {
                    MessageHandler::setError(text("ErrNoPostSelected"));
                    return false;
                }
                $set_statement = "is_comment = 0";
                
                $in_list = $dbw->escape(implode(",", $_REQUEST["posts"]));
                $posts_where = "where {$prfx}_post.id in ($in_list)";
                
                $imsg = text("MsgPostsConvertedToThematic");
                break;
            
            case "convert_to_comment":
                if (empty($_REQUEST["posts"])) {
                    MessageHandler::setError(text("ErrNoPostSelected"));
                    return false;
                }
                $set_statement = "is_comment = 1";
                
                $in_list = $dbw->escape(implode(",", $_REQUEST["posts"]));
                $posts_where = "where {$prfx}_post.id in ($in_list)";
                
                $imsg = text("MsgPostsConvertedToComments");
                break;
            
            case "convert_to_adult":
                if (empty($_REQUEST["posts"])) {
                    MessageHandler::setError(text("ErrNoPostSelected"));
                    return false;
                }
                $set_statement = "is_adult = 1";
                
                $in_list = $dbw->escape(implode(",", $_REQUEST["posts"]));
                $posts_where = "where {$prfx}_post.id in ($in_list)";
                
                $imsg = text("MsgPostsConvertedToAdult");
                break;
            
            case "convert_to_nonadult":
                if (empty($_REQUEST["posts"])) {
                    MessageHandler::setError(text("ErrNoPostSelected"));
                    return false;
                }
                $set_statement = "is_adult = 0";
                
                $in_list = $dbw->escape(implode(",", $_REQUEST["posts"]));
                $posts_where = "where {$prfx}_post.id in ($in_list)";
                
                $imsg = text("MsgPostsConvertedToNonAdults");
                break;
        }
        
        // protection against extra case
        if (empty($posts_where)) {
            return true;
        }
        
        $forums = array();
        $topics = array();
        $posts = array();
        
        if (!$dbw->execute_query("select {$prfx}_post.id, forum_id, topic_id, {$prfx}_topic.name topic_name,
                             {$prfx}_forum.name forum_name, {$prfx}_post.user_id, email, user_name, {$prfx}_post.author,
                             is_private, {$prfx}_post.creation_date, text_content, {$prfx}_post.read_marker,
                             {$prfx}_post.pinned, last_host, time_zone, send_notifications, interface_language
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             $posts_where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            if ($action == "convert_to_comment" && $dbw->field_by_name("pinned")) {
                $dbw->free_result();
                MessageHandler::setError(text("ErrPinnedPostCanNotBeComment"));
                return false;
            }
            
            $forums[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("forum_id");
            
            $topics[$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
            
            $posts[$dbw->field_by_name("id")] = array(
                "post_id" => $dbw->field_by_name("id"),
                "topic_id" => $dbw->field_by_name("topic_id"),
                "read_marker" => $dbw->field_by_name("read_marker"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "topic_private" => $dbw->field_by_name("is_private"),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "author_time_zone" => $dbw->field_by_name("time_zone") ? $dbw->field_by_name("time_zone") : TIME_ZONE,
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "post_date" => xstrtotime($dbw->field_by_name("creation_date")),
                "short_message" => $dbw->field_by_name("text_content"),
                "action" => $action
            );
        }
        
        $dbw->free_result();
        
        // check if the current user is the forum moderator or topic moderator
        
        foreach ($posts as $pdata) {
            if ($this->check_blocked($pdata["forum_id"])) {
                return false;
            }
            
            if ($this->is_admin() || $this->is_forum_moderator($pdata["forum_id"])) {
                // can do that
            } elseif ($this->is_topic_moderator($pdata["topic_id"])) {
                if (!$this->may_edit_message($pdata["post_id"])) {
                    MessageHandler::setError(text("ErrEditTimeExpired"));
                    return false;
                }
                // can do that
            } elseif ($pdata["post_id"] == $this->get_user_id() || $pdata["read_marker"] == $READ_MARKER) {
                if ($this->is_blocked_in_topic($pdata["topic_id"])) {
                    return false;
                }
                
                if (!$this->may_edit_message($pdata["post_id"])) {
                    MessageHandler::setError(text("ErrEditTimeExpired"));
                    return false;
                }
                // can do that
            } else {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // unset topics with deleted pinned posts
        
        if (!$dbw->execute_query("update {$prfx}_post set $set_statement $posts_where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        foreach ($posts as $pid => $pdata) {
            // do not track the events in the private or delayed topics
            if (!empty($pdata["topic_private"])) {
                continue;
            }
            
            if (!$this->log_moderator_event($dbw, $prfx, $pdata)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!empty($imsg)) {
            MessageHandler::setInfo($imsg);
        }
        
        // mail notification
        
        foreach ($posts as $pid => $pdata) {
            // if the actor and the receiver are the same, do not notify
            if (empty($pdata["author_id"]) || val_or_empty($pdata["author_id"]) == $this->get_user_id()) {
                continue;
            }
            
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($pdata["author_id"], $anonym_appendix, $anonym_appendix2);
            
            $event_code = "MsgEventMessageConvertedToThematic{$anonym_appendix2}";
            $email_template = "email_post_made_thematic{$anonym_appendix}.txt";
            
            if ($action == "convert_to_comment") {
                $event_code = "MsgEventMessageConvertedToComments{$anonym_appendix2}";
                $email_template = "email_post_made_comment{$anonym_appendix}.txt";
            }
            
            if ($action == "convert_to_adult") {
                $event_code = "MsgEventMessageConvertedToAdult{$anonym_appendix2}";
                $email_template = "email_post_made_adult{$anonym_appendix}.txt";
            }
            
            if ($action == "convert_to_nonadult") {
                $event_code = "MsgEventMessageConvertedToNonAdult{$anonym_appendix2}";
                $email_template = "email_post_made_nonadult{$anonym_appendix}.txt";
            }
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{post_id}"] = $pdata["post_id"];
            
            $params["{user_name}"] = $pdata["author_name"];
            $params["{moderator_name}"] = $this->get_user_name();
            
            $fid_for_url = $pdata["forum_name"] == "PRIVATE_MESSAGES" ? "private" : $pdata["forum_id"];
            
            $params["{topic_id}"] = $pdata["topic_id"];
            $params["{topic_name}"] = $pdata["topic_name"];
            $params["{topic_url}"] = get_host_address($pdata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($pdata["topic_id"]) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($pdata["topic_id"]) . "&gotonew=1";
            
            $params["{post_url}"] = get_host_address($pdata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($pdata["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($pdata["post_id"]);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($pdata["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($pdata["post_id"]);
            
            $params["{forum_id}"] = $pdata["forum_id"];
            $params["{forum_name}"] = $pdata["forum_name"];
            $params["{forum_url}"] = get_host_address($pdata["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid_for_url);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid_for_url);
            
            $params["{post_date}"] = $pdata["post_date"];
            
            $params["{message}"] = $pdata["short_message"];
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($pdata["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params, $pdata["post_id"]);
            
            if (!empty($pdata["author_email"]) && !empty($pdata["send_notifications"])) {
                $params["{message}"] = $pdata["short_message"];
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $pdata["interface_language"], get_host_address($pdata["last_host"]) . get_url_path(), 600);
                
                $params["{post_date}"] = date(text("DateTimeFormat", $pdata["interface_language"]), convert_timezone($params["{post_date}"], TIME_ZONE, $pdata["author_time_zone"]));
                $this->email_manager->send_email($settings["default_sender"], $pdata["author_email"], $email_template, $params, $pdata["interface_language"]);
            }
        }
        
        return true;
    } // convert_posts
    
    //-----------------------------------------------------------------
    function get_time_since_registration(&$time_since_registration, $dbw = null, $prfx = "")
    {
        if (!$dbw) {
            $dbw = System::getDBWorker();
        }
        
        if (!$dbw) {
            return false;
        }
        
        if (empty($prfx)) {
            $prfx = $dbw->escape(System::getDBPrefix());
        }
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = 0;
        }
        
        if (!$dbw->execute_query("select registration_date from {$prfx}_user where id = $current_uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $time_since_registration = 0;
        
        if ($dbw->fetch_row()) {
            $time_since_registration = time() - xstrtotime($dbw->field_by_name("registration_date"));
        }
        
        $dbw->free_result();
        
        return true;
    } // get_time_since_registration
    
    //-----------------------------------------------------------------
    function rate_post($pid, $rating, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        global $settings;
        
        if (!empty($_SESSION["rating_blocked"])) {
            MessageHandler::setWarning(text("ErrRatingBlocked"));
            return false;
        }
        
        if (empty($pid) || !is_numeric($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        $pid = $dbw->escape($pid);
        
        if (empty($uid)) {
            return true;
        }
        
        if (empty($settings["rates_active"])) {
            return true;
        }
        if (empty($settings["dislikes_active"]) && $rating == -1) {
            return true;
        }
        
        if (!$dbw->execute_query("select {$prfx}_post.id, {$prfx}_post.creation_date, forum_id, topic_id, {$prfx}_topic.name topic_name,
                             {$prfx}_forum.name forum_name, {$prfx}_post.user_id, email, user_name, {$prfx}_post.author, last_host, send_notifications,
                             donot_notify_on_rates, time_zone, interface_language, text_content,
                             {$prfx}_ignored_users.user_id rater_ignored, is_private
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             left join {$prfx}_ignored_users on ({$prfx}_ignored_users.user_id = {$prfx}_post.user_id and ignored_user_id = $uid)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $post_id = "";
        $post_date = null;
        $topic_id = "";
        $topic_name = "";
        $forum_id = "";
        $forum_id_for_url = "";
        $forum_name = "";
        $author_id = "";
        $author_name = "";
        $author_email = "";
        $author_time_zone = "";
        $short_message = "";
        $last_host = "";
        $send_notifications = true;
        $donot_notify_on_rates = false;
        $rater_ignored = false;
        $is_private = false;
        
        $lng = current_language();
        
        if ($dbw->fetch_row()) {
            $post_id = $dbw->field_by_name("id");
            $post_date = xstrtotime($dbw->field_by_name("creation_date"));
            $author_id = $dbw->field_by_name("user_id");
            $author_name = $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author");
            $author_email = $dbw->field_by_name("email");
            $author_time_zone = $dbw->field_by_name("time_zone") ? $dbw->field_by_name("time_zone") : TIME_ZONE;
            $topic_id = $dbw->field_by_name("topic_id");
            $topic_name = $dbw->field_by_name("topic_name");
            $forum_name = $dbw->field_by_name("forum_name");
            
            $forum_id = $dbw->field_by_name("forum_id");
            $forum_id_for_url = $dbw->field_by_name("is_private") ? "private" : $forum_id;
            $forum_name = $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name");
            
            $send_notifications = $dbw->field_by_name("send_notifications");
            $last_host = $dbw->field_by_name("last_host");
            $donot_notify_on_rates = $dbw->field_by_name("donot_notify_on_rates");
            
            $lng = $dbw->field_by_name("interface_language");
            $short_message = $dbw->field_by_name("text_content");
            
            $rater_ignored = $dbw->field_by_name("rater_ignored");
            $is_private = $dbw->field_by_name("is_private");
        }
        
        $dbw->free_result();
        
        if ($author_id == $uid) {
            return true;
        }
        
        if ($this->check_blocked($forum_id)) {
            return false;
        }
        
        if ($this->is_blocked_in_topic($topic_id)) {
            return false;
        }
        
        // check ignore restrictions
        
        if (!empty($author_id)) {
            $query = "select 1
                      from {$prfx}_ignored_users
                      where user_id = $uid and ignored_user_id = $author_id";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                MessageHandler::setWarning(text("ErrRatingIgnoredUsers"));
                $dbw->free_result();
                return false;
            }
            
            $dbw->free_result();
            
            $query = "select exclude_date
                      from {$prfx}_ignore_history
                      where user_id = $uid and ignored_user_id = $author_id";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                // Quarantine 24 hours
                $time_to_next = xstrtotime($dbw->field_by_name("exclude_date")) + 24 * 3600 - time();
                
                if ($time_to_next > 0) {
                    MessageHandler::setWarning(sprintf(text("ErrRatingRecentlyIgnoredUsers"), format_duration($time_to_next)));
                    $dbw->free_result();
                    return false;
                }
            }
            
            $dbw->free_result();
        }
        
        // check number limits
        
        if (!empty($author_id) && !empty($settings["max_rates_hour"]) && !$this->is_admin() && !$this->is_privileged()) {
            $now = $dbw->format_datetime(time() - 3600);
            
            $query = "select count(*) cnt
                      from {$prfx}_post_rating
                      inner join {$prfx}_post on ({$prfx}_post_rating.post_id = {$prfx}_post.id)
                      where {$prfx}_post_rating.user_id = $uid and {$prfx}_post.user_id = $author_id and dt >= '$now'";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $cnt = 0;
            if ($dbw->fetch_row()) {
                $cnt = $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
            
            if ($cnt >= $settings["max_rates_hour"]) {
                MessageHandler::setWarning(sprintf(text("ErrRateLimitExceeded"), $settings["max_rates_hour"]));
                return false;
            }
        }
        
        if (!$this->is_admin() && !$this->is_privileged()) {
            $time_since_registration = 0;
            if (!$this->get_time_since_registration($time_since_registration, $dbw, $prfx)) {
                return false;
            }
            
            if ($time_since_registration < 1 * 24 * 3600) {
                MessageHandler::setError(sprintf(text("ErrMessageVoteRateNotAllowed"), 1));
                return false;
            }
        }
        
        if (!$dbw->execute_query("select 1 from {$prfx}_post_rating where user_id = $uid and post_id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setWarning(text("WarnMessageAlreadyRated"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $rater_ignored = empty($rater_ignored) ? 0 : 1;
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("insert into {$prfx}_post_rating (user_id, post_id, rating, dt, rater_ignored)
                             select $uid, id, $rating, '$now', $rater_ignored from {$prfx}_post where id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($rating == -1) {
            $set_clause = "dislike_count = dislike_count + 1";
        } else {
            $set_clause = "like_count = like_count + 1";
        }
        
        if (!empty($author_id) && empty($rater_ignored) && empty($is_private)) {
            if (!$dbw->execute_query("update {$prfx}_user_statistics set
                               $set_clause
                               where user_id = $author_id")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->execute_query("insert into {$prfx}_post_statistics (post_id)
                                  select $pid from {$prfx}_dual
                                  where not exists (select 1 from {$prfx}_post_statistics where post_id = $pid)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_post_statistics set
                               $set_clause
                               where post_id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $response["rating"]["plus"] = 0;
        $response["rating"]["minus"] = 0;
        
        $query = "select post_id,
              count(case rating when 1 then 1 else NULL end) plus,
              count(case rating when -1 then 1 else NULL end) minus
              from {$prfx}_post_rating
              where post_id = $pid
              group by post_id";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $response["rating"]["plus"] = $dbw->field_by_name("plus");
            $response["rating"]["minus"] = $dbw->field_by_name("minus");
        }
        
        $dbw->free_result();
        
        $event_data = array(
            "post_id" => $post_id,
            "topic_id" => $topic_id,
            "topic_name" => $topic_name,
            "forum_id" => $forum_id,
            "forum_name" => $forum_name,
            "author_id" => $author_id,
            "author_name" => $author_name,
            "action" => ($rating == -1) ? "post_disliked" : "post_liked"
        );
        
        if (empty($is_private) && !$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($rater_ignored) {
            return true;
        }
        
        $params = array();
        
        $params["todo"] = 1;
        $params["{user_name}"] = $author_name;
        $params["{rated_user_name}"] = $this->get_user_name();
        
        $params["{topic_id}"] = $topic_id;
        $params["{topic_name}"] = $topic_name;
        $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($topic_id) . "&gotonew=1";
        
        $params["{post_id}"] = $post_id;
        $params["{post_url}"] = get_host_address($last_host) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($topic_id) . "&setdone=1&msg=" . xrawurlencode($post_id);
        $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($topic_id) . "&setdone=1&msg=" . xrawurlencode($post_id);
        
        $params["{forum_id}"] = $forum_id;
        $params["{forum_name}"] = $forum_name;
        $params["{forum_url}"] = get_host_address($last_host) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id_for_url);
        $params["{forum_url_relative}"] = get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id_for_url);
        
        $params["{message}"] = $short_message;
        $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
        
        $anonym_appendix = "";
        if (!empty($settings["dislikes_anonym"]) && $rating == -1) {
            $anonym_appendix = "Anonym";
        }
        
        $event_code = ($rating == -1) ? "MsgEventMessageDisliked{$anonym_appendix}" : "MsgEventMessageLiked";
        
        $params["{post_date}"] = $post_date;
        
        $this->log_user_event($author_id, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_id, $donot_notify_on_rates);
        
        if (empty($author_email) || empty($send_notifications) || !empty($donot_notify_on_rates)) {
            return true;
        }
        
        $anonym_appendix = "";
        if (!empty($settings["dislikes_anonym"]) && $rating == -1) {
            $anonym_appendix = "_anonym";
        }
        
        $params["{message}"] = $short_message;
        $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $lng, get_host_address($last_host) . get_url_path(), 600);
        
        $params["{post_date}"] = date(text("DateTimeFormat", $lng), convert_timezone($post_date, TIME_ZONE, $author_time_zone));
        $this->email_manager->send_email($settings["default_sender"], $author_email, ($rating == -1) ? "email_post_disliked{$anonym_appendix}.txt" : "email_post_liked.txt", $params, $lng);
        
        return true;
    } // rate_post
    
    //-----------------------------------------------------------------
    function reset_rating($pid, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        global $settings;
        
        if (!empty($_SESSION["rating_blocked"])) {
            MessageHandler::setWarning(text("ErrRatingBlocked"));
            return false;
        }
        
        if (empty($pid) || !is_numeric($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        $pid = $dbw->escape($pid);
        
        if (empty($uid)) {
            return true;
        }
        
        if (empty($settings["rates_active"])) {
            return true;
        }
        
        $now = $dbw->format_datetime(time() - get_allow_edit_period());
        
        $query = "select 1 from {$prfx}_post_rating
              where
              post_id = $pid and user_id = $uid and
              dt < '$now'
              ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if (!$dbw->execute_query("select {$prfx}_post.id, {$prfx}_post.creation_date, forum_id, topic_id, {$prfx}_topic.name topic_name,
                             {$prfx}_forum.name forum_name, {$prfx}_post.user_id, email, user_name, {$prfx}_post.author, last_host, send_notifications,
                             donot_notify_on_rates, time_zone, interface_language, text_content,
                             {$prfx}_ignored_users.user_id rater_ignored, is_private
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             left join {$prfx}_ignored_users on ({$prfx}_ignored_users.user_id = {$prfx}_post.user_id and ignored_user_id = $uid)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $post_id = "";
        $post_date = "";
        $topic_id = "";
        $topic_name = "";
        $forum_id = "";
        $forum_id_for_url = "";
        $forum_name = "";
        $author_id = "";
        $author_name = "";
        $author_email = "";
        $author_time_zone = "";
        $short_message = "";
        $last_host = "";
        $send_notifications = true;
        $rater_ignored = false;
        $is_private = false;
        
        $lng = current_language();
        
        if ($dbw->fetch_row()) {
            $post_id = $dbw->field_by_name("id");
            $post_date = xstrtotime($dbw->field_by_name("creation_date"));
            $author_id = $dbw->field_by_name("user_id");
            $author_name = $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author");
            $author_email = $dbw->field_by_name("email");
            $author_time_zone = $dbw->field_by_name("time_zone") ? $dbw->field_by_name("time_zone") : TIME_ZONE;
            $topic_id = $dbw->field_by_name("topic_id");
            $topic_name = $dbw->field_by_name("topic_name");
            
            $forum_id = $dbw->field_by_name("forum_id");
            $forum_id_for_url = $dbw->field_by_name("is_private") ? "private" : $forum_id;
            $forum_name = $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name");
            
            $send_notifications = $dbw->field_by_name("send_notifications");
            $last_host = $dbw->field_by_name("last_host");
            $donot_notify_on_rates = $dbw->field_by_name("donot_notify_on_rates");
            $lng = $dbw->field_by_name("interface_language");
            $short_message = $dbw->field_by_name("text_content");
            
            $rater_ignored = $dbw->field_by_name("rater_ignored");
            $is_private = $dbw->field_by_name("is_private");
        }
        
        $dbw->free_result();
        
        if ($author_id == $uid) {
            return true;
        }
        
        if ($this->check_blocked($forum_id)) {
            return false;
        }
        
        // check number restriction
        
        if (!empty($author_id) && !empty($settings["max_rates_hour"]) && !$this->is_admin() && !$this->is_privileged()) {
            $now = $dbw->format_datetime(time() - 3600);
            
            $query = "select count(*) cnt from {$prfx}_moderator_log
                where
                moderator_id = $uid and
                author_id = $author_id and
                event_time >= '$now' and
                (action = 'dislike_revoked' || action = 'like_revoked')
                ";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $cnt = 0;
            if ($dbw->fetch_row()) {
                $cnt = $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
            
            if ($cnt >= $settings["max_rates_hour"]) {
                MessageHandler::setWarning(sprintf(text("ErrRateLimitExceeded"), $settings["max_rates_hour"]));
                return false;
            }
        }
        
        if (!$dbw->execute_query("select rating from {$prfx}_post_rating where user_id = $uid and post_id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            return false;
        }
        
        $rating = $dbw->field_by_name("rating");
        
        $dbw->free_result();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_post_rating where user_id = $uid and post_id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($rating == -1) {
            $set_clause = "dislike_count = dislike_count - 1";
        } else {
            $set_clause = "like_count = like_count - 1";
        }
        
        if (empty($is_private) && !empty($author_id) && empty($rater_ignored)) {
            if (!$dbw->execute_query("update {$prfx}_user_statistics set
                               $set_clause
                               where user_id = $author_id")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->execute_query("update {$prfx}_post_statistics set
                               $set_clause
                               where post_id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $response["rating"]["plus"] = 0;
        $response["rating"]["minus"] = 0;
        
        $query = "select post_id,
              count(case rating when 1 then 1 else NULL end) plus,
              count(case rating when -1 then 1 else NULL end) minus
              from {$prfx}_post_rating
              where post_id = $pid
              group by post_id";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $response["rating"]["plus"] = $dbw->field_by_name("plus");
            $response["rating"]["minus"] = $dbw->field_by_name("minus");
        }
        
        $dbw->free_result();
        
        $event_data = array(
            "post_id" => $post_id,
            "topic_id" => $topic_id,
            "topic_name" => $topic_name,
            "forum_id" => $forum_id,
            "forum_name" => $forum_name,
            "author_id" => $author_id,
            "author_name" => $author_name,
            "action" => ($rating == 1) ? "like_revoked" : "dislike_revoked"
        );
        
        if (empty($is_private) && !$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response["rating"]["reset"] = true;
        
        if ($rater_ignored) {
            return true;
        }
        
        $params = array();
        
        $params["todo"] = 1;
        $params["{user_name}"] = $author_name;
        $params["{rated_user_name}"] = $this->get_user_name();
        
        $params["{topic_id}"] = $topic_id;
        $params["{topic_name}"] = $topic_name;
        $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($topic_id) . "&gotonew=1";
        
        $params["{post_id}"] = $post_id;
        $params["{post_url}"] = get_host_address($last_host) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($topic_id) . "&setdone=1&msg=" . xrawurlencode($post_id);
        $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($topic_id) . "&setdone=1&msg=" . xrawurlencode($post_id);
        
        $params["{forum_id}"] = $forum_id;
        $params["{forum_name}"] = $forum_name;
        $params["{forum_url}"] = get_host_address($last_host) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id_for_url);
        $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id_for_url);
        
        $params["{message}"] = $short_message;
        $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
        
        $anonym_appendix = "";
        if (!empty($settings["dislikes_anonym"]) && $rating == -1) {
            $anonym_appendix = "Anonym";
        }
        
        $event_code = ($rating == 1) ? "MsgEventLikeRevoked" : "MsgEventDislikeRevoked{$anonym_appendix}";
        
        $params["{post_date}"] = $post_date;
        
        $this->log_user_event($author_id, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_id, $donot_notify_on_rates);
        
        if (empty($author_email) || empty($send_notifications) || !empty($donot_notify_on_rates)) {
            return true;
        }
        
        $anonym_appendix = "";
        if (!empty($settings["dislikes_anonym"]) && $rating == -1) {
            $anonym_appendix = "_anonym";
        }
        
        $params["{message}"] = $short_message;
        $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $lng, get_host_address($last_host) . get_url_path(), 600);
        
        $params["{post_date}"] = date(text("DateTimeFormat", $lng), convert_timezone($post_date, TIME_ZONE, $author_time_zone));
        $this->email_manager->send_email($settings["default_sender"], $author_email, ($rating == 1) ? "email_post_like_revoked.txt" : "email_post_dislike_revoked{$anonym_appendix}.txt", $params, $lng);
        
        return true;
    } // reset_rating
    
    //-----------------------------------------------------------------
    function move_topics($target_forum)
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($target_forum)) {
            MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($target_forum)) {
            MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), $target_forum));
            return false;
        }
        
        if (empty($_REQUEST["topics"])) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $target_forum = $dbw->escape($target_forum);
        
        $forums = array();
        $topics = array();
        
        // get info about the target forum
        
        $target_forum_name = "-";
        
        if (!$dbw->execute_query("select name from {$prfx}_forum where id = $target_forum")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $target_forum_name = $dbw->field_by_name("name");
        } else {
            MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), $target_forum));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if (!$this->has_access_to_forum($target_forum, $target_forum_name, true)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($this->check_blocked($target_forum)) {
            return false;
        }
        
        // check whether the topic move is allowed
        
        if (!empty($settings["max_topics_day"]) && !$this->is_privileged() && !$this->is_admin() && !$this->is_forum_moderator($target_forum)) {
            // we do not count topics for the private messages and moderated forums
            $first_topic_date = time() - 24 * 3600;
            $now = $dbw->format_datetime($first_topic_date);
            $uid = $dbw->escape($this->get_user_id());
            $query = "select count(*) cnt, min(creation_date) first_topic_date
                from {$prfx}_topic
                where
                user_id = $uid and
                creation_date >= '$now' and
                is_private < 1 and
                forum_id not in (select forum_id from {$prfx}_forum_moderator where user_id = $uid)";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $cnt = 0;
            if ($dbw->fetch_row()) {
                $cnt = $dbw->field_by_name("cnt");
                $first_topic_date = xstrtotime($dbw->field_by_name("first_topic_date"));
            }
            
            $dbw->free_result();
            
            if ($cnt >= $settings["max_topics_day"]) {
                $t = format_duration($first_topic_date - (time() - 24 * 3600));
                
                MessageHandler::setWarning(sprintf(text("ErrTopicLimitExceeded"), $settings["max_topics_day"], $t));
                return false;
            }
        }
        
        $in_list = $dbw->escape(implode(",", $_REQUEST["topics"]));
        
        if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                             {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name,
                             email, user_name, author, last_host, send_notifications, interface_language
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                             where {$prfx}_topic.id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $forums[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("forum_id");
            
            $topics[$dbw->field_by_name("id")] = array(
                "topic_id" => $dbw->field_by_name("id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "source_forum_id" => $dbw->field_by_name("forum_id"),
                "source_forum_name" => $dbw->field_by_name("forum_name"),
                "forum_id" => $target_forum,
                "forum_name" => $target_forum_name,
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "action" => "move_topic",
                // text("Source")
                "comment" => "MSG(Source): [url=http://base" . get_url_path() . "forum.php?fid=" . xrawurlencode($dbw->field_by_name("forum_id")) . "]" . $dbw->field_by_name("forum_name") . "[/url]"
            );
        }
        
        $dbw->free_result();
        
        // check if the current user is the forum moderator
        
        foreach ($forums as $fid) {
            if (!$this->is_admin() && !$this->is_forum_moderator($fid)) {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
        }
        
        $in_list = $dbw->escape(implode(",", array_keys($topics)));
        
        // get list of the subscribers
        
        $topic_subscribers = array();
        
        if (!$dbw->execute_query("select user_id, topic_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_topic_subscription
                             inner join {$prfx}_user on ({$prfx}_topic_subscription.user_id = {$prfx}_user.id)
                             where topic_id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topic_subscribers[$dbw->field_by_name("topic_id")][$dbw->field_by_name("user_id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // get list of the moderators
        
        $moderators = array();
        
        if (!$dbw->execute_query("select user_id, topic_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_topic_moderator
                             inner join {$prfx}_user on ({$prfx}_topic_moderator.user_id = {$prfx}_user.id)
                             where topic_id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $moderators[$dbw->field_by_name("topic_id")][$dbw->field_by_name("user_id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_topic set forum_id = $target_forum, pinned = 0, deleted = 0 where id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $topic_moderator_revoked = false;
        if (!$this->is_forum_moderator($target_forum)) {
            $topic_moderator_revoked = true;
            
            if (!$dbw->execute_query("delete from {$prfx}_topic_moderator where topic_id in ($in_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $forums[$target_forum] = $target_forum;
        
        // text("MsgTopicMovedFromForum")
        foreach ($topics as $tid => $tdata) {
            $dummy = "";
            if (!$this->post_sys_message($dbw, $tid, "MSG(MsgTopicMovedFromForum\t$tdata[source_forum_name])", $dummy)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$this->log_moderator_event($dbw, $prfx, $tdata)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!empty($forums)) {
            foreach ($forums as $fid) {
                if (!$dbw->execute_query($this->get_query_topic_cnt_update($prfx, $fid))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (count($_REQUEST["topics"]) > 1) {
            MessageHandler::setInfo(text("MsgTopicsMoved"));
        } else {
            MessageHandler::setInfo(text("MsgTopicMoved"));
        }
        
        // mail notification
        
        // to prevent the sending the redundant notifications about the same action
        // we track the users who are already notified
        $already_notified = array();
        
        foreach ($topics as $tid => $tdata) {
            $params = array();
            
            $params["{user_name}"] = $tdata["author_name"];
            $params["{moderator_name}"] = $this->get_user_name();
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $tdata["topic_name"];
            $params["{topic_url}"] = get_host_address($tdata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{forum_id}"] = $tdata["source_forum_id"];
            $params["{forum_name}"] = $tdata["source_forum_name"];
            
            $params["{source_forum_name}"] = $tdata["source_forum_name"];
            $params["{source_forum_url}"] = get_host_address($tdata["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["source_forum_id"]);
            $params["{source_forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($tdata["source_forum_id"]);
            
            $params["{target_forum_name}"] = $tdata["forum_name"];
            $params["{target_forum_url}"] = get_host_address($tdata["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["forum_id"]);
            $params["{target_forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($tdata["forum_id"]);
            
            // if the actor and the receiver are the same, do not notify
            if (!empty($tdata["author_id"]) && (val_or_empty($tdata["author_id"]) != $this->get_user_id())) {
                $anonym_appendix = "";
                $anonym_appendix2 = "";
                $this->get_anonym_appendixes($tdata["author_id"], $anonym_appendix, $anonym_appendix2);
                
                $event_code = "MsgEventTopicMoved{$anonym_appendix2}";
                $email_template = "email_topic_moved{$anonym_appendix}.txt";
                // if the author is the topic moderator,
                // we use the moderator_email_template
                if (!empty($moderators[$tid][$tdata["author_id"]])) {
                    $event_code = "MsgEventTopicMovedModerators{$anonym_appendix2}";
                    $email_template = "email_topic_moved_moderators{$anonym_appendix}.txt";
                }
                
                $this->log_user_event($tdata["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params);
                
                if (!empty($tdata["author_email"]) && !empty($tdata["send_notifications"])) {
                    $this->email_manager->send_email($settings["default_sender"], $tdata["author_email"], $email_template, $params, $tdata["interface_language"]);
                }
                
                $already_notified[$tid][$tdata["author_id"]] = 1;
            }
            
            if (!empty($moderators[$tid])) {
                foreach ($moderators[$tid] as $mid => $uinfo) {
                    // if the actor and the receiver are the same, do not notify
                    if ($mid == $this->get_user_id()) {
                        continue;
                    }
                    
                    if (!empty($already_notified[$tid][$mid])) {
                        continue;
                    }
                    
                    $anonym_appendix = "";
                    $anonym_appendix2 = "";
                    $this->get_anonym_appendixes($mid, $anonym_appendix, $anonym_appendix2);
                    
                    $event_code = "MsgEventTopicMovedModerators{$anonym_appendix2}";
                    $email_template = "email_topic_moved_moderators{$anonym_appendix}.txt";
                    if ($topic_moderator_revoked) {
                        $event_code = "MsgEventTopicMovedRevokeModerators{$anonym_appendix2}";
                        $email_template = "email_topic_moved_revoke_moderators{$anonym_appendix}.txt";
                    }
                    
                    $already_notified[$tid][$mid] = 1;
                    
                    $params["{user_name}"] = $uinfo["user_name"];
                    $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                    $params["{source_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["source_forum_id"]);
                    $params["{target_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["forum_id"]);
                    
                    $this->log_user_event($mid, $this->get_user_id(), $this->get_user_name(), $event_code, $params);
                    
                    if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                        $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], $email_template, $params, $uinfo["interface_language"]);
                    }
                }
            }
            
            if (!empty($topic_subscribers[$tid])) {
                foreach ($topic_subscribers[$tid] as $sid => $uinfo) {
                    // if the actor and the receiver are the same, do not notify
                    if ($sid == $this->get_user_id()) {
                        continue;
                    }
                    
                    if (!empty($already_notified[$tid][$sid])) {
                        continue;
                    }
                    
                    $anonym_appendix = "";
                    $anonym_appendix2 = "";
                    $this->get_anonym_appendixes($sid, $anonym_appendix, $anonym_appendix2);
                    
                    $already_notified[$tid][$sid] = 1;
                    
                    $params["{user_name}"] = $uinfo["user_name"];
                    $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
                    $params["{source_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["source_forum_id"]);
                    $params["{target_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["forum_id"]);
                    
                    $this->log_user_event($sid, $this->get_user_id(), $this->get_user_name(), "MsgEventTopicMovedSubscribers{$anonym_appendix2}", $params);
                    
                    if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                        $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_topic_moved_subscribers{$anonym_appendix}.txt", $params, $uinfo["interface_language"]);
                    }
                }
            }
        }
        
        return true;
    } // move_topics
    
    //-----------------------------------------------------------------
    function merge_topics($target_topic, &$response)
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        if (empty($target_topic)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($target_topic)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $target_topic));
            return false;
        }
        
        if (empty($_REQUEST["topics"])) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $target_topic = $dbw->escape($target_topic);
        
        // get info about the target topic and forum
        
        $target_creation_date = 0;
        $target_forum = "";
        $target_forum_name = "";
        $target_topic_name = "";
        
        $target_topic_valid = true;
        
        if (!$dbw->execute_query("select {$prfx}_topic.name topic_name, {$prfx}_topic.creation_date, forum_id, {$prfx}_forum.name forum_name,
                             {$prfx}_topic.deleted, merged
                             from {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id = $target_topic")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $target_forum = $dbw->field_by_name("forum_id");
            $target_forum_name = $dbw->field_by_name("forum_name");
            $target_topic_name = $dbw->field_by_name("topic_name");
            
            $target_creation_date = xstrtotime($dbw->field_by_name("creation_date"));
            
            $target_topic_valid = ($dbw->field_by_name("deleted") == "0" && $dbw->field_by_name("merged") == "");
        } else {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $target_topic));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if (!$target_topic_valid) {
            MessageHandler::setError(text("ErrMergeDeletedOrTransferred"));
            return false;
        }
        
        $_REQUEST["topics"] = array_diff($_REQUEST["topics"], array($target_topic));
        if (empty($_REQUEST["topics"])) {
            MessageHandler::setError(text("ErrMergetoItself"));
            return false;
        }
        
        if (!$this->is_admin() && !$this->is_forum_moderator($target_forum)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if ($this->is_blocked_in_topic($target_topic)) {
            return false;
        }
        
        $forum_name = "-";
        if (!$this->has_access_to_forum($target_forum, $forum_name, true)) {
            return false;
        }
        
        $topic_first_posts = array();
        
        $in_list = $dbw->escape(implode(",", $_REQUEST["topics"]));
        
        // get the first moved post and the first posts of topics
        
        $first_post_id = "";
        
        if (!$dbw->execute_query("select topic_id, min(id) id, min(creation_date) creation_date
                             from {$prfx}_post
                             where topic_id in ($in_list)
                             group by topic_id")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $min_creation_date = time();
        
        while ($dbw->fetch_row()) {
            $topic_first_posts[$dbw->field_by_name("topic_id")] = $dbw->field_by_name("id");
            $min_creation_date = min($min_creation_date, xstrtotime($dbw->field_by_name("creation_date")));
        }
        
        $dbw->free_result();
        
        if ($min_creation_date <= $target_creation_date) {
            MessageHandler::setError(text("ErrTopicsMergeStartDate"));
            return false;
        }
        
        $first_post_id = min($topic_first_posts);
        
        if (!reqvar_empty("return_forum")) {
            $response['target_url'] = "forum.php?fid=" . reqvar("return_forum");
            if (!reqvar_empty("fpage")) {
                $response["target_url"] .= "&fpage=" . reqvar("fpage");
            }
        } else {
            $response['target_url'] = "topic.php?fid=" . $target_forum;
            if (!reqvar_empty("fpage")) {
                $response["target_url"] .= "&fpage=" . reqvar("fpage");
            }
            $response['target_url'] .= "&tid=" . $target_topic . (empty($first_post_id) ? "&gotonew=1" : "&msg=" . $first_post_id);
        }
        
        // get list of the subscribers of the merged topics
        
        $topic_subscribers = array();
        
        if (!$dbw->execute_query("select user_id, topic_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_topic_subscription
                             inner join {$prfx}_user on ({$prfx}_topic_subscription.user_id = {$prfx}_user.id)
                             where topic_id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topic_subscribers[$dbw->field_by_name("topic_id")][$dbw->field_by_name("user_id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // get list of the moderators of the merged topics
        
        $moderators = array();
        
        if (!$dbw->execute_query("select user_id, topic_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_topic_moderator
                             inner join {$prfx}_user on ({$prfx}_topic_moderator.user_id = {$prfx}_user.id)
                             where topic_id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $moderators[$dbw->field_by_name("topic_id")][$dbw->field_by_name("user_id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // get list of the subscribers of the target topic
        
        $target_subscribers = array();
        
        if (!$dbw->execute_query("select user_id, topic_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_topic_subscription
                             inner join {$prfx}_user on ({$prfx}_topic_subscription.user_id = {$prfx}_user.id)
                             where topic_id = $target_topic")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $target_subscribers[$dbw->field_by_name("topic_id")][$dbw->field_by_name("user_id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        $forums = array();
        $topics = array();
        
        if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                             {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name, is_private,
                             email, user_name, author, last_host, send_notifications, interface_language
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                             where {$prfx}_topic.id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            if ($dbw->field_by_name("is_private")) {
                $dbw->free_result();
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
          
            $forums[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("forum_id");
            
            $topics[$dbw->field_by_name("id")] = array(
                "source_topic_id" => $dbw->field_by_name("id"),
                "source_topic_name" => $dbw->field_by_name("topic_name"),
                "comment" => "MSG(Source): [url=http://base" . get_url_path() . "topic.php?fid=" . xrawurlencode($dbw->field_by_name("forum_id")) . "&tid=" . xrawurlencode($dbw->field_by_name("id")) . "]" . $dbw->field_by_name("topic_name") . "[/url]",
                "first_post_id" => $first_post_id,
                "topic_id" => $target_topic,
                "topic_name" => $target_topic_name,
                "source_forum_id" => $dbw->field_by_name("forum_id"),
                "source_forum_name" => $dbw->field_by_name("forum_name"),
                "forum_id" => $target_forum,
                "forum_name" => $target_forum_name,
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "action" => "merge_topic"
            );
        }
        
        $dbw->free_result();
        
        // check if the current user is the forum moderator
        
        foreach ($forums as $fid) {
            if (!$this->is_admin() && !$this->is_forum_moderator($fid)) {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_topic set
                             deleted = 1, pinned = 0, publish_delay = 0,
                             merged = $target_topic
                             where id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_moderator where topic_id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_topic_statistics set
                             post_count = 0,
                             post_count_total = 0
                             where topic_id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // set participation information
        
        $query = "insert into {$prfx}_topic_participants (user_id, topic_id)
                  select distinct user_id, $target_topic from {$prfx}_post
                  where
                  topic_id in ($in_list) and user_id is not NULL and
                  not exists (select 1 from {$prfx}_topic_participants where {$prfx}_topic_participants.user_id = {$prfx}_post.user_id and topic_id = $target_topic)";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_post set topic_id = $target_topic, pinned = 0 where topic_id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        foreach ($topics as $tid => $tdata) {
            if (!$this->log_moderator_event($dbw, $prfx, $tdata)) {
                $dbw->rollback_transaction();
                return false;
            }
        
            // update post count in the affecte topic
        
            if (!$dbw->execute_query($this->get_query_post_cnt_update($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->execute_query($this->get_query_post_cnt_update($prfx, $target_topic))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $forums[$target_forum] = $target_forum;
        
        foreach ($forums as $fid) {
            if (!$dbw->execute_query($this->get_query_topic_cnt_update($prfx, $fid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (count($_REQUEST["topics"]) > 1) {
            MessageHandler::setInfo(text("MsgTopicsMerged"));
        } else {
            MessageHandler::setInfo(text("MsgTopicMerged"));
        }
        
        // mail notification to the authors of the topics
        
        // to prevent the sending the redundant notifications about the same action
        // we track the users who are already notified
        $already_notified = array();
        
        foreach ($topics as $tid => $tdata) {
            $params = array();
            
            $params["{user_name}"] = $tdata["author_name"];
            $params["{moderator_name}"] = $this->get_user_name();
            
            $params["{source_topic_id}"] = $tdata["source_topic_id"];
            $params["{source_topic_name}"] = $tdata["source_topic_name"];
            $params["{source_topic_url}"] = get_host_address($tdata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["source_forum_id"]) . "&tid=" . xrawurlencode($tdata["source_topic_id"]) . "&gotonew=1";
            $params["{source_topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($tdata["source_forum_id"]) . "&tid=" . xrawurlencode($tdata["source_topic_id"]) . "&gotonew=1";
            
            $goto = "&gotonew=1";
            if (!empty($topic_first_posts[$tid])) {
                $goto = "&msg=" . $topic_first_posts[$tid];
                $params["{first_post_id}"] = $topic_first_posts[$tid];
                $params["{first_post_url}"] = get_host_address($tdata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . "&msg=" . $topic_first_posts[$tid];
                $params["{first_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . "&msg=" . $topic_first_posts[$tid];
            }
            
            $params["{target_topic_name}"] = $tdata["topic_name"];
            $params["{target_topic_url}"] = get_host_address($tdata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . $goto;
            $params["{target_topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . "&gotonew=1";
            
            // for tracking
            $params["{topic_id}"] = $tdata["topic_id"];
            $params["{topic_name}"] = $tdata["topic_name"];
            
            $params["{source_forum_name}"] = $tdata["source_forum_name"];
            $params["{source_forum_url}"] = get_host_address($tdata["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["source_forum_id"]);
            $params["{source_forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($tdata["source_forum_id"]);
            
            // for tracking
            $params["{forum_id}"] = $tdata["source_forum_id"];;
            $params["{forum_name}"] = $tdata["source_forum_name"];
            
            $params["{target_forum_name}"] = $tdata["forum_name"];
            $params["{target_forum_url}"] = get_host_address($tdata["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["forum_id"]);
            $params["{target_forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($tdata["forum_id"]);
            
            // if the actor and the receiver are the same, do not notify
            if (!empty($tdata["author_id"]) && val_or_empty($tdata["author_id"]) != $this->get_user_id()) {
                $anonym_appendix = "";
                $anonym_appendix2 = "";
                $this->get_anonym_appendixes($tdata["author_id"], $anonym_appendix, $anonym_appendix2);
                
                $this->log_user_event($tdata["author_id"], $this->get_user_id(), $this->get_user_name(), "MsgEventTopicMerged{$anonym_appendix2}", $params);
                
                if (!empty($tdata["author_email"]) && !empty($tdata["send_notifications"])) {
                    $this->email_manager->send_email($settings["default_sender"], $tdata["author_email"], "email_topic_merged{$anonym_appendix}.txt", $params, $tdata["interface_language"]);
                }
                
                $already_notified[$tid][$tdata["author_id"]] = 1;
            }
            
            // mail notification to the moderators of the merged topics
            
            if (!empty($moderators[$tid])) {
                foreach ($moderators[$tid] as $mid => $uinfo) {
                    // if the actor and the receiver are the same, do not notify
                    if ($mid == $this->get_user_id()) {
                        continue;
                    }
                    
                    if (!empty($already_notified[$tid][$mid])) {
                        continue;
                    }
                    $already_notified[$tid][$mid] = 1;
                    
                    $params["{user_name}"] = $uinfo["user_name"];
                    $params["{source_topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["source_forum_id"]) . "&tid=" . xrawurlencode($tdata["source_topic_id"]) . "&gotonew=1";
                    $params["{target_topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . $goto;
                    $params["{source_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["source_forum_id"]);
                    $params["{target_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["forum_id"]);
                    if (!empty($topic_first_posts[$tid])) {
                        $params["{first_post_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . "&msg=" . $topic_first_posts[$tid];
                    }
                    
                    $this->log_user_event($mid, $this->get_user_id(), $this->get_user_name(), "MsgEventTopicMergedModerators{$anonym_appendix2}", $params);
                    
                    if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                        $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_topic_merged_moderators{$anonym_appendix}.txt", $params, $uinfo["interface_language"]);
                    }
                }
            }
            
            // mail notification to the subscribers of the merged topics
            
            if (!empty($topic_subscribers[$tid])) {
                foreach ($topic_subscribers[$tid] as $sid => $uinfo) {
                    // if the actor and the receiver are the same, do not notify
                    if ($sid == $this->get_user_id()) {
                        continue;
                    }
                    
                    if (!empty($already_notified[$tid][$sid])) {
                        continue;
                    }
                    $already_notified[$tid][$sid] = 1;
                    
                    $params["{user_name}"] = $uinfo["user_name"];
                    $params["{source_topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["source_forum_id"]) . "&tid=" . xrawurlencode($tdata["source_topic_id"]) . "&gotonew=1";
                    $params["{target_topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . $goto;
                    $params["{source_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["source_forum_id"]);
                    $params["{target_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["forum_id"]);
                    if (!empty($topic_first_posts[$tid])) {
                        $params["{first_post_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . "&msg=" . $topic_first_posts[$tid];
                    }
                    
                    $this->log_user_event($sid, $this->get_user_id(), $this->get_user_name(), "MsgEventTopicMergedSubscribers{$anonym_appendix2}", $params);
                    
                    if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                        $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_topic_merged_subscribers{$anonym_appendix}.txt", $params, $uinfo["interface_language"]);
                    }
                }
            }
            
            // mail notification to the subscribers of the target topic
            
            if (!empty($target_subscribers[$tdata["topic_id"]])) {
                foreach ($target_subscribers[$tdata["topic_id"]] as $sid => $uinfo) {
                    // if the actor and the receiver are the same, do not notify
                    if ($sid == $this->get_user_id()) {
                        continue;
                    }
                    
                    if (!empty($already_notified[$tid][$sid])) {
                        continue;
                    }
                    $already_notified[$tid][$sid] = 1;
                    
                    $params["{user_name}"] = $uinfo["user_name"];
                    $params["{source_topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["source_forum_id"]) . "&tid=" . xrawurlencode($tdata["source_topic_id"]) . "&gotonew=1";
                    $params["{target_topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . $goto;
                    $params["{source_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["source_forum_id"]);
                    $params["{target_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($tdata["forum_id"]);
                    if (!empty($topic_first_posts[$tid])) {
                        $params["{first_post_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($tdata["forum_id"]) . "&tid=" . xrawurlencode($tdata["topic_id"]) . "&msg=" . $topic_first_posts[$tid];
                    }
                    
                    $this->log_user_event($sid, $this->get_user_id(), $this->get_user_name(), "MsgEventTopicMergedTargetSubscribers{$anonym_appendix2}", $params);
                    
                    if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                        $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_topic_merged_target_subscribers{$anonym_appendix}.txt", $params, $uinfo["interface_language"]);
                    }
                }
            }
        }
        
        return true;
    } // merge_topics
    
    //-----------------------------------------------------------------
    function handle_topic_ignorance_archive(&$dbw, $prfx, $tid)
    {
        if (empty($tid) || !is_numeric($tid)) {
            return true;
        }
        
        $tid = $dbw->escape($tid);
        
        $query = "insert into {$prfx}_ignored_topics
                  (topic_id, user_id, auto_ignored)
                  select
                  topic_id, user_id, auto_ignored
                  from {$prfx}_ignored_topics_archive
                  where
                  {$prfx}_ignored_topics_archive.topic_id = $tid
                  and not exists (select 1 from {$prfx}_ignored_topics where {$prfx}_ignored_topics.user_id = {$prfx}_ignored_topics_archive.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                 ";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            
            return false;
        }
        
        $query = "delete from {$prfx}_ignored_topics_archive where
                  topic_id = $tid";
        if (!$dbw->execute_query($query)
        ) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            
            return false;
        }
        
        return true;
    } // handle_topic_ignorance_archive
    
    //-----------------------------------------------------------------
    function handle_topic_unignorance(&$dbw, $prfx, $uid)
    {
        if (empty($uid) || !is_numeric($uid)) {
            return true;
        }
        
        $uid = $dbw->escape($uid);
        
        if (!$dbw->execute_query("select ignore_guests_blacklist, ignore_guests_whitelist
                             from {$prfx}_user
                             where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $ignore_guests_blacklist = 0;
        $ignore_guests_whitelist = 0;
        
        if ($dbw->fetch_row()) {
            $ignore_guests_blacklist = $dbw->field_by_name("ignore_guests_blacklist");
            $ignore_guests_whitelist = $dbw->field_by_name("ignore_guests_whitelist");
        }
        
        $dbw->free_result();
        
        if (empty($ignore_guests_blacklist) && empty($ignore_guests_whitelist)) {
            // The current user does not ignore any guest anymore.
            // All auto ignored topics created by the guests should be excluded from ignore.
            
            $guest_appendix = "or {$prfx}_topic.user_id is NULL";
        } elseif (!empty($ignore_guests_whitelist)) {
            // The current user uses white list to ignore the guests.
            // All auto ignored topics created by the guests from the white list should be excluded from ignore.
            
            $guest_appendix = "or ({$prfx}_topic.user_id is NULL and {$prfx}_topic.author in (select guest_name from {$prfx}_ignored_guests where user_id = $uid and whitelist = 1))";
        } else {
            // The current user uses black list to ignore the guests.
            // All auto ignored topics created by the guests not from the black list should be excluded from ignore.
            
            $guest_appendix = "or ({$prfx}_topic.user_id is NULL and {$prfx}_topic.author not in (select guest_name from {$prfx}_ignored_guests where user_id = $uid and whitelist = 0))";
        }
        
        $query = "delete {$prfx}_ignored_topics
                    from {$prfx}_ignored_topics
                    inner join {$prfx}_topic on ({$prfx}_ignored_topics.topic_id = {$prfx}_topic.id)
                    where {$prfx}_ignored_topics.user_id = $uid and auto_ignored = 1 and
                    ({$prfx}_topic.user_id not in (select ignored_user_id from {$prfx}_ignored_users where user_id = $uid)
                     $guest_appendix)
                ";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "delete {$prfx}_ignored_topics_archive
                    from {$prfx}_ignored_topics_archive
                    inner join {$prfx}_topic on ({$prfx}_ignored_topics_archive.topic_id = {$prfx}_topic.id)
                    where {$prfx}_ignored_topics_archive.user_id = $uid and auto_ignored = 1 and
                    ({$prfx}_topic.user_id not in (select ignored_user_id from {$prfx}_ignored_users where user_id = $uid)
                     $guest_appendix)
                ";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // handle_topic_unignorance
    
    //-----------------------------------------------------------------
    function handle_topic_ignorance(&$dbw, $prfx, $tid, $uid, $author)
    {
        if (empty($tid) || !is_numeric($tid)) {
            return true;
        }
        
        $tid = $dbw->escape($tid);
        
        $now = $dbw->format_datetime(time() - 30 * 24 * 3600);

        if (!empty($uid) && is_numeric($uid)) {
            $uid = $dbw->escape($uid);
            
            $query = "insert into {$prfx}_ignored_topics (topic_id, user_id, auto_ignored)
                select $tid, user_id, 1
                from {$prfx}_ignored_users
                where ignored_user_id = $uid 
                and user_id in (select id from {$prfx}_user where last_visit_date > '$now')
                and (select 1 from {$prfx}_ignored_topics where user_id = $uid and topic_id = $tid) is NULL
                and (select 1 from {$prfx}_topic where id = $tid and is_private > 0) is NULL
                ";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        } elseif (!empty($author)) {
            $author = $dbw->escape($author);
            
            // for users who ignore all guests
            
            $query = "insert into {$prfx}_ignored_topics (topic_id, user_id, auto_ignored)
                select $tid, id, 1
                from {$prfx}_user
                where ignore_guests_whitelist = '1'
                and last_visit_date > '$now'
                and id not in (select user_id from {$prfx}_ignored_guests where whitelist = 1)
                and (select 1 from {$prfx}_ignored_topics where user_id = {$prfx}_user.id and topic_id = $tid) is NULL";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            // for users who use guest blacklist
            
            $query = "insert into {$prfx}_ignored_topics (topic_id, user_id, auto_ignored)
                select $tid, id, 1
                from {$prfx}_user
                where ignore_guests_blacklist = '1'
                and last_visit_date > '$now'
                and id in (select user_id from {$prfx}_ignored_guests where guest_name = '$author' and whitelist = 0)
                and (select 1 from {$prfx}_ignored_topics where user_id = {$prfx}_user.id and topic_id = $tid) is NULL";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            // for users who use guest whitelist
            
            $query = "insert into {$prfx}_ignored_topics (topic_id, user_id, auto_ignored)
                select $tid, id, 1
                from {$prfx}_user
                where ignore_guests_whitelist = '1'
                and last_visit_date > '$now'
                and (select 1 from {$prfx}_ignored_guests where user_id = {$prfx}_user.id and guest_name = '$author' and whitelist = 1) is NULL
                and (select 1 from {$prfx}_ignored_topics where user_id = {$prfx}_user.id and topic_id = $tid) is NULL";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        return true;
    } // handle_topic_ignorance
    
    //-----------------------------------------------------------------
    function move_posts($action, &$target_topic, $new_topic, &$response)
    {
        global $READ_MARKER;
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (empty($_REQUEST["posts"])) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        if (empty($target_topic) && trim($new_topic) == "") {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        if (!empty($target_topic) && !is_numeric($target_topic)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $target_topic));
            return false;
        }
        
        $in_list = $dbw->escape(implode(",", $_REQUEST["posts"]));
        
        if (!$dbw->execute_query("select min(topic_id) topic_id, min(creation_date) creation_date, min(id) first_post from {$prfx}_post where {$prfx}_post.id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $source_topic = 0;
        $first_post = 0;
        $min_creation_date = time();
        if ($dbw->fetch_row()) {
            $source_topic = $dbw->field_by_name("topic_id");
            $first_post = $dbw->field_by_name("first_post");
            $min_creation_date = xstrtotime($dbw->field_by_name("creation_date"));
        }
        
        $dbw->free_result();
        
        $topic_allow_moderate = (time() - $min_creation_date <= get_allow_moderate_period()) || $this->is_privileged_topic_moderator();
        if ((!$this->is_admin() && $this->is_topic_moderator($source_topic) && !$topic_allow_moderate)) {
            MessageHandler::setError(text("ErrEditTimeExpired"));
            return false;
        }
        
        $post_clause = "{$prfx}_post.id in ($in_list)";
        if ($action == "move_posts_from") {
            $post_clause = "{$prfx}_post.topic_id = $source_topic and {$prfx}_post.id >= $first_post and {$prfx}_post.is_system = 0";
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (empty($target_topic) && trim($new_topic) != "") {
            if (reqvar_empty("forum")) {
                MessageHandler::setError(text("ErrNoForumSelected"));
                $dbw->rollback_transaction();
                return false;
            }
            
            $target_forum = $dbw->escape(reqvar("forum"));

            if ($this->check_blocked($target_forum)) {
                return false;
            }
            
            if (!$this->check_message_limit($target_forum, "", true)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            if (utf8_strlen(trim($new_topic)) > $settings["max_topic_name_symbols"]) {
                MessageHandler::setError(sprintf(text("ErrSubjectTooLong"), $settings["max_topic_name_symbols"]));
                MessageHandler::setErrorElement("new_topic");
                $dbw->rollback_transaction();
                return false;
            }
            
            // make the topic author the actual moderator
            
            $tuid = $dbw->escape($this->get_user_id());
            if (empty($tuid)) {
                $tuid = "NULL";
            }
            $tauthor = $dbw->escape($this->get_user_name());
            $tread_marker = $dbw->escape($READ_MARKER);
            $tsubject = $dbw->escape(trim($new_topic));
            
            // -1 second to be able to inject the posts
            $tdate = $dbw->format_datetime($min_creation_date - 1);
            
            $query = "insert into {$prfx}_topic (forum_id, user_id, author, name, creation_date, read_marker)
                values ($target_forum, $tuid, '$tauthor', '$tsubject', '$tdate', '$tread_marker')";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $target_topic = $dbw->insert_id();
            
            $query = "insert into {$prfx}_topic_statistics (topic_id) values ($target_topic)";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $query = "update {$prfx}_forum_statistics set
                topic_count = topic_count + 1,
                topic_count_total = topic_count_total + 1
                where forum_id = $target_forum";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if ($tuid != "NULL") {
                $query = "update {$prfx}_user_statistics set
                  topic_count = topic_count + 1
                  where user_id = $tuid";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
            
            if (!$this->handle_topic_ignorance($dbw, $prfx, $target_topic, $this->get_user_id(), $this->get_user_name())) {
                $dbw->rollback_transaction();
                return false;
            }
            // search
        } // create new topic
        
        $target_topic = $dbw->escape($target_topic);
        
        $forums = array();
        $topics = array();
        
        // get info about the target topic and forum
        
        $target_creation_date = 0;
        $target_topic_closed = false;
        $target_forum = "";
        $target_forum_name = "";
        $target_topic_name = "";
        
        if (!$dbw->execute_query("select {$prfx}_topic.name topic_name, {$prfx}_topic.creation_date,
                             forum_id, {$prfx}_forum.name forum_name, {$prfx}_topic.closed
                             from {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id = $target_topic")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $target_forum = $dbw->field_by_name("forum_id");
            $target_forum_name = $dbw->field_by_name("forum_name");
            $target_topic_name = $dbw->field_by_name("topic_name");
            
            $target_creation_date = xstrtotime($dbw->field_by_name("creation_date"));
            
            $forums[$target_forum] = $target_forum;
            $topics[$target_topic] = $target_topic;
            
            $target_topic_closed = $dbw->field_by_name("closed");
        } else {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $target_topic));
            $dbw->free_result();
            $dbw->rollback_transaction();
            return false;
        }
        
        $dbw->free_result();
        
        if ($min_creation_date <= $target_creation_date) {
            MessageHandler::setError(text("ErrPostsMoveStartDate"));
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($target_topic_closed && !$this->is_admin() && !$this->is_topic_moderator($target_topic) && !$this->is_forum_moderator($target_forum)) {
            MessageHandler::setError(text("ErrTopicClosed"));
            $dbw->free_result();
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($this->is_blocked_in_topic($target_topic)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        $forum_name = "-";
        if (!$this->has_access_to_forum($target_forum, $forum_name, true)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($this->check_blocked($target_forum)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($forum_name == "PRIVATE_MESSAGES") {
            MessageHandler::setError(sprintf(text("ErrForumNotAccessible"), text("PrivateTopics")));
            $dbw->rollback_transaction();
            return false;
        }
        
        // get list of the subscribers of the target topic
        
        $target_subscribers = array();
        
        if (!$dbw->execute_query("select user_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_topic_subscription
                             inner join {$prfx}_user on ({$prfx}_topic_subscription.user_id = {$prfx}_user.id)
                             where topic_id = $target_topic")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $target_subscribers[$dbw->field_by_name("user_id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        if (!$dbw->execute_query("select {$prfx}_post.id, forum_id, topic_id, {$prfx}_topic.name topic_name, is_private,
                             {$prfx}_topic.closed topic_closed, {$prfx}_forum.closed forum_closed, {$prfx}_forum.name forum_name, {$prfx}_post.user_id, email, user_name, {$prfx}_post.author,
                             {$prfx}_post.creation_date, text_content, last_host, send_notifications, interface_language, is_system
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             where $post_clause
                             order by {$prfx}_post.id")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $first_post_id = "";
        $first_post_topic_id = "";
        $first_post_forum_id = "";
        
        $move_posts_event = array();
        $moved_posts_authors = array();
        
        while ($dbw->fetch_row()) {
            $source_forum_id = $dbw->field_by_name("forum_id");
            $source_topic_id = $dbw->field_by_name("topic_id");

            if ($dbw->field_by_name("forum_closed") && 
                !$this->is_admin() && !$this->is_forum_moderator($source_forum_id)) {
                MessageHandler::setError(text("ErrForumClosed"));
                $dbw->free_result();
                $dbw->rollback_transaction();
                return false;
            }

            if ($dbw->field_by_name("topic_closed") && 
                !$this->is_admin() && !$this->is_topic_moderator($source_topic_id) && !$this->is_forum_moderator($source_forum_id)) {
                MessageHandler::setError(text("ErrTopicClosed"));
                $dbw->free_result();
                $dbw->rollback_transaction();
                return false;
            }

            if ($dbw->field_by_name("is_private")) {
                $dbw->free_result();
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }

            // check if the current user is the forum moderator or topic moderator
            if (!$this->is_admin() && !$this->is_forum_moderator($source_forum_id) && !$this->is_topic_moderator($source_topic_id)) {
                $dbw->free_result();
                
                MessageHandler::setError(text("ErrActionNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            if ($dbw->field_by_name("is_system")) {
                $dbw->free_result();
                
                MessageHandler::setError(text("ErrSystemMessageСhange"));
                $dbw->rollback_transaction();
                return false;
            }
            
            $forums[$source_forum_id] = $source_forum_id;
            $topics[$source_topic_id] = $source_topic_id;
            
            if (empty($first_post_id)) {
                $first_post_id = $dbw->field_by_name("id");
                $first_post_topic_id = $dbw->field_by_name("topic_id");
                $first_post_forum_id = $dbw->field_by_name("forum_id");
            }
            
            $author_id = $dbw->field_by_name("user_id");
            
            if (!empty($author_id)) {
                if (empty($moved_posts_authors[$author_id])) {
                    $moved_posts_authors[$author_id] = array(
                        "first_post" => $dbw->field_by_name("id"),
                        "moved_count" => 1,
                        "source_topic_id" => $source_topic_id,
                        "source_topic_name" => $dbw->field_by_name("topic_name"),
                        "source_forum_id" => $source_forum_id,
                        "source_forum_name" => $dbw->field_by_name("forum_name"),
                        "topic_id" => $target_topic,
                        "topic_name" => $target_topic_name,
                        "forum_id" => $target_forum,
                        "forum_name" => $target_forum_name,
                        "author_id" => $author_id,
                        "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                        "author_email" => $dbw->field_by_name("email"),
                        "send_notifications" => $dbw->field_by_name("send_notifications"),
                        "last_host" => $dbw->field_by_name("last_host"),
                        "interface_language" => $dbw->field_by_name("interface_language"),
                        "post_date" => adjust_and_format_timezone(xstrtotime($dbw->field_by_name("creation_date")), text("DateTimeFormat")),
                        "short_message" => $dbw->field_by_name("text_content"),
                        "action" => "move_post"
                    );
                } else {
                    $moved_posts_authors[$author_id]["moved_count"]++;
                }
            }
            
            if (empty($move_posts_event)) {
                $move_posts_event = array(
                    "post_id" => $dbw->field_by_name("id"),
                    "topic_id" => $target_topic,
                    "topic_name" => $target_topic_name,
                    "forum_id" => $target_forum,
                    "forum_name" => $target_forum_name,
                    "author_id" => $dbw->field_by_name("user_id"),
                    "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                    "action" => "move_post",
                    "moved_count" => 1,
                    "comment" => "MSG(Messages): 1, MSG(Source): [url=http://base" . get_url_path() . "topic.php?fid=" . xrawurlencode($source_forum_id) . "&tid=" . xrawurlencode($source_topic_id) . "]" . $dbw->field_by_name("topic_name") . "[/url]"
                );
            } else {
                $move_posts_event["moved_count"]++;
                
                $move_posts_event["comment"] = "MSG(Messages): " . $move_posts_event["moved_count"] . ", MSG(Source): [url=http://base" . get_url_path() . "topic.php?fid=" . xrawurlencode($source_forum_id) . "&tid=" . xrawurlencode($source_topic_id) . "]" . $dbw->field_by_name("topic_name") . "[/url]";
                
                // if many posts moved, the author can be different
                // so remove the info completely
                unset($move_posts_event["author_id"]);
                unset($move_posts_event["author_name"]);
            }
        }
        
        $dbw->free_result();
        
        // set participation information
        
        $query = "insert into {$prfx}_topic_participants (user_id, topic_id)
                  select distinct user_id, $target_topic from {$prfx}_post
                  where
                  $post_clause and user_id is not NULL and
                  not exists (select 1 from {$prfx}_topic_participants where {$prfx}_topic_participants.user_id = {$prfx}_post.user_id and topic_id = $target_topic)";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // remove pinned attribute from the moved posts
        
        $query = "update {$prfx}_post set topic_id = $target_topic, pinned = 0, deleted = 0 where $post_clause";
        if ($action == "move_posts_from") {
            $query = "update {$prfx}_post set topic_id = $target_topic, pinned = 0 where $post_clause";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $topics[$target_topic] = $target_topic;
        
        $topic_in_list = $dbw->escape(implode(",", $topics));
        
        // find topics with 0 posts
        
        $source_topic_deleted = false;
        $topics_with_no_posts_list = "";

        foreach ($topics as $tid) {
            if (!$dbw->execute_query($this->get_query_empty_topic($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                if ($first_post_topic_id == $dbw->field_by_name("id")) {
                    $source_topic_deleted = true;
                }
                
                $topics_with_no_posts_list .= $dbw->field_by_name("id") . ",";
            }
            
            $dbw->free_result();
        }

        $topics_with_no_posts_list = trim($topics_with_no_posts_list, ",");
        
        $topic_notifications = array();
        
        $topics_with_no_posts = array();
        if (!empty($topics_with_no_posts_list)) {
            if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                               {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name,
                               email, user_name, author, last_host, send_notifications
                               from
                               {$prfx}_topic
                               inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                               left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                               where {$prfx}_topic.id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $topics_with_no_posts[$dbw->field_by_name("id")] = array(
                    "topic_id" => $dbw->field_by_name("id"),
                    "topic_name" => $dbw->field_by_name("topic_name"),
                    "forum_id" => $dbw->field_by_name("forum_id"),
                    "forum_name" => $dbw->field_by_name("forum_name"),
                    "author_id" => $dbw->field_by_name("user_id"),
                    "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                    "author_email" => $dbw->field_by_name("email"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "action" => "delete_topic"
                );
            }
            
            $dbw->free_result();
            
            if (!$this->collect_notifiable_topic_users($dbw, $topic_notifications, $topics_with_no_posts_list, "delete_topic")) {
                return false;
            }
            
            // delete the topic if all posts are moved or deleted
            
            if (!$dbw->execute_query("update {$prfx}_topic set deleted = 1, publish_delay = 0, pinned = 0 where id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("delete from {$prfx}_topic_moderator where topic_id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        } // topics with no posts
        
        // after action, we try to remain in the topic and go to the next post after the fist moved post
        
        if ($source_topic_deleted) {
            // the source topic was completely deleted, we cannot return to it, so we go to the target topic
            // to the first moved post
            $response['target_url'] = "topic.php?fid=" . $target_forum . "&tid=" . $target_topic . (empty($first_post_id) ? "&gotonew=1" : "&msg=" . $first_post_id);
        } elseif (!empty($first_post_id)) {
            // find the next post after the fist moved post
            $go_post = "";
            
            if (!$dbw->execute_query($this->get_query_min_topic_post($prfx, $first_post_topic_id, $first_post_id))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $go_post = $dbw->field_by_name("id");
            }
            
            $dbw->free_result();
            
            // there is no next post, maybe the last one has been moved
            // we look for the max previous post
            if (empty($go_post)) {
                if (!$dbw->execute_query($this->get_query_max_topic_post($prfx, $first_post_topic_id, $first_post_id))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if ($dbw->fetch_row()) {
                    $go_post = $dbw->field_by_name("id");
                }
                
                $dbw->free_result();
            }
            
            $response['target_url'] = "topic.php?fid=" . $first_post_forum_id;
            if (!reqvar_empty("fpage")) {
                $response["target_url"] .= "&fpage=" . reqvar("fpage");
            }
            $response["target_url"] .= "&tid=" . $first_post_topic_id . (empty($go_post) ? "&gotonew=1" : "&msg=" . $go_post);
        } else {
            // this cannot happen, but if ... we define the target
            $response['target_url'] = "topic.php?fid=" . $target_forum . "&tid=" . $target_topic . "&gotonew=1";
        }

        if (!$this->log_moderator_event($dbw, $prfx, $move_posts_event)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        foreach ($topics_with_no_posts as $tid => $tdata) {
            if (!$this->log_moderator_event($dbw, $prfx, $tdata)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // update post count in the affected topics
        
        foreach ($topics as $tid) {
            if (!$dbw->execute_query($this->get_query_post_cnt_update($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // update topic count in the affected forums
        
        foreach ($forums as $fid) {
            if (!$dbw->execute_query($this->get_query_topic_cnt_update($prfx, $fid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgPostsMoved"));
        
        // to prevent the sending the redundant notifications about the same action
        // we track the users who are already notified
        $already_notified = array();
        
        foreach ($moved_posts_authors as $aid => $adata) {
            // if the actor and the receiver are the same, do not notify
            
            $params = array();
            
            $params["{user_name}"] = $adata["author_name"];
            $params["{moderator_name}"] = $this->get_user_name();
            
            $params["{source_topic_id}"] = $adata["source_topic_id"];
            $params["{source_topic_name}"] = $adata["source_topic_name"];
            $params["{source_topic_url}"] = get_host_address($adata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($adata["source_forum_id"]) . "&tid=" . xrawurlencode($adata["source_topic_id"]) . "&gotonew=1";
            $params["{source_topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($adata["source_forum_id"]) . "&tid=" . xrawurlencode($adata["source_topic_id"]) . "&gotonew=1";
            
            $params["{source_forum_name}"] = $adata["source_forum_name"];
            $params["{source_forum_url}"] = get_host_address($adata["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($adata["source_forum_id"]);
            $params["{source_forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($adata["source_forum_id"]);
            
            // for tracking
            $params["{forum_id}"] = $adata["source_forum_id"];;
            $params["{forum_name}"] = $adata["source_forum_name"];
            
            $params["{user_name}"] = $adata["author_name"];
            $params["{moved_count}"] = $adata["moved_count"];
            
            $params["{first_post_id}"] = $adata["first_post"];
            $params["{first_post_url}"] = get_host_address($adata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($adata["forum_id"]) . "&tid=" . xrawurlencode($adata["topic_id"]) . "&msg=" . $adata["first_post"];
            $params["{first_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($adata["forum_id"]) . "&tid=" . xrawurlencode($adata["topic_id"]) . "&msg=" . $adata["first_post"];
            
            $params["{target_topic_name}"] = $adata["topic_name"];
            $params["{target_topic_url}"] = get_host_address($adata["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($adata["forum_id"]) . "&tid=" . xrawurlencode($adata["topic_id"]) . "&msg=" . $adata["first_post"];
            $params["{target_topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($adata["forum_id"]) . "&tid=" . xrawurlencode($adata["topic_id"]) . "&gotonew=1";
            
            // for tracking
            $params["{topic_id}"] = $adata["topic_id"];;
            $params["{topic_name}"] = $adata["topic_name"];
            
            $params["{target_forum_name}"] = $adata["forum_name"];
            $params["{target_forum_url}"] = get_host_address($adata["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($adata["forum_id"]);
            $params["{target_forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($adata["forum_id"]);
            
            // if the actor and the receiver are the same, do not notify
            if (!empty($aid) && $aid != $this->get_user_id()) {
                $anonym_appendix = "";
                $anonym_appendix2 = "";
                $this->get_anonym_appendixes($aid, $anonym_appendix, $anonym_appendix2);
                
                $this->log_user_event($adata["author_id"], $this->get_user_id(), $this->get_user_name(), "MsgEventMessagesMoved{$anonym_appendix2}", $params);
                
                if (!empty($adata["author_email"]) && !empty($adata["send_notifications"])) {
                    $this->email_manager->send_email($settings["default_sender"], $adata["author_email"], "email_post_moved{$anonym_appendix}.txt", $params, $adata["interface_language"]);
                }
            }
            
            $already_notified[$aid] = 1;
        }
        
        if (!empty($target_subscribers)) {
            foreach ($target_subscribers as $sid => $uinfo) {
                // if the actor and the receiver are the same, do not notify
                if ($sid == $this->get_user_id()) {
                    continue;
                }
                
                if (!empty($already_notified[$sid])) {
                    continue;
                }
                
                $anonym_appendix = "";
                $anonym_appendix2 = "";
                $this->get_anonym_appendixes($sid, $anonym_appendix, $anonym_appendix2);
                
                $params["{user_name}"] = $uinfo["user_name"];
                $params["{source_topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($source_forum_id) . "&tid=" . xrawurlencode($source_topic_id) . "&gotonew=1";
                $params["{source_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($source_forum_id);
                $params["{target_topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($target_forum) . "&tid=" . xrawurlencode($target_topic) . "&msg=" . $first_post_id;
                $params["{target_forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($target_forum);
                
                $params["{first_post_id}"] = $first_post_id;
                $params["{first_post_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($target_forum) . "&tid=" . xrawurlencode($target_topic) . "&msg=" . $first_post_id;
                $params["{first_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($target_forum) . "&tid=" . xrawurlencode($target_topic) . "&msg=" . $first_post_id;
                
                $this->log_user_event($sid, $this->get_user_id(), $this->get_user_name(), "MsgEventMessagesMovedSubscribers{$anonym_appendix2}", $params);
                
                if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                    $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_post_moved_subscribers{$anonym_appendix}.txt", $params, $uinfo["interface_language"]);
                }
            }
        }
        
        $this->do_topic_notifications($dbw, $prfx, $topic_notifications, $settings, "delete_topic");
        
        return true;
    } // move_posts
    
    //-----------------------------------------------------------------
    function do_guest_ignore_action($guest_name, $action, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($guest_name)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        shrink_spaces($guest_name);
        
        $current_uid = $dbw->escape($this->get_user_id());
        $guest_name_db = $dbw->escape($guest_name);
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "put_guest_to_ignore_list") {
            // it is a whitelist modus
            if (!empty($_SESSION["ignore_guests_whitelist"])) {
                // removing from the white list
                
                if (!empty($current_uid)) {
                    $query = "delete from {$prfx}_ignored_guests
                                  where
                                  guest_name = '$guest_name_db' and user_id = $current_uid and whitelist = 1
                                 ";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
                
                unset($_SESSION["ignored_guests_whitelist"][utf8_strtolower($guest_name)]);
            } else { // it is a blacklist modus
                // putting to the black list
                
                if (!empty($current_uid)) {
                    $query = "delete from {$prfx}_ignored_guests
                                  where
                                  guest_name = '$guest_name_db' and user_id = $current_uid
                                 ";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    $query = "insert into {$prfx}_ignored_guests
                                 (user_id, guest_name, whitelist)
                                 select $current_uid, '$guest_name_db', 0 from {$prfx}_dual
                                 where '$guest_name_db' not in (select guest_name from {$prfx}_ignored_guests where user_id = $current_uid)
                                 ";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    $query = "update {$prfx}_user
                                  set ignore_guests_blacklist = 1
                                  where id = $current_uid
                                 ";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
                
                $_SESSION["ignore_guests_blacklist"] = true;
                $_SESSION["ignored_guests_blacklist"][utf8_strtolower($guest_name)] = $guest_name;
            }
            
            MessageHandler::setInfo(text("MsgUserAddedToIgnoreList"));
            $response['convert_action_link'] = "remove_guest_from_ignore_list";
        } elseif ($action == "remove_guest_from_ignore_list") {
            // it is a whitelist modus
            if (!empty($_SESSION["ignore_guests_whitelist"])) {
                // we have to put the user into the whitelist
                if (!empty($current_uid)) {
                    $query = "delete from {$prfx}_ignored_guests
                                  where
                                  guest_name = '$guest_name_db' and user_id = $current_uid
                                 ";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    $query = "insert into {$prfx}_ignored_guests
                                 (user_id, guest_name, whitelist)
                                 select $current_uid, '$guest_name_db', 1 from {$prfx}_dual
                                 where '$guest_name_db' not in (select guest_name from {$prfx}_ignored_guests where user_id = $current_uid)
                                 ";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
                
                $_SESSION["ignored_guests_whitelist"][utf8_strtolower($guest_name)] = $guest_name;
            } else { // it is blacklist modus
                // removing from the black list
                if (!empty($current_uid)) {
                    $query = "delete from {$prfx}_ignored_guests
                                  where
                                  guest_name = '$guest_name_db' and user_id = $current_uid and whitelist = 0
                                 ";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
                
                unset($_SESSION["ignored_guests_blacklist"][utf8_strtolower($guest_name)]);
                
                if (empty($_SESSION["ignored_guests_blacklist"])) {
                    if (!empty($current_uid)) {
                        $query = "update {$prfx}_user
                                  set ignore_guests_blacklist = 0
                                  where id = $current_uid
                                 ";
                        if (!$dbw->execute_query($query)) {
                            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                            $dbw->rollback_transaction();
                            return false;
                        }
                    }
                    
                    $_SESSION["ignore_guests_blacklist"] = false;
                }
            }
            
            MessageHandler::setInfo(text("MsgUserRemovedFromIgnoreList"));
            $response['convert_action_link'] = "put_guest_to_ignore_list";
        }
        
        if (!$this->handle_topic_unignorance($dbw, $prfx, $current_uid)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!empty($current_uid)) {
            $this->update_user_status();
        } else {
            $this->update_user_cookies();
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        return true;
    } // do_guest_ignore_action
    
    //-----------------------------------------------------------------
    function do_user_subscribe_action($uid, $user_name, $action, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if ((empty($uid) || !is_numeric($uid)) && empty($user_name)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $current_uid = $dbw->escape($this->get_user_id());
        $uid = $dbw->escape($uid);
        if (empty($uid)) {
            $uid = "NULL";
        }
        $user_name = quotes_or_null($dbw->escape($user_name));
        
        $where = "where user_id = $current_uid";
        
        if ($uid == "NULL") {
            $where .= " and subscribed_user_id is NULL";
        } else {
            $where .= " and subscribed_user_id = $uid";
        }
        
        if ($user_name == "NULL") {
            $where .= " and subscribed_user_name is NULL";
        } else {
            $where .= " and subscribed_user_name = $user_name";
        }
        
        if (empty($current_uid)) {
            return true;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "subscribe_to_user" || $action == "unsubscribe_from_user") {
            if (!$dbw->execute_query("delete from {$prfx}_user_subscription
                               $where")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgUserUnsubscribed");
            $response['convert_action_link'] = "subscribe_to_user";
        }
        
        if ($action == "subscribe_to_user") {
            $now = $dbw->format_datetime(time());
            
            if (!$dbw->execute_query("insert into {$prfx}_user_subscription
                               (user_id, subscribed_user_id, subscribed_user_name, tm, last_view)
                               values
                               ($current_uid, $uid, $user_name, '$now', '$now')")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgUserSubscribed");
            $response['convert_action_link'] = "unsubscribe_from_user";
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        $this->update_user_status();
        
        MessageHandler::setInfo($imsg);
        
        return true;
    } // do_user_subscribe_action
    
    //-----------------------------------------------------------------
    function do_ignore_action($uid, $action, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($uid) || !is_numeric($uid)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        // guest ignore
        
        if (!$this->is_logged_in() || $this->is_master_admin()) {
            if ($action == "put_to_ignore_list") {
                $_SESSION["ignored_users"][$uid] = $uid;
                
                MessageHandler::setInfo(text("MsgUserAddedToIgnoreList"));
                $response['convert_action_link'] = "remove_from_ignore_list";
            } elseif ($action == "remove_from_ignore_list") {
                unset($_SESSION["ignored_users"][$uid]);
                
                MessageHandler::setInfo(text("MsgUserRemovedFromIgnoreList"));
                $response['convert_action_link'] = "put_to_ignore_list";
            }
            
            $this->update_user_cookies();
            
            return true;
        }
        
        // user ignore
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        $current_uid = $dbw->escape($this->get_user_id());
        
        if (empty($current_uid)) {
            return true;
        }
        
        $event_data = array();
        
        if (!$dbw->execute_query("select id, user_name from {$prfx}_user where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $event_data = array(
                "author_id" => $dbw->field_by_name("id"),
                "author_name" => $dbw->field_by_name("user_name")
            );
        }
        
        $dbw->free_result();
        
        if ($action == "put_to_ignore_list") {
            $query = "select exclude_date
                      from {$prfx}_ignore_history
                      where user_id = $current_uid and ignored_user_id = $uid";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                // Quarantine 12 hours
                $time_to_next = xstrtotime($dbw->field_by_name("exclude_date")) + 12 * 3600 - time();
                
                if ($time_to_next > 0) {
                    MessageHandler::setWarning(sprintf(text("ErrIgnoreRecentlyIgnoredUsers"), format_duration($time_to_next)));
                    $dbw->free_result();
                    return false;
                }
            }
        }

        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "put_to_ignore_list" || $action == "remove_from_ignore_list") {
            if (!$dbw->execute_query("delete from {$prfx}_ignored_users
                               where user_id = $current_uid and ignored_user_id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("delete from {$prfx}_ignore_history
                                  where user_id = $current_uid and ignored_user_id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            // invalidate new info cache
            if (!$this->new_checker->invalidate_new_messages_cache()) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgUserRemovedFromIgnoreList");
            $response['convert_action_link'] = "put_to_ignore_list";
        }
        
        if ($action == "put_to_ignore_list") {
            $event_data["action"] = "ignore_user";
            $comment = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("comment"))));
            
            if (!$dbw->execute_query("insert into {$prfx}_ignored_users
                               (user_id, ignored_user_id, comment)
                               values
                               ($current_uid, $uid, $comment)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $imsg = text("MsgUserAddedToIgnoreList");
            $response['convert_action_link'] = "remove_from_ignore_list";
        }
        
        if ($action == "remove_from_ignore_list") {
            $event_data["action"] = "unignore_user";

            $now = $dbw->format_datetime(time());
            
            if (!$dbw->execute_query("insert into {$prfx}_ignore_history
                               (user_id, ignored_user_id, exclude_date)
                               values
                               ($current_uid, $uid, '$now')")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$this->handle_topic_unignorance($dbw, $prfx, $current_uid)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $this->update_user_status();
        
        MessageHandler::setInfo($imsg);
        
        return true;
    } // do_ignore_action
    
    //-----------------------------------------------------------------
    function do_guest_profile_hide_action($guest_identifier, $action, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($guest_identifier)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $current_uid = $dbw->escape($this->get_user_id());
        $guest_identifier_db = $dbw->escape($guest_identifier);
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "hide_guest_profile" || $action == "open_guest_profile") {
            if (!empty($current_uid)) {
                $query = "delete from {$prfx}_hide_guest_avatars
                  where
                  avatar = '$guest_identifier_db' and user_id = $current_uid
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
            
            unset($_SESSION["hidden_guest_profiles"][$guest_identifier]);
            $imsg = text("MsgProfileOpened");
            $response['convert_action_link'] = "hide_guest_profile";
        }
        
        if ($action == "hide_guest_profile") {
            if (!empty($current_uid)) {
                $query = "insert into {$prfx}_hide_guest_avatars
                 (user_id, avatar)
                 select $current_uid, '$guest_identifier_db' from {$prfx}_dual
                 where '$guest_identifier_db' not in (select avatar from {$prfx}_hide_guest_avatars where user_id = $current_uid)
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
            
            $_SESSION["hidden_guest_profiles"][$guest_identifier] = $guest_identifier;
            $imsg = text("MsgProfileHidden");
            $response['convert_action_link'] = "open_guest_profile";
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $this->update_user_cookies();
        
        MessageHandler::setInfo($imsg);
        
        return true;
    } // do_guest_profile_hide_action
    
    //-----------------------------------------------------------------
    function do_profile_hide_action($uid, $action, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($uid) || !is_numeric($uid)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        // guest ignore
        
        if (!$this->is_logged_in() || $this->is_master_admin()) {
            if ($action == "hide_user_profile") {
                $_SESSION["hidden_profiles"][$uid] = $uid;
                
                $response['convert_action_link'] = "open_user_profile";
                MessageHandler::setInfo(text("MsgProfileHidden"));
                $this->update_user_cookies();
            } elseif ($action == "open_user_profile") {
                unset($_SESSION["hidden_profiles"][$uid]);
                
                $response['convert_action_link'] = "hide_user_profile";
                MessageHandler::setInfo(text("MsgProfileOpened"));
                $this->update_user_cookies();
            }
            
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        $current_uid = $dbw->escape($this->get_user_id());
        
        if (empty($current_uid)) {
            return true;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "hide_user_profile" || $action == "open_user_profile") {
            if (!$dbw->execute_query("delete from {$prfx}_hide_profile
                               where user_id = $current_uid and hidden_user_id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $response['convert_action_link'] = "hide_user_profile";
            $imsg = text("MsgProfileOpened");
        }
        
        if ($action == "hide_user_profile") {
            if (!$dbw->execute_query("insert into {$prfx}_hide_profile
                               (user_id, hidden_user_id)
                               values
                               ($current_uid, $uid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $response['convert_action_link'] = "open_user_profile";
            $imsg = text("MsgProfileHidden");
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $this->update_user_status();
        
        MessageHandler::setInfo($imsg);
        
        return true;
    } // do_profile_hide_action
    
    //-----------------------------------------------------------------
    function build_mlog_paramter_string()
    {
        $param_string = "";
        
        if (!reqvar_empty("type")) {
            $param_string .= "type=" . xrawurlencode(reqvar("type")) . "&";
        }
        if (!reqvar_empty("ip")) {
            $param_string .= "ip=" . xrawurlencode(reqvar("ip")) . "&";
        }
        if (!reqvar_empty("uid")) {
            $param_string .= "uid=" . xrawurlencode(reqvar("uid")) . "&";
        }
        if (!reqvar_empty("author")) {
            $param_string .= "author=" . xrawurlencode(reqvar("author")) . "&";
        }
        if (!reqvar_empty("moderator_name")) {
            $param_string .= "moderator_name=" . xrawurlencode(reqvar("moderator_name")) . "&";
        }
        if (!reqvar_empty("topic_name")) {
            $param_string .= "topic_name=" . xrawurlencode(reqvar("topic_name")) . "&";
        }
        if (!reqvar_empty("action_name")) {
            $param_string .= "action_name=" . xrawurlencode(reqvar("action_name")) . "&";
        }
        if (!reqvar_empty("forum")) {
            $param_string .= "forum=" . xrawurlencode(reqvar("forum")) . "&";
        }
        if (!reqvar_empty("user_name")) {
            $param_string .= "user_name=" . xrawurlencode(reqvar("user_name")) . "&";
        }
        if (!reqvar_empty("start_date")) {
            $param_string .= "start_date=" . xrawurlencode(reqvar("start_date")) . "&";
        }
        if (!reqvar_empty("end_date")) {
            $param_string .= "end_date=" . xrawurlencode(reqvar("end_date")) . "&";
        }
        
        return rtrim($param_string, "&");
    } // build_mlog_paramter_string
    
    //-----------------------------------------------------------------
    function apply_mlog_filter($apply_filter, &$query_string)
    {
        shrink_spaces($_REQUEST["moderator_name"]);
        shrink_spaces($_REQUEST["user_name"]);
        
        invert_dates($_REQUEST["start_date"], $_REQUEST["end_date"], text("DateFormat"));
        
        if ($apply_filter == -1) {
            unset($_SESSION["moderator_log_filter"]);
            return true;
        }
        
        $_SESSION["moderator_log_filter"]["moderator_name"] = reqvar("moderator_name");
        $_SESSION["moderator_log_filter"]["topic_name"] = reqvar("topic_name");
        $_SESSION["moderator_log_filter"]["action_name"] = reqvar("action_name");
        $_SESSION["moderator_log_filter"]["forum"] = reqvar("forum");
        $_SESSION["moderator_log_filter"]["user_name"] = reqvar("user_name");
        $_SESSION["moderator_log_filter"]["start_date"] = reqvar("start_date");
        $_SESSION["moderator_log_filter"]["end_date"] = reqvar("end_date");
        
        $query_string = $this->build_mlog_paramter_string();
        
        if (!empty($query_string)) {
            $query_string = "?" . trim($query_string, "&");
        }
        
        return true;
    } // apply_mlog_filter
    
    //-----------------------------------------------------------------
    function build_elog_paramter_string()
    {
        $param_string = "";
        
        if (!reqvar_empty("author_name")) {
            $param_string .= "author_name=" . xrawurlencode(reqvar("author_name")) . "&";
        }
        if (!reqvar_empty("event_type")) {
            $param_string .= "event_type=" . xrawurlencode(reqvar("event_type")) . "&";
        }
        if (!reqvar_empty("topic_name")) {
            $param_string .= "topic_name=" . xrawurlencode(reqvar("topic_name")) . "&";
        }
        if (!reqvar_empty("forum")) {
            $param_string .= "forum=" . xrawurlencode(reqvar("forum")) . "&";
        }
        if (!reqvar_empty("start_date")) {
            $param_string .= "start_date=" . xrawurlencode(reqvar("start_date")) . "&";
        }
        if (!reqvar_empty("end_date")) {
            $param_string .= "end_date=" . xrawurlencode(reqvar("end_date")) . "&";
        }
        
        return rtrim($param_string, "&");
    } // build_elog_paramter_string
    
    //-----------------------------------------------------------------
    function apply_elog_filter($apply_filter, &$query_string)
    {
        shrink_spaces($_REQUEST["author_name"]);
        
        invert_dates($_REQUEST["start_date"], $_REQUEST["end_date"], text("DateFormat"));
        
        if ($apply_filter == -1) {
            unset($_SESSION["event_log_filter"]);
            return true;
        }
        
        $_SESSION["event_log_filter"]["author_name"] = reqvar("author_name");
        $_SESSION["event_log_filter"]["topic_name"] = reqvar("topic_name");
        $_SESSION["event_log_filter"]["forum"] = reqvar("forum");
        $_SESSION["event_log_filter"]["event_type"] = reqvar("event_type");
        $_SESSION["event_log_filter"]["start_date"] = reqvar("start_date");
        $_SESSION["event_log_filter"]["end_date"] = reqvar("end_date");
        
        if (reqvar_empty("apply_filter") &&
            empty($_SESSION["event_log_filter"]["author_name"]) &&
            empty($_SESSION["event_log_filter"]["topic_name"]) &&
            empty($_SESSION["event_log_filter"]["forum"]) &&
            empty($_SESSION["event_log_filter"]["event_type"]) &&
            empty($_SESSION["event_log_filter"]["start_date"]) &&
            empty($_SESSION["event_log_filter"]["end_date"])
        ) {
            $_SESSION["event_log_filter"]["event_type"] = get_cookie("q_stored_event_filter");
        }
        
        $query_string = $this->build_elog_paramter_string();
        
        if (!empty($query_string)) {
            $query_string = "?" . trim($query_string, "&");
        }
        
        return true;
    } // apply_elog_filter
    
    //-----------------------------------------------------------------
    function build_statistics_filter()
    {
        $query_string = "";
        if (!reqvar_empty("fid")) {
            $query_string .= "fid=" . xrawurlencode(reqvar("fid")) . "&";
        }
        if (!reqvar_empty("period")) {
            $query_string .= "period=" . xrawurlencode(reqvar("period")) . "&";
        }
        
        return trim($query_string, "&");
    } // build_statistics_filter
    
    //-----------------------------------------------------------------
    function apply_load_statistics_filter(&$query_string)
    {
        $_SESSION["load_activity_period"] = reqvar("period");
        
        switch (reqvar("period")) {
            case "last_10_minutes":
            case "last_hour":
            case "last_day":
            case "last_week":
            case "last_month":
                $_SESSION["load_activity_period"] = reqvar("period");
                break;
            default:
                $_SESSION["load_activity_period"] = "last_10_minutes";
                break;
        }
        
        $query_string = "";
        if (!reqvar_empty("period")) {
            $query_string .= "period=" . xrawurlencode(reqvar("period")) . "&";
        }
        
        if (!empty($query_string)) {
            $query_string = "?" . trim($query_string, "&");
        }
        
        return true;
    } // apply_load_statistics_filter
    
    //-----------------------------------------------------------------
    function moderate_user($uid)
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($uid)) {
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        
        $current_uid = $dbw->escape($this->get_user_id());
        
        $user_data = array();
        if (!$this->get_user_data($uid, $user_data)) {
            return false;
        }
        
        $event_data = array();
        $event_data["author_id"] = val_or_empty($user_data["id"]);
        $event_data["author_name"] = val_or_empty($user_data["user_name"]);
        $event_data["author_email"] = val_or_empty($user_data["user_email"]);
        
        $comment = "";
        
        if (!reqvar_empty("reason") && reqvar("reason") != "other_reason") {
            $comment = "MSG(" . self::get_reason_lang_code(reqvar("reason")) . ")";
        }
        
        if (!reqvar_empty("reason_info")) {
            if (!empty($comment)) {
                $comment .= ":\n\n";
            }
            
            $comment .= reqvar("reason_info");
        }
        
        $event_data["comment"] = $comment;
        
        $messages = array();
        $mail_jobs = array();
        
        $anonym_appendix = "";
        $anonym_appendix2 = "";
        $this->get_anonym_appendixes($uid, $anonym_appendix, $anonym_appendix2);
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        //---------------------------------------------------------------
        if (!reqvar_empty("hide_profile")) {
            if (!$this->global_ban_allowed()) {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("update {$prfx}_user set hidden = 1 where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $event_data["action"] = "hide_profile";
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $mail_job = array();
            
            $mail_job["email_template"] = "email_profile_hidden{$anonym_appendix}.txt";
            $mail_job["event_code"] = "MsgEventProfileHidden{$anonym_appendix2}";
            
            $mail_job["receiver"] = $user_data["user_email"];
            $mail_job["send_notifications"] = $user_data["send_notifications"];
            $mail_job["last_host"] = $user_data["last_host"];
            $mail_job["interface_language"] = $user_data["interface_language"];
            $mail_job["author_time_zone"] = $user_data["time_zone"];
            
            $mail_job["params"]["{user_name}"] = $user_data["user_name"];
            $mail_job["params"]["{moderator_name}"] = $this->get_user_name();
            $mail_job["params"]["{site_url}"] = get_host_address($user_data["last_host"]) . get_url_path();
            $mail_job["params"]["{comment}"] = $comment;
            
            $mail_jobs[] = $mail_job;
            
            $messages[text("MsgProfileHidden")] = text("MsgProfileHidden");
        }
        //---------------------------------------------------------------
        if (!reqvar_empty("open_profile")) {
            if (!$dbw->execute_query("update {$prfx}_user set hidden = 0 where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$this->global_ban_allowed()) {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            $event_data["action"] = "open_profile";
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $mail_job = array();
            
            $mail_job["email_template"] = "email_profile_opened{$anonym_appendix}.txt";
            $mail_job["event_code"] = "MsgEventProfileOpened{$anonym_appendix2}";
            
            $mail_job["receiver"] = $user_data["user_email"];
            $mail_job["send_notifications"] = $user_data["send_notifications"];
            $mail_job["last_host"] = $user_data["last_host"];
            $mail_job["interface_language"] = $user_data["interface_language"];
            $mail_job["author_time_zone"] = $user_data["time_zone"];
            
            $mail_job["params"]["{user_name}"] = $user_data["user_name"];
            $mail_job["params"]["{moderator_name}"] = $this->get_user_name();
            $mail_job["params"]["{site_url}"] = get_host_address($user_data["last_host"]) . get_url_path();
            $mail_job["params"]["{comment}"] = $comment;
            
            $mail_jobs[] = $mail_job;
            
            $messages[text("MsgProfileOpened")] = text("MsgProfileOpened");
        }
        //---------------------------------------------------------------
        if (!reqvar_empty("disallow_rating")) {
            if (!empty($user_data["moderator"]) || !empty($user_data["is_admin"])) {
                MessageHandler::setError(text("ErrModeratorBlockNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$this->global_ban_allowed()) {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("update {$prfx}_user set rating_blocked = 1 where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $event_data["action"] = "disallow_rating";
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $mail_job = array();
            
            $mail_job["email_template"] = "email_rating_disallowed{$anonym_appendix}.txt";
            $mail_job["event_code"] = "MsgEventRatingDisallowed{$anonym_appendix2}";
            
            $mail_job["receiver"] = $user_data["user_email"];
            $mail_job["send_notifications"] = $user_data["send_notifications"];
            $mail_job["last_host"] = $user_data["last_host"];
            $mail_job["interface_language"] = $user_data["interface_language"];
            $mail_job["author_time_zone"] = $user_data["time_zone"];
            
            $mail_job["params"]["{user_name}"] = $user_data["user_name"];
            $mail_job["params"]["{moderator_name}"] = $this->get_user_name();
            $mail_job["params"]["{site_url}"] = get_host_address($user_data["last_host"]) . get_url_path();
            $mail_job["params"]["{comment}"] = $comment;
            
            $mail_jobs[] = $mail_job;
            
            $messages[text("MsgRatingDisallowed")] = text("MsgRatingDisallowed");
        }
        //---------------------------------------------------------------
        if (!reqvar_empty("allow_rating")) {
            if (!$this->global_ban_allowed()) {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->execute_query("update {$prfx}_user set rating_blocked = 0 where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $event_data["action"] = "allow_rating";
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $mail_job = array();
            
            $mail_job["email_template"] = "email_rating_allowed{$anonym_appendix}.txt";
            $mail_job["event_code"] = "MsgEventRatingAllowed{$anonym_appendix2}";
            
            $mail_job["receiver"] = $user_data["user_email"];
            $mail_job["send_notifications"] = $user_data["send_notifications"];
            $mail_job["last_host"] = $user_data["last_host"];
            $mail_job["interface_language"] = $user_data["interface_language"];
            $mail_job["author_time_zone"] = $user_data["time_zone"];
            
            $mail_job["params"]["{user_name}"] = $user_data["user_name"];
            $mail_job["params"]["{moderator_name}"] = $this->get_user_name();
            $mail_job["params"]["{site_url}"] = get_host_address($user_data["last_host"]) . get_url_path();
            $mail_job["params"]["{comment}"] = $comment;
            
            $mail_jobs[] = $mail_job;
            
            $messages[text("MsgRatingAllowed")] = text("MsgRatingAllowed");
        }
        //---------------------------------------------------------------
        if (!reqvar_empty("block_user")) {
            $period = 24 * 3600 * (int)reqvar("days") + 3600 * (int)reqvar("hours") + 60 * (int)reqvar("minutes");
            
            if ((!$this->is_admin() || (reqvar("reason") != "author_death" && reqvar("reason") != "account_loss")) &&
                !empty($user_data["is_admin"])) {
                MessageHandler::setError(text("ErrModeratorBlockNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            if (reqvar_empty("reason") && empty($comment)) {
                MessageHandler::setError(text("ErrBlockReasonNotSpecified"));
                MessageHandler::setErrorElement("reason");
                $dbw->rollback_transaction();
                return false;
            }
            
            if ((reqvar("reason") == "author_death" || reqvar("reason") == "account_loss") &&
                (reqvar("forum") != -9 || !empty($period))) {
                MessageHandler::setError(text("ErrBlockOnlyGlobal"));
                MessageHandler::setErrorElement("reason");
                $dbw->rollback_transaction();
                return false;
            }
            
            if (reqvar("reason") == "other_reason" && empty($comment)) {
                MessageHandler::setError(text("ErrBlockReasonNotSpecified"));
                MessageHandler::setErrorElement("reason_info");
                $dbw->rollback_transaction();
                return false;
            }
            
            $mail_job = array();
            
            $mail_job["receiver"] = $user_data["user_email"];
            $mail_job["send_notifications"] = $user_data["send_notifications"];
            $mail_job["last_host"] = $user_data["last_host"];
            $mail_job["interface_language"] = $user_data["interface_language"];
            $mail_job["author_time_zone"] = $user_data["time_zone"];
            
            $mail_job["params"]["{user_name}"] = $user_data["user_name"];
            $mail_job["params"]["{moderator_name}"] = $this->get_user_name();
            $mail_job["params"]["{site_url}"] = get_host_address($user_data["last_host"]) . get_url_path();
            $mail_job["params"]["{comment}"] = $comment;
            
            if (!empty($period)) {
                $event_data["action_expires"] = time() + $period;
                $action_expires = "'" . $dbw->format_datetime(time() + $period) . "'";
                
                $mail_job["params"]["{block_expires}"] = time() + $period;
            } else {
                $event_data["action_expires"] = null;
                $action_expires = "NULL";
            }
            
            if (reqvar("forum") == -9 && $this->global_ban_allowed()) {
                if (reqvar("reason") != "author_death" && reqvar("reason") != "account_loss" &&
                    !empty($user_data["moderator"])) {
                    MessageHandler::setError(text("ErrModeratorBlockNotAllowed"));
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if (empty($period)) {
                    $mail_job["email_template"] = "email_user_blocked{$anonym_appendix}.txt";
                    $mail_job["event_code"] = "MsgEventUserBlocked{$anonym_appendix2}";
                } else {
                    $mail_job["email_template"] = "email_user_blocked_for_time{$anonym_appendix}.txt";
                    $mail_job["event_code"] = "MsgEventUserBlockedTime{$anonym_appendix2}";
                }
                
                $event_data["action"] = "block_user";
                
                $self_blocked = 0;
                if (reqvar("reason") == "author_wish") {
                    $self_blocked = 1;
                } elseif (reqvar("reason") == "author_death") {
                    $self_blocked = 2;
                } elseif (reqvar("reason") == "account_loss") {
                    $self_blocked = 3;
                }
                $comment = $dbw->escape($comment);
                
                if (!$dbw->execute_query("update {$prfx}_user set blocked = 1, self_blocked = $self_blocked, block_expires = $action_expires, block_reason = '$comment' where id = $uid")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $mail_jobs[] = $mail_job;
            } else {
                if (empty($period)) {
                    $mail_job["email_template"] = "email_user_forum_blocked{$anonym_appendix}.txt";
                    $mail_job["event_code"] = "MsgEventUserForumBlocked{$anonym_appendix2}";
                } else {
                    $mail_job["email_template"] = "email_user_forum_blocked_for_time{$anonym_appendix}.txt";
                    $mail_job["event_code"] = "MsgEventUserForumBlockedTime{$anonym_appendix2}";
                }
                
                if (!reqvar_empty("forum")) {
                    if ($this->is_admin()) {
                        $query = "select id, name
                                  from {$prfx}_forum where deleted <> 1 
                                  and {$prfx}_forum.id = " . $dbw->escape(reqvar("forum"));
                    } else {
                        $query = "select id, name
                        from {$prfx}_forum
                        inner join {$prfx}_forum_moderator on ({$prfx}_forum.id = {$prfx}_forum_moderator.forum_id)
                        where user_id = $current_uid and {$prfx}_forum.name <> 'PRIVATE_MESSAGES' and deleted <> 1
                        and {$prfx}_forum.id = " . $dbw->escape(reqvar("forum"));
                    }
                } else {
                    $query = "select id, name
                    from {$prfx}_forum
                    inner join {$prfx}_forum_moderator on ({$prfx}_forum.id = {$prfx}_forum_moderator.forum_id)
                    where user_id = $current_uid and {$prfx}_forum.name <> 'PRIVATE_MESSAGES' and deleted <> 1";
                }

                $forums = array();
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                while ($dbw->fetch_row()) {
                    $forums[$dbw->field_by_name("id")] = $dbw->field_by_name("name");
                }
                
                $dbw->free_result();
                
                $event_data["action"] = "block_user_forum";
                
                $query = "select id, user_id has_access
                    from {$prfx}_forum
                    left join {$prfx}_forum_member on ({$prfx}_forum.id = {$prfx}_forum_member.forum_id and user_id = $uid)
                    where deleted <> 1 and restricted_access = 1";
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $restricted_forum_membership = array();
                while ($dbw->fetch_row()) {
                    $restricted_forum_membership[$dbw->field_by_name("id")] = $dbw->field_by_name("has_access") ? 1 : 0;
                }

                $dbw->free_result();
                
                foreach ($forums as $fid => $fname) {
                    if (!$this->is_admin() && !$this->is_forum_moderator($fid)) {
                        MessageHandler::setError(text("ErrActionNotAllowed"));
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    if (!empty($user_data["moderator"][$fid])) {
                        MessageHandler::setError(sprintf(text("ErrForumModeratorBlockNotAllowed"), $user_data["user_name"], $fname));
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    if (isset($restricted_forum_membership[$fid]) && empty($restricted_forum_membership[$fid])) {
                        MessageHandler::setError(sprintf(text("ErrNotMemberBlockNotAllowed"), $user_data["user_name"], $fname));
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    if (!$dbw->execute_query("select id, name from {$prfx}_forum where id = $fid")) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        return false;
                    }
                    
                    if ($dbw->fetch_row()) {
                        $event_data["forum_id"] = $dbw->field_by_name("id");
                        $event_data["forum_name"] = $dbw->field_by_name("name");
                        
                        $fid_for_url = $dbw->field_by_name("name") == "PRIVATE_MESSAGES" ? "private" : $dbw->field_by_name("id");
                        
                        $mail_job["params"]["{forum_id}"] = $event_data["forum_id"];
                        $mail_job["params"]["{forum_name}"] = $event_data["forum_name"];
                        $mail_job["params"]["{forum_url}"] = get_host_address($user_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid_for_url);
                        $mail_job["params"]["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid_for_url);
                    }
                    
                    $dbw->free_result();
                    
                    if (!$dbw->execute_query("delete from {$prfx}_forum_blocked where user_id = $uid and forum_id = $fid")) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    if (!$dbw->execute_query("insert into {$prfx}_forum_blocked (user_id, forum_id, block_expires)
                                              values ($uid, $fid, $action_expires)")) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    $mail_jobs[] = $mail_job;
                } // foreach forum
            } 
            
            $messages[text("MsgUserBlocked")] = text("MsgUserBlocked");
        }
        //---------------------------------------------------------------
        if (!reqvar_empty("unblock_user")) {
            if (!$this->global_ban_allowed()) {
                MessageHandler::setError(text("ErrActionNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            $event_data["action"] = "unblock_user";
            
            if (!$dbw->execute_query("update {$prfx}_user set blocked = 0, self_blocked = 0, block_expires = NULL where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $mail_job = array();
            
            $mail_job["email_template"] = "email_user_unblocked{$anonym_appendix}.txt";
            $mail_job["event_code"] = "MsgEventUserUnblocked{$anonym_appendix2}";
            
            $mail_job["receiver"] = $user_data["user_email"];
            $mail_job["send_notifications"] = $user_data["send_notifications"];
            $mail_job["last_host"] = $user_data["last_host"];
            $mail_job["interface_language"] = $user_data["interface_language"];
            $mail_job["author_time_zone"] = $user_data["time_zone"];
            
            $mail_job["params"]["{user_name}"] = $user_data["user_name"];
            $mail_job["params"]["{moderator_name}"] = $this->get_user_name();
            $mail_job["params"]["{site_url}"] = get_host_address($user_data["last_host"]) . get_url_path();
            $mail_job["params"]["{comment}"] = $comment;
            
            $mail_jobs[] = $mail_job;
            
            $messages[text("MsgUserUnblocked")] = text("MsgUserUnblocked");
        }
        //---------------------------------------------------------------
        if (reqvar_empty("block_user") && !empty($_REQUEST["unblock_user_for_forum"])) {
            foreach ($_REQUEST["unblock_user_for_forum"] as $fid) {
                if (!$this->is_admin() && !$this->is_forum_moderator($fid)) {
                    MessageHandler::setError(text("ErrActionNotAllowed"));
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $mail_job = array();
                
                $mail_job["email_template"] = "email_user_forum_unblocked{$anonym_appendix}.txt";
                $mail_job["event_code"] = "MsgEventUserForumUnblocked{$anonym_appendix2}";
                
                $mail_job["receiver"] = $user_data["user_email"];
                $mail_job["send_notifications"] = $user_data["send_notifications"];
                $mail_job["last_host"] = $user_data["last_host"];
                $mail_job["interface_language"] = $user_data["interface_language"];
                $mail_job["author_time_zone"] = $user_data["time_zone"];
                
                $mail_job["params"]["{user_name}"] = $user_data["user_name"];
                $mail_job["params"]["{moderator_name}"] = $this->get_user_name();
                $mail_job["params"]["{site_url}"] = get_host_address($user_data["last_host"]) . get_url_path();
                $mail_job["params"]["{comment}"] = $comment;
                
                $event_data["action"] = "unblock_user_forum";
                
                $fid = $dbw->escape($fid);
                
                if (!$dbw->execute_query("select id, name from {$prfx}_forum where id = $fid")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                if ($dbw->fetch_row()) {
                    $event_data["forum_id"] = $dbw->field_by_name("id");
                    $event_data["forum_name"] = $dbw->field_by_name("name");
                    
                    $fid_for_url = $dbw->field_by_name("name") == "PRIVATE_MESSAGES" ? "private" : $dbw->field_by_name("id");
                    
                    $mail_job["params"]["{forum_id}"] = $event_data["forum_id"];
                    $mail_job["params"]["{forum_name}"] = $event_data["forum_name"];
                    $mail_job["params"]["{forum_url}"] = get_host_address($user_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid_for_url);
                    $mail_job["params"]["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid_for_url);
                }
                
                $dbw->free_result();
                
                if (!$dbw->execute_query("delete from {$prfx}_forum_blocked where user_id = $uid and forum_id = $fid")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $mail_jobs[] = $mail_job;
            }
            
            $messages[text("MsgUserUnblocked")] = text("MsgUserUnblocked");
        }
        //---------------------------------------------------------------
        // check the restricted forums
        //---------------------------------------------------------------
        if (empty($current_uid)) {
            $current_uid = 0;
        }
        
        $where_appendix = "and {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = $current_uid)";
        if ($this->is_admin()) {
            $where_appendix = "";
        }
        
        if (!$dbw->execute_query("select {$prfx}_forum.id, name, {$prfx}_forum_member.forum_id has_access
                             from {$prfx}_forum
                             left join {$prfx}_forum_member on ({$prfx}_forum.id = {$prfx}_forum_member.forum_id and user_id = $uid)
                             where restricted_access = 1 and deleted <> 1
                             $where_appendix")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $forum_access = array();
        
        while ($dbw->fetch_row()) {
            $forum_access[$dbw->field_by_name("id")]["name"] = $dbw->field_by_name("name");
            $forum_access[$dbw->field_by_name("id")]["has_access"] = $dbw->field_by_name("has_access");
        }
        
        $dbw->free_result();
        
        foreach ($forum_access as $fid => $finfo) {
            // no change
            if (empty($finfo["has_access"]) == empty($_REQUEST["forum_access"][$fid])) {
                continue;
            }
            
            $event_data["forum_id"] = $fid;
            $event_data["forum_name"] = $finfo["name"];
            
            $mail_job = array();
            $mail_job["receiver"] = $user_data["user_email"];
            $mail_job["send_notifications"] = $user_data["send_notifications"];
            $mail_job["last_host"] = $user_data["last_host"];
            $mail_job["interface_language"] = $user_data["interface_language"];
            $mail_job["author_time_zone"] = $user_data["time_zone"];
            
            $mail_job["params"]["{user_name}"] = $user_data["user_name"];
            $mail_job["params"]["{moderator_name}"] = $this->get_user_name();
            
            $mail_job["params"]["{forum_id}"] = $event_data["forum_id"];
            $mail_job["params"]["{forum_name}"] = $event_data["forum_name"];
            $mail_job["params"]["{forum_url}"] = get_host_address($user_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($event_data["forum_id"]);
            $mail_job["params"]["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($event_data["forum_id"]);
            
            $mail_job["params"]["{site_url}"] = get_host_address($user_data["last_host"]) . get_url_path();
            $mail_job["params"]["{comment}"] = $comment;
            
            if (!empty($user_data["moderator"][$fid]) || !empty($user_data["is_admin"])) {
                MessageHandler::setError(text("ErrAdminOrModeratorBlockNotAllowed"));
                $dbw->rollback_transaction();
                return false;
            }
            
            // adding
            if (empty($finfo["has_access"])) {
                $event_data["action"] = "grant_forum_access";
                
                $mail_job["email_template"] = "email_user_access_granted{$anonym_appendix}.txt";
                $mail_job["event_code"] = "MsgEventUserAccessGranted{$anonym_appendix2}";
                
                if (!$dbw->execute_query("insert into {$prfx}_forum_member (user_id, forum_id)
                                 values ($uid, $fid)")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $messages[text("MsgForumAccessSet")] = text("MsgForumAccessSet");
                
                $mail_jobs[] = $mail_job;
            }
            
            // removing
            if (!empty($finfo["has_access"])) {
                if (reqvar_empty("reason") && empty($comment)) {
                    MessageHandler::setError(text("ErrBlockReasonNotSpecified"));
                    MessageHandler::setErrorElement("reason");
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if (reqvar("reason") == "other_reason" && empty($comment)) {
                    MessageHandler::setError(text("ErrBlockReasonNotSpecified"));
                    MessageHandler::setErrorElement("reason_info");
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $event_data["action"] = "revoke_forum_access";
                
                $mail_job["email_template"] = "email_user_access_revoked{$anonym_appendix}.txt";
                $mail_job["event_code"] = "MsgEventUserAccessRevoked{$anonym_appendix2}";
                
                if (!$dbw->execute_query("delete from {$prfx}_forum_member where user_id = $uid and forum_id = $fid")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $messages[text("MsgForumAccessSet")] = text("MsgForumAccessSet");
                
                $mail_jobs[] = $mail_job;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        foreach ($messages as $message) {
            MessageHandler::setInfo($message);
        }
        
        // if the user self posted the message, he does not need to be notified about it
        if ($uid == $this->get_user_id()) {
            return true;
        }
        
        foreach ($mail_jobs as $mail_job) {
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $mail_job["event_code"], $mail_job["params"]);
            
            if (!empty($mail_job["send_notifications"])) {
                if (!empty($mail_job["params"]["{block_expires}"])) {
                    $mail_job["params"]["{block_expires}"] = date(text("DateTimeFormat"), convert_timezone($mail_job["params"]["{block_expires}"], TIME_ZONE, $mail_job["author_time_zone"]));
                }
                
                $this->format_manager->format_email_message($dbw, $prfx, $mail_job["params"]["{comment}"], $mail_job["interface_language"], get_host_address($mail_job["last_host"]) . get_url_path(), 600);
                $this->email_manager->send_email($settings["default_sender"], $mail_job["receiver"], $mail_job["email_template"], $mail_job["params"], $mail_job["interface_language"]);
            }
        }
        
        return true;
    } // moderate_user
    
    //-----------------------------------------------------------------
    function moderate_ip($ip, $author)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        $type = "IP";
        if (reqvar("type") == "um_moderation") {
            $type = "UM";
        }
        
        if (empty($ip)) {
            MessageHandler::setError($type == "UM" ? text("ErrFingerPrintEmpty") : text("ErrIPAddressEmpty"));
            MessageHandler::setFocusElement("ip");
            return false;
        }
        
        $event_data = array();
        $event_data["author_name"] = $author;
        $event_data["ip"] = $ip;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $ip = $dbw->escape($ip);
        
        $comment = "";
        
        if (!reqvar_empty("reason") && reqvar("reason") != "other_reason") {
            $comment = "MSG(" . self::get_reason_lang_code(reqvar("reason")) . ")";
        }
        
        if (!reqvar_empty("reason_info")) {
            if (!empty($comment)) {
                $comment .= ":\n\n";
            }
            
            $comment .= reqvar("reason_info");
        }
        
        $event_data["comment"] = $comment;
        
        $messages = array();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        //---------------------------------------------------------------
        if (!reqvar_empty("block_ip")) {
            if (reqvar_empty("reason") && empty($comment)) {
                MessageHandler::setError(text("ErrBlockReasonNotSpecified"));
                MessageHandler::setErrorElement("reason");
                $dbw->rollback_transaction();
                return false;
            }
            
            if (reqvar("reason") == "other_reason" && empty($comment)) {
                MessageHandler::setError(text("ErrBlockReasonNotSpecified"));
                MessageHandler::setErrorElement("reason_info");
                $dbw->rollback_transaction();
                return false;
            }
            
            $period = 24 * 3600 * (int)reqvar("days") + 3600 * (int)reqvar("hours") + 60 * (int)reqvar("minutes");
            if (!empty($period)) {
                $event_data["action_expires"] = time() + $period;
                $action_expires = "'" . $dbw->format_datetime(time() + $period) . "'";
            } else {
                $event_data["action_expires"] = null;
                $action_expires = "NULL";
            }
            
            $event_data["action"] = $type == "UM" ? "block_user_marker" : "block_ip";
            
            // clean up also old expired entries
            $now = $dbw->format_datetime(time());
            
            if (!$dbw->execute_query("delete from {$prfx}_ip_blocked where (ip = '$ip' and tp = '$type') or block_expires < '$now'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $comment = $dbw->escape($comment);
            
            if (!$dbw->execute_query("insert into {$prfx}_ip_blocked (ip, block_expires, tp, block_reason)
                               values ('$ip', $action_expires, '$type', '$comment')")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $txt = $type == "UM" ? text("MsgFingerPrintBlocked") : text("MsgIPBlocked");
            $messages[$txt] = $txt;
        }
        //---------------------------------------------------------------
        if (!reqvar_empty("unblock_ip")) {
            $event_data["action"] = $type == "UM" ? "unblock_user_marker" : "unblock_ip";
            
            // clean up also old expired entries
            $now = $dbw->format_datetime(time());
            
            if (!$dbw->execute_query("delete from {$prfx}_ip_blocked where (ip = '$ip' and tp = '$type') or block_expires < '$now'")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            $txt = $type == "UM" ? text("MsgFingerPrintUnblocked") : text("MsgIPUnblocked");
            $messages[$txt] = $txt;
        }
        //---------------------------------------------------------------
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        foreach ($messages as $message) {
            MessageHandler::setInfo($message);
        }
        
        return true;
    } // moderate_ip
    
    //-----------------------------------------------------------------
    function get_ip_users($ip, &$ip_users)
    {
        if (!$this->is_moderator()) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (empty($ip)) {
            MessageHandler::setError(text("ErrIPAddressEmpty"));
            MessageHandler::setFocusElement("ip");
            return false;
        }
        
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $ip = $rodbw->escape($ip);
        
        $moderator_appendix = "";
        if (!$this->is_admin()) {
            $uid = $rodbw->escape($this->get_user_id());
            if (empty($uid)) {
                $uid = "NULL";
            }
            
            $moderator_appendix = " and {$prfx}_topic.forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $uid)";
        }
        
        // last 60 days
        $start = time() - 60 * 24 * 3600;
        $start = $rodbw->format_datetime(mktime(0, 0, 0, date("n", $start), date("j", $start), date("Y", $start)));
        
        if (!$rodbw->execute_query("select {$prfx}_post.user_id, case when {$prfx}_post.user_id is NULL then {$prfx}_post.author else {$prfx}_user.user_name end author,
                             last_visit_date, logout,
                             min({$prfx}_post.creation_date) first_message,
                             max({$prfx}_post.creation_date) last_message,
                             count(*) cnt
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             where {$prfx}_post.creation_date >= '$start' and {$prfx}_post.ip = '$ip'
                             and {$prfx}_topic.is_private < 1 and {$prfx}_topic.publish_delay <> 1
                             $moderator_appendix
                             group by {$prfx}_post.user_id, case when {$prfx}_post.user_id is NULL then {$prfx}_post.author else {$prfx}_user.user_name end, last_visit_date, logout
                             order by max({$prfx}_post.creation_date) desc")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip_users[] = array(
                "id" => $rodbw->field_by_name("user_id"),
                "user_name" => $rodbw->field_by_name("author"),
                "first_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("first_message")), text("DateTimeFormat")),
                "last_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("last_message")), text("DateTimeFormat")),
                "cnt" => $rodbw->field_by_name("cnt"),
                "online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0)
            );
        }
        
        $rodbw->free_result();
        
        measure_action_time("get ip users");
        
        return true;
    } // get_ip_users
    
    //-----------------------------------------------------------------
    function get_um_users($um, &$ip_users)
    {
        if (!$this->is_moderator()) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (empty($um)) {
            MessageHandler::setError(text("ErrFingerPrintEmpty"));
            MessageHandler::setFocusElement("ip");
            return false;
        }
        
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $um = $rodbw->escape($um);
        
        $moderator_appendix = "";
        if (!$this->is_admin()) {
            $uid = $rodbw->escape($this->get_user_id());
            if (empty($uid)) {
                $uid = "NULL";
            }
            
            $moderator_appendix = " and {$prfx}_topic.forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $uid)";
        }
        
        // last 60 days
        $start = time() - 60 * 24 * 3600;
        $start = $rodbw->format_datetime(mktime(0, 0, 0, date("n", $start), date("j", $start), date("Y", $start)));
        
        if (!$rodbw->execute_query("select {$prfx}_post.user_id, case when {$prfx}_post.user_id is NULL then {$prfx}_post.author else {$prfx}_user.user_name end author,
                             last_visit_date, logout,
                             min({$prfx}_post.creation_date) first_message,
                             max({$prfx}_post.creation_date) last_message,
                             count(*) cnt
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             where {$prfx}_post.creation_date >= '$start' and {$prfx}_post.user_marker = '$um'
                             and {$prfx}_topic.is_private < 1 and {$prfx}_topic.publish_delay <> 1
                             $moderator_appendix
                             group by {$prfx}_post.user_id, case when {$prfx}_post.user_id is NULL then {$prfx}_post.author else {$prfx}_user.user_name end, last_visit_date, logout
                             order by max({$prfx}_post.creation_date) desc")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip_users[] = array(
                "id" => $rodbw->field_by_name("user_id"),
                "user_name" => $rodbw->field_by_name("author"),
                "first_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("first_message")), text("DateTimeFormat")),
                "last_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("last_message")), text("DateTimeFormat")),
                "cnt" => $rodbw->field_by_name("cnt"),
                "online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0)
            );
        }
        
        $rodbw->free_result();
        
        measure_action_time("get um users");
        
        return true;
    } // get_um_users
    
    //-----------------------------------------------------------------
    function get_user_ips($user, &$user_ips)
    {
        global $settings;
        
        if (!$this->is_moderator() && $user != $this->get_user_name()) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (empty($user)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        start_action_time_measure();
        
        $ip_rules = array();
        $ips = "";
        $matched_rule = "";
        $this->get_white_list_ips($ips, $ip_rules);
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $user = $rodbw->escape($user);
        
        $moderator_appendix = "";
        
        $uid = $rodbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = "NULL";
        }

        if ($this->is_admin()) {
          // no restrictions
        } elseif ($this->is_moderator()) {
            $moderator_appendix = " and {$prfx}_topic.forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $uid)";
        } else {
            $moderator_appendix = " and {$prfx}_post.user_id = $uid";
        }
        
        // last 60 days
        $start = time() - 60 * 24 * 3600;
        $start = $rodbw->format_datetime(mktime(0, 0, 0, date("n", $start), date("j", $start), date("Y", $start)));
        
        if (!$rodbw->execute_query("select ip,
                             min({$prfx}_post.creation_date) first_message,
                             max({$prfx}_post.creation_date) last_message,
                             count(*) cnt
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where {$prfx}_post.creation_date >= '$start' and {$prfx}_post.author = '$user'
                             and {$prfx}_topic.is_private < 1 and {$prfx}_topic.publish_delay <> 1
                             $moderator_appendix
                             group by ip
                             order by max({$prfx}_post.creation_date) desc")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            
            $user_ips[$ip] = array(
                "ip" => $ip,
                "guest_ip_whitelisted" => $this->is_ip_whitelisted($ip, $ip_rules, $matched_rule) ? 1 : 0,
                "first_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("first_message")), text("DateTimeFormat")),
                "last_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("last_message")), text("DateTimeFormat")),
                "cnt" => $rodbw->field_by_name("cnt")
            );
        }
        
        $rodbw->free_result();
        
        if (count($user_ips) == 0) {
            measure_action_time("get user ips");
            return true;
        }
        
        $in_list = "'" . implode("','", array_keys($user_ips)) . "'";
        $now = $rodbw->format_datetime(time());
        
        $query = "select ip
              from {$prfx}_ip_blocked
              where ip in ($in_list)
              and (block_expires is NULL or block_expires > '$now')";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            
            $user_ips[$ip]["ip_blocked"] = 1;
        }
        
        $rodbw->free_result();
        
        if (!$rodbw->execute_query("select ip, block_level from {$prfx}_tor_ips where ip in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            $user_ips[$ip]["tor_ip"] = 1;
            
            $user_ips[$ip]["tor_ip_block_level"] = "tor_allow";
            if (!empty($settings["block_tor_ips"])) {
                $user_ips[$ip]["tor_ip_block_level"] = "tor_block_write";
            }
            
            switch ($rodbw->field_by_name("block_level")) {
                case 1:
                    $user_ips[$ip]["tor_ip_block_level"] = "tor_block_write";
                    break;
                
                case 2:
                    $user_ips[$ip]["tor_ip_block_level"] = "tor_block_read";
                    break;
                
                case 3:
                    $user_ips[$ip]["tor_ip_block_level"] = "tor_allow";
                    break;
            }
        }
        
        $rodbw->free_result();
        
        measure_action_time("get user ips");
        
        return true;
    } // get_ip_users
    
    //-----------------------------------------------------------------
    function get_other_users($user, &$other_users)
    {
        if (!$this->is_moderator()) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (empty($user)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $user = $rodbw->escape($user);
        
        $moderator_appendix = "";
        if (!$this->is_admin()) {
            $uid = $rodbw->escape($this->get_user_id());
            if (empty($uid)) {
                $uid = "NULL";
            }
            
            $moderator_appendix = " and {$prfx}_topic.forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $uid)";
        }
        
        // last 60 days
        $start = time() - 60 * 24 * 3600;
        $start = $rodbw->format_datetime(mktime(0, 0, 0, date("n", $start), date("j", $start), date("Y", $start)));
        
        if (!$rodbw->execute_query("select {$prfx}_post.user_id, case when {$prfx}_post.user_id is NULL then {$prfx}_post.author else {$prfx}_user.user_name end author,
                             last_visit_date, logout,
                             min({$prfx}_post.creation_date) first_message,
                             max({$prfx}_post.creation_date) last_message,
                             count(*) cnt
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             where {$prfx}_post.creation_date >= '$start' and {$prfx}_post.author <> '$user' and {$prfx}_post.ip in (select ip from {$prfx}_post where {$prfx}_post.creation_date > '$start' and author = '$user')
                             and {$prfx}_topic.is_private < 1 and {$prfx}_topic.publish_delay <> 1
                             $moderator_appendix
                             group by {$prfx}_post.user_id, case when {$prfx}_post.user_id is NULL then {$prfx}_post.author else {$prfx}_user.user_name end, last_visit_date, logout
                             order by max({$prfx}_post.creation_date) desc")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $other_users[] = array(
                "id" => $rodbw->field_by_name("user_id"),
                "user_name" => $rodbw->field_by_name("author"),
                "first_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("first_message")), text("DateTimeFormat")),
                "last_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("last_message")), text("DateTimeFormat")),
                "cnt" => $rodbw->field_by_name("cnt"),
                "online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0)
            );
        }
        
        $rodbw->free_result();
        
        measure_action_time("get other users");
        
        return true;
    } // get_other_users
    
    //-----------------------------------------------------------------
    function get_message_for_edit($pid, &$response)
    {
        if (empty($pid) || !is_numeric($pid)) {
            return false;
        }
        
        if (!$this->may_edit_message($pid) && val_or_empty($_SESSION["last_edit_post"]) != $pid) {
            MessageHandler::setError(text("ErrEditTimeExpired"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pid = $dbw->escape($pid);
        
        if (!$dbw->execute_query("select topic_id, {$prfx}_post.author,
                             text_content, is_comment, is_adult,
                             {$prfx}_topic.name, profiled_topic
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            return false;
        }
        
        $topic_id = $dbw->field_by_name("topic_id");
        $author = $this->get_display_name($dbw->field_by_name("author"));
        $topic_name = $dbw->field_by_name("name");
        $is_thematic = !$dbw->field_by_name("is_comment");
        $is_adult = $dbw->field_by_name("is_adult") == 1;
        $profiled_topic = $dbw->field_by_name("profiled_topic") == 1;
        $message = Emoji::Decode($dbw->field_by_name("text_content"));
        
        $dbw->free_result();
        
        if (!$this->has_access_to_topic($topic_id, false)) {
            return false;
        }
        
        $response["topic_id"] = $topic_id;
        $response["author"] = $author;
        $response["topic_name"] = $topic_name;
        $response["message"] = $message;
        $response["is_thematic"] = $is_thematic;
        $response["is_adult"] = $is_adult;
        $response["profiled_topic"] = $profiled_topic;
        
        $_SESSION["last_edit_hash"] = $message;
        $_SESSION["last_edit_post"] = $pid;
        
        return true;
    } // get_message_for_edit
    
    //-----------------------------------------------------------------
    function highlight_found_keys(&$text, $keys, $with_morphology)
    {
        $this->format_manager->highlight_found_keys($text, $keys, $with_morphology);
    } // highlight_found_key
    
    //-----------------------------------------------------------------
    function preview_message(&$response)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        if (reqvar_empty("message") && empty($_FILES["attachment"]["size"])) {
            MessageHandler::setError(text("ErrMessageEmpty"));
            MessageHandler::setErrorElement("message");
            return false;
        }
        
        if (!$this->attachment_manager->handle_attachments()) {
            return false;
        }
        
        $message = reqvar("message", false);
        
        $message = preg_replace("/\\[attachment1\\]/", "[attachment=tmp]", $message);
        
        for ($i = 1; $i <= $this->get_attachments_per_post(); $i++) {
            $idx = ($i == 1) ? "" : $i;
            
            if (empty($_SESSION["last_attachment$idx"])) {
                continue;
            }
            
            // This is necessary if an existing attachment is replaced in the new one. This ensures,
            // that the new attachment is shown in preview.
            if (!reqvar_empty("edited_post")) {
                $message = preg_replace("/\\[attachment$idx=" . reqvar("edited_post") . "\\]/", "[attachment$idx=tmp]", $message);
            }
            
            if (stripos($message, "[attachment$idx]") === false && stripos($message, "[attachment$idx=tmp]") === false) {
                $message .= "\n\n[attachment$idx=tmp]";
            }
            
            $message = str_ireplace("[attachment$idx]", "[attachment$idx=tmp]", $message);
        }
        
        $message = trim($message, "\r\n");
        
        $html_message = "";
        $has_picture = "0";
        $has_video = "0";
        $has_audio = "0";
        $has_link = "0";
        $has_code = "0";
        $has_attachment_ref = "0";
        if (!$this->format_manager->format_message($dbw, $message, $html_message, $has_picture, $has_video, $has_audio, $has_link, $has_code, $has_attachment_ref, "tmp")) {
            return false;
        }
        
        $html_message = trim($html_message);
        
        $html_message_check = trim(strip_tags($html_message, "<img><audio><video><iframe>"));
        if (empty($html_message_check)) {
            MessageHandler::setError(text("ErrMessageEmpty"));
            MessageHandler::setErrorElement("message");
            return false;
        }
        
        $response["html"] = postprocess_message($html_message);
        
        return true;
    } // preview_message
    
    //-----------------------------------------------------------------
    function may_edit_message($pid)
    {
        global $READ_MARKER;
        
        if (empty($pid) || !is_numeric($pid)) {
            return false;
        }
        
        if ($this->is_admin()) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pid = $dbw->escape($pid);
        
        if (!$dbw->execute_query("select topic_id, forum_id, {$prfx}_post.user_id, {$prfx}_topic.user_id topic_user_id,
                             {$prfx}_post.read_marker, allow_edit, {$prfx}_post.creation_date,
                             {$prfx}_topic.publish_delay, {$prfx}_post.pinned,
                             is_private, user_posting_as_guest
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $tid = 0;
        $fid = 0;
        $post_read_marker = "";
        $post_user_id = "";
        $topic_user_id = "";
        $forum_allow_edit = false;
        $user_posting_as_guest = false;
        $post_pinned = false;
        $topic_allow_moderate = false;
        $publish_delay = false;
        $post_time = 0;
        $is_private = false;
        
        if ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("topic_id");
            $fid = $dbw->field_by_name("forum_id");
            $post_read_marker = $dbw->field_by_name("read_marker");
            $post_user_id = $dbw->field_by_name("user_id");
            $topic_user_id = $dbw->field_by_name("topic_user_id");
            $post_pinned = $dbw->field_by_name("pinned");
            
            $publish_delay = $dbw->field_by_name("publish_delay");
            $is_private = $dbw->field_by_name("is_private");
            
            $user_posting_as_guest = $dbw->field_by_name("user_posting_as_guest");

            $post_time = xstrtotime($dbw->field_by_name("creation_date"));
            $forum_allow_edit = $dbw->field_by_name("allow_edit") && (time() - $post_time <= get_allow_edit_period());
            $topic_allow_moderate = (time() - $post_time <= get_allow_moderate_period()) || $this->is_privileged_topic_moderator();
        } else {
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if ($this->is_admin() || $this->is_forum_moderator($fid)) {
            return true;
        }
        
        if ($is_private == 2 && $this->is_topic_moderator($tid)) {
            return true;
        }
        
        if (!$is_private && $topic_allow_moderate && $this->is_topic_moderator($tid)) {
            return true;
        }
        
        if (!$is_private && $post_pinned && $this->is_topic_moderator($tid)) {
            return true;
        }

        $current_uid = $dbw->escape($this->get_user_id());
        
        if ($publish_delay && !$is_private && $topic_user_id == $current_uid) {
            return true;
        }
        
        $topic_data = array();
        if (!$this->get_topic_data($tid, $topic_data)) {
          return false;
        }
        
        $first_topic_post = (val_or_empty($topic_data["first_topic_pinned_message"]) == $pid || (empty($topic_data["first_topic_pinned_message"]) && val_or_empty($topic_data["absolute_first_topic_message"]) == $pid));
        if (!$is_private && $first_topic_post && $this->is_topic_moderator($tid)) {
            return true;
        }

        // forum does not allow post editing
        if (!$forum_allow_edit) {
            return false;
        }
        
        // edit period expired (we allow to open for edit after N minutes, and allow to save edited post after N+10 minutes)
        if (time() - $post_time > (get_allow_edit_period() + 10 * 60)) {
            return false;
        }
        
        if (!empty($post_user_id) && $post_user_id == $this->get_user_id()) {
            return true;
        }
        
        if ($post_read_marker == $READ_MARKER && empty($post_user_id) && 
            ($this->get_user_id() == "" || ($user_posting_as_guest && !empty($_SESSION["guest_posting_mode"])))
           ) {
            return true;
        }

        return false;
    } // may_edit_message
    
    //-----------------------------------------------------------------
    function update_message(&$response)
    {
        global $settings;
        global $READ_MARKER;
        global $BB_PARSER_VERSION;
        
        if (empty($BB_PARSER_VERSION)) {
            $BB_PARSER_VERSION = 1;
        }
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        shrink_spaces($_REQUEST["author"]);
        
        $edited_post = reqvar("edited_post");
        
        if (empty($edited_post)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        if (!$this->may_edit_message($edited_post) && val_or_empty($_SESSION["last_edit_post"]) != $edited_post) {
            MessageHandler::setError(text("ErrEditTimeExpired"));
            return false;
        }
        
        $subject = trim($this->strip_subject(reqvar("subject")));
        
        if (empty($subject) && (string)$subject !== "0") {
            MessageHandler::setError(text("ErrSubjectEmpty"));
            MessageHandler::setErrorElement("subject");
            return false;
        }
        
        if (Emoji::HasEmoji($subject)) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("subject");
            return false;
        }
        
        if (utf8_strlen($subject) > $settings["max_topic_name_symbols"]) {
            MessageHandler::setError(sprintf(text("ErrSubjectTooLong"), $settings["max_topic_name_symbols"]));
            MessageHandler::setErrorElement("subject");
            return false;
        }
        
        if (!empty($settings["max_message_length"]) && strlen(reqvar("message")) > 1024 * $settings["max_message_length"]) {
            MessageHandler::setError(sprintf(text("ErrMessageTooLong"), $settings["max_message_length"]));
            MessageHandler::setErrorElement("message");
            return false;
        }
        
        if (!$this->attachment_manager->handle_attachments()) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $edited_post = $dbw->escape($edited_post);
        
        if (!$dbw->execute_query("select {$prfx}_post.id, topic_id, forum_id,
                             text_content, html_content, has_attachment, {$prfx}_topic.profiled_topic,
                             {$prfx}_post.creation_date, {$prfx}_post.last_updated, {$prfx}_post.last_updated_by,
                             text_content, {$prfx}_post.read_marker, {$prfx}_post.user_id, {$prfx}_topic.name topic_name, is_private,
                             {$prfx}_forum.name forum_name, post_user.user_name, {$prfx}_post.author, post_user.time_zone,
                             post_user.email, post_user.last_host, post_user.send_notifications, post_user.interface_language, is_system,
                             topic_user.user_name topic_user_name, {$prfx}_topic.user_id topic_user_id, publish_delay,
                             topic_user.email topic_user_email, topic_user.last_host topic_user_last_host, topic_user.send_notifications topic_user_send_notifications, topic_user.interface_language topic_user_interface_language,
                             {$prfx}_topic.creation_date topic_creation_date, is_poll, {$prfx}_post.pinned,
                             {$prfx}_topic.author topic_author,
                             {$prfx}_topic.read_marker topic_read_marker,
                             is_comment, is_adult, user_posting_as_guest
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user post_user on ({$prfx}_post.user_id = post_user.id)
                             left join {$prfx}_user topic_user on ({$prfx}_topic.user_id = topic_user.id)
                             where {$prfx}_post.id = $edited_post")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $tid = "";
        $fid = "";
        $post_read_marker = "";
        $post_user_id = "";
        $old_post_author = "";
        $old_topic_name = "";
        $old_text_content = "";
        $old_html_content = "";
        $old_post_is_comment = 0;
        $old_post_is_adult = 0;
        
        $user_posting_as_guest = false;
        
        $last_updated = "";
        $creation_date = "";
        $last_updated_by = "";
        
        $is_system = 0;
        $has_attachment = 0;
        $is_poll = 0;
        $profiled_topic = 0;
        
        $post_data = array();
        $topic_publish_delay = 0;
        
        if ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("topic_id");
            $fid = $dbw->field_by_name("forum_id");
            $post_read_marker = $dbw->field_by_name("read_marker");
            $post_user_id = $dbw->field_by_name("user_id");
            $old_topic_name = $dbw->field_by_name("topic_name");
            $old_post_author = $dbw->field_by_name("author");
            $old_text_content = $dbw->field_by_name("text_content");
            $old_html_content = $dbw->field_by_name("html_content");
            $old_post_is_comment = $dbw->field_by_name("is_comment");
            $old_post_is_adult = $dbw->field_by_name("is_adult");
            
            $user_posting_as_guest = $dbw->field_by_name("user_posting_as_guest");

            $is_system = $dbw->field_by_name("is_system");
            $has_attachment = $dbw->field_by_name("has_attachment");
            
            $profiled_topic = $dbw->field_by_name("profiled_topic");
            $is_poll = $dbw->field_by_name("is_poll") && $dbw->field_by_name("pinned");
            $topic_publish_delay = $dbw->field_by_name("publish_delay");
            
            if ($dbw->field_by_name("last_updated")) {
                $last_updated = xstrtotime($dbw->field_by_name("last_updated"));
                $last_updated_by = $dbw->field_by_name("last_updated_by");
            } else {
                $last_updated = xstrtotime($dbw->field_by_name("creation_date"));
                $last_updated_by = $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author");
            }
            
            $post_data = array(
                "post_id" => $dbw->field_by_name("id"),
                
                "first" => (xstrtotime($dbw->field_by_name("creation_date")) == xstrtotime($dbw->field_by_name("topic_creation_date"))),
                
                "post_date" => xstrtotime($dbw->field_by_name("creation_date")),
                "topic_creation_date" => xstrtotime($dbw->field_by_name("topic_creation_date")),
                
                "short_message" => $dbw->field_by_name("text_content"),
                
                "topic_id" => $dbw->field_by_name("topic_id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "topic_private" => $dbw->field_by_name("is_private"),
                
                "forum_id" => $dbw->field_by_name("is_private") ? "private" : $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name"),
                
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "author_email" => $dbw->field_by_name("email"),
                "author_time_zone" => $dbw->field_by_name("time_zone") ? $dbw->field_by_name("time_zone") : TIME_ZONE,
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                
                "topic_author_id" => $dbw->field_by_name("topic_user_id"),
                "topic_author_read_marker" => $dbw->field_by_name("topic_read_marker"),
                "topic_author_name" => $dbw->field_by_name("topic_user_name") ? $dbw->field_by_name("topic_user_name") : $dbw->field_by_name("topic_author"),
                "topic_author_email" => $dbw->field_by_name("topic_user_email"),
                "topic_send_notifications" => $dbw->field_by_name("topic_user_send_notifications"),
                "topic_last_host" => $dbw->field_by_name("topic_user_last_host"),
                "topic_interface_language" => $dbw->field_by_name("topic_user_interface_language"),
                
                "action" => "change_post"
            );
        } else {
            MessageHandler::setError(text("ErrNoPostSelected"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        $forced_guest_posting = false;
        if ($this->is_logged_in() && !empty($user_posting_as_guest) && 
            !empty($_SESSION["guest_posting_mode"]) && reqvar("author") != $this->get_user_name()
        ) {
           $forced_guest_posting = true;
        }        
        
        if ($forced_guest_posting) {
            // let author as is
        } elseif ($this->is_master_admin()) {
            $_REQUEST["author"] = "admin";
        } elseif ($this->is_logged_in()) {
            $_REQUEST["author"] = $this->get_user_name();
        } 

        if (!empty($is_system)) {
            MessageHandler::setError(text("ErrSystemMessageСhange"));
            return false;
        }
        
        if (!$is_poll && reqvar_empty("message", true) && empty($_FILES["attachment"]["size"])) {
            MessageHandler::setError(text("ErrMessageEmpty"));
            MessageHandler::setErrorElement("message");
            return false;
        }
        
        if ($this->check_blocked($fid)) {
            return false;
        }
        
        if ($this->is_blocked_in_topic($tid)) {
            return false;
        }
        
        // check the author
        
        if (!$this->is_logged_in() || $forced_guest_posting) {
            $check = $this->check_name_usage(reqvar("author"), "", false);
            if ($check == 1) {
                MessageHandler::setError(text("ErrUserNameInUse"));
                MessageHandler::setErrorElement("author");
                return false;
            } elseif ($check == 2) {
                MessageHandler::setError(text("ErrUserNameReserved"));
                MessageHandler::setErrorElement("author");
                return false;
            } elseif ($check == 3) {
                MessageHandler::setError(text("ErrUserNameProtected"));
                MessageHandler::setErrorElement("author");
                return false;
            }
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $message = reqvar("message", false);
        
        $now = $dbw->format_datetime(time());
        
        $body_changed = false;
        
        $post_user_id_db = $post_user_id;
        if (empty($post_user_id_db)) {
            $post_user_id_db = "NULL";
        }
        
        // finalize attachments
        $message = preg_replace("/\\[attachment1\\]/", "[attachment1=$edited_post]", $message);
        
        $attachments_per_post = $this->get_attachments_per_post();
        for ($i = 1; $i <= $attachments_per_post; $i++) {
            $idx = ($i == 1) ? "" : $i;
            
            if (!reqvar_empty("del_attachment$idx")) {
                $bin_str = str_repeat("1", $attachments_per_post);
                $bin_str[$attachments_per_post - $i] = "0";
                $has_attachment &= bindec($bin_str);
                
                $body_changed = true;
                
                $query = "delete from {$prfx}_attachment where post_id = $edited_post and nr = $i";
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
            
            if (empty($_SESSION["last_attachment$idx"])) {
                continue;
            }
            
            $attachment_type = "";
            $attachment_name = "";
            $attachment_origin_name = "";
            if ($this->attachment_manager->finalize_attachment($edited_post, $attachment_name, $attachment_origin_name, $attachment_type, $idx)) {
                if (stripos($message, "[attachment$idx]") === false && stripos($message, "[attachment$idx=$edited_post]") === false) {
                    $message .= "\n\n[attachment$idx]";
                }
                
                $message = str_ireplace("[attachment$idx]", "[attachment$idx=$edited_post]", $message);
                
                $attachment_name = $dbw->escape($attachment_name);
                $attachment_origin_name = $dbw->escape(Emoji::Encode($attachment_origin_name));
                $attachment_type = $dbw->escape($attachment_type);
                
                $body_changed = true;
                
                $query = "delete from {$prfx}_attachment where post_id = $edited_post and nr = $i";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $query = "insert into {$prfx}_attachment (post_id, nr, name, origin_name, type, user_id, last_post_id)
                  values ($edited_post, $i, '$attachment_name', '$attachment_origin_name', '$attachment_type', $post_user_id_db, $edited_post)";
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $bin_str = str_repeat("0", $attachments_per_post);
                $bin_str[$this->get_attachments_per_post() - $i] = "1";
                $has_attachment |= bindec($bin_str);
            } else {
                $dbw->rollback_transaction();
                return false;
            }
        } // attachments
        
        // update last post for the attachments
        if (!empty($post_user_id) && preg_match_all("/\[attachment(\d*)=(\d+)\]/", $message, $matches, PREG_SET_ORDER)) {
            foreach ($matches as $match) {
                $idx = $dbw->escape($match[1]);
                if (empty($idx)) {
                    $idx = 1;
                }
                
                $pa_id = $dbw->escape($match[2]);
                
                if (!$dbw->execute_query("update {$prfx}_attachment set last_post_id = $edited_post where post_id = $pa_id and nr = $idx and user_id = $post_user_id_db")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        $message = trim($message, "\n\r");
        
        $html_message = "";
        $has_picture = "0";
        $has_video = "0";
        $has_audio = "0";
        $has_link = "0";
        $has_code = "0";
        $has_attachment_ref = 0;
        if (!$this->format_manager->format_message($dbw, $message, $html_message, $has_picture, $has_video, $has_audio, $has_link, $has_code, $has_attachment_ref, $edited_post)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        $is_comment = 0;
        if ($profiled_topic && reqvar_empty("is_thematic")) {
            $is_comment = 1;
        }
        
        $is_adult = reqvar_empty("is_adult") ? 0 : 1;
        
        $query = "update {$prfx}_post set has_attachment = $has_attachment, has_attachment_ref = $has_attachment_ref, is_comment = $is_comment, is_adult = $is_adult where id = $edited_post";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $self_edited = "0";
        if ((!empty($post_user_id) && $post_user_id == $this->get_user_id()) ||
            ($post_read_marker == $READ_MARKER && empty($post_user_id) && ($this->get_user_id() == "" || ($user_posting_as_guest && !empty($_SESSION["guest_posting_mode"]))))
        ) {
            $self_edited = "1";
        }
        
        // Message body was changed
        
        if (val_or_empty($_SESSION["last_edit_hash"]) != $message) {
            $body_changed = true;
            
            $html_message = trim($html_message);
            
            $html_message_check = trim(strip_tags($html_message, "<img><audio><video><iframe>"));
            if (!$is_poll && empty($html_message_check) && (string)$html_message_check !== "0") {
                MessageHandler::setError(text("ErrMessageEmpty"));
                MessageHandler::setErrorElement("message");
                $dbw->rollback_transaction();
                return false;
            }
            
            $message = Emoji::Encode($message);
            $html_message = Emoji::Encode($html_message);
            
            $plain_text = preg_replace("/[ \t]+/", " ", trim(strip_tags($html_message)));
            $plain_text = preg_replace("/[\n\r]+/", "\r\n", $plain_text);
            
            $short_message = $message;
            $post_data["short_message"] = $short_message;
            
            $message = quotes_or_null($dbw->escape($message));
            $html_message = quotes_or_null($dbw->escape($html_message));
            
            $last_updated = $dbw->format_datetime($last_updated);
            $last_updated_by = quotes_or_null($dbw->escape($last_updated_by));
            
            $query = "insert into {$prfx}_post_history
              (post_id, dt, author, self_edited, text_content, html_content)
              select
              id, '$last_updated', $last_updated_by, self_edited, text_content, html_content
              from {$prfx}_post
              where id = $edited_post
             ";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $updated_by = $dbw->escape($this->get_last_posted_user_name());
            if (empty($updated_by)) {
                $updated_by = $old_post_author;
            }
            
            $plain_text = $dbw->escape($plain_text);

            $query = "update {$prfx}_post set
              text_content = $message,
              html_content = $html_message,
              searchable_content = '$plain_text',
              last_updated = '$now',
              last_updated_by = '$updated_by',
              has_picture = $has_picture,
              has_video = $has_video,
              has_audio = $has_audio,
              has_link = $has_link,
              has_code = $has_code,
              self_edited = $self_edited,
              bb_parser_version = $BB_PARSER_VERSION
              where id = $edited_post";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        } // if body changed
        
        // post was saved, delete the backup copy
        
        $rm = $dbw->escape($READ_MARKER);
        
        $query = "delete from {$prfx}_auto_saved where topic_id = $tid and read_marker = '$rm'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $anonym_appendix = "";
        $anonym_appendix2 = "";
        if ($settings["moderator_log"] != "all") {
            $anonym_appendix = "_anonym";
            $anonym_appendix2 = "Anonym";
        }
        
        // status change
        
        $is_comment_mod_action = "";
        if ($old_post_is_comment != $is_comment) {
            if ($old_post_is_comment == 0) {
                $is_comment_mod_action = "convert_to_thematic";
            } else {
                $is_comment_mod_action = "convert_to_comment";
            }
        }
        
        $is_adult_mod_action = "";
        $is_adult_event_code = "";
        $is_adult_email_template = "";
        if ($old_post_is_adult != $is_adult) {
            if ($old_post_is_adult == 0) {
                $is_adult_mod_action = "convert_to_adult";
            } else {
                $is_adult_mod_action = "convert_to_nonadult";
            }
        }
        
        // topic name changed
        
        $subject_changed = (!empty($subject) && $old_topic_name != $subject);
        
        $subject_editable = false;
        if ($this->is_admin() || $this->is_forum_moderator($post_data["forum_id"]) || $this->is_topic_moderator($post_data["topic_id"]) ||
            (!empty($post_data["first"]) && !empty($post_data["topic_author_id"]) && $post_data["topic_author_id"] == $this->get_user_id()) ||
            (!empty($post_data["first"]) && $post_data["topic_author_read_marker"] == $READ_MARKER)
        ) {
            $subject_editable = true;
        }
        
        if (!$subject_editable) {
            $subject_changed = false;
        }
        
        if ($subject_changed) {
            $post_data["new_topic_name"] = $subject;
            
            $subject_db = $dbw->escape($subject);
            $query = "update {$prfx}_topic set
                name = '$subject_db'
                where id = $tid";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        } // topic update
        
        // author update
        
        if ($self_edited && (!$this->is_logged_in() || $forced_guest_posting) && $old_post_author != reqvar("author")) {
            if (reqvar_empty("author", true)) {
                MessageHandler::setError(text("ErrAuthorNameEmpty"));
                MessageHandler::setErrorElement("author");
                return false;
            }
            
            if (utf8_strlen(reqvar("author")) > $settings["max_user_name_symbols"]) {
                MessageHandler::setError(sprintf(text("ErrUserNameTooLong"), $settings["max_user_name_symbols"]));
                MessageHandler::setErrorElement("author");
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$this->check_author(reqvar("author"))) {
                MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
                MessageHandler::setErrorElement("author");
                return false;
            }
            
            $author = $dbw->escape(reqvar("author"));
            $query = "update {$prfx}_post set
                author = '$author',
                last_updated_by = '$author'
                where id = $edited_post";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $post_data["author_name"] = reqvar("author");
        }
        
        if (!$self_edited && empty($post_data["topic_private"]) && empty($topic_publish_delay)) {
            if (!$this->log_moderator_event($dbw, $prfx, $post_data)) {
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!empty($is_comment_mod_action)) {
                $post_data["action"] = $is_comment_mod_action;
                
                if (!$this->log_moderator_event($dbw, $prfx, $post_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
            }
            
            if (!empty($is_adult_mod_action)) {
                $post_data["action"] = $is_adult_mod_action;
                
                if (!$this->log_moderator_event($dbw, $prfx, $post_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        if ($subject_changed && empty($topic_publish_delay)) {
            $mod_event["action"] = "change_topic";
            $mod_event["author_id"] = $post_data["topic_author_id"];
            $mod_event["author_name"] = $post_data["topic_author_name"];
            $mod_event["comment"] = "MSG(PreviousName): " . $post_data["topic_name"]; // text("PreviousName")
            $mod_event["topic_name"] = $subject;
            $mod_event["topic_id"] = $tid;
            $mod_event["forum_name"] = $post_data["forum_name"];
            $mod_event["forum_id"] = $fid;
            
            if (empty($post_data["topic_private"]) && !$this->log_moderator_event($dbw, $prfx, $mod_event)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $citated_posts = array();
        $new_appealed_users = array();
        
        if (!reqvar_empty("citated_post")) {
            $citated_posts = explode(",", trim(reqvar("citated_post"), ", "));
        }
        
        // take possible new pasted citations of the top level only into concideration
        
        $tmp_html = $html_message;
        remove_nested_quotes($tmp_html, $tmp_html, 1);
        if (preg_match_all("/data-cmid=\"(\d+)\"/", $tmp_html, $matches)) {
            $citated_posts = array_merge($citated_posts, $matches[1]);
        }
        
        if (preg_match_all("/(@|%)([^%@\r\n\t]+?)\\1/iu", $tmp_html, $matches)) {
            $new_appealed_users = $matches[2];
        }
        
        // exclude the already existing citations from redundant notification
        
        remove_nested_quotes($old_html_content, $tmp_html, 1);
        if (preg_match_all("/data-cmid=\"(\d+)\"/", $tmp_html, $matches)) {
            $citated_posts = array_diff($citated_posts, $matches[1]);
        }
        
        if (preg_match_all("/(@|%)([^%@\r\n\t]+?)\\1/iu", $tmp_html, $matches)) {
            $new_appealed_users = array_diff($new_appealed_users, $matches[2]);
        }
        
        $all_appealed_users = array();
        $appealed_users = array();
        if (!empty($new_appealed_users)) {
            $in_list = "";
            
            foreach ($new_appealed_users as $user) {
                $in_list .= "'" . $dbw->escape($user) . "', ";
            }
            
            $in_list = trim($in_list, ", ");
            
            if (!$dbw->execute_query("select user_name from {$prfx}_user where user_name in ($in_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $all_appealed_users[$dbw->field_by_name("user_name")] = $dbw->field_by_name("user_name");
            }
            
            $dbw->free_result();
            
            if (!$dbw->execute_query("select {$prfx}_user.id as user_id,
                                      email, user_name, last_host, send_notifications, interface_language,
                                      {$prfx}_ignored_topics.topic_id topic_ignored, hide_comments, ignore_guests_whitelist
                                      from {$prfx}_post
                                      inner join {$prfx}_user on ({$prfx}_user.user_name in ($in_list) and {$prfx}_user.turnoff_personal_appeals = 0)
                                      inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id = $edited_post and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      )")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                // This user ignores the topic, no notification
                if ($dbw->field_by_name("topic_ignored")) {
                    continue;
                }
                
                // It is a comment post, and the user does not want to see comments
                if ($dbw->field_by_name("hide_comments") && !empty($is_comment)) {
                    continue;
                }
                
                $appealed_users[$dbw->field_by_name("user_id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
                );
            }
            
            $dbw->free_result();
            
            if (!$this->get_my_ignore_status_for_users($dbw, $appealed_users)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $ip_rules = array();
        $ips = "";
        $matched_rule = "";
        $this->get_white_list_ips($ips, $ip_rules);
        if (count($appealed_users) > 0 && !$this->is_logged_in() &&
            !$this->is_ip_whitelisted(val_or_empty($_SERVER["REMOTE_ADDR"]), $ip_rules, $matched_rule) &&
            $diff = $this->check_guest_read_marker($dbw, $READ_MARKER)) {
            MessageHandler::setWarning(sprintf(text("ErrMessageGuestAppealsRestricted"), format_duration($diff)));
            $dbw->rollback_transaction();
            return false;
        }
        
        if (count($appealed_users) > 10) {
            MessageHandler::setError(sprintf(text("ErrTooManyAppeals"), 10));
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$this->is_logged_in() || $forced_guest_posting) {
            set_cookie("q_last_guest_name", val_or_empty($_SESSION["last_posted_user"]), time() + 90 * 24 * 3600);
        }

        $response["self_edited"] = $self_edited;
        
        $_SESSION["user_name"] = reqvar("author");
        $_SESSION["last_posted_user"] = reqvar("author");
        
        $response["target_url"] = "topic.php?fid=$post_data[forum_id]";
        if (!reqvar_empty("fpage")) {
            $response["target_url"] .= "&fpage=" . reqvar("fpage");
        }
        $response["target_url"] .= "&tid=$tid&msg=$edited_post";
        
        if (!empty($topic_publish_delay)) {
            return true;
        }
        
        // Notification
        
        if (!$self_edited) {
            // notify authors of the topic or post
            
            $params = array();
            
            $params["{moderator_name}"] = $this->get_user_name();
            
            $params["{topic_id}"] = $post_data["topic_id"];
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]);
            $params["{topic_name}"] = $post_data["topic_name"];
            
            $params["{forum_id}"] = $fid;
            $params["{forum_name}"] = $post_data["forum_name"];
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($post_data["forum_id"]);
            
            $already_notified = array();
            
            // if the actor and the receiver are the same, do not notify
            if ($subject_changed && !empty($post_data["topic_author_id"]) && $post_data["topic_author_id"] != $this->get_user_id()) {
                $params["{user_name}"] = $post_data["topic_author_name"];
                $params["{site_url}"] = get_host_address($post_data["topic_last_host"]) . get_url_path();
                $params["{topic_url}"] = get_host_address($post_data["topic_last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]);
                $params["{forum_url}"] = get_host_address($post_data["topic_last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($post_data["forum_id"]);
                $params["{source_topic_name}"] = $post_data["topic_name"];
                $params["{new_topic_name}"] = $post_data["new_topic_name"];
                $params["{topic_name}"] = $post_data["new_topic_name"];
                $params["{message}"] = "MSG(PreviousName): " . $post_data["topic_name"];
                
                $anonym_appendix = "";
                $anonym_appendix2 = "";
                $this->get_anonym_appendixes($post_data["topic_author_id"], $anonym_appendix, $anonym_appendix2);
                
                $event_code = "MsgEventTopicNameEdited{$anonym_appendix2}";
                $email_template = "email_topic_name_edited{$anonym_appendix}.txt";
                
                $already_notified[$post_data["topic_author_id"]] = 1;
                
                $this->log_user_event($post_data["topic_author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params);
                
                if (!empty($post_data["topic_author_email"]) && !empty($post_data["topic_send_notifications"])) {
                    $this->email_manager->send_email($settings["default_sender"], $post_data["topic_author_email"], $email_template, $params, $post_data["topic_interface_language"]);
                }
            }
            
            // if the actor and the receiver are the same, do not notify
            if ($body_changed && empty($already_notified[$post_data["author_id"]]) &&
                !empty($post_data["author_id"]) && $post_data["author_id"] != $this->get_user_id()
            ) {
                $anonym_appendix = "";
                $anonym_appendix2 = "";
                $this->get_anonym_appendixes($post_data["author_id"], $anonym_appendix, $anonym_appendix2);
                
                $event_code = "MsgEventMessageEdited{$anonym_appendix2}";
                $email_template = "email_post_edited{$anonym_appendix}.txt";
                
                $params["todo"] = 1;
                
                $params["{user_name}"] = $post_data["author_name"];
                $params["{site_url}"] = get_host_address($post_data["last_host"]) . get_url_path();
                $params["{topic_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]);
                $params["{forum_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($post_data["forum_id"]);
                $params["{post_id}"] = $post_data["post_id"];
                $params["{post_date}"] = $post_data["post_date"];
                $params["{post_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($post_data["post_id"]);
                $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($post_data["post_id"]);
                
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
                $this->log_user_event($post_data["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_data["post_id"]);
                
                if (!empty($post_data["author_email"]) && !empty($post_data["send_notifications"])) {
                    $params["{message}"] = $post_data["short_message"];
                    $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $post_data["interface_language"], get_host_address($post_data["last_host"]) . get_url_path(), 600);
                    
                    $params["{post_date}"] = date(text("DateTimeFormat", $post_data["interface_language"]), convert_timezone($params["{post_date}"], TIME_ZONE, $post_data["author_time_zone"]));
                    $this->email_manager->send_email($settings["default_sender"], $post_data["author_email"], $email_template, $params, $post_data["interface_language"]);
                }
            }
            
            // if the actor and the receiver are the same, do not notify
            if (!empty($is_comment_mod_action) && !empty($post_data["author_id"]) && $post_data["author_id"] != $this->get_user_id()) {
                $anonym_appendix = "";
                $anonym_appendix2 = "";
                $this->get_anonym_appendixes($post_data["author_id"], $anonym_appendix, $anonym_appendix2);
                
                if ($old_post_is_comment == 0) {
                    $event_code = "MsgEventMessageConvertedToThematic{$anonym_appendix2}";
                    $email_template = "email_post_made_thematic{$anonym_appendix}.txt";
                } else {
                    $event_code = "MsgEventMessageConvertedToComments{$anonym_appendix2}";
                    $email_template = "email_post_made_comment{$anonym_appendix}.txt";
                }
                
                $params["todo"] = 1;
                
                $params["{user_name}"] = $post_data["author_name"];
                $params["{site_url}"] = get_host_address($post_data["last_host"]) . get_url_path();
                $params["{topic_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]);
                $params["{forum_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($post_data["forum_id"]);
                $params["{post_id}"] = $post_data["post_id"];
                $params["{post_date}"] = $post_data["post_date"];
                $params["{post_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($post_data["post_id"]);
                $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($post_data["post_id"]);
                
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
                $this->log_user_event($post_data["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_data["post_id"]);
                
                if (!empty($post_data["author_email"]) && !empty($post_data["send_notifications"])) {
                    $params["{message}"] = $post_data["short_message"];
                    $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $post_data["interface_language"], get_host_address($post_data["last_host"]) . get_url_path(), 600);
                    
                    $params["{post_date}"] = date(text("DateTimeFormat", $post_data["interface_language"]), convert_timezone($params["{post_date}"], TIME_ZONE, $post_data["author_time_zone"]));
                    $this->email_manager->send_email($settings["default_sender"], $post_data["author_email"], $email_template, $params, $post_data["interface_language"]);
                }
            }
            
            // if the actor and the receiver are the same, do not notify
            if (!empty($is_adult_mod_action) && !empty($post_data["author_id"]) && $post_data["author_id"] != $this->get_user_id()) {
                $anonym_appendix = "";
                $anonym_appendix2 = "";
                $this->get_anonym_appendixes($post_data["author_id"], $anonym_appendix, $anonym_appendix2);
                
                if ($old_post_is_adult == 0) {
                    $event_code = "MsgEventMessageConvertedToAdult{$anonym_appendix2}";
                    $email_template = "email_post_made_adult{$anonym_appendix}.txt";
                } else {
                    $event_code = "MsgEventMessageConvertedToNonAdult{$anonym_appendix2}";
                    $email_template = "email_post_made_nonadult{$anonym_appendix}.txt";
                }
                
                $params["todo"] = 1;
                
                $params["{user_name}"] = $post_data["author_name"];
                $params["{site_url}"] = get_host_address($post_data["last_host"]) . get_url_path();
                $params["{topic_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]);
                $params["{forum_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($post_data["forum_id"]);
                $params["{post_id}"] = $post_data["post_id"];
                $params["{post_date}"] = $post_data["post_date"];
                $params["{post_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($post_data["post_id"]);
                $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($post_data["forum_id"]) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($post_data["post_id"]);
                
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
                $this->log_user_event($post_data["author_id"], $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_data["post_id"]);
                
                if (!empty($post_data["author_email"]) && !empty($post_data["send_notifications"])) {
                    $params["{message}"] = $post_data["short_message"];
                    $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $post_data["interface_language"], get_host_address($post_data["last_host"]) . get_url_path(), 600);
                    
                    $params["{post_date}"] = date(text("DateTimeFormat", $post_data["interface_language"]), convert_timezone($params["{post_date}"], TIME_ZONE, $post_data["author_time_zone"]));
                    $this->email_manager->send_email($settings["default_sender"], $post_data["author_email"], $email_template, $params, $post_data["interface_language"]);
                }
            }
            
            return true;
        }
        
        // mailing of possible users due do added citated to own post
        
        $citation_subscribers = array();
        $post_citation_subscribers = array();
        
        if (!empty($citated_posts)) {
            $in_list = $dbw->escape(implode(", ", $citated_posts));
            
            // user subscribed to own messages
            
            if (!$dbw->execute_query("select {$prfx}_post.id, {$prfx}_post.user_id,
                                      email, user_name, last_host, send_notifications, interface_language,
                                      hide_comments, ignore_guests_whitelist, notify_citation, {$prfx}_ignored_topics.topic_id topic_ignored,
                                      {$prfx}_post.topic_id citated_topic_id, citated_topic.forum_id citated_forum_id
                                      from {$prfx}_post
                                      inner join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                                      inner join {$prfx}_topic on ({$prfx}_topic.id = $tid)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      inner join {$prfx}_topic citated_topic on ({$prfx}_post.topic_id = citated_topic.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id in ($in_list) and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      )
                                      order by {$prfx}_post.id")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                // This user ignores the topic, no notification
                if ($dbw->field_by_name("topic_ignored")) {
                    continue;
                }
                
                // It is a comment post, and the user does not want to see comments
                if ($dbw->field_by_name("hide_comments") && !empty($is_comment)) {
                    continue;
                }
                
                if (!$dbw->field_by_name("notify_citation")) {
                    continue;
                }
                
                $citation_subscribers[$dbw->field_by_name("user_id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "citated_post" => $dbw->field_by_name("id"),
                    "citated_topic" => $dbw->field_by_name("citated_topic_id"),
                    "citated_forum" => $dbw->field_by_name("citated_forum_id"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
                );
            }
            
            $dbw->free_result();
            
            // user subscribed to a message
            
            if (!$dbw->execute_query("select {$prfx}_post.id, {$prfx}_post_subscription.user_id,
                                      email, user_name, last_host, send_notifications, interface_language,
                                      hide_comments, ignore_guests_whitelist, notify_citation, {$prfx}_ignored_topics.topic_id topic_ignored,
                                      {$prfx}_post.topic_id citated_topic_id, citated_topic.forum_id citated_forum_id
                                      from {$prfx}_post
                                      inner join {$prfx}_post_subscription on ({$prfx}_post.id = {$prfx}_post_subscription.post_id)
                                      inner join {$prfx}_user on ({$prfx}_post_subscription.user_id = {$prfx}_user.id)
                                      inner join {$prfx}_topic on ({$prfx}_topic.id = $tid)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      inner join {$prfx}_topic citated_topic on ({$prfx}_post.topic_id = citated_topic.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id in ($in_list) and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      )
                                      order by {$prfx}_post.id")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                // This user ignores the topic, no notification
                if ($dbw->field_by_name("topic_ignored")) {
                    continue;
                }
                
                // It is a comment post, and the user does not want to see comments
                if ($dbw->field_by_name("hide_comments") && !empty($is_comment)) {
                    continue;
                }
                
                $post_citation_subscribers[$dbw->field_by_name("user_id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "citated_post" => $dbw->field_by_name("id"),
                    "citated_topic" => $dbw->field_by_name("citated_topic_id"),
                    "citated_forum" => $dbw->field_by_name("citated_forum_id"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
                );
            }
            
            $dbw->free_result();
            
            if (!$this->get_my_ignore_status_for_users($dbw, $citation_subscribers)) {
                return false;
            }
            
            if (!$this->get_my_ignore_status_for_users($dbw, $post_citation_subscribers)) {
                return false;
            }
        }
        
        $word_subscribers = array();
        
        if (!$dbw->execute_query("select {$prfx}_user.id user_id,
                                      email, user_name, last_host, send_notifications, interface_language, words_to_notify,
                                      hide_comments, ignore_guests_whitelist, notify_citation, {$prfx}_ignored_topics.topic_id topic_ignored
                                      from {$prfx}_post
                                      inner join {$prfx}_user on ({$prfx}_user.notify_on_words = 1)
                                      inner join {$prfx}_topic on ({$prfx}_topic.id = {$prfx}_post.topic_id)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id = $edited_post and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      ) and
                                        not exists (
                                            select 1 from
                                            {$prfx}_user usr
                                            left join {$prfx}_ignored_forums on (usr.id = {$prfx}_ignored_forums.user_id)
                                            where usr.id = {$prfx}_user.id and (forum_id = {$prfx}_forum.id or forum_id is NULL)
                                        )
                                      ")
        ) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            // This user ignores the topic, no notification
            if ($dbw->field_by_name("topic_ignored")) {
                continue;
            }
            
            // It is a comment post, and the user does not want to see comments
            if ($dbw->field_by_name("hide_comments") && !empty($is_comment)) {
                continue;
            }
            
            $word_subscribers[$dbw->field_by_name("user_id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist"),
                "words" => preg_split("/[\r\n]+/", $dbw->field_by_name("words_to_notify"), -1, PREG_SPLIT_NO_EMPTY)
            );
        }
        
        $dbw->free_result();
        
        if (!$this->get_my_ignore_status_for_users($dbw, $word_subscribers)) {
            return false;
        }
        
        // to prevent the sending the redundant notifications about the same action
        // we track the users who are already notified
        $already_notified = array();
        
        foreach ($appealed_users as $uid => $sinfo) {
            // if the author ingnores the user, it cannot appeal him
            if ($this->is_user_ignored($uid)) {
                continue;
            }            

            // if the user self posted the message, he does not need to be notified about it
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                continue;
            }
            
            if (!empty($already_notified[$uid])) {
                continue;
            }

            $already_notified[$uid] = 1;
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{author_name}"] = reqvar("author");
            $params["{user_name}"] = $sinfo["name"];
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $post_data["topic_name"];
            $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $edited_post;
            
            $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($edited_post);
            $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($edited_post);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($edited_post);
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($edited_post);
            
            $params["{forum_id}"] = $fid;
            $params["{forum_name}"] = $post_data["forum_name"];
            $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $event_code = "MsgEventAttentionAsked";
            $email_template = "email_personal_appeal.txt";
            
            // to check if someone was not notified
            unset($all_appealed_users[$sinfo["name"]]);
            
            $params["{message}"] = $post_data["short_message"];
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $edited_post);
            
            if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
            }
        }
        
        if (!empty($all_appealed_users)) {
            MessageHandler::setWarning(sprintf(text("WarnNotAllAppealed"), implode(", ", $all_appealed_users)));
        }
        
        foreach ($citation_subscribers as $uid => $sinfo) {
            // if the user self posted the message, he does not need to be notified about it
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                continue;
            }
            
            if (!empty($already_notified[$uid])) {
                continue;
            }
            
            $already_notified[$uid] = 1;
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{author_name}"] = reqvar("author");
            $params["{user_name}"] = $sinfo["name"];
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $subject;
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $edited_post;
            $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($edited_post);
            $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($edited_post);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($edited_post);
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($edited_post);
            
            $params["{forum_id}"] = $fid;
            $params["{forum_name}"] = $post_data["forum_name"];
            $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $event_code = "MsgEventCitatedMessageInTopic";
            $email_template = "email_post_citated.txt";
            
            $params["{citated_post}"] = $sinfo["citated_post"];
            $params["{citated_post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
            $params["{citated_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
            
            $params["{message}"] = $post_data["short_message"];
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $edited_post);
            
            if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
            }
        }
        
        foreach ($post_citation_subscribers as $uid => $sinfo) {
            // if the user self posted the message, he does not need to be notified about it
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                continue;
            }
            
            if (!empty($already_notified[$uid])) {
                continue;
            }
            
            $already_notified[$uid] = 1;
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{author_name}"] = reqvar("author");
            $params["{user_name}"] = $sinfo["name"];
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $subject;
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $edited_post;
            $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($edited_post);
            $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($edited_post);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($edited_post);
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($edited_post);
            
            $params["{forum_id}"] = $fid;
            $params["{forum_name}"] = $post_data["forum_name"];
            $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $event_code = "MsgEventCitatedSubscribedMessageInTopic";
            $email_template = "email_subscribed_post_citated.txt";
            
            $params["{citated_post}"] = $sinfo["citated_post"];
            $params["{citated_post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
            $params["{citated_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
            
            $params["{message}"] = $post_data["short_message"];
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $edited_post);
            
            if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
            }
        }
        
        $assertion = "[^\s.,;&:!\=\?\-\+\(\)\[\]\{\}\/\*#']";
        
        foreach ($word_subscribers as $uid => $sinfo) {
            // if the user self posted the message, he does not need to be notified about it
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                continue;
            }
            
            if (!empty($already_notified[$uid])) {
                continue;
            }

            $already_notified[$uid] = 1;

            $pattern = "";
            
            foreach ($sinfo["words"] as $word) {
                $word_combinations = array();
                if ($this->get_unicore_words($word, $word_combinations)) {
                    foreach ($word_combinations as $word_combination) {
                        $pattern .= "(?<!$assertion)" . preg_p_escape($word_combination) . "(?!$assertion)|";
                    }
                } else {
                    $pattern .= "(?<!$assertion)" . preg_p_escape($word) . "(?!$assertion)|";
                }
            }
            
            $pattern = "/" . trim($pattern, "|") . "/miu";
            
            // We do not notify on words in the post citations
            // Because the notification has been already done when the original
            // post was posted.
            
            $word_check_text = $old_text_content;
            remove_post_citations($word_check_text, $word_check_text);
            
            // We have to handle the case if the phrase is a part of the nick.
            // If the phrase is only a part of a nick - we do not notify.
            // If the phrase is exactly a nick - we DO notify.
            
            if (preg_match_all("~(\[b\](.+?)(#\d+)?\[/b\]|\[quote=(.+?)(#\d+)?\])~u", $word_check_text, $matches, PREG_SET_ORDER)) {
                foreach ($matches as $match_set) {
                    $nick_name = "";
                    if (!empty($match_set[2])) {
                        $nick_name = $match_set[2];
                    } elseif (!empty($match_set[4])) {
                        $nick_name = $match_set[4];
                    } else {
                        continue;
                    }
                    
                    // If the nick name is exactly a phrase in the search phrase list, we do not remove it from the message
                    if (in_array($nick_name, $sinfo["words"])) {
                        continue;
                    }
                    
                    $word_check_text = str_replace($nick_name, "", $word_check_text);
                }
            }
            
            $existing_entries = array();
            
            $matches = array();
            if (preg_match_all($pattern, $word_check_text, $matches)) {
                $existing_entries = $matches[0];
            }
            
            $word_check_text = $message;
            remove_post_citations($word_check_text, $word_check_text);
            
            if (preg_match_all("~(\[b\](.+?)(#\d+)?\[/b\]|\[quote=(.+?)(#\d+)?\])~u", $word_check_text, $matches, PREG_SET_ORDER)) {
                foreach ($matches as $match_set) {
                    $nick_name = "";
                    if (!empty($match_set[2])) {
                        $nick_name = $match_set[2];
                    } elseif (!empty($match_set[4])) {
                        $nick_name = $match_set[4];
                    } else {
                        continue;
                    }
                    
                    // If the nick name is exactly a phrase in the search phrase list, we do not remove it from the message
                    if (in_array($nick_name, $sinfo["words"])) {
                        continue;
                    }
                    
                    $word_check_text = str_replace($nick_name, "", $word_check_text);
                }
            }
            
            $matches = array();
            if (!preg_match_all($pattern, $word_check_text, $matches)) {
                continue;
            }
            
            // exclude the already existing citations from redundant notification
            $new_words = array_diff($matches[0], $existing_entries);
            if (empty($new_words)) {
                continue;
            }
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{author_name}"] = reqvar("author");
            $params["{user_name}"] = $sinfo["name"];
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $post_data["topic_name"];
            $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($tid) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $edited_post;
            
            $highlight = "&search_keys=" . xrawurlencode(implode("|", $matches[0]));
            $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($edited_post) . $highlight;
            $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($edited_post) . $highlight;
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($edited_post) . $highlight;
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($edited_post) . $highlight;
            
            $params["{forum_id}"] = $fid;
            $params["{forum_name}"] = $post_data["forum_name"];
            $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $params["{words}"] = implode(", ", $matches[0]);
            
            $event_code = "MsgEventWordsMentionedInTopic";
            $email_template = "email_word_mentioned.txt";
            
            $params["{message}"] = $post_data["short_message"];
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $edited_post);
            
            if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                $params["{message}"] = $post_data["short_message"];
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
            }
        }

        return true;
    } // update_message
    
    //-----------------------------------------------------------------
    function check_author($author)
    {
        if (Emoji::HasEmoji($author) || preg_match("/[\[\]<>\{\}%@,;:~`\|\/\\\\]+/", $author)) {
            return false;
        }
        
        return true;
    } // check_author
    
    //-----------------------------------------------------------------
    function strip_subject($subject)
    {
        return strip_tags($subject);
    } // check_subject
    
    //-----------------------------------------------------------------
    function post_sys_message(&$dbw, $tid, $msg, &$post_id)
    {
        global $READ_MARKER;
        global $BB_PARSER_VERSION;
        global $settings;

        if (!empty($settings["archive_mode"])) {
            return true;
        }
        
        if (empty($BB_PARSER_VERSION)) {
            $BB_PARSER_VERSION = 1;
        }
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $author = $dbw->escape($this->get_status_user_name());
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = "NULL";
        }
        
        $now = $dbw->format_datetime(time());
        
        // we use readmarker because it is a cookie and remains longer
        $rm = $dbw->escape($READ_MARKER);
        
        $user_marker = quotes_or_null($dbw->escape(reqvar("user_marker")));
        
        $ip = $dbw->escape($ip);
        $tid = $dbw->escape($tid);
        $fid = 0;
        
        $is_private = 0;
        if (!$dbw->execute_query("select is_private, forum_id
                         from {$prfx}_topic
                         where id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $is_private = $dbw->field_by_name("is_private");
            $fid = $dbw->field_by_name("forum_id");
        }
        
        $dbw->free_result();
        
        $fid = $dbw->escape($fid);
        $agent = quotes_or_null($dbw->escape(val_or_empty($_SERVER["HTTP_USER_AGENT"])));
        $moder_msg = $msg;
        if (!reqvar_empty("comment")) {
            $moder_msg .= "\n\n" . reqvar("comment");
        }
        
        $moder_msg = $dbw->escape(Emoji::Encode($moder_msg));
        // will be parsed by reading
        
        $query = "insert into {$prfx}_post (topic_id, user_id, author, creation_date, read_marker, user_marker, ip, pinned, is_comment, self_edited, user_agent, last_warned_by, last_warning, is_system, bb_parser_version)
              values ($tid, $uid, '$author', '$now', '$rm', $user_marker, '$ip', 0, 0, 1, $agent, '$author', '$moder_msg', 1, $BB_PARSER_VERSION)";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $post_id = $dbw->insert_id();
        
        $msg = Emoji::Encode($msg);
        
        $html_message = "";
        $has_picture = "0";
        $has_video = "0";
        $has_audio = "0";
        $has_link = "0";
        $has_code = "0";
        $has_attachment_ref = 0;
        if (!$this->format_manager->format_message($dbw, $msg, $html_message, $has_picture, $has_video, $has_audio, $has_link, $has_code, $has_attachment_ref, $post_id)) {
            return false;
        }
        
        $plain_text = preg_replace("/[ \t]+/", " ", trim(strip_tags($html_message)));
        $plain_text = preg_replace("/[\n\r]+/", "\r\n", $plain_text);
        
        $msg = $dbw->escape($msg);
        $html_message = $dbw->escape($html_message);
        $plain_text = $dbw->escape($plain_text);
        
        $query = "update {$prfx}_post set
              text_content = '$msg',
              html_content = '$html_message',
              searchable_content = '$plain_text',
              has_picture = '$has_picture',
              has_video = '$has_video',
              has_audio = '$has_audio',
              has_link = '$has_link',
              has_code = '$has_code'
              where id = $post_id";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // statistics
        
        $query = "update {$prfx}_topic_statistics set
              post_count = post_count + 1,
              post_count_total = post_count_total + 1,
              last_message_date = '$now',
              last_message_id = $post_id
              where topic_id = $tid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($uid != "NULL" && !$is_private) {
            $query = "update {$prfx}_user_statistics set
                post_count = post_count + 1
                where user_id = $uid";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        $dtnow = $dbw->format_datetime(mktime(0, 0, 0, date("n"), date("j"), date("Y")));
        
        if ($uid != "NULL") {
            $query = "insert into {$prfx}_daily_statistics (dt, user_id, forum_id)
                select '$dtnow', $uid, $fid
                from {$prfx}_dual
                where
                not exists (select 1 from {$prfx}_daily_statistics where dt = '$dtnow' and user_id = $uid and forum_id = $fid);
               ";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if (!$is_private) {
                $query = "update {$prfx}_daily_statistics set
                    post_count = post_count + 1
                    where
                    dt = '$dtnow' and user_id = $uid and forum_id = $fid;
                   ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
            }
        } else {
            $query = "insert into {$prfx}_daily_statistics (dt, user_id, forum_id)
                select '$dtnow', NULL, $fid
                from {$prfx}_dual
                where
                not exists (select 1 from {$prfx}_daily_statistics where dt = '$dtnow' and user_id is NULL and forum_id = $fid);
               ";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $query = "update {$prfx}_daily_statistics set
                post_count = post_count + 1
                where
                dt = '$dtnow' and user_id is NULL and forum_id = $fid;
               ";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        $query = "update {$prfx}_forum_statistics set
              last_message_date = '$now',
              last_message_id = $post_id
              where forum_id = $fid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$this->handle_topic_ignorance_archive($dbw, $prfx, $tid)) {
            return false;
        }
        
        return true;
    } // post_sys_message
    
    //-----------------------------------------------------------------
    function post_message(&$response)
    {
        global $settings;
        global $READ_MARKER;
        global $BB_PARSER_VERSION;
        
        if (empty($BB_PARSER_VERSION)) {
            $BB_PARSER_VERSION = 1;
        }
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        if (!empty($settings["archive_mode"])) {
            MessageHandler::setError(text("MsgArchiveMode"));
            return false;
        }
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        
        if (!$this->check_post_ip($ip)) {
            return false;
        }
        
        shrink_spaces($_REQUEST["author"]);
        
        if (reqvar_empty("author", true) && reqvar_empty("login_active")) {
            MessageHandler::setError(text("ErrAuthorNameEmpty"));
            MessageHandler::setErrorElement("author");
            return false;
        }
        
        if (utf8_strlen(reqvar("author")) > $settings["max_user_name_symbols"]) {
            MessageHandler::setError(sprintf(text("ErrUserNameTooLong"), $settings["max_user_name_symbols"]));
            MessageHandler::setErrorElement("author");
            return false;
        }
        
        if (!$this->check_author(reqvar("author"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("author");
            return false;
        }
        
        if (!reqvar_empty("new_topic")) {
            if (reqvar_empty("fid") || !is_numeric(reqvar("fid"))) {
                MessageHandler::setError(text("ErrNoForumSelected"));
                return false;
            }
            
            $subject = trim($this->strip_subject(reqvar("subject")));
            
            if (empty($subject) && (string)$subject !== "0") {
                MessageHandler::setError(text("ErrSubjectEmpty"));
                MessageHandler::setErrorElement("subject");
                return false;
            }
            
            if (Emoji::HasEmoji($subject)) {
                MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
                MessageHandler::setErrorElement("subject");
                return false;
            }
            
            if (utf8_strlen($subject) > $settings["max_topic_name_symbols"]) {
                MessageHandler::setError(sprintf(text("ErrSubjectTooLong"), $settings["max_topic_name_symbols"]));
                MessageHandler::setErrorElement("subject");
                return false;
            }
        } else {
            if (reqvar_empty("tid") || !is_numeric(reqvar("tid"))) {
                MessageHandler::setError(text("ErrNoTopicSelected"));
                return false;
            }
        }
        
        if (!empty($settings["max_message_length"]) && strlen(reqvar("message")) > 1024 * $settings["max_message_length"]) {
            MessageHandler::setError(sprintf(text("ErrMessageTooLong"), $settings["max_message_length"]));
            MessageHandler::setErrorElement("message");
            return false;
        }
        
        $has_attachments = false;
        for ($i = 1; $i <= $this->get_attachments_per_post(); $i++) {
            $idx = ($i == 1) ? "" : $i;
            
            if (!empty($_FILES["attachment" . $idx]["size"])) {
                $has_attachments = true;
            }
        }          
        
        if (reqvar_empty("message", true) &&
            !$has_attachments &&
            reqvar_empty("poll")) {
            MessageHandler::setError(text("ErrMessageEmpty"));
            MessageHandler::setErrorElement("message");
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$this->is_logged_in() && !reqvar_empty("login_active")) {
            if (reqvar_empty("user_login")) {
                MessageHandler::setError(text("ErrUserLoginEmpty"));
                MessageHandler::setErrorElement("user_login");
                return false;
            }
            
            if (reqvar_empty("user_password")) {
                MessageHandler::setError(text("ErrPasswordEmpty"));
                MessageHandler::setErrorElement("user_password");
                return false;
            }
            
            // no need to check the login frequency because
            // check post ip is used
            
            $response["failed_login_count"] = 0;
            if (!$this->login($response["failed_login_count"])) {
                MessageHandler::setErrorElement("user_password");
                return false;
            }
            
            if (reqvar("user_login") == "admin") {
                $_REQUEST["author"] = $this->get_status_user_name();
                $author = quotes_or_null($dbw->escape(reqvar("author")));
            }
            
            $response["login_performed"] = 1;
        }
        
        $tid = $dbw->escape(reqvar("tid"));
        $fid = $dbw->escape(reqvar("fid"));
        
        if (!reqvar_empty("new_topic")) {
            if (empty($fid)) {
                MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), "-"));
            }
            
            $forum_name = "-";
            if (!$this->has_access_to_forum($fid, $forum_name, true)) {
                return false;
            }
        } else {
            if (!$this->has_access_to_topic($tid, true)) {
                return false;
            }
        }
        
        if (!reqvar_empty("new_topic")) {
            $query = "select
                id forum_id,
                {$prfx}_forum.name forum_name,
                {$prfx}_forum.closed topic_closed,
                {$prfx}_forum.closed forum_closed,
                {$prfx}_forum.no_guests, restricted_guest_mode, user_posting_as_guest,
                0 topic_no_guests,
                0 profiled_topic,
                -1 is_private,
                0 publish_delay
                from
                {$prfx}_forum
                where {$prfx}_forum.id = $fid";
        } else {
            $query = "select
                forum_id,
                {$prfx}_forum.name forum_name,
                {$prfx}_topic.closed topic_closed,
                {$prfx}_forum.closed forum_closed,
                {$prfx}_forum.no_guests, restricted_guest_mode, user_posting_as_guest,
                {$prfx}_topic.no_guests topic_no_guests,
                {$prfx}_topic.profiled_topic,
                is_private,
                publish_delay
                from
                {$prfx}_topic
                inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                where {$prfx}_topic.id = $tid";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $topic_closed = false;
        $forum_closed = false;
        $no_guests_forum = false;
        $no_guests_topic = false;
        $profiled_topic = false;
        $restricted_guest_mode = false;
        $user_posting_as_guest = false;
        $is_private = 0;
        $publish_delay = 0;
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
            $topic_closed = $dbw->field_by_name("topic_closed");
            $forum_closed = $dbw->field_by_name("forum_closed");
            $no_guests_forum = $dbw->field_by_name("no_guests"); 
            $no_guests_topic = $dbw->field_by_name("topic_no_guests");
            $restricted_guest_mode = $dbw->field_by_name("restricted_guest_mode");
            $user_posting_as_guest = $dbw->field_by_name("user_posting_as_guest");
            
            $profiled_topic = $dbw->field_by_name("profiled_topic");
            
            $is_private = $dbw->field_by_name("is_private");
            $publish_delay = $dbw->field_by_name("publish_delay");
            
            if ($is_private == -1) {
                $is_private = ($dbw->field_by_name("forum_name") == 'PRIVATE_MESSAGES') ? (reqvar_empty("receiver") ? 2 : 1) : 0;
            }
        } else {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();

        $forced_guest_posting = false;
        if ($this->is_logged_in() && !empty($user_posting_as_guest) && 
            !empty($_SESSION["guest_posting_mode"]) && reqvar("author") != $this->get_user_name()
        ) {
           $forced_guest_posting = true;
        }        
        
        if ($forced_guest_posting) {
            // let author as is
        } elseif ($this->is_master_admin()) {
            $_REQUEST["author"] = "admin";
        } elseif ($this->is_logged_in()) {
            $_REQUEST["author"] = $this->get_user_name();
        } 

        $author = quotes_or_null($dbw->escape(reqvar("author")));

        $tor_check = $this->check_tor_ip($ip);
        if (!$this->is_logged_in() && ($tor_check == "tor_block_write" || $tor_check == "tor_block_read")) {
            MessageHandler::setError(text("ErrTorNodeBlocked"));
            return false;
        }
        
        if (!$this->verify_captcha()) {
            return false;
        }
        
        if (!$this->attachment_manager->handle_attachments()) {
            return false;
        }
        
        $last_post_hash = reqvar("tid") . "\t" . reqvar("receiver") . "\t" . reqvar("subject") . "\t" . reqvar("message");
        for ($i = 1; $i <= $this->get_attachments_per_post(); $i++) {
            $idx = ($i == 1) ? "" : $i;
            
            $last_post_hash .= val_or_empty($_FILES["attachment" . $idx]["name"]) . val_or_empty($_FILES["attachment" . $idx]["size"]);
        }          
        
        $last_post_hash = System::generateHash($last_post_hash, SALT_KEY);
        
        if ($last_post_hash == val_or_empty($_SESSION["last_post_hash"])) {
            $response["double_post"] = 1;
            $response["return_post"] = reqvar("return_post");
            MessageHandler::setInfo(text("MsgDoublePost"));
            return true;
        }
        
        // check the author
        
        if (!$this->is_logged_in() || $forced_guest_posting) {
            $check = $this->check_name_usage(reqvar("author"), "", false);
            if ($check == 1) {
                MessageHandler::setError(text("ErrUserNameInUse"));
                MessageHandler::setErrorElement("author");
                return false;
            } elseif ($check == 2) {
                MessageHandler::setError(text("ErrUserNameReserved"));
                MessageHandler::setErrorElement("author");
                return false;
            } elseif ($check == 3) {
                MessageHandler::setError(text("ErrUserNameProtected"));
                MessageHandler::setErrorElement("author");
                return false;
            }
        }
        
        $ip_rules = array();
        $ips = "";
        $matched_rule = "";
        $this->get_white_list_ips($ips, $ip_rules);
        if ($restricted_guest_mode && !$this->is_logged_in()) {
            if (!$this->is_ip_whitelisted(val_or_empty($_SERVER["REMOTE_ADDR"]), $ip_rules, $matched_rule) &&
                $diff = $this->check_guest_read_marker($dbw, $READ_MARKER)) {
                MessageHandler::setWarning(sprintf(text("ErrMessageGuestRestricted"), format_duration($diff)));
                return false;
            }
        }
        
        if (!$this->check_message_limit($fid, $tid, !reqvar_empty("new_topic"))) {
            return false;
        }
        
        if ($this->check_blocked($fid)) {
            return false;
        }
        
        if (!empty($tid) && $this->is_blocked_in_topic($tid)) {
            return false;
        }
        
        if (!$this->is_admin() && !$this->is_forum_moderator($fid) && $forum_closed) {
            MessageHandler::setError(text("ErrForumClosed"));
            return false;
        }
        
        if (!$this->is_logged_in() && $no_guests_forum) {
            MessageHandler::setError(text("ErrForumGuestsNotAllowed"));
            return false;
        }
        
        if ((!$this->is_logged_in() || $forced_guest_posting) && $no_guests_topic) {
            MessageHandler::setError(text("ErrForumGuestsNotAllowed"));
            return false;
        }
        
        if (reqvar_empty("new_topic") && !$this->is_admin() && !$this->is_forum_moderator($fid) && !$this->is_topic_moderator($tid) && $topic_closed) {
            MessageHandler::setError(text("ErrTopicClosed"));
            return false;
        }
        
        $receiver_data = array();
        if ($is_private && !reqvar_empty("new_topic") && !reqvar_empty("receiver")) {
            if (!$this->get_user_data(reqvar("receiver"), $receiver_data)) {
                return false;
            }
            
            if (!empty($receiver_data["no_private_messages"])) {
                MessageHandler::setError(sprintf(text("ErrUserNoPrivateMessages"), $receiver_data["user_name"]));
                return false;
            }
            
            if (!empty($receiver_data["ignoring_me"])) {
                MessageHandler::setError(sprintf(text("ErrUserIgnored"), $receiver_data["user_name"]));
                return false;
            }
        }
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid) || $forced_guest_posting) {
            $uid = "NULL";
        }
        
        $now = $dbw->format_datetime(time());
        
        // we use readmarker because it is a cookie and remains longer
        $rm = $dbw->escape($READ_MARKER);
        
        $user_marker = quotes_or_null($dbw->escape(reqvar("user_marker")));
        
        $ip = $dbw->escape($ip);
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $search_words_appendix = "";
        $is_poll = 0;
        $is_pinned = 0;
        $poll_results_delayed = 0;
        $no_guests = 0;
        if (!reqvar_empty("new_topic")) {
            $poll_comment = trim($this->strip_subject(reqvar("poll_comment")));
            
            if (!reqvar_empty("poll")) {
                $is_poll |= 1;
                
                if (!reqvar_empty("poll_results_delayed")) {
                    $poll_results_delayed = 1;
                }
            }
            if (!reqvar_empty("poll_multiselect")) {
                $is_poll |= 2;
            }
            if (!reqvar_empty("poll_open")) {
                $is_poll |= 4;
            }
            
            $poll_options = array();
            
            if (!empty($is_poll)) {
                $is_pinned = 1;
                
                if (reqvar_empty("poll_options")) {
                    MessageHandler::setError(text("ErrNoPollOptions"));
                    MessageHandler::setErrorElement("poll_options");
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $poll_options = preg_split("/[\n\r]+/", Emoji::Encode(reqvar("poll_options")), -1, PREG_SPLIT_NO_EMPTY);
                foreach ($poll_options as $option) {
                    if (utf8_strlen($option) > 300) {
                        MessageHandler::setError(sprintf(text("ErrPollOptionTooLong"), 300));
                        MessageHandler::setErrorElement("poll_options");
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
                
                if (count($poll_options) < 2) {
                    MessageHandler::setError(text("ErrTooFewPollOptions"));
                    MessageHandler::setErrorElement("poll_options");
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if (!$this->is_admin() && $this->is_privileged() && count($poll_options) > $settings["max_poll_options"]) {
                    MessageHandler::setError(sprintf(text("ErrTooManyPollOptions"), $settings["max_poll_options"]));
                    MessageHandler::setErrorElement("poll_options");
                    $dbw->rollback_transaction();
                    return false;
                }
            }
            
            $search_words_appendix .= " " . $subject . " " . $poll_comment . " ";
            $subject = $dbw->escape($subject);
            $poll_comment = quotes_or_null($dbw->escape($poll_comment));
            
            $publish_delay = reqvar_empty("publish_delay") ? "0" : "1";
            $request_moderation = reqvar_empty("request_moderation") ? "0" : "1";
            if (!$this->is_logged_in() || $this->is_admin() || $this->is_forum_moderator($fid)) {
                $request_moderation = 0;
            }
            
            $no_guests = reqvar_empty("no_guests") ? "0" : "1";
            if (!$this->is_logged_in() || $is_private) {
                $no_guests = 0;
            }

            $query = "insert into {$prfx}_topic (forum_id, user_id, author, name, creation_date, read_marker, user_marker, is_private, is_poll, poll_comment, poll_results_delayed, has_pinned_post, publish_delay, request_moderation, no_guests)
                values ($fid, $uid, $author, '$subject', '$now', '$rm', $user_marker, $is_private, $is_poll, $poll_comment, $poll_results_delayed, $is_pinned, $publish_delay, $request_moderation, $no_guests)";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $tid = $dbw->insert_id();
            
            $query = "insert into {$prfx}_topic_statistics (topic_id) values ($tid)";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$publish_delay) {
                $query = "update {$prfx}_forum_statistics set
                topic_count = topic_count + 1,
                topic_count_total = topic_count_total + 1
                where forum_id = $fid";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if ($uid != "NULL" && !$is_private) {
                    $query = "update {$prfx}_user_statistics set
                              topic_count = topic_count + 1
                              where user_id = $uid";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    $query = "update {$prfx}_user set last_ip = '$ip' where id = $uid";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        return false;
                    }
                    
                }
            }
            
            if (!$this->handle_topic_ignorance($dbw, $prfx, $tid, $this->get_user_id(), reqvar("author"))) {
                $dbw->rollback_transaction();
                return false;
            }
            
            foreach ($poll_options as $option) {
                $option_db = trim($option);
                parse_bb_code_simple($option_db);
                
                $option_db = $dbw->escape($option_db);
                if (empty($option_db)) {
                    continue;
                }
                
                if (!$dbw->execute_query("select 1
                                 from {$prfx}_poll_options
                                 where topic_id = $tid and name = '$option_db'")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                if ($dbw->fetch_row()) {
                    MessageHandler::setError(sprintf(text("ErrPollOptionExists"), trim($option)));
                    MessageHandler::setErrorElement("poll_options");
                    
                    $dbw->free_result();
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $dbw->free_result();
                
                $query = "insert into {$prfx}_poll_options (topic_id, name)
                  values ($tid, '$option_db')";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
            
            if ($is_private && !empty($uid)) {
                $query = "insert into {$prfx}_private_topics (topic_id, participant_id, last_visit_date)
                  values ($tid, $uid, '$now')";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $query = "insert {$prfx}_topic_subscription
                  (user_id, topic_id)
                  select $uid, $tid
                  from {$prfx}_dual
                  where
                  (select 1 from {$prfx}_topic_subscription where user_id = $uid and topic_id = $tid) is NULL
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if ($is_private == 2) {
                    // it is an own private topic
                    
                    $query = "insert {$prfx}_topic_moderator
                    (user_id, topic_id)
                    select $uid, $tid
                    from {$prfx}_dual
                    where
                    (select 1 from {$prfx}_topic_moderator where user_id = $uid and topic_id = $tid) is NULL
                   ";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                } elseif (!reqvar_empty("receiver") && $uid != "NULL" && reqvar_empty("receiver") != $uid) {
                    // it is a normal private topic
                    
                    $receiver = $dbw->escape(reqvar("receiver"));
                    
                    $query = "insert into {$prfx}_private_topics (topic_id, participant_id)
                    values ($tid, $receiver)";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    $query = "insert {$prfx}_topic_subscription
                    (user_id, topic_id)
                    select $receiver, $tid
                    from {$prfx}_dual
                    where
                    (select 1 from {$prfx}_topic_subscription where user_id = $receiver and topic_id = $tid) is NULL
                   ";
                    if (!$dbw->execute_query($query)) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
            }
            
            // post was saved, delete the backup copy. 0 for new topic
            
            $query = "delete from {$prfx}_auto_saved where topic_id = 0 and read_marker = '$rm'";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        } // if new
        
        // post was saved, delete the backup copy
        
        $query = "delete from {$prfx}_auto_saved where topic_id = $tid and read_marker = '$rm'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $agent = quotes_or_null($dbw->escape(val_or_empty($_SERVER["HTTP_USER_AGENT"])));
        
        $is_comment = 0;
        if ($profiled_topic && reqvar_empty("is_thematic")) {
            $is_comment = 1;
        }
        
        $is_adult = reqvar_empty("is_adult") ? 0 : 1;
    
        $query = "insert into {$prfx}_post (topic_id, user_id, author, creation_date, read_marker, user_marker, ip, pinned, is_comment, is_adult, self_edited, user_agent, bb_parser_version)
              values ($tid, $uid, $author, '$now', '$rm', $user_marker, '$ip', $is_pinned, $is_comment, $is_adult, 1, $agent, $BB_PARSER_VERSION)";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $post_id = $dbw->insert_id();
        
        if ($uid != "NULL") {
            $query = "insert into {$prfx}_topic_participants (user_id, topic_id)
                  select $uid, $tid from {$prfx}_dual
                  where not exists (select 1 from {$prfx}_topic_participants where user_id = $uid and topic_id = $tid)";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $message = reqvar("message", false);
        
        $has_attachment = 0;
        
        // finalize attachments
        
        $message = preg_replace("/\\[attachment1\\]/", "[attachment=$post_id]", $message);
        
        $attachments_per_post = $this->get_attachments_per_post();
        for ($i = 1; $i <= $attachments_per_post; $i++) {
            $idx = ($i == 1) ? "" : $i;
            
            if (empty($_SESSION["last_attachment$idx"])) {
                continue;
            }
            
            $attachment_type = "";
            $attachment_name = "";
            $attachment_origin_name = "";
            if ($this->attachment_manager->finalize_attachment($post_id, $attachment_name, $attachment_origin_name, $attachment_type, $idx)) {
                if (stripos($message, "[attachment$idx]") === false && stripos($message, "[attachment$idx=$post_id]") === false) {
                    $message .= "\n\n[attachment$idx]";
                }
                
                $message = str_ireplace("[attachment$idx]", "[attachment$idx=$post_id]", $message);
                
                $attachment_name = $dbw->escape($attachment_name);
                $attachment_origin_name = $dbw->escape(Emoji::Encode($attachment_origin_name));
                $attachment_type = $dbw->escape($attachment_type);
                
                $idx_db = $dbw->escape($idx);
                if (empty($idx_db)) {
                    $idx_db = 1;
                }
                
                $query = "insert into {$prfx}_attachment (post_id, nr, name, origin_name, type, user_id, last_post_id)
                  values ($post_id, $idx_db, '$attachment_name', '$attachment_origin_name', '$attachment_type', $uid, $post_id)";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                $bin_str = str_repeat("0", $attachments_per_post);
                $bin_str[$attachments_per_post - $i] = "1";
                $has_attachment |= bindec($bin_str);
            } else {
                $dbw->rollback_transaction();
                return false;
            }
        } // attachments
        
        $message = trim($message, "\r\n");
        
        $html_message = "";
        $has_picture = "0";
        $has_video = "0";
        $has_audio = "0";
        $has_link = "0";
        $has_code = "0";
        $has_attachment_ref = 0;
        if (!$this->format_manager->format_message($dbw, $message, $html_message, $has_picture, $has_video, $has_audio, $has_link, $has_code, $has_attachment_ref, $post_id)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        $query = "update {$prfx}_post set has_attachment = $has_attachment, has_attachment_ref = $has_attachment_ref where id = $post_id";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // update last post for the attachments
        if ($uid != "NULL" && preg_match_all("/\[attachment(\d*)=(\d+)\]/", $message, $matches, PREG_SET_ORDER)) {
            foreach ($matches as $match) {
                $idx = $dbw->escape($match[1]);
                if (empty($idx)) {
                    $idx = 1;
                }
                
                $pa_id = $dbw->escape($match[2]);
                
                if (!$dbw->execute_query("update {$prfx}_attachment set last_post_id = $post_id where post_id = $pa_id and nr = $idx and user_id = $uid")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        $html_message = trim($html_message);
        
        $html_message_check = trim(strip_tags($html_message, "<img><audio><video><iframe>"));
        if (empty($html_message_check) && (string)$html_message_check !== "0" &&
            reqvar_empty("poll")) {
            MessageHandler::setError(text("ErrMessageEmpty"));
            MessageHandler::setErrorElement("message");
            $dbw->rollback_transaction();
            return false;
        }
        
        $message = Emoji::Encode($message);
        $html_message = Emoji::Encode($html_message);
        
        $citated_posts = array();
        
        if (!reqvar_empty("citated_post")) {
            $citated_posts = explode(",", trim(reqvar("citated_post"), ", "));
        }
        
        // take possible pasted citations of the top level only into consideration
        
        $tmp_html = $html_message;
        remove_nested_quotes($tmp_html, $tmp_html, 1);
        if (preg_match_all("/data-cmid=\"(\d+)\"/", $tmp_html, $matches)) {
            $citated_posts = array_merge($citated_posts, $matches[1]);
        }
        
        $plain_text = preg_replace("/[ \t]+/", " ", trim(strip_tags($html_message)));
        $plain_text = preg_replace("/[\n\r]+/", "\r\n", $plain_text);
        
        $short_message = $message;
        
        $message = quotes_or_null($dbw->escape($message));
        $html_message = quotes_or_null($dbw->escape($html_message));
        $plain_text = $dbw->escape($plain_text);

        $query = "update {$prfx}_post set
              text_content = $message,
              html_content = $html_message,
              searchable_content = '$plain_text',
              has_picture = '$has_picture',
              has_video = '$has_video',
              has_audio = '$has_audio',
              has_link = '$has_link',
              has_code = '$has_code'
              where id = $post_id";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // post hierarchy
        
        if (!empty($citated_posts)) {
            $in_list = $dbw->escape(implode(", ", $citated_posts));
            
            $query = "insert into {$prfx}_post_hierarchy
              (parent_post_id, reply_post_id)
              select id, $post_id from  {$prfx}_post
              where id in ($in_list)";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // statistics
        
        $query = "update {$prfx}_topic_statistics set
              post_count = post_count + 1,
              post_count_total = post_count_total + 1,
              last_message_date = '$now',
              last_message_id = $post_id
              where topic_id = $tid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($uid != "NULL" && !$is_private) {
            $query = "update {$prfx}_user_statistics set
                post_count = post_count + 1
                where user_id = $uid";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $query = "update {$prfx}_user set
                last_post_date = '$now'
                where id = $uid";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $dtnow = $dbw->format_datetime(mktime(0, 0, 0, date("n"), date("j"), date("Y")));
        
        if ($uid != "NULL") {
            $query = "insert into {$prfx}_daily_statistics (dt, user_id, forum_id)
                select '$dtnow', $uid, $fid
                from {$prfx}_dual
                where
                not exists (select 1 from {$prfx}_daily_statistics where dt = '$dtnow' and user_id = $uid and forum_id = $fid);
               ";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if (!$is_private) {
                $query = "update {$prfx}_daily_statistics set
                    post_count = post_count + 1
                    where
                    dt = '$dtnow' and user_id = $uid and forum_id = $fid;
                   ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
            }
        } else {
            $query = "insert into {$prfx}_daily_statistics (dt, user_id, forum_id)
                select '$dtnow', NULL, $fid
                from {$prfx}_dual
                where
                not exists (select 1 from {$prfx}_daily_statistics where dt = '$dtnow' and user_id is NULL and forum_id = $fid);
               ";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $query = "update {$prfx}_daily_statistics set
                post_count = post_count + 1
                where
                dt = '$dtnow' and user_id is NULL and forum_id = $fid;
               ";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        $query = "update {$prfx}_forum_statistics set
              last_message_date = '$now',
              last_message_id = $post_id
              where forum_id = $fid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $all_appealed_users = array();
        $appealed_users = array();
        if (preg_match_all("/(@|%)([^%@\r\n\t]+?)\\1/iu", $tmp_html, $matches)) {
            $in_list = "";
            
            foreach ($matches[2] as $user) {
                $in_list .= "'" . $dbw->escape($user) . "', ";
            }
            
            $in_list = trim($in_list, ", ");
            
            if (!$dbw->execute_query("select user_name from {$prfx}_user where user_name in ($in_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $all_appealed_users[$dbw->field_by_name("user_name")] = $dbw->field_by_name("user_name");
            }
            
            $dbw->free_result();
            
            if (!$dbw->execute_query("select {$prfx}_user.id as user_id,
                                      email, user_name, last_host, send_notifications, interface_language,
                                      {$prfx}_ignored_topics.topic_id topic_ignored, hide_comments, ignore_guests_whitelist
                                      from {$prfx}_post
                                      inner join {$prfx}_user on ({$prfx}_user.user_name in ($in_list) and {$prfx}_user.turnoff_personal_appeals = 0)
                                      inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id = $post_id and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      )")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                // This user ignores the topic, no notification
                if ($dbw->field_by_name("topic_ignored")) {
                    continue;
                }
                
                // It is a comment post, and the user does not want to see comments
                if ($dbw->field_by_name("hide_comments") && !empty($is_comment)) {
                    continue;
                }
                
                $appealed_users[$dbw->field_by_name("user_id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
                );
            }
            
            $dbw->free_result();
            
            if (!$this->get_my_ignore_status_for_users($dbw, $appealed_users)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (count($appealed_users) > 0 && !$this->is_logged_in() &&
            !$this->is_ip_whitelisted(val_or_empty($_SERVER["REMOTE_ADDR"]), $ip_rules, $matched_rule) &&
            $diff = $this->check_guest_read_marker($dbw, $READ_MARKER)) {
            MessageHandler::setWarning(sprintf(text("ErrMessageGuestAppealsRestricted"), format_duration($diff)));
            $dbw->rollback_transaction();
            return false;
        }
        
        if (count($appealed_users) > 10) {
            MessageHandler::setError(sprintf(text("ErrTooManyAppeals"), 10));
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$this->handle_topic_ignorance_archive($dbw, $prfx, $tid)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if ($no_guests) {
            $author = quotes_or_null($dbw->escape($this->get_status_user_name()));
            $query = "update {$prfx}_post set
                  last_warned_by = $author,
                  last_warning = 'MSG(MsgGuestsDisallowed)'
                  where id = $post_id";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
          
            $topic_data = array();
            
            if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                                 {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name, is_private,
                                 email, user_name, author, last_host, send_notifications, interface_language
                                 from
                                 {$prfx}_topic
                                 inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                 left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                                 where {$prfx}_topic.id = $tid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $topic_data = array(
                    "topic_id" => $dbw->field_by_name("id"),
                    "topic_name" => $dbw->field_by_name("topic_name"),
                    "is_private" => $dbw->field_by_name("is_private"),
                    "forum_id" => $dbw->field_by_name("forum_id"),
                    "forum_name" => $dbw->field_by_name("forum_name"),
                    "author_id" => $dbw->field_by_name("user_id"),
                    "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                    "author_email" => $dbw->field_by_name("email"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "action" => "disallow_guests"
                );
            }
            
            $dbw->free_result();

            if (!$this->log_moderator_event($dbw, $prfx, $topic_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        } // no guests
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $_SESSION["last_post_hash"] = $last_post_hash;
        $_SESSION["user_name"] = reqvar("author");
        $_SESSION["last_posted_user"] = reqvar("author");
        
        if ($is_private) {
            $fid = "private";
        }
        
        $response["target_url"] = "topic.php?fid=$fid";
        if (!reqvar_empty("fpage")) {
            $response["target_url"] .= "&fpage=" . reqvar("fpage");
        }
        $response["target_url"] .= "&tid=$tid&gotonew=1";
        
        if (reqvar_empty("return_post")) {
            $return_post = $this->get_next_message($tid, 0);
        } elseif (reqvar("special_case") == "before_first_message") {
            // we should remain on the fist post after posting
            $return_post = reqvar("return_post");
        } elseif (reqvar("special_case") == "posting_from_search") {
            // we should remain on the current post when posting from search results
            $return_post = reqvar("return_post");
        } else {
            $return_post = $this->get_next_message($tid, reqvar("return_post"));
        }
        
        $response["return_post"] = $return_post;
        
        $response["target_url"] = "topic.php?fid=$fid";
        if (!reqvar_empty("fpage")) {
            $response["target_url"] .= "&fpage=" . reqvar("fpage");
        }
        $response["target_url"] .= "&tid=$tid&msg=" . $return_post;
        
        if (!$this->is_logged_in() || $forced_guest_posting) {
            set_cookie("q_last_guest_name", val_or_empty($_SESSION["last_posted_user"]), time() + 90 * 24 * 3600);
        }
        
        $this->track_hit($tid, $fid);
        $_SESSION["skip_next_hit"] = 1;

        $this->track_readmarker_activity();

        // Mailing
        
        if (!empty($publish_delay)) {
            return true;
        }
        
        if (!reqvar_empty("new_topic") && !$this->handle_request_moderation($tid)) {
            return false;
        }
        
        // get subscribed users
        // if a user ignores the current user or guests, do not notify him
        
        if (!$dbw->execute_query("select {$prfx}_topic_subscription.user_id, email, user_name, last_host, send_notifications, interface_language,
                             ignore_guests_whitelist, hide_comments, {$prfx}_ignored_topics.topic_id topic_ignored
                             from {$prfx}_topic_subscription
                             inner join {$prfx}_user on ({$prfx}_topic_subscription.user_id = {$prfx}_user.id)
                             left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                             where {$prfx}_topic_subscription.topic_id = $tid
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $topic_subscribers = array();
        
        while ($dbw->fetch_row()) {
            // This user ignores the topic, no notification
            if ($dbw->field_by_name("topic_ignored")) {
                continue;
            }
            
            // It is a comment post, and the user does not want to see comments
            if ($dbw->field_by_name("hide_comments") && !empty($is_comment)) {
                continue;
            }
            
            $topic_subscribers[$dbw->field_by_name("user_id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
            );
        }
        
        $dbw->free_result();
        
        if (!$this->get_my_ignore_status_for_users($dbw, $topic_subscribers)) {
            return false;
        }
        
        $citated_user_posts = array();
        $citation_subscribers = array();
        $post_citation_subscribers = array();
        
        if (!empty($citated_posts)) {
            $in_list = $dbw->escape(implode(", ", $citated_posts));
            
            // user subscribed to own messages
            
            if (!$dbw->execute_query("select {$prfx}_post.id, {$prfx}_post.user_id,
                                      email, user_name, last_host, send_notifications, interface_language,
                                      hide_comments, ignore_guests_whitelist, notify_citation, {$prfx}_ignored_topics.topic_id topic_ignored,
                                      {$prfx}_post.topic_id citated_topic_id, citated_topic.forum_id citated_forum_id
                                      from {$prfx}_post
                                      inner join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                                      inner join {$prfx}_topic on ({$prfx}_topic.id = $tid)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      inner join {$prfx}_topic citated_topic on ({$prfx}_post.topic_id = citated_topic.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id in ($in_list) and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      )
                                      order by {$prfx}_post.id")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                // This array is needed to distinguish between the email templates - new post in topic
                // or reply to the post of the subscriber.
                // If this new post is a reply to many posts, we take the last.
                $citated_user_posts[$dbw->field_by_name("user_id")] = $dbw->field_by_name("id");
                
                // This user ignores the topic, no notification
                if ($dbw->field_by_name("topic_ignored")) {
                    continue;
                }
                
                // It is a comment post, and the user does not want to see comments
                if ($dbw->field_by_name("hide_comments") && !empty($is_comment)) {
                    continue;
                }
                
                if (!$dbw->field_by_name("notify_citation")) {
                    continue;
                }
                
                // If this new post is a reply to many posts, we take the last.
                $citation_subscribers[$dbw->field_by_name("user_id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "citated_post" => $dbw->field_by_name("id"),
                    "citated_topic" => $dbw->field_by_name("citated_topic_id"),
                    "citated_forum" => $dbw->field_by_name("citated_forum_id"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
                );
            }
            
            $dbw->free_result();
            
            // user subscribed to a message
            
            if (!$dbw->execute_query("select {$prfx}_post.id, {$prfx}_post_subscription.user_id,
                                      email, user_name, last_host, send_notifications, interface_language,
                                      hide_comments, ignore_guests_whitelist, notify_citation, {$prfx}_ignored_topics.topic_id topic_ignored,
                                      {$prfx}_post.topic_id citated_topic_id, citated_topic.forum_id citated_forum_id
                                      from {$prfx}_post
                                      inner join {$prfx}_post_subscription on ({$prfx}_post.id = {$prfx}_post_subscription.post_id)
                                      inner join {$prfx}_user on ({$prfx}_post_subscription.user_id = {$prfx}_user.id)
                                      inner join {$prfx}_topic on ({$prfx}_topic.id = $tid)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      inner join {$prfx}_topic citated_topic on ({$prfx}_post.topic_id = citated_topic.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id in ($in_list) and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      )
                                      order by {$prfx}_post.id")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                // This user ignores the topic, no notification
                if ($dbw->field_by_name("topic_ignored")) {
                    continue;
                }
                
                // It is a comment post, and the user does not want to see comments
                if ($dbw->field_by_name("hide_comments") && !empty($is_comment)) {
                    continue;
                }
                
                // If this new post is a reply to many posts, we take the last.
                $post_citation_subscribers[$dbw->field_by_name("user_id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "citated_post" => $dbw->field_by_name("id"),
                    "citated_topic" => $dbw->field_by_name("citated_topic_id"),
                    "citated_forum" => $dbw->field_by_name("citated_forum_id"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language"),
                    "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist")
                );
            }
            
            $dbw->free_result();
            
            if (!$this->get_my_ignore_status_for_users($dbw, $citation_subscribers)) {
                return false;
            }
            
            if (!$this->get_my_ignore_status_for_users($dbw, $post_citation_subscribers)) {
                return false;
            }
        }
        
        $word_subscribers = array();
        
        if (!$dbw->execute_query("select {$prfx}_user.id user_id,
                                      email, user_name, last_host, send_notifications, interface_language, words_to_notify,
                                      hide_comments, ignore_guests_whitelist, notify_citation, {$prfx}_ignored_topics.topic_id topic_ignored
                                      from {$prfx}_post
                                      inner join {$prfx}_user on ({$prfx}_user.notify_on_words = 1)
                                      inner join {$prfx}_topic on ({$prfx}_topic.id = {$prfx}_post.topic_id)
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      left join {$prfx}_ignored_topics on ({$prfx}_user.id = {$prfx}_ignored_topics.user_id and {$prfx}_ignored_topics.topic_id = $tid)
                                      where {$prfx}_post.id = $post_id and
                                      ({$prfx}_topic.publish_delay <> 1 or {$prfx}_topic.user_id = {$prfx}_user.id) and
                                      ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = {$prfx}_user.id)) and
                                      (({$prfx}_forum.restricted_access in (0, 2) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1) or
                                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = {$prfx}_user.id) or
                                       ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = {$prfx}_user.id) and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1)
                                      ) and
                                        not exists (
                                            select 1 from
                                            {$prfx}_user usr
                                            left join {$prfx}_ignored_forums on (usr.id = {$prfx}_ignored_forums.user_id)
                                            where usr.id = {$prfx}_user.id and (forum_id = {$prfx}_forum.id or forum_id is NULL)
                                        )
                                      ")
        ) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            // This user ignores the topic, no notification
            if ($dbw->field_by_name("topic_ignored")) {
                continue;
            }
            
            // It is a comment post, and the user does not want to see comments
            if ($dbw->field_by_name("hide_comments") && !empty($is_comment)) {
                continue;
            }
            
            $word_subscribers[$dbw->field_by_name("user_id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "ignores_all_guests" => $dbw->field_by_name("ignore_guests_whitelist"),
                "words" => preg_split("/[\r\n]+/", $dbw->field_by_name("words_to_notify"), -1, PREG_SPLIT_NO_EMPTY)
            );
        }
        
        $dbw->free_result();
        
        if (!$this->get_my_ignore_status_for_users($dbw, $word_subscribers)) {
            return false;
        }
        
        // personal appeals
        
        // take possible new pasted citations of the top level only into concideration
        // $tmp_html is stripped from deep citation
        
        // get topic info
        
        $forum_id = "";
        $forum_name = "";
        $topic_name = "";
        
        if (!$dbw->execute_query("select {$prfx}_topic.name topic_name, forum_id, {$prfx}_forum.name forum_name, is_private
                             from {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $forum_id = $dbw->field_by_name("is_private") ? "private" : $dbw->field_by_name("forum_id");
            $forum_name = $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name");
            $topic_name = $dbw->field_by_name("topic_name");
        }
        
        $dbw->free_result();
        
        // to prevent the sending the redundant notifications about the same action
        // we track the users who are already notified
        $already_notified = array();
        
        foreach ($appealed_users as $uid => $sinfo) {
            // if the author ingnores the user, it cannot appeal him
            if ($this->is_user_ignored($uid)) {
                continue;
            }            
            
            // if the user self posted the message, he does not need to be notified about it
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                continue;
            }
            
            if (!empty($already_notified[$uid])) {
                continue;
            }
            
            $already_notified[$uid] = 1;
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{author_name}"] = reqvar("author");
            $params["{user_name}"] = $sinfo["name"];
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $post_id;
            
            $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id);
            
            $params["{forum_id}"] = $forum_id;
            $params["{forum_name}"] = $forum_name;
            $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
            
            $event_code = "MsgEventAttentionAsked";
            $email_template = "email_personal_appeal.txt";
            
            $params["{message}"] = $short_message;
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_id);
            
            // to check if someone was not notified
            unset($all_appealed_users[$sinfo["name"]]);
            
            if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                $params["{message}"] = $short_message;
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
            }
        }
        
        if (!empty($all_appealed_users)) {
            MessageHandler::setWarning(sprintf(text("WarnNotAllAppealed"), implode(", ", $all_appealed_users)));
        }
        
        foreach ($topic_subscribers as $uid => $sinfo) {
            // if the user self posted the message, he does not need to be notified about it
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                continue;
            }
            
            if (!empty($already_notified[$uid])) {
                continue;
            }
            
            $already_notified[$uid] = 1;

            $params = array();
            
            $params["todo"] = 1;
            $params["{author_name}"] = reqvar("author");
            $params["{user_name}"] = $sinfo["name"];
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $post_id;
            $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id);
            
            $params["{forum_id}"] = $forum_id;
            $params["{forum_name}"] = $forum_name;
            $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
            
            if ($is_private) {
                $email_template = (!reqvar_empty("new_topic")) ? "email_private_message.txt" : "email_private_answer.txt";
                
                // new message to the private topic is already signalized over the mark beneath the private menu item, we do not want to bother the user
                // with the two [new] tags and necessity to clear them twice.
                $event_code = "";
            } elseif (!empty($citated_user_posts[$uid])) {
                $params["{citated_post}"] = $citated_user_posts[$uid];
                $params["{citated_post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&msg=" . xrawurlencode($citated_user_posts[$uid]);
                $params["{citated_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&msg=" . xrawurlencode($citated_user_posts[$uid]);
                
                $event_code = "MsgEventCitatedMessageInTopic";
                $email_template = "email_post_citated.txt";
            } else {
                $event_code = "MsgEventNewMessageInTopic";
                $email_template = "email_post_added.txt";
            }
            
            if (!empty($event_code)) {
                $params["{message}"] = $short_message;
                $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
                
                $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_id);
            }
            
            if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                $params["{message}"] = $short_message;
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
            }
        }

        foreach ($citation_subscribers as $uid => $sinfo) {
            // if the user self posted the message, he does not need to be notified about it
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                continue;
            }
            
            if (!empty($already_notified[$uid])) {
                continue;
            }
            
            $already_notified[$uid] = 1;
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{author_name}"] = reqvar("author");
            $params["{user_name}"] = $sinfo["name"];
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $post_id;
            $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id);
            
            $params["{forum_id}"] = $forum_id;
            $params["{forum_name}"] = $forum_name;
            $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
            
            if ($is_private == 1) {
                $email_template = "email_private_answer.txt";
                
                // new message to the private topic is already signalized over the mark beneath the private menu item, we do not want to bother the user
                // with the two [new] tags and necessity to clear them twice.
                $event_code = "";
            } else {
                $params["{citated_post}"] = $sinfo["citated_post"];
                $params["{citated_post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
                $params["{citated_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
                
                $event_code = "MsgEventCitatedMessageInTopic";
                $email_template = "email_post_citated.txt";
            }
            
            if (!empty($event_code)) {
                $params["{message}"] = $short_message;
                $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
                
                $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_id);
            }
            
            if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                $params["{message}"] = $short_message;
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
            }
        }
        
        foreach ($post_citation_subscribers as $uid => $sinfo) {
            // if the user self posted the message, he does not need to be notified about it
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                continue;
            }
            
            if (!empty($already_notified[$uid])) {
                continue;
            }
            
            $already_notified[$uid] = 1;
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{author_name}"] = reqvar("author");
            $params["{user_name}"] = $sinfo["name"];
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $post_id;
            $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id);
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id);
            
            $params["{forum_id}"] = $forum_id;
            $params["{forum_name}"] = $forum_name;
            $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
            
            $event_code = "MsgEventCitatedSubscribedMessageInTopic";
            $email_template = "email_subscribed_post_citated.txt";
            
            $params["{citated_post}"] = $sinfo["citated_post"];
            $params["{citated_post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
            $params["{citated_post_url_relative}"] = "topic.php?fid=" . xrawurlencode($sinfo["citated_forum"]) . "&tid=" . xrawurlencode($sinfo["citated_topic"]) . "&msg=" . xrawurlencode($sinfo["citated_post"]);
            
            $params["{message}"] = $short_message;
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_id);
            
            if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                $params["{message}"] = $short_message;
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
            }
        }
        
        $assertion = "[^\s.,;&:!\=\?\-\+\(\)\[\]\{\}\/\*#']";
        
        foreach ($word_subscribers as $uid => $sinfo) {
            // if the user self posted the message, he does not need to be notified about it
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            if ((!$this->is_logged_in() || $this->is_master_admin()) && !empty($sinfo["ignores_all_guests"]) || !empty($sinfo["ignoring_me"])) {
                continue;
            }

            if (!empty($already_notified[$uid])) {
                continue;
            }

            $already_notified[$uid] = 1;

            $word_check_text = $message . $search_words_appendix;
            
            // We do not notify on words in the post citations
            // Because the notification has been already done when the original
            // post was posted.
            
            remove_post_citations($word_check_text, $word_check_text);
            
            // We have to handle the case if the phrase is a part of the nick.
            // If the phrase is only a part of a nick - we do not notify.
            // If the phrase is exactly a nick - we DO notify.
            
            if (preg_match_all("~(\[b\](.+?)(#\d+)?\[/b\]|\[quote=(.+?)(#\d+)?\])~u", $word_check_text, $matches, PREG_SET_ORDER)) {
                foreach ($matches as $match_set) {
                    $nick_name = "";
                    if (!empty($match_set[2])) {
                        $nick_name = $match_set[2];
                    } elseif (!empty($match_set[4])) {
                        $nick_name = $match_set[4];
                    } else {
                        continue;
                    }
                    
                    // If the nick name is exactly a phrase in the search phrase list, we do not remove it from the message
                    if (in_array($nick_name, $sinfo["words"])) {
                        continue;
                    }
                    
                    $word_check_text = str_replace($nick_name, "", $word_check_text);
                }
            }
            
            $pattern = "";
            foreach ($sinfo["words"] as $word) {
                $word_combinations = array();
                if ($this->get_unicore_words($word, $word_combinations)) {
                    foreach ($word_combinations as $word_combination) {
                        $pattern .= "(?<!$assertion)" . preg_p_escape($word_combination) . "(?!$assertion)|";
                    }
                } else {
                    $pattern .= "(?<!$assertion)" . preg_p_escape($word) . "(?!$assertion)|";
                }
            }
            
            $pattern = "/" . trim($pattern, "|") . "/miu";
            if (!preg_match_all($pattern, $word_check_text, $matches)) {
                continue;
            }
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{author_name}"] = reqvar("author");
            $params["{user_name}"] = $sinfo["name"];
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $post_id;
            
            $highlight = "&search_keys=" . xrawurlencode(implode("|", $matches[0]));
            $params["{post_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id) . $highlight;
            $params["{post_url_unread}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id) . $highlight;
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($post_id) . $highlight;
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($post_id) . $highlight;
            
            $params["{forum_id}"] = $forum_id;
            $params["{forum_name}"] = $forum_name;
            $params["{forum_url}"] = get_host_address($sinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id);
            
            $params["{words}"] = implode(", ", $matches[0]);
            
            $event_code = "MsgEventWordsMentionedInTopic";
            $email_template = "email_word_mentioned.txt";
            
            $params["{message}"] = $short_message;
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params, $post_id);
            
            if (!empty($sinfo["email"]) && !empty($sinfo["send_notifications"])) {
                $params["{message}"] = $short_message;
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $sinfo["interface_language"], get_host_address($sinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $sinfo["email"], $email_template, $params, $sinfo["interface_language"]);
            }
        }
        
        return true;
    } // post_message
    
    //-----------------------------------------------------------------
    function get_doctype_thumb($base_path, &$attachment_data)
    {
        $this->attachment_manager->get_doctype_thumb($base_path, $attachment_data);
    } // get_doctype_thumb
    
    //-----------------------------------------------------------------
    function send_attachment_and_exit(&$attachment_data)
    {
        $this->attachment_manager->send_attachment_and_exit($attachment_data);
    } // send_attachment_and_exit
    
    //-----------------------------------------------------------------
    function get_attachment_data($aid, $nr, &$attachment_data)
    {
        return $this->attachment_manager->get_attachment_data($aid, $nr, $attachment_data);
    } // get_attachment_data
    
    //-----------------------------------------------------------------
    function complain_message($pid)
    {
        global $settings;
        
        if (empty($pid) || !is_numeric($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        if (!$this->is_logged_in()) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (reqvar_empty("post_comment", true)) {
            MessageHandler::setError(text("ErrMessageEmpty"));
            MessageHandler::setErrorElement("post_comment");
            return false;
        }
        
        if (utf8_strlen(reqvar("post_comment")) > 3000) {
            MessageHandler::setError(sprintf(text("ErrTextTooLong"), 3000));
            MessageHandler::setErrorElement("post_comment");
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pid = $dbw->escape($pid);
        
        if (!$dbw->execute_query("select {$prfx}_post.author, {$prfx}_post.user_id, forum_id, topic_id, text_content
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $topic_id = "";
        $forum_id = "";
        $violator = "";
        $violator_id = "";
        $short_message = "";
        if ($dbw->fetch_row()) {
            $violator = $dbw->field_by_name("author");
            $violator_id = $dbw->field_by_name("user_id");
            $topic_id = $dbw->field_by_name("topic_id");
            $forum_id = $dbw->field_by_name("forum_id");
            $short_message = $dbw->field_by_name("text_content");
        } else {
            MessageHandler::setError(text("ErrNoPostSelected"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if ($this->check_blocked($forum_id)) {
            return false;
        }
        
        /*
        if ($this->is_blocked_in_topic($topic_id)) {
            return false;
        }
        */
        
        // check limits
        
        if (!empty($settings["max_messages_minute"]) && !$this->is_admin() && !$this->is_privileged() && !$this->is_forum_moderator($forum_id) && (!empty($topic_id) && !$this->is_topic_moderator($topic_id))) {
            $now = $dbw->format_datetime(time() - 60);
            $uid = $dbw->escape($this->get_user_id());
            
            if (!$dbw->execute_query("select count(*) cnt
                               from {$prfx}_events
                               where author_id = $uid and
                               event_code = 'msgeventmessagecomplained' and
                               event_time >= '$now'
                               ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $cnt = 0;
            
            while ($dbw->fetch_row()) {
                $cnt = $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
            
            if ($cnt >= $settings["max_messages_minute"]) {
                MessageHandler::setWarning(sprintf(text("ErrComplainLimitExceeded"), $settings["max_messages_minute"]));
                return false;
            }
        }
        
        // get forum moderators
        
        if (!$dbw->execute_query("select user_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_forum_moderator
                             inner join {$prfx}_user on ({$prfx}_forum_moderator.user_id = {$prfx}_user.id)
                             where forum_id in (select forum_id from {$prfx}_topic where id in (select topic_id from {$prfx}_post where id = $pid))
                             union
                             select user_id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_topic_moderator
                             inner join {$prfx}_user on ({$prfx}_topic_moderator.user_id = {$prfx}_user.id)
                             where topic_id in (select topic_id from {$prfx}_post where id = $pid)
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $moderators = array();
        
        while ($dbw->fetch_row()) {
            $moderators[$dbw->field_by_name("user_id")] = array(
                "name" => $dbw->field_by_name("user_name"),
                "email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // forum has no moderators, send to the administrators
        if (empty($moderators)) {
            if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                               from {$prfx}_user
                               where is_admin = 1
                               ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $moderators = array();
            
            while ($dbw->fetch_row()) {
                $moderators[$dbw->field_by_name("id")] = array(
                    "name" => $dbw->field_by_name("user_name"),
                    "email" => $dbw->field_by_name("email"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "interface_language" => $dbw->field_by_name("interface_language")
                );
            }
            
            $dbw->free_result();
        }
        
        // forum has neither moderators nor administrators, send to the master admin
        if (empty($moderators)) {
            $moderators[0] = array(
                "name" => text("Administrator"),
                "email" => $settings["receiver"],
                "send_notifications" => true,
                "last_host" => "",
                "interface_language" => defined('DEFAULT_LANGUAGE') ? DEFAULT_LANGUAGE : "en"
            );
        }
        
        // get topic info
        
        $tid = "";
        $forum_id = "";
        $forum_id_for_url = "";
        $forum_name = "";
        $topic_name = "";
        
        if (!$dbw->execute_query("select {$prfx}_topic.id, {$prfx}_topic.name topic_name, forum_id, {$prfx}_forum.name forum_name, is_private
                             from {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id in (select topic_id from {$prfx}_post where id = $pid)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("id");
            $topic_name = $dbw->field_by_name("topic_name");
            $forum_id = $dbw->field_by_name("forum_id");
            $forum_id_for_url = $dbw->field_by_name("is_private") ? "private" : $forum_id;
            $forum_name = $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name");
        }
        
        $dbw->free_result();
        
        foreach ($moderators as $uid => $minfo) {
            // if the actor and the receiver are the same, do not notify
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            $params = array();
            
            $params["todo"] = 1;
            $params["{user_name}"] = $minfo["name"];
            
            $params["{notifier}"] = $this->get_user_name();
            $params["{violator}"] = $violator;
            $params["{violator_id}"] = $violator_id;
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($tid) . "&gotonew=1";
            
            $params["{post_id}"] = $pid;
            $params["{post_url}"] = get_host_address($minfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($pid);
            $params["{post_url_unread}"] = get_host_address($minfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($pid);
            $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($tid) . "&setdone=1&msg=" . xrawurlencode($pid);
            $params["{post_url_unread_relative}"] = "topic.php?fid=" . xrawurlencode($forum_id_for_url) . "&tid=" . xrawurlencode($tid) . "&setdone=1&leave_unread=1&msg=" . xrawurlencode($pid);
            
            $params["{forum_id}"] = $forum_id;
            $params["{forum_name}"] = $forum_name;
            $params["{forum_url}"] = get_host_address($minfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($forum_id_for_url);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($forum_id_for_url);
            
            $params["{message}"] = $short_message;
            $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
            
            $params["{comment}"] = reqvar("post_comment");
            // it will be parsed by reading
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), "MsgEventMessageComplained", $params, $pid);
            
            if (!empty($minfo["email"])) {
                $params["{message}"] = $short_message;
                $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $minfo["interface_language"], get_host_address($minfo["last_host"]) . get_url_path(), 600);
                
                $params["{comment}"] = reqvar("post_comment");
                $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $minfo["interface_language"], get_host_address($minfo["last_host"]) . get_url_path());
                
                $this->email_manager->send_email($settings["default_sender"], $minfo["email"], "email_post_complained.txt", $params, $minfo["interface_language"]);
            }
        }
        
        MessageHandler::setInfo(text("MsgComplaintSent"));
        
        return true;
    } // complain_message
    
    //-----------------------------------------------------------------
    function load_version($post, $version, &$response)
    {
        global $READ_MARKER;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($post) || !is_numeric($post)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pid = $dbw->escape($post);
        
        if (!$dbw->execute_query("select topic_id, forum_id, {$prfx}_post.user_id, {$prfx}_post.read_marker
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $post_rm = "";
        $user_id = "";
        $topic_id = "";
        $forum_id = "";
        
        if ($dbw->fetch_row()) {
            $topic_id = $dbw->field_by_name("topic_id");
            $forum_id = $dbw->field_by_name("forum_id");
            $user_id = $dbw->field_by_name("user_id");
            $post_rm = $dbw->field_by_name("read_marker");
        } else {
            MessageHandler::setError(text("ErrNoPostSelected"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if (!$this->is_admin() && !$this->is_forum_moderator($forum_id) && !$this->is_topic_moderator($topic_id) && 
            !($post_rm == $READ_MARKER) && 
            !(!empty($user_id) && $user_id == $this->get_user_id())
           ) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        $vid = $dbw->escape($version);
        
        if (empty($vid) || !is_numeric($vid)) {
            $query = "select html_content from {$prfx}_post where id = $pid";
        } else {
            $query = "select html_content from {$prfx}_post_history where id = $vid";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $response["version_content"] = Emoji::Decode($dbw->field_by_name("html_content"));
            postprocess_message($response["version_content"]);
        } else {
            MessageHandler::setError(text("ErrNoPostSelected"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        return true;
    } // load_version
    
    //-----------------------------------------------------------------
    function warn_message($pid, &$response)
    {
        global $settings;

        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (!empty($settings["archive_mode"])) {
            MessageHandler::setError(text("MsgArchiveMode"));
            return false;
        }
        
        if (empty($pid) || !is_numeric($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        if (reqvar_empty("post_comment", true)) {
            MessageHandler::setError(text("ErrMessageEmpty"));
            MessageHandler::setErrorElement("post_comment");
            return false;
        }
        
        if (utf8_strlen(reqvar("post_comment")) > 3000) {
            MessageHandler::setError(sprintf(text("ErrTextTooLong"), 3000));
            MessageHandler::setErrorElement("post_comment");
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pid = $dbw->escape($pid);
        
        if (!$dbw->execute_query("select {$prfx}_post.id, topic_id, forum_id,
                             {$prfx}_post.read_marker, {$prfx}_post.user_id, {$prfx}_topic.name topic_name, is_private, text_content,
                             {$prfx}_forum.name forum_name, {$prfx}_user.user_name, email, {$prfx}_post.author, last_host, send_notifications, interface_language,
                             is_system
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $post_data = array();
        
        if ($dbw->fetch_row()) {
            $post_data = array(
                "post_id" => $dbw->field_by_name("id"),
                "topic_id" => $dbw->field_by_name("topic_id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "topic_private" => $dbw->field_by_name("is_private"),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "author_id" => $dbw->field_by_name("user_id"),
                "author_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "is_system" => $dbw->field_by_name("is_system"),
                "comment" => reqvar("post_comment"),
                "short_message" => $dbw->field_by_name("text_content"),
                "action" => "warn_post"
            );
        } else {
            MessageHandler::setError(text("ErrNoPostSelected"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if (!empty($post_data["is_system"])) {
            MessageHandler::setError(text("ErrSystemMessageСhange"));
            return false;
        }
        
        if (!$this->is_admin() && !$this->is_forum_moderator($post_data["forum_id"]) && !$this->is_topic_moderator($post_data["topic_id"])) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if ($this->check_blocked($post_data["forum_id"])) {
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $moderator_name = quotes_or_null($dbw->escape($this->get_user_name()));
        $warning = quotes_or_null($dbw->escape(Emoji::Encode(reqvar("post_comment"))));
        // it will be parsed by reading
        
        if (reqvar("post_comment") == "-") {
            $moderator_name = "NULL";
            $warning = "NULL";
        }
        
        $query = "update {$prfx}_post set
              last_warned_by = $moderator_name,
              last_warning = $warning
              where id = $pid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // do not track the events in the private topics
        if (empty($post_data["topic_private"]) && reqvar("post_comment") != "-") {
            
            if (!$this->log_moderator_event($dbw, $prfx, $post_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response["warned_by"] = escape_html($this->get_user_name());
        $response["warning"] = $post_data["comment"];
        $this->format_manager->format_message_simple($dbw, $prfx, $response["warning"], "warning");
        postprocess_message($response["warning"]);
        
        if (reqvar("post_comment") == "-") {
            $response["warned_by"] = "";
            $response["warning"] = "";
            return true;
        }
        
        // if the actor and the receiver are the same, do not notify
        if (empty($post_data["author_id"]) || val_or_empty($post_data["author_id"]) == $this->get_user_id()) {
            return true;
        }
        
        $params = array();
        
        $params["todo"] = 1;
        $params["{user_name}"] = $post_data["author_name"];
        
        $params["{moderator_name}"] = $this->get_user_name();
        
        $fid_for_url = $post_data["forum_name"] == "PRIVATE_MESSAGES" ? "private" : $post_data["forum_id"];
        
        $params["{topic_id}"] = $post_data["topic_id"];
        $params["{topic_name}"] = $post_data["topic_name"];
        $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&gotonew=1";
        
        $params["{post_id}"] = $pid;
        $params["{post_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($pid);
        $params["{post_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid_for_url) . "&tid=" . xrawurlencode($post_data["topic_id"]) . "&setdone=1&msg=" . xrawurlencode($pid);
        
        $params["{forum_id}"] = $post_data["forum_id"];
        $params["{forum_name}"] = $post_data["forum_name"];
        $params["{forum_url}"] = get_host_address($post_data["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid_for_url);
        $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid_for_url);
        
        $params["{comment}"] = $post_data["comment"];
        // it will be parsed by reading
        
        $params["{message}"] = $post_data["short_message"];
        $this->format_manager->format_message_simple($dbw, $prfx, $params["{message}"], "short_message");
        
        $anonym_appendix = "";
        $anonym_appendix2 = "";
        $this->get_anonym_appendixes($post_data["author_id"], $anonym_appendix, $anonym_appendix2);
        
        $this->log_user_event($post_data["author_id"], $this->get_user_id(), $this->get_user_name(), "MsgEventMessageWarned{$anonym_appendix2}", $params, $pid);
        
        if (!empty($post_data["author_email"]) && !empty($post_data["send_notifications"])) {
            $params["{message}"] = $post_data["short_message"];
            $this->format_manager->format_email_message($dbw, $prfx, $params["{message}"], $post_data["interface_language"], get_host_address($post_data["last_host"]) . get_url_path(), 600);
            
            $params["{comment}"] = $post_data["comment"];
            $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $post_data["interface_language"], get_host_address($post_data["last_host"]) . get_url_path());
            
            $this->email_manager->send_email($settings["default_sender"], $post_data["author_email"], "email_post_warned{$anonym_appendix}.txt", $params, $post_data["interface_language"]);
        }
        
        return true;
    } // warn_message
    
    //-----------------------------------------------------------------
    function is_ip_blocked($ip)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $ip = $dbw->escape($ip);
        $now = $dbw->format_datetime(time());
        
        if (!$dbw->execute_query("select ip
                             from {$prfx}_ip_blocked
                             where ip = '$ip' and tp = 'ip' and (block_expires is NULL or block_expires > '$now')")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            return true;
        }
        
        $dbw->free_result();
        
        return false;
    } // is_ip_blocked
    
    //-----------------------------------------------------------------
    function is_um_blocked($um)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $um = $dbw->escape($um);
        $now = $dbw->format_datetime(time());
        
        if (!$dbw->execute_query("select ip
                             from {$prfx}_ip_blocked
                             where ip = '$um' and tp = 'um' and (block_expires is NULL or block_expires > '$now')")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            return true;
        }
        
        $dbw->free_result();
        
        return false;
    } // is_um_blocked
    
    //-----------------------------------------------------------------
    function is_blocked_in_topic($tid)
    {
        if ($this->is_admin()) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            return false;
        }
        
        $tid = $dbw->escape($tid);
        
        if (!$dbw->execute_query("select user_id from {$prfx}_topic_blocked where user_id = $uid and topic_id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            
            MessageHandler::setError(text("ErrAccountIsBlockedInTopic"));
            return true;
        }
        
        $dbw->free_result();
        
        return false;
    } // is_blocked_in_topic
    
    //-----------------------------------------------------------------
    function check_blocked($fid)
    {
        if ($this->is_admin()) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        $forum_name = "-";
        
        if (!empty($fid) && !empty($uid)) {
            if (!is_numeric($fid)) {
                return false;
            }
            
            $fid = $dbw->escape($fid);
            
            if (!$dbw->execute_query("select name from {$prfx}_forum where id = $fid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $forum_name = $dbw->field_by_name("name");
                
                if ($forum_name == "PRIVATE_MESSAGES") {
                    $forum_name = text("PrivateTopics");
                }
            }
            
            $dbw->free_result();
            
            if (!$dbw->execute_query("select block_expires
                               from {$prfx}_forum_blocked
                               where user_id = $uid and forum_id = $fid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $blocked = false;
            $block_expires = "";
            $block_time_left = "";
            
            if ($dbw->fetch_row()) {
                $blocked = true;
                $block_expires = "";
                $block_time_left = "";
                if ($dbw->field_by_name("block_expires")) {
                    if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                        $blocked = false;
                    } else {
                        $block_expires = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                        $block_time_left = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                    }
                }
            }
            
            $dbw->free_result();
            
            if ($blocked) {
                if (!empty($block_expires)) {
                    MessageHandler::setError(sprintf(text("ErrAccountIsBlockedUntilOnForum"), $forum_name, $block_expires, $block_time_left));
                } else {
                    MessageHandler::setError(sprintf(text("ErrAccountIsBlockedOnForum"), $forum_name));
                }
                return true;
            }
        }
        
        if ($this->is_moderator()) {
            return false;
        }
        
        if (!empty($uid)) {
            if (!$dbw->execute_query("select approved, activated, blocked, block_expires, block_reason, privileged,
                               registration_date
                               from {$prfx}_user
                               where id = $uid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $approved = false;
            $activated = false;
            $privileged = false;
            
            $time_since_registration = 0;
            
            $blocked = false;
            $block_reason = "";
            $block_expires = "";
            $block_time_left = "";
            
            if ($dbw->fetch_row()) {
                $approved = $dbw->field_by_name("approved");
                $activated = $dbw->field_by_name("activated");
                $privileged = $dbw->field_by_name("privileged");
                
                $time_since_registration = time() - xstrtotime($dbw->field_by_name("registration_date"));
                
                $blocked = $dbw->field_by_name("blocked");
                $block_reason = Emoji::Decode($dbw->field_by_name("block_reason"));
                $block_expires = "";
                $block_time_left = "";
                if ($dbw->field_by_name("block_expires")) {
                    if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                        $blocked = false;
                    } else {
                        $block_expires = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                        $block_time_left = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                    }
                }
            }
            
            $dbw->free_result();
            
            if ($blocked && !empty($block_reason)) {
                $this->format_manager->format_message_simple($dbw, $prfx, $block_reason, "warning");
                postprocess_message($block_reason);
                
                $block_reason = text("Reason") . ":\n\n[html]" . $block_reason . "[/html]";
            }
            
            if (!$activated) {
                MessageHandler::setError(text("ErrAccountNotActivated"));
                return true;
            }
            
            if (!$approved) {
                MessageHandler::setError(text("ErrAccountNotApproved"));
                return true;
            }
            
            if ($blocked) {
                if (!empty($block_expires)) {
                    MessageHandler::setError(sprintf(text("ErrAccountIsBlockedUntil"), $block_expires, $block_time_left), $block_reason);
                } else {
                    MessageHandler::setError(text("ErrAccountIsBlocked"), $block_reason);
                }
                
                return true;
            }
            
            // restrictions
            
            if (!empty($privileged)) {
                return false;
            }
            
            $err = "";
            
            if (empty($fid)) {
                return false;
            }
            
            if (!$dbw->execute_query("select no_guests, restricted_access, access_duration, access_message_count,
                               protected_by_password, password
                               from {$prfx}_forum
                               where id = $fid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $access_duration = 0;
            $access_message_count = 0;
            $protected_by_password = false;
            
            if ($dbw->fetch_row()) {
                $protected_by_password = $dbw->field_by_name("protected_by_password");
                
                if (($dbw->field_by_name("no_guests") || $dbw->field_by_name("restricted_access") == 2) && $dbw->field_by_name("protected_by_password") == 0) {
                    $access_duration = $dbw->field_by_name("access_duration");
                    $access_message_count = $dbw->field_by_name("access_message_count");
                }
            }
            
            $dbw->free_result();
            
            if (!empty($access_duration) && $time_since_registration < $access_duration * 24 * 3600) {
                $err .= text("MinDurationComment") . ": " . $access_duration . "\n";
            }
            
            if (!empty($access_message_count)) {
                $query = "select count(*) cnt
                  from {$prfx}_post
                  where
                  user_id = $uid and
                  topic_id not in (select id from {$prfx}_topic where is_private > 0)";
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $message_count = 0;
                if ($dbw->fetch_row()) {
                    $message_count = $dbw->field_by_name("cnt");
                }
                
                $dbw->free_result();
                
                if ($message_count < $access_message_count) {
                    $err .= text("MinMessageCountComment") . ": " . $access_message_count . "\n";
                }
            }
            
            if (!empty($err)) {
                $err = sprintf(text("ErrMessagePostNotAllowed"), $forum_name) . ":\n\n" . trim($err);
                
                MessageHandler::setError($err);
                return true;
            }
            
            if ($protected_by_password && empty($_SESSION["verified_protected_forums"][$fid])) {
                MessageHandler::setError(sprintf(text("ErrForumNotAccessible"), $forum_name));
                return true;
            }
            
            return false;
        } // if logged user
        
        // guests and IP
        $ip = $dbw->escape(val_or_empty($_SERVER["REMOTE_ADDR"]));
        
        if (!$dbw->execute_query("select block_expires, block_reason
                             from {$prfx}_ip_blocked
                             where ip = '$ip' and tp = 'ip'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $blocked = false;
        $block_expires = "";
        $block_reason = "";
        $block_time_left = "";
        
        if ($dbw->fetch_row()) {
            $blocked = true;
            $block_reason = Emoji::Decode($dbw->field_by_name("block_reason"));
            $block_expires = "";
            $block_time_left = "";
            if ($dbw->field_by_name("block_expires")) {
                if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                    $blocked = false;
                } else {
                    $block_expires = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                    $block_time_left = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                }
            }
        }
        
        $dbw->free_result();
        
        if (!empty($block_reason)) {
            $this->format_manager->format_message_simple($dbw, $prfx, $block_reason, "warning");
            postprocess_message($block_reason);
            
            $block_reason = text("Reason") . ":\n\n[html]" . $block_reason . "[/html]";
        }
        
        if ($blocked) {
            if (!empty($block_expires)) {
                MessageHandler::setError(sprintf(text("ErrIPIsBlockedUntil"), val_or_empty($_SERVER["REMOTE_ADDR"]), $block_expires, $block_time_left), $block_reason);
            } else {
                MessageHandler::setError(sprintf(text("ErrIPIsBlocked"), val_or_empty($_SERVER["REMOTE_ADDR"])), $block_reason);
            }
            return true;
        }
        
        if (reqvar_empty("user_marker")) {
            return false;
        }
        
        // guests and FingerPrint
        
        $user_marker = $dbw->escape(reqvar("user_marker"));
        
        if (!$dbw->execute_query("select block_expires, block_reason
                             from {$prfx}_ip_blocked
                             where ip = '$user_marker' and tp = 'um'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $blocked = false;
        $block_reason = "";
        $block_expires = "";
        $block_time_left = "";
        
        if ($dbw->fetch_row()) {
            $blocked = true;
            $block_reason = Emoji::Decode($dbw->field_by_name("block_reason"));
            $block_expires = "";
            $block_time_left = "";
            if ($dbw->field_by_name("block_expires")) {
                if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                    $blocked = false;
                } else {
                    $block_expires = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                    $block_time_left = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                }
            }
        }
        
        $dbw->free_result();
        
        if (!empty($block_reason)) {
            $this->format_manager->format_message_simple($dbw, $prfx, $block_reason, "warning");
            postprocess_message($block_reason);
            
            $block_reason = text("Reason") . ":\n\n[html]" . $block_reason . "[/html]";
        }
        
        if ($blocked) {
            if (!empty($block_expires)) {
                MessageHandler::setError(sprintf(text("ErrFingerPrintIsBlockedUntil"), $block_expires, $block_time_left), $block_reason);
            } else {
                MessageHandler::setError(text("ErrFingerPrintIsBlocked"), $block_reason);
            }
            return true;
        }
        
        return false;
    } // check_blocked
    
    //-----------------------------------------------------------------
    function clear_if_ignored(&$author_id, &$author, &$author_readmarker, &$author_online, &$author_ignored, $fid, $tid)
    {
        global $READ_MARKER;

        if (empty($_SESSION["hide_ignored"]) ||
            !empty($_SESSION["forum_moderator"][$fid]) ||
            !empty($_SESSION["topic_moderator"][$tid])
        ) {
            return;
        }
        
        if ($author_readmarker == $READ_MARKER) {
            return false;
        }

        if (!empty($author_id)) {
            if (!empty($_SESSION["ignored_users"][$author_id])) {
                $author_id = "";
                $author = "[" . text("ignored") . "]";
                $author_online = 0;
                $author_ignored = true;
            }
        } elseif ((!empty($_SESSION["ignore_guests_whitelist"]) && empty($_SESSION["ignored_guests_whitelist"])) || // ignores all guests
            (!empty($_SESSION["ignore_guests_blacklist"]) && !empty($_SESSION["ignored_guests_blacklist"][utf8_strtolower($author)])) || // ignores guests in the list
            (!empty($_SESSION["ignore_guests_whitelist"]) && empty($_SESSION["ignored_guests_whitelist"][utf8_strtolower($author)])) || // ignores guests not in the list
            (!empty($_SESSION["ignore_new_guests"]) && empty($_SESSION["ignored_new_guests"][$author_readmarker])) // ignores new guests
        ) {
            $author_id = "";
            $author = "[" . text("ignored") . "]";
            $author_online = 0;
            $author_ignored = true;
        }
    } // clear_if_ignored
    
    //-----------------------------------------------------------------
    function is_user_ignored($uid)
    {
        return !empty($_SESSION["ignored_users"][$uid]);
    } // is_user_ignored
    
    //-----------------------------------------------------------------
    function is_guest_ignored($guest, $read_marker)
    {
        global $READ_MARKER;
        
        if ($read_marker == $READ_MARKER) {
            return 0;
        }
        
        if (empty($_SESSION["ignore_guests_blacklist"]) && empty($_SESSION["ignore_guests_whitelist"]) && empty($_SESSION["ignore_new_guests"])) {
            return 0;
        }
        
        if (!empty($_SESSION["ignore_new_guests"]) && !empty($_SESSION["ignored_new_guests"][$read_marker])) {
            return 2;
        }

        // the user ignores all guests
        if (!empty($_SESSION["ignore_guests_whitelist"]) && empty($_SESSION["ignored_guests_whitelist"])) {
            return 1;
        }
        
        if (!empty($_SESSION["ignore_guests_blacklist"]) && !empty($_SESSION["ignored_guests_blacklist"][utf8_strtolower($guest)])) {
            return 1;
        }
        
        if (!empty($_SESSION["ignore_guests_whitelist"]) && empty($_SESSION["ignored_guests_whitelist"][utf8_strtolower($guest)])) {
            return 1;
        }

        return 0;
    } // is_guest_ignored
    
    //------------------------------------------------------
    function check_topic_limit($fid, &$limit, &$time_to_next)
    {
        global $settings;
        global $READ_MARKER;
        
        if (empty($settings["max_topics_day"])) {
            return true;
        }
        
        $limit = $settings["max_topics_day"];
        $time_to_next = 0;
        
        if ($this->is_admin() || $this->is_forum_moderator($fid) || $this->is_privileged()) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $fid = $dbw->escape($fid);
        $uid = $this->get_user_id();
        
        $first_topic_date = time() - 24 * 3600;
        $now = $dbw->format_datetime($first_topic_date);
        
        if (empty($uid)) {
            // we use readmarker because it is a cookie and remains longer
            $rm = $dbw->escape($READ_MARKER);
            $query = "select count(*) cnt, min(creation_date) first_topic_date
                from {$prfx}_topic
                where read_marker = '$rm' and creation_date >= '$now' and publish_delay <> 1 and is_private < 1";
        } elseif ($this->get_private_forum_id() == $fid) {
            // we count topics for the private messages separately
            $uid = $dbw->escape($uid);
            $receiver_id = $dbw->escape(reqvar("receiver"));
            if (empty($receiver_id) || !is_numeric($receiver_id)) {
                $receiver_id = 0;
            }
            $query = "select count(*) cnt, min(creation_date) first_topic_date
                from {$prfx}_topic
                inner join {$prfx}_private_topics on ({$prfx}_topic.id = {$prfx}_private_topics.topic_id and participant_id = $receiver_id)
                where
                user_id = $uid and
                creation_date >= '$now' and
                publish_delay <> 1 and
                is_private > 0";
        } else {
            // we do not count topics for the private messages and moderated forums
            $uid = $dbw->escape($uid);
            $query = "select count(*) cnt, min(creation_date) first_topic_date
                from {$prfx}_topic where
                user_id = $uid and
                creation_date >= '$now' and
                publish_delay <> 1 and
                is_private < 1 and
                not exists (select 1 from {$prfx}_forum_moderator where user_id = $uid and {$prfx}_forum_moderator.forum_id = {$prfx}_topic.forum_id)";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $cnt = 0;
        if ($dbw->fetch_row()) {
            $cnt = $dbw->field_by_name("cnt");
            $first_topic_date = xstrtotime($dbw->field_by_name("first_topic_date"));
        }
        
        $dbw->free_result();
        
        if ($cnt >= $settings["max_topics_day"]) {
            $time_to_next = $first_topic_date - (time() - 24 * 3600);
            return true;
        }
        
        return true;
    } // check_topic_limit
    
    //------------------------------------------------------
    function check_read_marker_last_activity($read_marker)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        // Protection against cluttering the guest list.
        // The guest list is filled by the guest name who were active
        // within the last KEEP_ONLINE_PERIOD minutes.
        // If a visitor, changes the guest name repeatedly, all new
        // names may clutter the guest list.
        //
        // From the other side, we want to show a guest in the online list
        // if a normal guest comes to forum again.
        //
        // To avoid the cluttering, we do:
        //
        // We set the last_posted_user to a value ONLY:
        //
        // - if it is empty and last activity was before KEEP_ONLINE_PERIOD minutes ago
        // - if the guest wrote a post
        //
        // If there was no last activity, the guest is totally new. We do not set the
        // last_posted_user.
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $read_marker = $dbw->escape($read_marker);
        
        $query = "select last_activity from {$prfx}_read_marker_activity where read_marker = '$read_marker'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            return false;
        }
        
        $last_activity = xstrtotime($dbw->field_by_name("last_activity"));
        
        $dbw->free_result();
        
        if ((time() - KEEP_ONLINE_PERIOD - 60) < $last_activity) {
            return false;
        }
        
        return true;
    } // check_read_marker_last_activity
    
    //------------------------------------------------------
    function check_guest_read_marker(&$dbw, $read_marker)
    {
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $read_marker = $dbw->escape($read_marker);
        
        $min_allowed_readmarker_age = defined('MIN_ALLOWED_READMARKER_AGE') ? MIN_ALLOWED_READMARKER_AGE : 8;
        
        $query = "select first_activity from {$prfx}_read_marker_activity where read_marker = '$read_marker'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return 0;
        }
        
        $first_activity = time();
        if ($dbw->fetch_row()) {
            $first_activity = xstrtotime($dbw->field_by_name("first_activity"));
        }
        
        $dbw->free_result();
        
        $readmarker_age_diff = $min_allowed_readmarker_age * 3600 - (time() - $first_activity);
        
        // prohibit all geust in this time range
        if (date("G") >= 3 && date("G") < 9) {
            //$readmarker_age_diff = $min_allowed_readmarker_age * 3600;
        }
        
        if ($readmarker_age_diff > 0) {
            return $readmarker_age_diff;
        }
        
        return 0;
    } // check_guest_read_marker
    
    //------------------------------------------------------
    function check_message_limit($fid, $tid, $new_topic)
    {
        global $settings;
        global $READ_MARKER;
        
        if ($this->is_admin() || $this->is_privileged()) {
            return true;
        }
        
        if ($this->is_forum_moderator($fid) || (!empty($tid) && $this->is_topic_moderator($tid) && $this->is_privileged_topic_moderator())) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $this->get_user_id();
        
        $message_restrictions = array();

        if (!empty($settings["max_messages_minute"])) {
            $message_restrictions[] = array(
                "limit" => $settings["max_messages_minute"],
                "start" => $dbw->format_datetime(time() - 60),
                "message" => text("MessageLimitMinuteText")
            );
        }
        
        if (!empty($settings["max_messages_hour"])) {
            $message_restrictions[] = array(
                "limit" => $settings["max_messages_hour"],
                "start" => $dbw->format_datetime(time() - 60*60),
                "message" => text("MessageLimitHourText")
            );
        }
        
        if (!empty($settings["max_messages_day"])) {
            $message_restrictions[] = array(
                "limit" => $settings["max_messages_day"],
                "start" => $dbw->format_datetime(time() - 24*60*60),
                "message" => text("MessageLimitDayText")
            );
        }
        
        foreach($message_restrictions as $restrcition)
        {
            if (empty($uid)) {
                // we use readmarker because it is a cookie and remains longer
                $rm = $dbw->escape($READ_MARKER);
                $query = "select count(*) cnt from {$prfx}_post where read_marker = '$rm' and creation_date >= '$restrcition[start]'";
            } else {
                $uid = $dbw->escape($uid);
                $query = "select count(*) cnt from {$prfx}_post where user_id = $uid and creation_date >= '$restrcition[start]'";
            }
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $cnt = 0;
            if ($dbw->fetch_row()) {
                $cnt = $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
            
            if ($cnt >= $restrcition["limit"]) {
                MessageHandler::setWarning(sprintf(text("ErrMessageLimitExceeded"), sprintf($restrcition["message"], $restrcition["limit"])));
                return false;
            }
        }
        
        if (empty($settings["max_topics_day"]) || empty($new_topic)) {
            return true;
        }
        
        $limit = 0;
        $time_to_next = 0;
        
        if (!$this->check_topic_limit($fid, $limit, $time_to_next)) {
            return false;
        }
        
        if ($time_to_next > 0) {
            MessageHandler::setWarning(sprintf(text("ErrTopicLimitExceeded"), $limit, format_duration($time_to_next)));
            return false;
        }
        
        return true;
    } // check_message_limit
    
    //-----------------------------------------------------------------
    function get_private_forum_id()
    {
        $fid = -1;
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return $fid;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        if (!$rodbw->execute_query("select id from {$prfx}_forum where name = 'PRIVATE_MESSAGES'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return $fid;
        }
        
        if ($rodbw->fetch_row()) {
            $fid = $rodbw->field_by_name("id");
        }
        
        $rodbw->free_result();
        
        return $fid;
    } // get_private_forum_id
    
    //-----------------------------------------------------------------
    function get_topic_forum_id($tid, &$fid, &$hide_from_robots)
    {
        $fid = -1;
        
        if (empty($tid) || !is_numeric($tid)) {
            return $fid;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return $fid;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->execute_query("select forum_id, hide_from_robots
                             from {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return $fid;
        }
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
            $hide_from_robots = $dbw->field_by_name("hide_from_robots");
        }
        
        $dbw->free_result();
        
        return $fid;
    } // get_topic_forum_id
    
    //-----------------------------------------------------------------
    function get_message_topic_id(&$pid, &$tid, &$fid, &$is_pid_pinned)
    {
        global $READ_MARKER;
        
        $tid = -1;
        $fid = -1;
        
        $current_uid = $this->get_user_id();
        
        if (empty($pid) || !is_numeric($pid)) {
            return $tid;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return $tid;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->execute_query("select topic_id, forum_id,
                                  {$prfx}_post.deleted, {$prfx}_post.user_id, {$prfx}_post.author, {$prfx}_post.pinned, {$prfx}_post.read_marker,
                                  {$prfx}_topic.deleted topic_deleted,
                                  is_comment, profiled_topic
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return $tid;
        }
        
        $show_deleted = !empty($_SESSION["show_deleted"]);
        $strong_ignored = false;
        $target_post_deleted_and_not_visible = false;
        
        if ($dbw->fetch_row()) {
            $tid = $dbw->field_by_name("topic_id");
            $fid = $dbw->field_by_name("forum_id");
            
            $uid = $dbw->field_by_name("user_id");
            $deleted = $dbw->field_by_name("deleted");
            $topic_deleted = $dbw->field_by_name("topic_deleted");
            $is_pid_pinned = $dbw->field_by_name("pinned");
            
            if ($topic_deleted) {
                $show_deleted = true;
            }
            
            if (!$this->is_admin() && !$this->is_forum_moderator($fid) && !$this->is_topic_moderator($tid)) {
                $show_deleted = false;
            }
            
            if (!empty($uid) && !empty($_SESSION["ignored_users"][$uid])) {
                $strong_ignored = true;
            }
            
            if (empty($uid) && $this->is_guest_ignored($dbw->field_by_name("author"), $dbw->field_by_name("read_marker"))) {
                $strong_ignored = true;
            }
            
            if ($dbw->field_by_name("profiled_topic") && $dbw->field_by_name("is_comment") &&
                $dbw->field_by_name("read_marker") != $READ_MARKER && !empty($_SESSION["hide_comments"])
            ) {
                $strong_ignored = true;
            }
            
            if ($this->is_topic_moderator($tid) || $this->is_forum_moderator($fid) || empty($_SESSION["hide_ignored"])) {
                $strong_ignored = false;
            }
            
            // By going to a definite post, we allow the owner to see it,
            // even if is is deleted.
            // For that, we have to add the clause OR ({$prfx}_post.id = $pid),
            // but only in the case if the post is not present in the selection.
            // It can only be if the post is deleted and the user is not moderator
            // or is moderator but not in the deleted-mode.
            
            // the moderator may see it, but the post is not in the selection
            if ($deleted) {
                $target_post_deleted_and_not_visible = true;
                
                if ($this->is_admin() || $this->is_forum_moderator($fid) || $this->is_topic_moderator($tid)) {
                    $target_post_deleted_and_not_visible = false;
                } elseif ($dbw->field_by_name("read_marker") == $READ_MARKER) {
                    $target_post_deleted_and_not_visible = false;
                }
            }
        }
        
        $dbw->free_result();
        
        // if the desired message is ignored or deleted and the user does have access to it, we find the next valid one
        if ($strong_ignored || $target_post_deleted_and_not_visible) {
            $is_pid_pinned = 0;
            $target_pid = "";
            
            MessageHandler::setWarning(text("ErrMessageIgnoredOrDeleted"));
            
            $deleted_where_appendix = $this->get_deleted_where_appendix($dbw, $prfx, $show_deleted, true);
            $ignore_post_where_appendix = $this->get_ignore_post_where_appendix($dbw, $prfx);
            
            $where = "where topic_id = $tid and {$prfx}_post.id > $pid and {$prfx}_post.pinned <> 1
                           $ignore_post_where_appendix
                           $deleted_where_appendix";
            
            if (!$dbw->execute_query($this->get_query_next_valid_topic_post($prfx, $where))) {
                MessageHandler::setError(text("ErrQueryFailed"),
                    $dbw->get_last_error() . "\n\n" .
                    $dbw->get_last_query()
                );
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $target_pid = $dbw->field_by_name("id");
            }
            
            $dbw->free_result();
            
            if (!empty($target_pid)) {
                $pid = $target_pid;
                return $tid;
            }
            
            // there is no valid next message,
            // we take the last valid message before

            $where = "where topic_id = $tid and {$prfx}_post.id < $pid and {$prfx}_post.pinned <> 1
                           $ignore_post_where_appendix
                           $deleted_where_appendix";

            if (!$dbw->execute_query($this->get_query_previous_valid_topic_post($prfx, $where))) {
                MessageHandler::setError(text("ErrQueryFailed"),
                    $dbw->get_last_error() . "\n\n" .
                    $dbw->get_last_query()
                );
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $target_pid = $dbw->field_by_name("id");
            }
            
            $dbw->free_result();
            
            $pid = $target_pid;
            return $tid;
        } // if deleted or ignored
        
        return $tid;
    } // get_message_topic_id
    
    //-----------------------------------------------------------------
    function leave_topic($tid)
    {
        global $settings;
        
        if (empty($tid) || !is_numeric($tid)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape($tid);
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            return true;
        }
        
        if (!$dbw->execute_query("select name, is_private, {$prfx}_topic_moderator.topic_id is_moderator, forum_id
                             from
                             {$prfx}_topic
                             left join {$prfx}_topic_moderator on ({$prfx}_topic.id = {$prfx}_topic_moderator.topic_id and {$prfx}_topic_moderator.user_id = $uid)
                             where id = $tid and
                             {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where participant_id = $uid)
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $fid = "";
        $topic_name = "";
        $is_private = 0;
        $is_moderator = false;
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
            $topic_name = $dbw->field_by_name("name");
            $is_private = $dbw->field_by_name("is_private");
            $is_moderator = $dbw->field_by_name("is_moderator");
        } else {
            $dbw->free_result();
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        $dbw->free_result();
        
        if ($is_private == 2 && $is_moderator) {
            MessageHandler::setError(text("ErrCanNotLeaveOwnTopic"));
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_private_topics where topic_id = $tid and participant_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_subscription where topic_id = $tid and user_id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $participants = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_user
                             where id <> $uid and
                             id in (select participant_id from {$prfx}_private_topics where topic_id = $tid)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $participants[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_read_markers where topic_id = $tid and read_marker in (select read_marker from {$prfx}_user where id = $uid)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // text("MsgUserPrivateTopicLeft")
        $sys_post_id = "";
        if (!$this->post_sys_message($dbw, $tid, "MSG(MsgUserPrivateTopicLeft): [uid=$uid].", $sys_post_id)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgLeaveTopicSuccess"));
        
        foreach ($participants as $user_id => $uinfo) {
            $params = array();
            
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{author_name}"] = $this->get_user_name();
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=private&tid=" . xrawurlencode($tid);
            $params["{topic_url_relative}"] = "topic.php?fid=private&tid=" . xrawurlencode($tid);
            
            if (empty($uinfo["user_email"]) || empty($uinfo["send_notifications"])) {
                continue;
            }
            
            $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_private_left.txt", $params, $uinfo["interface_language"]);
        }
        
        return true;
    } // leave_topic
    
    //-----------------------------------------------------------------
    function add_remove_private_members($tid)
    {
        global $settings;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (empty($tid) || !is_numeric($tid)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        $tid = $dbw->escape($tid);
        
        if (!$dbw->execute_query("select {$prfx}_topic.name topic_name,
                             {$prfx}_topic.user_id, is_private,
                             {$prfx}_topic.forum_id
                             from
                             {$prfx}_topic
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $fid = "";
        $topic_name = "";
        
        if ($dbw->fetch_row()) {
            if ($dbw->field_by_name("user_id") != $uid || $dbw->field_by_name("is_private") <> 2) {
                $dbw->free_result();
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
            
            $topic_name = $dbw->field_by_name("topic_name");
            $fid = $dbw->field_by_name("forum_id");
        } else {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        if ($this->check_blocked($fid)) {
            return false;
        }
        
        if (empty($_REQUEST["topic_members"])) {
            $in_list = "-1";
        } else {
            $in_list = $dbw->escape(implode(",", $_REQUEST["topic_members"]));
        }
        
        // get list of the newly added users
        
        $new_members = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_user
                             where id in ($in_list) and id <> $uid and
                             id not in (select participant_id from {$prfx}_private_topics where topic_id = $tid union select -1 from {$prfx}_dual)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $new_members[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        $added_list = implode(",", array_keys($new_members));
        if (empty($added_list)) {
            $added_list = "-1";
        }
        
        // check if the private messages are turned off
        
        if (!$dbw->execute_query("select user_name
                             from {$prfx}_user
                             where id in ($added_list) and no_private_messages = 1
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setError(sprintf(text("ErrUserNoPrivateMessages"), $dbw->field_by_name("user_name")));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // check ignore list
        
        if (!$dbw->execute_query("select user_name
                             from {$prfx}_user
                             where id in (select user_id from {$prfx}_ignored_users where ignored_user_id = $uid and user_id in ($added_list))
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setError(sprintf(text("ErrUserIgnored"), $dbw->field_by_name("user_name")));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // get list of the removed users
        
        $removed_members = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_user
                             where id not in ($in_list) and id <> $uid and
                             id in (select participant_id from {$prfx}_private_topics where topic_id = $tid union select -1 from {$prfx}_dual)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $removed_members[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_private_topics
                             where topic_id = $tid and participant_id <> $uid and participant_id not in ($in_list)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // delete the subscription of the left users
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_subscription where topic_id = $tid and user_id <> $uid and user_id not in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->execute_query("insert into {$prfx}_private_topics
                             (topic_id, participant_id)
                             select $tid, id from {$prfx}_user
                             where id in ($in_list) and id <> $uid and
                             id not in (select participant_id from {$prfx}_private_topics where topic_id = $tid union select -1 from {$prfx}_dual)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // subscribe added users
        
        if (!$dbw->execute_query("insert into {$prfx}_topic_subscription
                             (topic_id, user_id)
                             select $tid, id from {$prfx}_user
                             where id in ($in_list) and id <> $uid and
                             id not in (select user_id from {$prfx}_topic_subscription where topic_id = $tid union select -1 from {$prfx}_dual)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // Now, the participants are final.
        
        if (!$dbw->execute_query("select count(*) cnt from {$prfx}_private_topics where topic_id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $cnt = 0;
        if ($dbw->fetch_row()) {
            $cnt = $dbw->field_by_name("cnt") - 1;
        }
        
        $dbw->free_result();
        
        if (!empty($settings["max_private_members"]) && $cnt > $settings["max_private_members"] && !$this->is_privileged()) {
            MessageHandler::setError(sprintf(text("MsgErrMaxMembersPerPrivateTopic"), $cnt, $settings["max_private_members"]));
            
            $dbw->rollback_transaction();
            return false;
        }
        
        // inform already existing participants - those who was not removed and not newly added,
        // they recieves special notification about adding or removal
        
        $participants = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_user
                             where id not in ($added_list) and id <> $uid and
                             id in (select participant_id from {$prfx}_private_topics where topic_id = $tid)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $participants[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        $sys_post_id = "";
        
        if (!empty($new_members)) {
            $new_in_list = "";
            $new_member_list = "";
            foreach ($new_members as $user_id => $uinfo) {
                $new_member_list .= "[uid=$user_id], ";
                $new_in_list .= $user_id . ", ";
            }
            $new_member_list = trim($new_member_list, ", ");
            $new_in_list = trim($new_in_list, ", ");
            
            $now = $dbw->format_datetime(time() - 1);
            $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
            $ip = $dbw->escape($ip);
            
            $query = "insert into {$prfx}_topic_read_markers
               (topic_id, read_marker, last_read_date, ip)
                select
               $tid, read_marker, '$now', '$ip'
               from {$prfx}_user where id in ($new_in_list)";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            // text("MsgUsersPrivateTopicInvited")
            if (!$this->post_sys_message($dbw, $tid, "MSG(MsgUsersPrivateTopicInvited): $new_member_list.", $sys_post_id)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!empty($removed_members)) {
            $removed_in_list = "";
            $removed_member_list = "";
            foreach ($removed_members as $user_id => $uinfo) {
                $removed_member_list .= "[uid=$user_id], ";
                $removed_in_list .= $user_id . ", ";
            }
            $removed_member_list = trim($removed_member_list, ", ");
            $removed_in_list = trim($removed_in_list, ", ");
            
            if (!$dbw->execute_query("delete from {$prfx}_topic_read_markers where topic_id = $tid and read_marker in (select read_marker from {$prfx}_user where id in ($removed_in_list))")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            // text("MsgUsersPrivateTopicRemoved")
            if (!$this->post_sys_message($dbw, $tid, "MSG(MsgUsersPrivateTopicRemoved): $removed_member_list.", $sys_post_id)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $new_member_list = "";
        foreach ($new_members as $user_id => $uinfo) {
            $new_member_list .= $uinfo["user_name"] . "\n";
            
            $params = array();
            
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{author_name}"] = $this->get_user_name();
            
            $params["{forum_id}"] = $fid;
            $params["{forum_name}"] = text("PrivateTopics");

            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=private&tid=" . xrawurlencode($tid);
            $params["{topic_url_relative}"] = "topic.php?fid=private&tid=" . xrawurlencode($tid);
            
            $this->log_user_event($user_id, $this->get_user_id(), $this->get_user_name(), "MsgEventPrivateInvitation", $params);
            
            if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_private_invitation.txt", $params, $uinfo["interface_language"], $uinfo["interface_language"]);
            }
        }
        
        $removed_member_list = "";
        foreach ($removed_members as $user_id => $uinfo) {
            $removed_member_list .= $uinfo["user_name"] . "\n";
            
            $params = array();
            
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{author_name}"] = $this->get_user_name();
            
            $params["{forum_id}"] = $fid;
            $params["{forum_name}"] = text("PrivateTopics");

            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=private&tid=" . xrawurlencode($tid);
            $params["{topic_url_relative}"] = "topic.php?fid=private&tid=" . xrawurlencode($tid);
            
            $this->log_user_event($user_id, $this->get_user_id(), $this->get_user_name(), "MsgEventPrivateRemoval", $params);
            
            if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_private_removal.txt", $params, $uinfo["interface_language"]);
            }
        }
        
        MessageHandler::setInfo(text("MsgPrivateMembersRenewed"));
        
        if (count($new_members) == 0 && count($removed_members) == 0) {
            return true;
        }
        
        $new_member_list = trim($new_member_list);
        $removed_member_list = trim($removed_member_list);
        
        $params = array();
        
        $params["{author_name}"] = $this->get_user_name();
        
        $params["{forum_id}"] = $fid;
        $params["{forum_name}"] = text("PrivateTopics");

        $params["{topic_id}"] = $tid;
        $params["{topic_name}"] = $topic_name;
        $params["{topic_url_relative}"] = "topic.php?fid=private&tid=" . xrawurlencode($tid);
        
        $params["{invited_names}"] = $new_member_list;
        $params["{removed_names}"] = $removed_member_list;
        
        foreach ($participants as $user_id => $uinfo) {
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=private&tid=" . xrawurlencode($tid);
            
            if (empty($uinfo["user_email"]) || empty($uinfo["send_notifications"])) {
                continue;
            }
            
            if (count($new_members) > 0) {
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_private_user_invited.txt", $params, $uinfo["interface_language"]);
            }
            
            if (count($removed_members) > 0) {
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_private_user_removed.txt", $params, $uinfo["interface_language"]);
            }
        }
        
        return true;
    } // add_remove_private_members
    
    //-----------------------------------------------------------------
    function block_unblock_topic_users($tid)
    {
        global $settings;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (empty($tid) || !is_numeric($tid)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        $tid = $dbw->escape($tid);
        
        if (!$dbw->execute_query("select {$prfx}_topic.name topic_name,
                             {$prfx}_topic.forum_id, {$prfx}_forum.name forum_name,
                             is_private
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $fid = 0;
        $topic_name = "";
        $forum_name = "";
        
        if ($dbw->fetch_row()) {
            if ($dbw->field_by_name("is_private") > 0) {
                $dbw->free_result();
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
            
            $fid = $dbw->field_by_name("forum_id");
            
            $topic_name = $dbw->field_by_name("topic_name");
            $forum_name = $dbw->field_by_name("forum_name");
        } else {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // check if the current user is the forum moderator or topic moderator
        if (!$this->is_admin() && !$this->is_forum_moderator($fid) && !$this->is_topic_moderator($tid)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (empty($_REQUEST["blocked_users"])) {
            $in_list = "-1";
        } else {
            $in_list = $dbw->escape(implode(",", $_REQUEST["blocked_users"]));
        }
        
        // check if the blocked user is admin or moderator
        
        if (!$dbw->execute_query("select user_name
                             from {$prfx}_user
                             where id in ($in_list) and
                             (is_admin = 1
                              or id in (select user_id from {$prfx}_topic_moderator where topic_id = $tid)
                              or id in (select user_id from {$prfx}_forum_moderator where forum_id = $fid)
                             )
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setError(text("ErrModeratorBlockNotAllowed"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // get list of the newly blocked users
        
        $new_blocked_members = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_user
                             where id in ($in_list) and id <> $uid and
                             id not in (select user_id from {$prfx}_topic_blocked where topic_id = $tid union select -1 from {$prfx}_dual)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $new_blocked_members[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        // get list of the unblocked users
        
        $unblocked_members = array();
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_user
                             where id not in ($in_list) and id <> $uid and
                             id in (select user_id from {$prfx}_topic_blocked where topic_id = $tid union select -1 from {$prfx}_dual)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $unblocked_members[$dbw->field_by_name("id")] = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        }
        
        $dbw->free_result();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_blocked
                             where topic_id = $tid and user_id not in ($in_list)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->execute_query("insert into {$prfx}_topic_blocked
                             (topic_id, user_id)
                             select $tid, id from {$prfx}_user
                             where id in ($in_list) and id <> $uid and
                             id not in (select user_id from {$prfx}_topic_blocked where topic_id = $tid union select -1 from {$prfx}_dual)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $event_data = array();
        $event_data["topic_id"] = $tid;
        $event_data["topic_name"] = $topic_name;
        $event_data["forum_id"] = $fid;
        $event_data["forum_name"] = $forum_name;
        
        foreach ($new_blocked_members as $user_id => $uinfo) {
            $event_data["action"] = "block_user_topic";
            $event_data["comment"] = reqvar("comment");
            
            $event_data["author_id"] = val_or_empty($user_id);
            $event_data["author_name"] = val_or_empty($uinfo["user_name"]);
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        foreach ($unblocked_members as $user_id => $uinfo) {
            $event_data["action"] = "unblock_user_topic";
            
            $event_data["author_id"] = val_or_empty($user_id);
            $event_data["author_name"] = val_or_empty($uinfo["user_name"]);
            
            if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $sys_post_id = "";
        
        if (!empty($new_blocked_members)) {
            $new_blocked_member_list = "";
            foreach ($new_blocked_members as $user_id => $uinfo) {
                $new_blocked_member_list .= "[uid=$user_id], ";
            }
            $new_blocked_member_list = trim($new_blocked_member_list, ", ");
            
            // text("MsgUsersTopicBlocked")
            if (!$this->post_sys_message($dbw, $tid, "MSG(MsgUsersTopicBlocked): $new_blocked_member_list.", $sys_post_id)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!empty($unblocked_members)) {
            $unblocked_member_list = "";
            foreach ($unblocked_members as $user_id => $uinfo) {
                $unblocked_member_list .= "[uid=$user_id], ";
            }
            $unblocked_member_list = trim($unblocked_member_list, ", ");
            
            // text("MsgUsersTopicUnblocked")
            if (!$this->post_sys_message($dbw, $tid, "MSG(MsgUsersTopicUnblocked): $unblocked_member_list.", $sys_post_id)) {
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        foreach ($new_blocked_members as $user_id => $uinfo) {
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($user_id, $anonym_appendix, $anonym_appendix2);
            
            $params = array();
            
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{moderator_name}"] = $this->get_user_name();
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid);
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid);
            
            $params["{forum_id}"] = $fid;
            $params["{forum_name}"] = $forum_name;
            $params["{forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $params["{comment}"] = reqvar("comment");
            // will be parsed by reading
            
            $this->log_user_event($user_id, $this->get_user_id(), $this->get_user_name(), "MsgEventUserTopicBlocked{$anonym_appendix2}", $params);
            
            if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                $params["{comment}"] = reqvar("comment");
                $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $uinfo["interface_language"], get_host_address($uinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_user_blocked_in_topic{$anonym_appendix}.txt", $params, $uinfo["interface_language"], $uinfo["interface_language"]);
            }
        }
        
        foreach ($unblocked_members as $user_id => $uinfo) {
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($user_id, $anonym_appendix, $anonym_appendix2);

            $params = array();
            
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{moderator_name}"] = $this->get_user_name();
            
            $params["{topic_id}"] = $tid;
            $params["{topic_name}"] = $topic_name;
            $params["{topic_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid);
            $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid);
            
            $params["{forum_id}"] = $fid;
            $params["{forum_name}"] = $forum_name;
            $params["{forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
            $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
            
            $params["{comment}"] = reqvar("comment");
            // will be parsed by reading
            
            $this->log_user_event($user_id, $this->get_user_id(), $this->get_user_name(), "MsgEventUserTopicUnblocked{$anonym_appendix2}", $params);
            
            if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                $params["{comment}"] = reqvar("comment");
                $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $uinfo["interface_language"], get_host_address($uinfo["last_host"]) . get_url_path(), 600);
                
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "email_user_unblocked_in_topic{$anonym_appendix}.txt", $params, $uinfo["interface_language"]);
            }
        }
        
        MessageHandler::setInfo(text("MsgBlockedMembersRenewed"));
        
        return true;
    } // block_unblock_topic_users
    
    //-----------------------------------------------------------------
    function block_unblock_user_in_topic($action, $tid, $uid, &$response)
    {
        global $settings;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (empty($tid) || !is_numeric($tid)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        if (empty($uid) || !is_numeric($uid)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        $uid = $dbw->escape($uid);
        $tid = $dbw->escape($tid);
        
        if (!$dbw->execute_query("select {$prfx}_topic.name topic_name,
                             {$prfx}_topic.forum_id, {$prfx}_forum.name forum_name,
                             is_private
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $fid = 0;
        $topic_name = "";
        $forum_name = "";
        
        if ($dbw->fetch_row()) {
            if ($dbw->field_by_name("is_private") > 0) {
                $dbw->free_result();
                MessageHandler::setError(text("ErrActionNotAllowed"));
                return false;
            }
            
            $fid = $dbw->field_by_name("forum_id");
            
            $topic_name = $dbw->field_by_name("topic_name");
            $forum_name = $dbw->field_by_name("forum_name");
        } else {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // check if the current user is the forum moderator or topic moderator
        if (!$this->is_admin() && !$this->is_forum_moderator($fid) && !$this->is_topic_moderator($tid)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if ($this->check_blocked($fid)) {
            return false;
        }
        
        // check if the blocked user is admin or moderator
        
        if (!$dbw->execute_query("select user_name
                             from {$prfx}_user
                             where id = $uid and
                             (is_admin = 1
                              or id in (select user_id from {$prfx}_topic_moderator where topic_id = $tid)
                              or id in (select user_id from {$prfx}_forum_moderator where forum_id = $fid)
                             )
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            MessageHandler::setError(text("ErrModeratorBlockNotAllowed"));
            $dbw->free_result();
            return false;
        }
        
        $dbw->free_result();
        
        // get user info
        
        if (!$dbw->execute_query("select id, email, user_name, last_host, send_notifications, interface_language
                             from {$prfx}_user
                             where id = $uid
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $user_info = array();
        
        if ($dbw->fetch_row()) {
            $user_info = array(
                "user_email" => $dbw->field_by_name("email"),
                "user_name" => $dbw->field_by_name("user_name"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language")
            );
        } else {
            $dbw->free_result();
            MessageHandler::setError(sprintf(text("ErrUserDoesNotExist"), $uid));
            return false;
        }
        
        $dbw->free_result();
        
        $anonym_appendix = "";
        $anonym_appendix2 = "";
        $this->get_anonym_appendixes($uid, $anonym_appendix, $anonym_appendix2);
        
        $event_data = array();
        
        if ($action == "unblock_user_in_topic") {
            $event_data["action"] = "unblock_user_topic";
            
            $sys_msg = "MsgUsersTopicUnblocked";
            $event_code = "MsgEventUserTopicUnblocked{$anonym_appendix2}";
            $email_template = "email_user_unblocked_in_topic{$anonym_appendix}.txt";
            $convert_action_link = "block_user_in_topic";
            $msg = text("MsgUserUnblocked");
            
            // if already unblocked
            
            if (!$dbw->execute_query("select user_id
                               from {$prfx}_topic_blocked
                               where user_id = $uid and topic_id = $tid
                              ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if (!$dbw->fetch_row()) {
                $dbw->free_result();
                MessageHandler::setInfo(text("MsgUserUnblocked"));
                return true;
            }
            
            $dbw->free_result();
        } else {
            $event_data["action"] = "block_user_topic";
            
            $sys_msg = "MsgUsersTopicBlocked";
            $event_code = "MsgEventUserTopicBlocked{$anonym_appendix2}";
            $email_template = "email_user_blocked_in_topic{$anonym_appendix}.txt";
            $convert_action_link = "unblock_user_in_topic";
            $msg = text("MsgUserBlocked");
            
            // if already blocked
            
            if (!$dbw->execute_query("select user_id
                               from {$prfx}_topic_blocked
                               where user_id = $uid and topic_id = $tid
                              ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $dbw->free_result();
                MessageHandler::setInfo(text("MsgUserBlocked"));
                return true;
            }
            
            $dbw->free_result();
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "unblock_user_in_topic") {
            if (!$dbw->execute_query("delete from {$prfx}_topic_blocked
                               where user_id = $uid and topic_id = $tid
                              ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        } else {
            if (!$dbw->execute_query("insert into {$prfx}_topic_blocked
                               (topic_id, user_id)
                               select $tid, id from {$prfx}_user
                               where id = $uid and
                               id not in (select user_id from {$prfx}_topic_blocked where topic_id = $tid union select -1 from {$prfx}_dual)
                              ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $event_data["topic_id"] = $tid;
        $event_data["topic_name"] = $topic_name;
        $event_data["forum_id"] = $fid;
        $event_data["forum_name"] = $forum_name;
        
        $event_data["author_id"] = val_or_empty($uid);
        $event_data["author_name"] = val_or_empty($user_info["user_name"]);
        
        $event_data["comment"] = reqvar("comment");
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        $umsg = "[uid=$uid]";
        $sys_post_id = "";
        if (!$this->post_sys_message($dbw, $tid, "MSG($sys_msg): $umsg.", $sys_post_id)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response['convert_action_link'] = $convert_action_link;
        
        $params = array();
        
        $params["{user_name}"] = $user_info["user_name"];
        $params["{moderator_name}"] = $this->get_user_name();
        
        $params["{topic_id}"] = $tid;
        $params["{topic_name}"] = $topic_name;
        $params["{topic_url}"] = get_host_address($user_info["last_host"]) . get_url_path() . "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid);
        $params["{topic_url_relative}"] = "topic.php?fid=" . xrawurlencode($fid) . "&tid=" . xrawurlencode($tid);
        
        $params["{forum_id}"] = $fid;
        $params["{forum_name}"] = $forum_name;
        $params["{forum_url}"] = get_host_address($user_info["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($fid);
        $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($fid);
        
        $params["{comment}"] = reqvar("comment");
        // will be parsed by reading
        
        $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), $event_code, $params);
        
        if (!empty($user_info["user_email"]) && !empty($user_info["send_notifications"])) {
            $params["{comment}"] = reqvar("comment");
            $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $user_info["interface_language"], get_host_address($user_info["last_host"]) . get_url_path(), 600);
            
            $this->email_manager->send_email($settings["default_sender"], $user_info["user_email"], $email_template, $params, $user_info["interface_language"]);
        }
        
        MessageHandler::setInfo($msg);
        
        return true;
    } // block_unblock_user_in_topic
    
    //-----------------------------------------------------------------
    function get_private_member_list($tid, &$topic_members)
    {
        if (empty($tid) || !is_numeric($tid)) {
            return true;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape($tid);
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            return true;
        }
        
        if (!$dbw->execute_query("select participant_id, user_name
                             from
                             {$prfx}_private_topics
                             inner join {$prfx}_user on ({$prfx}_private_topics.participant_id = {$prfx}_user.id)
                             where topic_id = $tid and participant_id <> $uid
                             order by user_name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topic_members[$dbw->field_by_name("participant_id")] = $dbw->field_by_name("user_name");
        }
        
        $dbw->free_result();
        
        measure_action_time("get private members");
        
        return true;
    } // get_private_member_list
    
    //-----------------------------------------------------------------
    function get_topic_blocked_users_list($tid, &$blocked_users)
    {
        if (empty($tid) || !is_numeric($tid)) {
            return true;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape($tid);
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        if (!$dbw->execute_query("select user_id, user_name
                             from
                             {$prfx}_topic_blocked
                             inner join {$prfx}_user on ({$prfx}_topic_blocked.user_id = {$prfx}_user.id)
                             where topic_id = $tid and user_id <> $uid
                             order by user_name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $blocked_users[$dbw->field_by_name("user_id")] = $dbw->field_by_name("user_name");
        }
        
        $dbw->free_result();
        
        measure_action_time("get tp. blocked users");
        
        return true;
    } // get_topic_blocked_users_list
    
    //-----------------------------------------------------------------
    function get_user_forum_activity($uid, &$activity_data, &$total_post_count)
    {
        if (empty($uid) || !is_numeric($uid)) {
            return true;
        }
        
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($uid);
        
        $where = "where {$prfx}_forum.name <> 'PRIVATE_MESSAGES' and {$prfx}_daily_statistics.user_id = $uid";
        
        if (!$this->is_logged_in()) {
            $where .= " and {$prfx}_forum.restricted_access = 0";
        } elseif ($this->is_admin()) {
            // no restrxtions
        } else {
            $current_uid = $rodbw->escape($this->get_user_id());
            if (empty($current_uid)) {
                $current_uid = 0;
            }
            
            $where .= " and ({$prfx}_forum.restricted_access = 0 or
                       {$prfx}_forum.restricted_access = 2 or
                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = $current_uid) or
                       {$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = $current_uid)
                      )";
        }
        
        if (!$rodbw->execute_query("select {$prfx}_forum.id, {$prfx}_forum.name, sum(post_count) cnt
                             from
                             {$prfx}_daily_statistics
                             inner join {$prfx}_forum on ({$prfx}_daily_statistics.forum_id = {$prfx}_forum.id)
                             $where
                             group by {$prfx}_forum.id, {$prfx}_forum.name
                             having sum(post_count) > 0
                             order by {$prfx}_forum.name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $total_visible_post_count = 0;
        
        while ($rodbw->fetch_row()) {
            $total_visible_post_count += $rodbw->field_by_name("cnt");
            $activity_data[$rodbw->field_by_name("id")] = array(
                "name" => $rodbw->field_by_name("name"),
                "cnt" => $rodbw->field_by_name("cnt")
            );
        }
        
        $rodbw->free_result();
        
        if ($total_post_count > $total_visible_post_count) {
            $activity_data[0] = array(
                "name" => "#hidden_forums",
                "cnt" => $total_post_count - $total_visible_post_count
            );
        }
        
        measure_action_time("get user forum act. stat.");
        
        return true;
    } // get_user_forum_activity
    
    //-----------------------------------------------------------------
    function vote(&$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (reqvar_empty("tid") || !is_numeric(reqvar("tid"))) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $uid = $this->get_user_id();
        if (empty($uid)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (!$this->has_access_to_topic(reqvar("tid"), false)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (empty($_REQUEST["poll_votes"])) {
            MessageHandler::setError(text("ErrNoOptionChosen"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        $tid = $dbw->escape(reqvar("tid"));
        
        if (!$dbw->execute_query("select forum_id
                             from
                             {$prfx}_topic
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $fid = 0;
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
        }
        
        $dbw->free_result();
        
        if ($this->check_blocked($fid)) {
            return false;
        }
        
        if ($this->is_blocked_in_topic($tid)) {
            return false;
        }
        
        if (!$this->is_admin() && !$this->is_privileged()) {
            $time_since_registration = 0;
            if (!$this->get_time_since_registration($time_since_registration, $dbw, $prfx)) {
                return false;
            }
            
            if ($time_since_registration < 1 * 24 * 3600) {
                MessageHandler::setError(sprintf(text("ErrMessageVoteRateNotAllowed"), 1));
                return false;
            }
        }
        
        if (!$dbw->execute_query("select 1
                             from
                             {$prfx}_poll_user_answers
                             where user_id = $uid and option_id in (select id from {$prfx}_poll_options where topic_id = $tid)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            MessageHandler::setError(text("ErrAlreadyVoted"));
            return false;
        }
        
        $dbw->free_result();
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!is_array($_REQUEST["poll_votes"])) {
            $_REQUEST["poll_votes"] = array($_REQUEST["poll_votes"]);
        }
        
        $now = $dbw->format_datetime(time());
        
        foreach ($_REQUEST["poll_votes"] as $key => $poid) {
            if (!$dbw->execute_query("insert into {$prfx}_poll_user_answers
                               (user_id, option_id, tm)
                               values
                               ($uid, $poid, '$now')")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response["target_url"] = "topic.php?fid=$fid";
        if (!reqvar_empty("fpage")) {
            $response["target_url"] .= "&fpage=" . reqvar("fpage");
        }
        $response["target_url"] .= "&tid=" . $tid;
        $response["target_url"] .= "&voted=" . time();
        if (!reqvar_empty("pid")) {
            $response["target_url"] .= "&msg=" . reqvar("pid");
            $response["return_post"] = reqvar("pid");
        }
        
        return true;
    } // vote
    
    //-----------------------------------------------------------------
    function cancel_vote(&$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (reqvar_empty("tid") || !is_numeric(reqvar("tid"))) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $uid = $this->get_user_id();
        if (empty($uid)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        $tid = $dbw->escape(reqvar("tid"));
        
        if (!$dbw->execute_query("select forum_id
                             from
                             {$prfx}_topic
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $fid = 0;
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
        }
        
        $dbw->free_result();
        
        if (!$dbw->execute_query("select tm
                             from
                             {$prfx}_poll_user_answers
                             where user_id = $uid and option_id in (select id from {$prfx}_poll_options where topic_id = $tid)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        $vote_time = xstrtotime($dbw->field_by_name("tm"));
        
        $dbw->free_result();
        
        // edit period expired
        if (time() - $vote_time > (get_allow_edit_period() + 10 * 60)) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_poll_user_answers
                                  where user_id = $uid and option_id in (select id from {$prfx}_poll_options where topic_id = $tid)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response["target_url"] = "topic.php?fid=$fid";
        if (!reqvar_empty("fpage")) {
            $response["target_url"] .= "&fpage=" . reqvar("fpage");
        }
        $response["target_url"] .= "&tid=" . $tid;
        $response["target_url"] .= "&voted=" . time();
        if (!reqvar_empty("pid")) {
            $response["target_url"] .= "&msg=" . reqvar("pid");
            $response["return_post"] = reqvar("pid");
        }
        
        return true;
    } // cancel_vote
    
    //-----------------------------------------------------------------
    function open_close_poll($action, &$response)
    {
        global $READ_MARKER;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (reqvar_empty("tid") || !is_numeric(reqvar("tid"))) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $tid = $dbw->escape(reqvar("tid"));
        
        if (!$dbw->execute_query("select {$prfx}_topic.id, forum_id, user_id,
                             {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name,
                             user_name, author, {$prfx}_topic.read_marker, poll_results_delayed
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                             where {$prfx}_topic.id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $author_readmarker = 0;
        $fid = 0;
        $poll_results_delayed = 0;
        
        $event_data = array();
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
            $author_readmarker = $dbw->field_by_name("read_marker");
            $poll_results_delayed = $dbw->field_by_name("poll_results_delayed");
            
            $event_data = array(
                "topic_id" => $dbw->field_by_name("id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "author_id" => $dbw->field_by_name("user_id"),
                "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "action" => $action
            );
        }
        
        $dbw->free_result();
        
        if ($this->check_blocked($fid)) {
            return false;
        }
        
        if ($this->is_blocked_in_topic($tid)) {
            return false;
        }
        
        if (!$this->is_admin() && !$this->is_forum_moderator($fid) && !$this->is_topic_moderator($fid) && $author_readmarker != $READ_MARKER) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($action == "close_poll") {
            $target_state = $poll_results_delayed == 1 ? 2 : 3;
        } else {
            $target_state = $poll_results_delayed == 2 ? 1 : 0;
        }
        
        $query = "update {$prfx}_topic set poll_results_delayed = $target_state where id = $tid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response["target_url"] = "topic.php?fid=$fid";
        if (!reqvar_empty("fpage")) {
            $response["target_url"] .= "&fpage=" . reqvar("fpage");
        }
        $response["target_url"] .= "&tid=" . $tid;
        $response["target_url"] .= "&voted=" . time();
        if (!reqvar_empty("pid")) {
            $response["target_url"] .= "&msg=" . reqvar("pid");
            $response["return_post"] = reqvar("pid");
        }
        
        return true;
    } // open_close_poll
    
    //-----------------------------------------------------------------
    function track_readmarker_activity()
    {
        global $READ_MARKER;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $rm = $dbw->escape($READ_MARKER);
        
        $now = $dbw->format_datetime(time());
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        $author = quotes_or_null($dbw->escape($this->get_user_name()));
        $agent = quotes_or_null($dbw->escape(val_or_empty($_SERVER["HTTP_USER_AGENT"])));
        
        if (!$dbw->execute_query("update {$prfx}_read_marker_activity
                             set current_name_hits = 0, current_name_start = '$now'
                             where read_marker = '$rm' and (author is NULL or author <> $author)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());

            $dbw->rollback_transaction();
            return false;
        }
        
        // if the new author is empty (through reset), we let the last non empty author
        if ($author == "NULL") {
            $author = "author";
        }

        if (!$dbw->execute_query("update {$prfx}_read_marker_activity
                             set last_activity = '$now', ip = '$ip', hits = hits + 1, current_name_hits = current_name_hits + 1,
                             author = $author, user_agent = $agent
                             where read_marker = '$rm'
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // track_readmarker_activity
    
    //-----------------------------------------------------------------
    function track_hit($tid, $fid)
    {
        global $READ_MARKER;
        
        if (!empty($fid) && !is_numeric($fid)) {
            return false;
        }
        
        if (!empty($tid) && !is_numeric($tid)) {
            return false;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $fid = $dbw->escape($fid);
        if (empty($fid)) {
            $fid = "NULL";
        }
        
        $tid = $dbw->escape($tid);
        if (empty($tid)) {
            $tid = "NULL";
        }
        
        $uid = $dbw->escape($this->get_user_id());
        $guest_name = $this->get_user_name();
        
        if (empty($uid)) {
            $uid = "NULL";
            
            if ($this->is_master_admin()) {
                $guest_name = "admin";
            } else {
                $guest_name = val_or_empty($_SESSION["last_posted_user"]);
            }
        }
        
        $guest_name = quotes_or_null($dbw->escape($guest_name));
        
        $agent = val_or_empty($_SERVER["HTTP_USER_AGENT"]);
        
        $os = "";
        $browser = "";
        $bot = "";
        
        if ($bot = detect_bot(val_or_empty($agent))) {
        } elseif ($browser_data = detect_browser($agent)) {
            $browser = $browser_data["browser"];
            $os = $browser_data["os"];
        }
        
        $agent = quotes_or_null($dbw->escape($agent));
        $ip = quotes_or_null($dbw->escape(val_or_empty($_SERVER["REMOTE_ADDR"])));
        
        $uri = val_or_empty($_SERVER["REQUEST_URI"]);
        $uri = str_replace(get_url_path(), "", substr($uri, 0, 1800));
        $uri = quotes_or_null($dbw->escape($uri));
        
        $now = $dbw->format_datetime(time());
        
        $duration = 0;
        if (!empty($_SESSION["last_visit_time"])) {
            $duration = time() - $_SESSION["last_visit_time"];
            
            // if last visit more that 5 minutes ago, consider it offline
            if ($duration > 3 * 60) {
                $duration = 0;
            }
        }
        
        $_SESSION["last_visit_time"] = time();
        
        $rm = $dbw->escape($READ_MARKER);
        
        $browser = quotes_or_null($dbw->escape($browser));
        $os = quotes_or_null($dbw->escape($os));
        $bot_name = quotes_or_null($dbw->escape($bot));
        
        $query = "insert into {$prfx}_forum_hits (forum_id, topic_id, dt, user_id, hits_count, duration, guest_name, user_agent, uri, ip, read_marker, browser, os, bot)
              values
              ($fid, $tid, '$now', $uid, 1, $duration, $guest_name, $agent, $uri, $ip, '$rm', $browser, $os, $bot_name)";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $author = quotes_or_null($dbw->escape($this->get_user_name()));
        
        if (!$dbw->execute_query("update {$prfx}_read_marker_activity
                             set current_name_hits = 0, current_name_start = '$now'
                             where read_marker = '$rm' and (author is NULL or author <> $author)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }

        // if the new author is empty (through reset), we let the last non empty author
        if ($author == "NULL") {
            $author = "author";
        }

        if (!$dbw->execute_query("update {$prfx}_read_marker_activity
                             set last_activity = '$now', ip = $ip, hits = hits + 1, current_name_hits = current_name_hits + 1,
                             author = $author, user_agent = $agent
                             where read_marker = '$rm'
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // track topic view history
        
        if ($tid != "NULL") {
            $hit_column = "hits_count";
            
            if (detect_bot(val_or_empty($_SERVER["HTTP_USER_AGENT"])) != "") {
                $hit_column = "bot_hits_count";
            }
            
            $query = "update {$prfx}_topic_statistics set $hit_column = $hit_column + 1 where topic_id = $tid";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if (!empty($bot)) {
                $guest_name = quotes_or_null($dbw->escape("#bot#" . $bot));
            }
            
            if ($uid != "NULL") {
                if (!$dbw->execute_query("select 1 from {$prfx}_topic_view_history where user_id = $uid and topic_id = $tid")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $entry_exists = false;
                if ($dbw->fetch_row()) {
                    $entry_exists = true;
                }
                
                $dbw->free_result();
                
                if (!$entry_exists) {
                    $query = "insert into {$prfx}_topic_view_history (user_id, topic_id, dt, ip) values ($uid, $tid, '$now', $ip)";
                } else {
                    $query = "update {$prfx}_topic_view_history set dt = '$now', ip = $ip where user_id = $uid and topic_id = $tid";
                }
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
            } elseif ($guest_name != "NULL") {
                if (!$dbw->execute_query("select 1 from {$prfx}_topic_view_history where guest_name = $guest_name and topic_id = $tid")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $entry_exists = false;
                if ($dbw->fetch_row()) {
                    $entry_exists = true;
                }
                
                $dbw->free_result();
                
                if (!$entry_exists) {
                    $query = "insert into {$prfx}_topic_view_history (guest_name, topic_id, dt, ip) values ($guest_name, $tid, '$now', $ip)";
                } else {
                    $query = "update {$prfx}_topic_view_history set dt = '$now', ip = $ip where guest_name = $guest_name and topic_id = $tid";
                }
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
            }
        }
        
        if ($fid != "NULL") {
            $dtnow = $dbw->format_date(mktime(0, 0, 0, date("n"), date("j"), date("Y")));
            
            if ($uid != "NULL") {
                $query = "insert into {$prfx}_daily_statistics (dt, user_id, forum_id)
                  select '$dtnow', $uid, $fid
                  from {$prfx}_dual
                  where
                  not exists (select 1 from {$prfx}_daily_statistics where dt = '$dtnow' and user_id = $uid and forum_id = $fid);
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $query = "update {$prfx}_daily_statistics set
                  hits_count = hits_count + 1, time_online = time_online + $duration
                  where
                  dt = '$dtnow' and user_id = $uid and forum_id = $fid;
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
            } else {
                $query = "insert into {$prfx}_daily_statistics (dt, user_id, forum_id)
                  select '$dtnow', NULL, $fid
                  from {$prfx}_dual
                  where
                  not exists (select 1 from {$prfx}_daily_statistics where dt = '$dtnow' and user_id is NULL and forum_id = $fid);
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $query = "update {$prfx}_daily_statistics set
                  hits_count = hits_count + 1
                  where
                  dt = '$dtnow' and user_id is NULL and forum_id = $fid;
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
            }
        }
        
        // this was a guest
        
        if ($uid == "NULL") {
            measure_action_time("track hit");
            return true;
        }
        
        if (!$dbw->execute_query("update {$prfx}_user set last_ip = $ip, last_visit_date = '$now', logout = '0' where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "update {$prfx}_private_topics set last_visit_date = '$now' where participant_id = $uid and topic_id = $tid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($duration == 0) {
            measure_action_time("track hit");
            return true;
        }
        
        $query = "update {$prfx}_user_statistics set time_online = time_online + $duration where user_id = $uid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        measure_action_time("track hit");
        
        return true;
    } // track_hit
    
    //-----------------------------------------------------------------
    function update_forum_read_status($fid)
    {
        global $READ_MARKER;
        
        if (detect_bot(val_or_empty($_SERVER["HTTP_USER_AGENT"])) != "") {
            return true;
        }
        
        if (empty($fid) || !is_numeric($fid)) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $fid = $dbw->escape($fid);
        $rm = $dbw->escape($READ_MARKER);
        
        $now = $dbw->format_datetime(time());
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        $author = quotes_or_null($dbw->escape($this->get_user_name()));
        $agent = quotes_or_null($dbw->escape(val_or_empty($_SERVER["HTTP_USER_AGENT"])));
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // we set the last activity of the current visitor to mark that the visitor is still active
        
        if (!$dbw->execute_query("update {$prfx}_forum_read_markers
                             set last_activity = '$now', ip = '$ip'
                             where read_marker = '$rm'
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->execute_query("update {$prfx}_read_marker_activity
                             set current_name_hits = 0, current_name_start = '$now'
                             where read_marker = '$rm' and (author is NULL or author <> $author)
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());

            $dbw->rollback_transaction();
            return false;
        }

        // if the new author is empty (through reset), we let the last non empty author
        $current_author = $author;
        if ($current_author == "NULL") {
            $current_author = "author";
        }

        if (!$dbw->execute_query("update {$prfx}_read_marker_activity
                             set last_activity = '$now', ip = '$ip', hits = hits + 1, current_name_hits = current_name_hits + 1,
                             author = $current_author, user_agent = $agent
                             where read_marker = '$rm'
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            
            $dbw->rollback_transaction();
            return false;
        }
        
        // we can adjust the first read date of the forum to the date of the first unread post in it.
        
        if (!empty($_SESSION["new_messages_info_cache"]["data"]["forum_first_read_date"])) {
            foreach ($_SESSION["new_messages_info_cache"]["data"]["forum_first_read_date"] as $forum_id => $forum_first_read_date) {
                // get the topics especially marked as unread before the forum first date
                // we may not consider these topics and reduce the forum first read date
                // otherwise the topics might get new.
                
                $forum_first_read_date_db = $dbw->format_datetime($forum_first_read_date);
                
                if (!$dbw->execute_query("select topic_id from {$prfx}_topic_read_markers
                                 where
                                 read_marker = '$rm' and
                                 last_read_date < '$forum_first_read_date_db' and
                                 {$prfx}_topic_read_markers.topic_id in (select {$prfx}_topic.id from {$prfx}_topic where forum_id = $forum_id)
                                ")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    
                    return false;
                }
                
                $marked_unread_list_clause = "";
                while ($dbw->fetch_row()) {
                    $marked_unread_list_clause .= $dbw->field_by_name("topic_id") . ",";
                }
                
                $dbw->free_result();
                
                if (!empty($marked_unread_list_clause)) {
                    $marked_unread_list_clause = " and {$prfx}_topic_read_markers.topic_id not in (" . trim($marked_unread_list_clause, ",") . ")";
                }
                
                $forum_id = $dbw->escape($forum_id);
                $forum_first_read_date_db = $dbw->format_datetime($forum_first_read_date - 1);
                
                // This clause FIRST_READ_DATE < '$forum_first_read_date' is very important.
                // If the user is on many devices in the forum, the newer FIRST_READ_DATE
                // should not be overwritten by the later FIRST_READ_DATE.
                if (!$dbw->execute_query("update {$prfx}_forum_read_markers
                                 set first_read_date = '$forum_first_read_date_db'
                                 where read_marker = '$rm' and
                                 forum_id = $forum_id and
                                 first_read_date < '$forum_first_read_date_db'
                                ")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    
                    $dbw->rollback_transaction();
                    return false;
                }
                
                if (!$dbw->execute_query("delete from
                                 {$prfx}_topic_read_markers
                                 where
                                 read_marker = '$rm' and
                                 last_read_date < '$forum_first_read_date_db' and
                                 {$prfx}_topic_read_markers.topic_id in (select {$prfx}_topic.id from {$prfx}_topic where forum_id = $forum_id)
                                 $marked_unread_list_clause
                                ")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    
                    return false;
                }
            }
        } // if there is info about forum_first_read_date
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // concept of the marking with [new]:
        
        // - the tracking of new messages starts after the first visit of the forum by the visitor. if the visitor
        //   never visit a forum, new messages are NOT tracked for it until the visitor visits this forum once.
        //
        // - if the first visit date of the forum has been tracked, all messages, written to the topics of the forum after
        //   that date, are treated as new.
        //
        // - after the first visit of the topic, the own topic tracking starts, and the date of the last read message is tracked.
        //   if the date of the last read message has been tracked, all messages, written to the topic after
        //   that date, are treated as new.
        //
        // - the new messages of the private topics are tracked even if the private forum has never been visited.
        //   it is ensured by the entering the the first read date of the private forum while user registration.
        
        // if the marker already exists, nothing to do, we have already updated it just now
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        // insert the new marker
        $query = "insert into {$prfx}_forum_read_markers
         (forum_id, read_marker, first_read_date, first_activity, last_activity, ip)
          select
         $fid, '$rm', '$now', '$now', '$now', '$ip'
         from {$prfx}_dual
         where not exists (select 1 from {$prfx}_forum_read_markers where forum_id = $fid and read_marker = '$rm')";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "insert into {$prfx}_read_marker_activity
         (read_marker, ip, first_activity, last_activity, current_name_start, author, user_agent, hits, current_name_hits)
         select 
         '$rm', '$ip', '$now', '$now', '$now', $author, $agent, 0, 0
         from {$prfx}_dual
         where not exists (select 1 from {$prfx}_read_marker_activity where read_marker = '$rm')";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // update_forum_read_status
    
    //-----------------------------------------------------------------
    function update_topic_read_status($tid, $fid, $last_post_read_date)
    {
        if (detect_bot(val_or_empty($_SERVER["HTTP_USER_AGENT"])) != "") {
            return true;
        }
        
        //debug_message("----------------------------------------------------------");
        //debug_message("user: " . $this->get_user_name());
        //debug_message($_SERVER["PHP_SELF"]);
        
        //debug_message("updating DB state for topic: " . $tid . ", last_post_read_date: " . date("Y-m-d H:i", $last_post_read_date));
        
        global $READ_MARKER;
        
        if (empty($tid) || !is_numeric($tid) || empty($fid) || !is_numeric($fid)) {
            return false;
        }
        
        if (empty($last_post_read_date)) {
            return false;
        }
        
        start_action_time_measure();
        measure_action_time("update_topic_read_status ($tid): " . date("d.m.Y H:i:s", $last_post_read_date));
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $fid = $dbw->escape($fid);
        $tid = $dbw->escape($tid);
        $rm = $dbw->escape($READ_MARKER);
        
        if (!$dbw->execute_query("select last_read_date topic_last_read_date
                             from
                             {$prfx}_topic_read_markers
                             where topic_id = $tid and read_marker = '$rm'
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $topic_last_read_date = 0;
        if ($dbw->fetch_row()) {
            $topic_last_read_date = xstrtotime($dbw->field_by_name("topic_last_read_date"));
        }
        
        $dbw->free_result();
        
        if (!$dbw->execute_query("select first_read_date
                             from
                             {$prfx}_forum_read_markers
                             where forum_id = $fid and read_marker = '$rm'
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $forum_first_read_date = 0;
        if ($dbw->fetch_row()) {
            $forum_first_read_date = xstrtotime($dbw->field_by_name("first_read_date"));
        }
        
        $dbw->free_result();
        
        // a newer post already tracked as read in the table TOPIC_READ_MARKERS, nothing to do
        if (!empty($topic_last_read_date) && $topic_last_read_date >= $last_post_read_date) {
            return true;
        }
        
        // We have read an old topic and the last read post is below the forum_first_read_date, nothing to do
        if (empty($topic_last_read_date) && ($forum_first_read_date > $last_post_read_date)) {
            return true;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $last_post_read_date = $dbw->format_datetime($last_post_read_date);
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        if (!empty($topic_last_read_date)) {
            $query = "update {$prfx}_topic_read_markers set
                last_read_date = '$last_post_read_date', ip = '$ip'
                where topic_id = $tid and read_marker = '$rm'";
        } else {
            $query = "insert into {$prfx}_topic_read_markers
               (topic_id, read_marker, last_read_date, ip)
               select
               $tid, '$rm', '$last_post_read_date', '$ip'
               from {$prfx}_dual
               where not exists (select 1 from {$prfx}_topic_read_markers where topic_id = $tid and read_marker = '$rm')";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // update_topic_read_status
    
    //-----------------------------------------------------------------
    function get_unicore_words($word, &$words)
    {
        if (empty($word)) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $word = utf8_strtolower($word);
        $word_db = $dbw->escape($word);
        
        if (!$dbw->execute_query("select distinct word from {$prfx}_morphology_dictionary
                                  where root in (select root from {$prfx}_morphology_dictionary where word = '$word_db')")
        ) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $words[] = $dbw->field_by_name("word");
        }
        
        $dbw->free_result();
        
        if (empty($words)) {
            return false;
        }
        
        usort($words, "cmp_length");
        
        return true;
    } // get_unicore_words
    
    //-----------------------------------------------------------------
    function get_deleted_where_appendix($dbw, $prfx, $show_deleted, $include_post_clause, $current_post_appendix = "")
    {
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        $deleted_where = "";
        
        $post_appendix = "";
        $post_appendix_or = "";
        if (!empty($include_post_clause)) {
            $post_appendix = " and ({$prfx}_post.deleted <> 1 $current_post_appendix)";
            $post_appendix_or = " or {$prfx}_post.deleted = 1";
        }
        
        if (empty($show_deleted)) {
            // exclude deleted if not desired
            $deleted_where = " and {$prfx}_topic.deleted <> 1 and {$prfx}_forum.deleted <> 1 $post_appendix" . "\n";
        } elseif (empty($uid) && !$this->is_master_admin()) {
            // exclude deleted if not allowed
            $deleted_where = " and {$prfx}_topic.deleted <> 1 and {$prfx}_forum.deleted <> 1 $post_appendix" . "\n";
        } elseif (!$this->is_admin()) {
            $deleted_where = " and (({$prfx}_topic.deleted <> 1 and {$prfx}_forum.deleted <> 1 $post_appendix)" . "\n";
            
            if (!empty($_SESSION["forum_moderator"])) {
                $in_list = implode(", ", $_SESSION["forum_moderator"]);
                $deleted_where .= " or (({$prfx}_topic.deleted <> 1 or {$prfx}_forum.deleted <> 1 $post_appendix_or) and {$prfx}_topic.forum_id in ($in_list))" . "\n";
            }
            
            if (!empty($_SESSION["topic_moderator"])) {
                $in_list = implode(", ", $_SESSION["topic_moderator"]);
                $deleted_where .= " or ({$prfx}_topic.deleted = 1 and {$prfx}_topic.id in ($in_list) and {$prfx}_topic.is_private = 2)" . "\n";
                
                if (!empty($include_post_clause)) {
                    $deleted_where .= " or ({$prfx}_post.deleted = 1 and {$prfx}_topic.id in ($in_list))" . "\n";
                }
            }
            
            $deleted_where .= ")" . "\n";
        }
        
        return $deleted_where;
    } // get_deleted_where_appendix
    
    //-----------------------------------------------------------------
    function get_forum_restriction_appendix($dbw, $prfx, $do_not_check_pwd_protected = false)
    {
        if ($this->is_admin()) {
            return "";
        }
        
        $forum_appendix = "";
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = 0;
        }
        
        $pwd_forum_appendix = "";
        if (!$this->is_logged_in()) {
            $forum_appendix .= "restricted_access = 0";
        } else {
            $forum_blocked_appendix = "";
            if (!empty($_SESSION["blocked_forums"])) {
                $in_list = implode(",", $_SESSION["blocked_forums"]);
                $forum_blocked_appendix = " and {$prfx}_forum.id not in ($in_list)";
            }
            
            $forum_appendix .= "(restricted_access = 0 or restricted_access = 2";
            $forum_appendix .= "\nor ({$prfx}_forum.id in (select forum_id from {$prfx}_forum_member where user_id = $current_uid) $forum_blocked_appendix)";
            
            if (!empty($_SESSION["forum_moderator"])) {
                $forum_appendix .= "\nor {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = $current_uid)";
                $pwd_forum_appendix = "\nor {$prfx}_forum.id in (select forum_id from {$prfx}_forum_moderator where user_id = $current_uid)";
            }
            
            $forum_appendix .= ")";
        }
        
        $pwd_protected_appendix = "protected_by_password = 0";
        if (!empty($_SESSION["verified_protected_forums"])) {
            $in_list = implode(",", $_SESSION["verified_protected_forums"]);
            $pwd_protected_appendix = "(protected_by_password = 0 or {$prfx}_forum.id in ($in_list) $pwd_forum_appendix)";
        }
        
        if($do_not_check_pwd_protected)  {
            $pwd_protected_appendix = "";
        }
        
        if (!empty($pwd_protected_appendix)) {
            $forum_appendix .= " and $pwd_protected_appendix";
        }
        
        return $forum_appendix;
    } // get_forum_restriction_appendix
    
    //-----------------------------------------------------------------
    function get_ignore_forum_where_appendix($dbw, $prfx, $force_exclusion_of_ignored = 0)
    {
        if (empty($_SESSION["preferred_forums"])) {
            return "";
        }
        
        // The moderators must see what happens in the topics where they are responsible.
        // These forums are not left out even if they are not preferred.
        
        $tmp_forums = array();
        if ($force_exclusion_of_ignored <> 2 && !empty($_SESSION["forum_moderator"])) {
            $tmp_forums = array_keys($_SESSION["forum_moderator"]);
        }
        
        $tmp_forums = array_merge($_SESSION["preferred_forums"], $tmp_forums);
        
        if (empty($tmp_forums)) {
            return "";
        }
        
        $in_list = $dbw->escape(implode(",", $tmp_forums));
        
        return " and ({$prfx}_topic.forum_id in ($in_list) or {$prfx}_topic.is_private > 0)";
    } // get_ignore_forum_where_appendix
    
    //-----------------------------------------------------------------
    function get_ignore_topic_where_appendix($dbw, $prfx, $force_exclusion_of_ignored = 0)
    {
        // The user does not ignore any topic
        if (empty($_SESSION["ignored_topics"])) {
            return "";
        }
        
        // In the weak ignore mode, the ignored topics are not left out,
        // but just colored in grey.
        
        // If the virtual forum 'topics with new messages' we exclude the
        // ignored topics even in the week ignore
        
        if (empty($_SESSION["hide_ignored"]) && empty($force_exclusion_of_ignored)) {
            return "";
        }
        
        $in_list = $dbw->escape(implode(",", $_SESSION["ignored_topics"]));
        
        $where = " and ({$prfx}_topic.id not in ($in_list)";
        
        // The moderators must see what happens in the topics where they are responsible.
        // Such topics are not left out, but just colored in grey.
        
        // force_exclusion_of_ignored = 2 for filtering, also for moderators
        if ($force_exclusion_of_ignored <> 2) {
          if (!empty($_SESSION["forum_moderator"])) {
              $in_list = implode(", ", $_SESSION["forum_moderator"]);
              $where .= "\n" . "      or {$prfx}_topic.forum_id in ($in_list)" . "\n";
          }
          
          if (!empty($_SESSION["topic_moderator"])) {
              $in_list = implode(", ", $_SESSION["topic_moderator"]);
              $where .= "\n" . "      or {$prfx}_topic.id in ($in_list)";
          }
        }
        
        $where .= ")";
        
        return $where;
    } // get_ignore_topic_where_appendix
    
    //-----------------------------------------------------------------
    function has_ignored()
    {
        if (empty($_SESSION["ignored_users"]) && (empty($_SESSION["ignore_guests_blacklist"]) || empty($_SESSION["ignored_guests_blacklist"])) && empty($_SESSION["ignore_guests_whitelist"]) && empty($_SESSION["ignore_new_guests"])) {
            return false;
        }
        
        return true;
    } // has_ignored
    
    //-----------------------------------------------------------------
    function get_ignore_post_where_appendix($dbw, $prfx, $force_exclusion_of_ignored = 0)
    {
        global $READ_MARKER;
        
        // The user does not ignore anything.
        if (empty($_SESSION["ignored_users"]) && 
            (empty($_SESSION["ignore_guests_blacklist"]) || empty($_SESSION["ignored_guests_blacklist"])) && 
            empty($_SESSION["ignore_guests_whitelist"]) && 
            empty($_SESSION["ignore_new_guests"]) && 
            (empty($_SESSION["hide_comments"]) || $force_exclusion_of_ignored == 3)
           ) {
            return "";
        }
        
        // in the week ignore mode, the ignored posts are not left out,
        // but just the content is hidden but can be displayed by a button.
        
        if (empty($_SESSION["hide_ignored"]) && empty($force_exclusion_of_ignored)) {
            return "";
        }
        
        $rm = $dbw->escape($READ_MARKER);
        
        $ignore_clause = "";
        if (!empty($_SESSION["ignored_users"])) {
            $user_in_list = $dbw->escape(implode(",", $_SESSION["ignored_users"]));
            
            $ignore_clause = "({$prfx}_post.user_id is NULL or {$prfx}_post.user_id not in ($user_in_list))";
        }
        
        // new guest ignorance
        if (!empty($_SESSION["ignore_new_guests"]) && !empty($_SESSION["ignored_new_guests"])) {
            if (!empty($ignore_clause)) {
                $ignore_clause .= "\n and \n";
            }
            
            $guest_in_list = "";
            foreach ($_SESSION["ignored_new_guests"] as $grm => $guest) {
                $guest_in_list .= "'" . $dbw->escape($grm) . "', ";
            }
            $guest_in_list = trim($guest_in_list, ", ");
            
            $ignore_clause .= "({$prfx}_post.user_id is not NULL or {$prfx}_post.read_marker not in ($guest_in_list) or {$prfx}_post.read_marker = '$rm')";
        }

        // blacklist guest ignorance
        if (!empty($_SESSION["ignore_guests_blacklist"]) && !empty($_SESSION["ignored_guests_blacklist"])) {
            if (!empty($ignore_clause)) {
                $ignore_clause .= "\n and \n";
            }

            $guest_in_list = "";
            foreach ($_SESSION["ignored_guests_blacklist"] as $guest) {
                $guest_in_list .= "'" . $dbw->escape($guest) . "', ";
            }
            $guest_in_list = trim($guest_in_list, ", ");
            
            $ignore_clause .= "({$prfx}_post.user_id is not NULL or {$prfx}_post.author not in ($guest_in_list) or {$prfx}_post.read_marker = '$rm')";
        }
        
        // whitelist guest ignorance
        if (!empty($_SESSION["ignore_guests_whitelist"])) {
            if (!empty($ignore_clause)) {
                $ignore_clause .= "\n and \n";
            }
            
            if (empty($_SESSION["ignored_guests_whitelist"])) { // ignores all guests
                $ignore_clause .= "({$prfx}_post.user_id is not NULL or {$prfx}_post.read_marker = '$rm')";
            } else {
                $guest_in_list = "";
                foreach ($_SESSION["ignored_guests_whitelist"] as $guest) {
                    $guest_in_list .= "'" . $dbw->escape($guest) . "', ";
                }
                $guest_in_list = trim($guest_in_list, ", ");
                
                $ignore_clause .= "({$prfx}_post.user_id is not NULL or {$prfx}_post.author in ($guest_in_list) or {$prfx}_post.read_marker = '$rm')";
            }
        }
        
        if (!empty($_SESSION["hide_comments"]) && $force_exclusion_of_ignored <> 3) {
            if (!empty($ignore_clause)) {
                $ignore_clause .= "\n and \n";
            }

            $ignore_clause .= "({$prfx}_topic.profiled_topic <> 1 or {$prfx}_post.is_comment <> 1 or {$prfx}_post.read_marker = '$rm')";
        }
        
        // The moderators must see what happens in the topics where they are responsible.
        // Such topics are not left out, but just colored in grey.

        // force_exclusion_of_ignored = 1 - jump to the first new non-ignored post
        // force_exclusion_of_ignored = 2 - filter out the ignored posts in the search also for the modeators
        // force_exclusion_of_ignored = 3 - do not filter comments
        
        $or_appendix = "";
        
        if (!empty($force_exclusion_of_ignored)) {
            $or_appendix = "    or {$prfx}_post.is_system = 1 or {$prfx}_post.pinned = 1";
        }
        
        if ($force_exclusion_of_ignored <> 2) {
            if (!empty($_SESSION["forum_moderator"])) {
                $in_list = implode(", ", $_SESSION["forum_moderator"]);
                $or_appendix .= "\n" . "    or exists (select 1 from {$prfx}_topic where {$prfx}_post.topic_id = {$prfx}_topic.id and {$prfx}_topic.forum_id in ($in_list))";
            }
            
            if (!empty($_SESSION["topic_moderator"])) {
                $in_list = implode(", ", $_SESSION["topic_moderator"]);
                $or_appendix .= "\n" . "    or exists (select 1 from {$prfx}_topic where {$prfx}_post.topic_id = {$prfx}_topic.id and {$prfx}_topic.id in ($in_list))";
            }
        }
        
        return " and (($ignore_clause)
                     $or_appendix
                    )
               ";
    } // get_ignore_post_where_appendix
    
    //-----------------------------------------------------------------
    function get_calc_ignore_post_where_appendix($dbw, $prfx)
    {
        global $READ_MARKER;
        
        // The user does not ignore anything.
        if (empty($_SESSION["ignored_users"]) && empty($_SESSION["ignore_guests_blacklist"]) && empty($_SESSION["ignore_guests_whitelist"]) && empty($_SESSION["ignore_new_guests"]) && empty($_SESSION["hide_comments"])) {
            return "";
        }
        
        $rm = $dbw->escape($READ_MARKER);
        
        $ignore_clause = "";
        if (!empty($_SESSION["ignored_users"])) {
            $user_in_list = $dbw->escape(implode(",", $_SESSION["ignored_users"]));
            
            $ignore_clause = "{$prfx}_post.user_id in ($user_in_list)";
        }

        // new guest ignorance
        if (!empty($_SESSION["ignore_new_guests"]) && !empty($_SESSION["ignored_new_guests"])) {
            if (!empty($ignore_clause)) {
                $ignore_clause .= "\n or \n";
            }
            
            $guest_in_list = "";
            foreach ($_SESSION["ignored_new_guests"] as $grm => $guest) {
                $guest_in_list .= "'" . $dbw->escape($grm) . "', ";
            }
            $guest_in_list = trim($guest_in_list, ", ");
            
            $ignore_clause .= "({$prfx}_post.user_id is NULL and {$prfx}_post.read_marker in ($guest_in_list) and {$prfx}_post.read_marker <> '$rm')";
        }

        // blacklist guest ignorance
        if (!empty($_SESSION["ignore_guests_blacklist"]) && !empty($_SESSION["ignored_guests_blacklist"])) {
            if (!empty($ignore_clause)) {
                $ignore_clause .= "\n or \n";
            }
            
            $guest_in_list = "";
            foreach ($_SESSION["ignored_guests_blacklist"] as $guest) {
                $guest_in_list .= "'" . $dbw->escape($guest) . "', ";
            }
            $guest_in_list = trim($guest_in_list, ", ");
            
            $ignore_clause .= "({$prfx}_post.user_id is NULL and {$prfx}_post.author in ($guest_in_list) and {$prfx}_post.read_marker <> '$rm')";
        }
        
        // whitelist guest ignorance
        if (!empty($_SESSION["ignore_guests_whitelist"])) {
            if (!empty($ignore_clause)) {
                $ignore_clause .= "\n or \n";
            }
            
            if (empty($_SESSION["ignored_guests_whitelist"])) { // ignores all guests
                $ignore_clause .= "({$prfx}_post.user_id is NULL and {$prfx}_post.read_marker <> '$rm')";
            } else {
                $guest_in_list = "";
                foreach ($_SESSION["ignored_guests_whitelist"] as $guest) {
                    $guest_in_list .= "'" . $dbw->escape($guest) . "', ";
                }
                $guest_in_list = trim($guest_in_list, ", ");
                
                $ignore_clause .= "({$prfx}_post.user_id is NULL and {$prfx}_post.author not in ($guest_in_list) and {$prfx}_post.read_marker <> '$rm')";
            }
        }
        
        if (!empty($_SESSION["hide_comments"])) {
            if (!empty($ignore_clause)) {
                $ignore_clause .= "\n or \n";
            }
            
            $ignore_clause .= "({$prfx}_topic.profiled_topic = 1 and {$prfx}_post.is_comment = 1 and {$prfx}_post.read_marker <> '$rm')";
        }
        
        if (empty($ignore_clause)) {
            return "";
        }
        
        return " and (($ignore_clause)
                     and {$prfx}_post.is_system <> 1 
                    )
               ";
    } // get_calc_ignore_post_where_appendix
    
    //-----------------------------------------------------------------
    function check_new_events(&$new_events_count, &$new_mod_events_count)
    {
        return $this->new_checker->check_new_events($new_events_count, $new_mod_events_count);
    } // check_new_events
    
    //-----------------------------------------------------------------
    function get_next_message($tid, $pid)
    {
        $next_pid = $pid;
        
        if (empty($tid) || !is_numeric($tid) || !is_numeric($pid)) {
            return $next_pid;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return $next_pid;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        $tid = $dbw->escape($tid);
        $pid = $dbw->escape($pid);
        if (empty($pid)) {
            $pid = 0;
        }
        
        $fid = 0;
        
        if (!$dbw->execute_query("select forum_id from {$prfx}_topic where id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return $next_pid;
        }
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
        }
        
        $dbw->free_result();
        
        if (!$dbw->execute_query("select 1 from {$prfx}_post where id = $pid and pinned = 1")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return $next_pid;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            return $next_pid;
        }
        
        $dbw->free_result();
        
        $where_appendix = " and {$prfx}_post.id > $pid and {$prfx}_post.pinned <> 1";
        
        if (($this->is_admin() || $this->is_forum_moderator($fid) || $this->is_topic_moderator($tid)) && !empty($_SESSION["show_deleted"])) {
            // deleted are listed and can be used for landing
        } else {
            $where_appendix .= " and {$prfx}_post.deleted <> 1";
        }
        
        $ignore_post_where_appendix = $this->get_ignore_post_where_appendix($dbw, $prfx);
        
        if (!$dbw->execute_query("select min({$prfx}_post.id) next_post_id
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where topic_id = $tid $where_appendix

                             $ignore_post_where_appendix
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return $next_pid;
        }
        
        if ($dbw->fetch_row()) {
            if ($dbw->field_by_name("next_post_id")) {
                $next_pid = $dbw->field_by_name("next_post_id");
            }
        }
        
        $dbw->free_result();
        
        return $next_pid;
    } // get_next_message
    
    //-----------------------------------------------------------------
    function define_first_new_message($tid, &$gotomsg)
    {
        global $READ_MARKER;
        
        if (empty($tid) || !is_numeric($tid)) {
            return false;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $rm = $dbw->escape($READ_MARKER);
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        $last_read_date = 0;
        
        $fid = "0";
        
        if (!$dbw->execute_query("select forum_id from {$prfx}_topic where id = $tid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("forum_id");
        }
        
        $dbw->free_result();
        
        // if the user already read the topic, we take the next message after the last read date
        
        if (!$dbw->execute_query("select last_read_date
                             from {$prfx}_topic_read_markers
                             where topic_id = $tid and read_marker = '$rm'
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $last_read_date = xstrtotime($dbw->field_by_name("last_read_date"));
        }
        
        $dbw->free_result();
        
        if (empty($last_read_date)) {
            if (!$dbw->execute_query("select first_read_date
                             from {$prfx}_forum_read_markers
                             where read_marker = '$rm' and forum_id = $fid
                            ")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $last_read_date = xstrtotime($dbw->field_by_name("first_read_date"));
            }
            
            $dbw->free_result();
        }
        
        // if there are no last read date, the first message will be taken as new.
        // otherwise, the next after the last read date.
        // if there is no last read date, the first message of the topic is taken
        
        $where_appendix = "";
        $where_appendix2 = "";
        if (!empty($last_read_date)) {
            $last_read_date = $dbw->format_datetime($last_read_date);
            $where_appendix .= " and {$prfx}_post.creation_date > '$last_read_date'";
        }
        
        if (($this->is_admin() || $this->is_forum_moderator($fid) || $this->is_topic_moderator($tid)) && !empty($_SESSION["show_deleted"])) {
            // deleted are listed and can be used for landing
        } else {
            $where_appendix .= " and {$prfx}_post.deleted <> 1";
            $where_appendix2 .= " and {$prfx}_post.deleted <> 1";
        }
        
        if (empty($uid)) {
            $where_appendix .= " and ({$prfx}_post.read_marker <> '$rm')";
        } else {
            $where_appendix .= " and ({$prfx}_post.user_id is NULL or {$prfx}_post.user_id <> $uid)";
        }
        
        $ignore_post_where_appendix = $this->get_ignore_post_where_appendix($dbw, $prfx, 1);
        
        $new_tracking_period = defined('NEW_TRACKING_PERIOD') ? NEW_TRACKING_PERIOD : 30;
        $mindate = $dbw->format_datetime(time() - $new_tracking_period * 24 * 3600);
        
        if (!$dbw->execute_query("select min({$prfx}_post.id) new_post_id
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where topic_id = $tid

                             and {$prfx}_post.creation_date >= '$mindate'

                             $where_appendix

                             $ignore_post_where_appendix
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $gotomsg = $dbw->field_by_name("new_post_id");
        }
        
        $dbw->free_result();
        
        if (!empty($gotomsg)) {
            measure_action_time("get first new msg");
            return true;
        }
        
        // there is no newer message after the date (deleted or ignored)
        // get the last valid message
        
        if (!$dbw->execute_query("select max({$prfx}_post.id) new_post_id
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where topic_id = $tid

                             $where_appendix2

                             $ignore_post_where_appendix
                            ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $gotomsg = $dbw->field_by_name("new_post_id");
        }
        
        $dbw->free_result();
        
        measure_action_time("get first new msg");
        
        return true;
    } // define_first_new_message
    
    //-----------------------------------------------------------------
    function mark_events_done()
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            return true;
        }
        
        if (!$dbw->execute_query("update {$prfx}_events set todo = 0 where user_id = $uid and todo = 1")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        MessageHandler::setInfo(text("MsgEventsMarkedDone"));
        
        return true;
    }
    
    //-----------------------------------------------------------------
    function mark_forums_read()
    {
        global $READ_MARKER;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $rm = $dbw->escape($READ_MARKER);
        
        $forum_list = array();
        if (!$this->get_forum_list($forum_list)) {
            return false;
        }
        
        if (count($forum_list) == 0) {
            return true;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // delete all read markers for the topics of the forums except private topics
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_read_markers
                             where read_marker = '$rm' and
                             topic_id not in (select topic_id from {$prfx}_private_topics)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // renew the forum read marker except private topics
        
        $now = $dbw->format_datetime(time());
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        $query = "update {$prfx}_forum_read_markers set
              last_activity = '$now',
              first_read_date = '$now',
              ip = '$ip'
              where read_marker = '$rm'
              and not exists (select 1 from {$prfx}_forum where id = forum_id and {$prfx}_forum.name = 'PRIVATE_MESSAGES')
              ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        MessageHandler::setInfo(text("MsgForumsMarkedRead"));
        
        return true;
    } // mark_forums_read
    
    //-----------------------------------------------------------------
    function mark_forum_read($fid)
    {
        global $READ_MARKER;
        
        if (empty($fid) || !is_numeric($fid)) {
            MessageHandler::setError(text("ErrNoForumSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $rm = $dbw->escape($READ_MARKER);
        $fid = $dbw->escape($fid);
        
        $now = $dbw->format_datetime(time());
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_read_markers
                             where read_marker = '$rm' and
                             topic_id in (select id from {$prfx}_topic where forum_id = $fid)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        // renew forum read marker
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        $query = "update {$prfx}_forum_read_markers
                      set first_read_date = '$now', ip = '$ip'
                      where forum_id = $fid and read_marker = '$rm'
                      ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        MessageHandler::setInfo(text("MsgForumMarkedRead"));
        
        return true;
    } // mark_forum_read
    
    //-----------------------------------------------------------------
    function mark_topics_read($tid, $fid)
    {
        global $READ_MARKER;
        
        if ((empty($_REQUEST["topics"]) && empty($tid) && $fid != -1)) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $rm = $dbw->escape($READ_MARKER);
        $tid = $dbw->escape($tid);
        
        $private_fid = $this->get_private_forum_id();
        
        if (!empty($_REQUEST["topics"])) { // topics selected explicitly
            $in_list = $dbw->escape(implode(",", $_REQUEST["topics"]));
            $where_appendix = " in ($in_list)";
        } elseif ($fid == -1) { // favourite topics with new messages
            if (empty($_SESSION["favourite_topics"])) {
                $favourite_topics_in_list = "-1";
            } else {
                $favourite_topics_in_list = $dbw->escape(implode(",", $_SESSION["favourite_topics"]));
            }
            
            $where_appendix = " in ($favourite_topics_in_list)";
        } elseif ($fid == -2) { // my topics with new messages
            $uid = $dbw->escape($this->get_user_id());
            
            if (!empty($uid)) {
                $new_tracking_period = defined('NEW_TRACKING_PERIOD') ? NEW_TRACKING_PERIOD : 30;
                $mindate = $dbw->format_datetime(time() - $new_tracking_period * 24 * 3600);
                
                $query = "select id
                      from {$prfx}_topic
                      inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
                      where user_id = $uid and is_private < 1 and {$prfx}_topic_statistics.last_message_date >= '$mindate'";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $my_last_topics = array();
                while ($dbw->fetch_row()) {
                    $my_last_topics[] = $dbw->field_by_name("id");
                }
                
                $dbw->free_result();
            }
            
            $my_last_topics_in_list = $dbw->escape(implode(",", $my_last_topics));
            if (empty($my_last_topics_in_list)) {
                $my_last_topics_in_list = "NULL";
            }
            
            $where_appendix = " in ($my_last_topics_in_list)";
        } elseif ($fid == -3) { // my part topics with new messages
            $uid = $dbw->escape($this->get_user_id());
            
            if (!empty($uid)) {
                $new_tracking_period = defined('NEW_TRACKING_PERIOD') ? NEW_TRACKING_PERIOD : 30;
                $mindate = $dbw->format_datetime(time() - $new_tracking_period * 24 * 3600);
                
                $query = "select {$prfx}_topic.id
                      from {$prfx}_topic
                      inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
                      where id in (select topic_id from {$prfx}_topic_participants where user_id = $uid) and is_private < 1 and {$prfx}_topic_statistics.last_message_date >= '$mindate'";
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $my_last_topics = array();
                while ($dbw->fetch_row()) {
                    $my_last_topics[] = $dbw->field_by_name("id");
                }
                
                $dbw->free_result();
            }
            
            $my_last_topics_in_list = $dbw->escape(implode(",", $my_last_topics));
            if (empty($my_last_topics_in_list)) {
                $my_last_topics_in_list = "NULL";
            }
            
            $where_appendix = " in ($my_last_topics_in_list)";
        } elseif ($fid == $private_fid) { // private topics with new messages
            $uid = $dbw->escape($this->get_user_id());
            
            if (!empty($uid)) {
                $new_tracking_period = defined('NEW_TRACKING_PERIOD') ? NEW_TRACKING_PERIOD : 30;
                $mindate = $dbw->format_datetime(time() - $new_tracking_period * 24 * 3600);
                
                $query = "select {$prfx}_private_topics.topic_id
                      from {$prfx}_private_topics
                      inner join {$prfx}_topic_statistics on ({$prfx}_private_topics.topic_id = {$prfx}_topic_statistics.topic_id)
                      where participant_id = $uid and {$prfx}_topic_statistics.last_message_date >= '$mindate'";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $private_topics = array();
                while ($dbw->fetch_row()) {
                    $private_topics[] = $dbw->field_by_name("topic_id");
                }
                
                $dbw->free_result();
            }
            
            $private_topics_in_list = $dbw->escape(implode(",", $private_topics));
            if (empty($private_topics_in_list)) {
                $private_topics_in_list = "NULL";
            }
            
            $where_appendix = " in ($private_topics_in_list)";
        } elseif (!empty($fid)) { // usual topics with new messages of a definite forum
            if (!empty($_SESSION["new_messages_info_cache"]["data"]["forums"][$fid])) {
                $where_appendix = " in (" . implode(",", array_keys($_SESSION["new_messages_info_cache"]["data"]["forums"][$fid])) . ")";
            } else {
                $where_appendix = " = -1";
            }
        } elseif ($tid == -2 && !empty($_SESSION["new_messages_info_cache"]["data"]["visible_topics"])) { // usual topics with new messages over all forums
            $in_list = "";
            
            foreach ($_SESSION["new_messages_info_cache"]["data"]["visible_topics"] as $vtid => $cnt) {
                $in_list .= $vtid . ",";
            }
            
            if (!empty($in_list)) {
                $where_appendix = " in (" . trim($in_list, ",") . ")";
            } else {
                $where_appendix = " = -1";
            }
        } elseif(!empty($tid)) {
            $where_appendix = " = $tid"; // just a single topic
        } else {
            $where_appendix = " = -1";
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("delete from {$prfx}_topic_read_markers where read_marker = '$rm' and topic_id $where_appendix")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
        $ip = $dbw->escape($ip);
        
        $query = "insert into {$prfx}_topic_read_markers
             (topic_id, read_marker, last_read_date, ip)
              select id, '$rm', last_message_date, '$ip'
              from {$prfx}_topic
              inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
              where {$prfx}_topic.id $where_appendix";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        if (!empty($tid) && $tid > 0) {
            MessageHandler::setInfo(text("MsgTopicMarkedRead"));
        } else {
            MessageHandler::setInfo(text("MsgTopicsMarkedRead"));
        }
        
        return true;
    } // mark_topics_read
    
    //-----------------------------------------------------------------
    function mark_topic_unread($start_post, &$response)
    {
        global $READ_MARKER;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        if (empty($start_post) || !is_numeric($start_post)) {
            return true;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $rm = $dbw->escape($READ_MARKER);
        $start_post = $dbw->escape($start_post);
        
        $query = "select topic_id, forum_id, is_private, {$prfx}_topic.user_id, {$prfx}_post.creation_date
                  from {$prfx}_post
                  inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                  where {$prfx}_post.id = $start_post";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            return true;
        }
        
        $tid = $dbw->field_by_name("topic_id");
        $fid = $dbw->field_by_name("forum_id");
        $is_private = $dbw->field_by_name("is_private");
        $topic_author_id = $dbw->field_by_name("user_id");
        $post_creation_date = xstrtotime($dbw->field_by_name("creation_date"));
        
        $dbw->free_result();
        
        $topic_last_read_date = 0;
        
        $query = "select max(creation_date) topic_last_read_date from {$prfx}_post where id < $start_post and topic_id = $tid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $topic_last_read_date = xstrtotime($dbw->field_by_name("topic_last_read_date"));
        }
        
        $dbw->free_result();
        
        if (empty($topic_last_read_date)) {
            $topic_last_read_date = $post_creation_date - 1;
        }
        
        $new_tracking_period = defined('NEW_TRACKING_PERIOD') ? NEW_TRACKING_PERIOD : 30;
        
        if (!empty($topic_last_read_date) && $topic_last_read_date < (time() - $new_tracking_period * 24 * 3600)) {
            MessageHandler::setWarning(sprintf(text("MsgWarnNewTrackingPeriod"), adjust_and_format_timezone($topic_last_read_date, text("DateTimeFormat")), $new_tracking_period));
            return true;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "delete from {$prfx}_topic_read_markers where topic_id = $tid and read_marker = '$rm'";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!empty($topic_last_read_date)) {
            $topic_last_read_date_db = $dbw->format_datetime(max($topic_last_read_date, time() - $new_tracking_period * 24 * 3600));
            
            $ip = val_or_empty($_SERVER["REMOTE_ADDR"]);
            $ip = $dbw->escape($ip);
            
            $query = "insert into {$prfx}_topic_read_markers (last_read_date, topic_id, read_marker, ip) values ('$topic_last_read_date_db', $tid, '$rm', '$ip')";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // calc new
        
        $mindate = $dbw->format_datetime(time() - $new_tracking_period * 24 * 3600);
        
        $new_where_appendix = $this->get_new_where_appendix($prfx, $rm);
        
        $ignore_post_where_appendix = $this->get_ignore_post_where_appendix($dbw, $prfx);
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        $query = "
          select count(*) cnt
    
          from {$prfx}_post
          inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
          inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
          
          left join {$prfx}_topic_read_markers on ({$prfx}_topic.id = {$prfx}_topic_read_markers.topic_id and {$prfx}_topic_read_markers.read_marker = '$rm')
          left join {$prfx}_forum_read_markers on ({$prfx}_topic.forum_id = {$prfx}_forum_read_markers.forum_id and {$prfx}_forum_read_markers.read_marker = '$rm')
    
          where
          
          {$prfx}_post.topic_id = $tid
    
          and ({$prfx}_post.deleted + {$prfx}_topic.publish_delay) = 0
    
          and {$prfx}_post.creation_date > '$mindate'
          
          $new_where_appendix
    
          $ignore_post_where_appendix
        ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response["new_messages_count"] = 0;
        
        if ($dbw->fetch_row()) {
            $response["new_messages_count"] = $dbw->field_by_name("cnt");
        }
        
        $dbw->free_result();
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        return true;
    } // mark_topic_unread
    
    //-----------------------------------------------------------------
    static function get_create_database_sql(&$sql_cmds)
    {
        $db_type = System::getDBType();
        
        if (file_exists(APPLICATION_ROOT . "include/$db_type/sql/create_database.sql.php")) {
            @include APPLICATION_ROOT . "include/$db_type/sql/create_database.sql.php";
        }
        
        if (file_exists(APPLICATION_ROOT . "include/$db_type/sql/init_database.sql.php")) {
            @include APPLICATION_ROOT . "include/$db_type/sql/init_database.sql.php";
        }
        
        return true;
    } // get_create_database_sql
    
    //----------------------------------------------------------------------------
    static function get_install_sql(&$sql_cmds)
    {
        $db_type = System::getDBType();
        
        if (file_exists(APPLICATION_ROOT . "include/$db_type/sql/create_tables.sql.php")) {
            @include APPLICATION_ROOT . "include/$db_type/sql/create_tables.sql.php";
        }
        
        if (file_exists(APPLICATION_ROOT . "include/$db_type/sql/init_data.sql.php")) {
            @include APPLICATION_ROOT . "include/$db_type/sql/init_data.sql.php";
        }
        
        if (file_exists(APPLICATION_ROOT . "include/$db_type/sql/final_actions.sql.php")) {
            @include APPLICATION_ROOT . "include/$db_type/sql/final_actions.sql.php";
        }
        
        return true;
    } // get_install_sql
    
    //----------------------------------------------------------------------------
    function install()
    {
        if (reqvar_empty("forum_name")) {
            MessageHandler::setError(text("ErrForumNameEmpty"));
            MessageHandler::setErrorElement("forum_name");
            return false;
        }
        
        if (reqvar_empty("email")) {
            MessageHandler::setError(text("ErrEmailEmpty"));
            MessageHandler::setErrorElement("email");
            return false;
        }
        
        if (utf8_strlen(reqvar("email")) > 100) {
            MessageHandler::setError(sprintf(text("ErrEmailTooLong"), 100));
            MessageHandler::setErrorElement("email");
            return false;
        }
        
        if (reqvar_empty("password")) {
            MessageHandler::setError(text("ErrPasswordEmpty"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        if (reqvar("password") != reqvar("password2")) {
            MessageHandler::setError(text("ErrPwdNotIdentical"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        if (reqvar_empty("db_type")) {
            MessageHandler::setError(text("ErrDatabaseTypeEmpty"));
            MessageHandler::setErrorElement("db_type");
            return false;
        }
        
        if (reqvar_empty("db_server")) {
            MessageHandler::setError(text("ErrDatabaseServerEmpty"));
            MessageHandler::setErrorElement("db_server");
            return false;
        }
        
        if (reqvar_empty("db_name")) {
            MessageHandler::setError(text("ErrDatabaseNameEmpty"));
            MessageHandler::setErrorElement("db_name");
            return false;
        }
        
        if (reqvar_empty("db_user")) {
            MessageHandler::setError(text("ErrDatabaseUserEmpty"));
            MessageHandler::setErrorElement("db_user");
            return false;
        }
        
        if (reqvar_empty("db_password")) {
            MessageHandler::setError(text("ErrInstallDatabasePasswordEmpty"));
            MessageHandler::setErrorElement("db_password");
            return false;
        }
        
        if (reqvar_empty("db_prefix")) {
            MessageHandler::setError(text("ErrDatabaseTablePrefixEmpty"));
            MessageHandler::setErrorElement("db_prefix");
            return false;
        }
        
        if (!validate_internal_name(reqvar("db_prefix"), true)) {
            MessageHandler::setError(text("ErrDBPrefixInvalid"));
            MessageHandler::setErrorElement("db_prefix");
            return false;
        }
        
        System::setDBType(reqvar("db_type"));
        System::setDBPrefix(reqvar("db_prefix"));
        
        $dbw = System::getDBWorker(false);
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        MessageHandler::disableProgWarnings();
        
        if (!$dbw->connect(reqvar("db_server"), "" /*db may not exist yet*/, reqvar("db_user"), reqvar("db_password"))) {
            if ($dbw->get_last_error_id() == "db_err") {
                MessageHandler::setError(sprintf(text("ErrDbConnNoDB"), reqvar("db_name")));
                MessageHandler::setErrorElement("db_name");
            } else {
                MessageHandler::setError(sprintf(text("ErrDbConnNoAccess"), reqvar("db_server"), reqvar("db_user")));
                MessageHandler::setErrorElement("db_server");
            }
            
            MessageHandler::enableProgWarnings();
            return false;
        }
        
        // if the database already exists,
        // chack that the prefix is not yet used
        if ($dbw->use_database(reqvar("db_name"))) {
            if ($dbw->execute_query("select count(*) from {$prfx}_user")) {
                MessageHandler::setError(sprintf(text("ErrDbPrefixUsed"), reqvar("db_prefix")));
                MessageHandler::setErrorElement("db_prefix");
                $dbw->free_result();
                MessageHandler::enableProgWarnings();
                return false;
            }
            
            $dbw->free_result();
        }
        
        MessageHandler::enableProgWarnings();
        
        // install sql
        
        $db_sql_cmds = array();
        $sql_cmds = array();
        
        if (!self::get_create_database_sql($db_sql_cmds)) {
            return false;
        }
        
        if (!self::get_install_sql($sql_cmds)) {
            return false;
        }
        
        foreach ($db_sql_cmds as $cmd) {
            if (empty($cmd)) {
                continue;
            }
            
            $cmd = str_ireplace("$(DB_NAME)", reqvar("db_name"), $cmd);
            
            if (!$dbw->execute_query($cmd)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        if (!$dbw->use_database(reqvar("db_name"))) {
            return false;
        }
        
        // table creation
        
        foreach ($sql_cmds as $cmd) {
            if (empty($cmd)) {
                continue;
            }
            
            $cmd = str_ireplace("V1", $prfx, $cmd);
            
            if (!$dbw->execute_query($cmd)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        $email = $dbw->escape(reqvar("email"));
        $skin = $dbw->escape(reqvar("skin"));
        
        $cmd = "update {$prfx}_settings set default_sender = '$email', receiver = '$email', skin = '$skin'";
        if (!$dbw->execute_query($cmd)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $reserved_names = array(
            "admin",
            "sysadmin",
            "sys_admin",
            "админ",
            "root",
            "root_admin"
        );
        
        // text("Administrators")
        
        $reserved_name_codes = array(
            "MasterAdministrator",
            "Administrator",
            "Administrators",
            "Moderator",
            "Moderators",
            "Guest",
            "Guests",
            "Anonyms",
            "Subscription",
            "Citation"
        );
        
        foreach ($GLOBALS['LANGUAGES'] as $lng) {
            foreach ($reserved_name_codes as $code) {
                $name = try_translate($code, $lng);
                $reserved_names[$name] = $name;
            }
        }
        
        foreach ($reserved_names as $name) {
            $name_hash = $dbw->escape($this->hash_user_name($name));
            $name = $dbw->escape($name);
            
            $cmd = "insert into {$prfx}_reserved_names (user_name, user_name_hash)
                    values ('$name', '$name_hash')";
            if (!$dbw->execute_query($cmd)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        $contents = @file_get_contents(APPLICATION_ROOT . "include/config_inc.php");
        if ($contents === false) {
            MessageHandler::setError(sprintf(text("ErrReadingFile"), "include/config_inc.php"), sys_get_last_error());
            return false;
        }
        
        $home_directory = str_replace("ajax/process.php", "", val_or_empty($_SERVER["PHP_SELF"]));
        
        $contents = str_replace("define('DEFAULT_LANGUAGE', 'en')", "define('DEFAULT_LANGUAGE', '" . escape_php(reqvar("lang")) . "')", $contents);
        $contents = str_replace("define('HOME_DIRECTORY', '/')", "define('HOME_DIRECTORY', '" . escape_php($home_directory) . "')", $contents);
        $contents = str_replace("define('SHOW_MESSAGE_DETAILS', true)", "define('SHOW_MESSAGE_DETAILS', false)", $contents);
        
        $salt = rand(10000000, 90000000);
        $contents = str_replace("define('SALT_KEY', '59000')", "define('SALT_KEY', '" . escape_php($salt) . "')", $contents);
        
        $contents = str_replace("define('DB_TYPE', 'MySQL')", "define('DB_TYPE', '" . escape_php(reqvar("db_type")) . "')", $contents);
        $contents = str_replace("define('DB_SERVER', 'localhost')", "define('DB_SERVER', '" . escape_php(reqvar("db_server")) . "')", $contents);
        $contents = str_replace("define('DB_NAME', '')", "define('DB_NAME', '" . escape_php(reqvar("db_name")) . "')", $contents);
        $contents = str_replace("define('DB_USER', '')", "define('DB_USER', '" . escape_php(reqvar("db_user")) . "')", $contents);
        $contents = str_replace("define('DB_PASSWORD', '')", "define('DB_PASSWORD', '" . escape_php(reqvar("db_password")) . "')", $contents);
        $contents = str_replace("define('DB_PREFIX', 'V1')", "define('DB_PREFIX', '" . escape_php(reqvar("db_prefix")) . "')", $contents);
        
        $res = @file_put_contents(APPLICATION_ROOT . "include/config_inc.php", $contents);
        if ($res === false) {
            MessageHandler::setError(sprintf(text("ErrWritingFile"), "include/config_inc.php"), sys_get_last_error());
            return false;
        }
        
        $contents = @file_get_contents(APPLICATION_ROOT . "include/admin_config_inc.php");
        if ($contents === false) {
            MessageHandler::setError(sprintf(text("ErrReadingFile"), "include/admin_config_inc.php"), sys_get_last_error());
            return false;
        }
        
        $admin_password_hash = System::generateHash(reqvar("password"), $salt);
        $contents = str_replace("define('ADMIN_PASSWORD', '')", "define('ADMIN_PASSWORD', '" . escape_php($admin_password_hash) . "')", $contents);
        
        $res = @file_put_contents(APPLICATION_ROOT . "include/admin_config_inc.php", $contents);
        if ($res === false) {
            MessageHandler::setError(sprintf(text("ErrWritingFile"), "include/admin_config_inc.php"), sys_get_last_error());
            return false;
        }
        
        $dir = APPLICATION_ROOT . "lang/";
        $files = scandir($dir);
        foreach ($files as $file) {
            if ($file == "." || $file == ".." || !is_dir($dir . "/" . $file)) {
                continue;
            }
            
            $res = @file_put_contents($dir . "/" . $file . "/site_name.txt", reqvar("forum_name"));
            if ($res === false) {
                MessageHandler::setError(sprintf(text("ErrWritingFile"), "lang/" . $file . "/site_name.txt"), sys_get_last_error());
                return false;
            }
        }
        
        $_SESSION["is_admin"] = 1;
        $_SESSION["is_master_admin"] = 1;
        $_SESSION["logged_in"] = 1;
        $_SESSION["user_login"] = "admin";
        $_SESSION["user_name"] = "admin";
        $_SESSION["user_email"] = "";
        $_SESSION["activated"] = true;
        $_SESSION["approved"] = true;
        $_SESSION["login_date"] = time();
        
        $_SESSION["ignore_new_guests"] = false;
        $_SESSION["ignore_guests_blacklist"] = false;
        $_SESSION["ignore_guests_whitelist"] = false;
        $_SESSION["ignored_guests_blacklist"] = array();
        $_SESSION["ignored_guests_whitelist"] = array();
        
        $_SESSION["ignored_users"] = array();
        $_SESSION["hidden_profiles"] = array();
        
        $_SESSION["subscribed_authors"] = array();
        
        $_SESSION["turnoff_events"] = false;
        $_SESSION["no_private_messages"] = false;
        $_SESSION["hide_ignored"] = false;
        $_SESSION["hide_pictures"] = false;
        $_SESSION["donot_hide_adult_pictures"] = false;
        $_SESSION["hide_user_info"] = false;
        $_SESSION["hide_user_avatars"] = false;
        $_SESSION["send_notifications"] = true;
        
        $_SESSION["custom_css"] = "";
        $_SESSION["skin_properties"] = array();
        
        $_SESSION["password_hash"] = $admin_password_hash;
        
        set_language(reqvar("lang"));
        
        MessageHandler::setInfo(text("InstallSuccessComment"), null, false);
        
        return true;
    } // install
    
    //-----------------------------------------------------------------
    function build_smile_table()
    {
        return $this->format_manager->build_smile_table();
    } // build_smile_table
    
    //-----------------------------------------------------------------
    function build_search_param_hash($exclude_tid = false)
    {
        return md5($this->build_search_param_string($exclude_tid) . "#" . $this->get_user_id());
    } // build_search_param_hash
    
    //-----------------------------------------------------------------
    function build_search_param_string($exclude_tid = false)
    {
        $hash = "";
        
        if (!reqvar_empty("search_keys")) {
            $hash .= "search_keys=" . xrawurlencode(reqvar("search_keys")) . "&";
        }
        if (!reqvar_empty("with_morphology")) {
            $hash .= "with_morphology=" . reqvar("with_morphology") . "&";
        }
        if (!reqvar_empty("topics_only")) {
            $hash .= "topics_only=" . reqvar("topics_only") . "&";
        }
        if (!reqvar_empty("posts_only")) {
            $hash .= "posts_only=" . reqvar("posts_only") . "&";
        }
        if (!reqvar_empty("favourites_only")) {
            $hash .= "favourites_only=" . reqvar("favourites_only") . "&";
        }
        if (!reqvar_empty("favourite_posts_only")) {
            $hash .= "favourite_posts_only=" . reqvar("favourite_posts_only") . "&";
        }
        if (!reqvar_empty("polls_only")) {
            $hash .= "polls_only=" . reqvar("polls_only") . "&";
        }
        if (!reqvar_empty("hot_topics")) {
            $hash .= "hot_topics=" . reqvar("hot_topics") . "&";
        }
        if (!reqvar_empty("has_attachment")) {
            $hash .= "has_attachment=" . reqvar("has_attachment") . "&";
        }
        if (!reqvar_empty("has_picture")) {
            $hash .= "has_picture=" . reqvar("has_picture") . "&";
        }
        if (!reqvar_empty("has_video")) {
            $hash .= "has_video=" . reqvar("has_video") . "&";
        }
        if (!reqvar_empty("thematic_only")) {
            $hash .= "thematic_only=" . reqvar("thematic_only") . "&";
        }
        if (!reqvar_empty("replies_to")) {
            $hash .= "replies_to=" . reqvar("replies_to") . "&";
        }
        if (!reqvar_empty("non_ignored_by_author")) {
            $hash .= "non_ignored_by_author=" . reqvar("non_ignored_by_author") . "&";
        }
        if (!reqvar_empty("rate_statistics")) {
            $hash .= "rate_statistics=" . reqvar("rate_statistics") . "&";
        }
        if (!reqvar_empty("statistics_period")) {
            $hash .= "statistics_period=" . reqvar("statistics_period") . "&";
        }
        if (!reqvar_empty("has_audio")) {
            $hash .= "has_audio=" . reqvar("has_audio") . "&";
        }
        if (!reqvar_empty("has_adult")) {
            $hash .= "has_adult=" . reqvar("has_adult") . "&";
        }
        if (!reqvar_empty("has_link")) {
            $hash .= "has_link=" . reqvar("has_link") . "&";
        }
        if (!reqvar_empty("has_code")) {
            $hash .= "has_code=" . reqvar("has_code") . "&";
        }
        if (!reqvar_empty("include_deleted")) {
            $hash .= "include_deleted=" . reqvar("include_deleted") . "&";
        }
        if (!reqvar_empty("include_ignored")) {
            $hash .= "include_ignored=" . reqvar("include_ignored") . "&";
        }
        if (!reqvar_empty("deleted_only")) {
            $hash .= "deleted_only=" . reqvar("deleted_only") . "&";
        }
        if (!reqvar_empty("deleted_topics_only")) {
            $hash .= "deleted_topics_only=" . reqvar("deleted_topics_only") . "&";
        }
        if (!reqvar_empty("news_digest")) {
            $hash .= "news_digest=" . reqvar("news_digest") . "&";
            if (!reqvar_empty("fid")) {
                $hash .= "fid=" . reqvar("fid") . "&";
            }
        }
        
        if (!reqvar_empty("start_date")) {
            $hash .= "start_date=" . reqvar("start_date") . "&";
        }
        if (!reqvar_empty("end_date")) {
            $hash .= "end_date=" . reqvar("end_date") . "&";
        }
        
        if (!reqvar_empty("ip")) {
            $hash .= "ip=" . xrawurlencode(reqvar("ip")) . "&";
        }
        
        if (!reqvar_empty("author")) {
            $hash .= "author=" . xrawurlencode(reqvar("author")) . "&";
        }
        if (!reqvar_empty("author_mode")) {
            $hash .= "author_mode=" . reqvar("author_mode") . "&";
        }
        
        if (!reqvar_empty("rated_by")) {
            $hash .= "rated_by=" . xrawurlencode(reqvar("rated_by")) . "&";
        }
        
        if (!reqvar_empty("post_list")) {
            $hash .= "post_list=" . xrawurlencode(reqvar("post_list")) . "&";
        }
        
        if (!reqvar_empty("unseen")) {
            $hash .= "unseen=" . reqvar("unseen") . "&";
        }
        
        if (!empty($_REQUEST["forums"])) {
            foreach ($_REQUEST["forums"] as $fid) {
                $hash .= xrawurlencode("forums[]") . "=" . $fid . "&";
            }
        }
        
        if (!reqvar_empty("tid") && empty($exclude_tid)) {
            $hash .= "tid=" . reqvar("tid") . "&";
        }
        
        if (!empty($_REQUEST["tags"])) {
            foreach ($_REQUEST["tags"] as $tid) {
                $hash .= xrawurlencode("tags[]") . "=" . $tid . "&";
            }
        }
        
        if (!reqvar_empty("conjunct_tags")) {
            $hash .= "conjunct_tags=" . reqvar("conjunct_tags") . "&";
        }
        
        return rtrim($hash, "&");
    } // build_search_param_string
    
    //-----------------------------------------------------------------
    function build_search_title()
    {
        global $forum_list;
        
        $search_title = "";
        
        if (!reqvar_empty("search_keys")) {
            $search_title = reqvar("search_keys");
        }
        
        if (!reqvar_empty("rate_statistics")) {
            if (reqvar("rate_statistics") == "top_dislikes") {
                $search_title .= text("MessagesTopDislikes");
            } elseif (reqvar("rate_statistics") == "top_likes") {
                $search_title .= text("MessagesTopLikes");
            } else {
                $search_title .= text("MessagesTopRates");
            }
            
            switch (reqvar("statistics_period")) {
                case "previous_24":
                    $search_title .= ", " . text("Previous24");
                    break;
                
                case "last_month":
                    $search_title .= ", " . text("LastMonth");
                    break;
                
                case "last_half_year":
                    $search_title .= ", " . text("LastHalfYear");
                    break;
                
                case "last_year":
                    $search_title .= ", " . text("LastYear");
                    break;
                
                case "whole_period":
                    $search_title .= ", " . text("WholePeriod");
                    break;
                
                default:
                    $search_title .= ", " . text("Last24Hours");
                    break;
            }
        }
        
        if (!reqvar_empty("replies_to")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("RepliesToPost") . ": #" . reqvar("replies_to");
        }
        
        if (reqvar("author") == try_translate("Subscription")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            switch (reqvar("author_mode")) {
                case "last_posts":
                    $search_title .= text("PostsOfSubscribedAuthors");
                    break;
                case "last_topics":
                    $search_title .= text("TopicsOfSubscribedAuthors");
                    break;
            }
        } elseif (!reqvar_empty("author")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $author = reqvar("author");
            if(!empty($author) && $author[0] == ":") {
                $author = ltrim($author, ":") . " (" . text("Guest") . ")";
            }
            
            switch (reqvar("author_mode")) {
                case "wrote_post":
                    $search_title .= text("AuthorWrotePost") . ": " . $author;
                    break;
                case "last_posts":
                    $search_title .= text("SearchAuthorLastMessages") . ": " . $author;
                    break;
                case "created_topic":
                    $search_title .= text("AuthorCreatedTopic") . ": " . $author;
                    break;
                case "last_topics":
                    $search_title .= text("SearchAuthorLastTopics") . ": " . $author;
                    break;
                case "participating":
                    $search_title .= text("AuthorParticipatedInTopic") . ": " . $author;
                    break;
                case "ignoring":
                    $search_title .= text("AuthorIgnoringTopic") . ": " . $author;
                    break;
                case "moderating":
                    $search_title .= text("AuthorModeratingTopic") . ": " . $author;
                    break;
                case "author_likes":
                    $search_title = sprintf(text("MessagesMemberHasLiked"), $author);
                    break;
                case "author_dislikes":
                    $search_title = sprintf(text("MessagesMemberHasDisliked"), $author);
                    break;
                case "author_liked":
                    if (reqvar_empty("rated_by")) {
                        $search_title = sprintf(text("MessagesMemberWasLiked"), $author);
                    } else {
                        $search_title = sprintf(text("MessagesMemberWasLikedBy"), $author, reqvar("rated_by"));
                    }
                    break;
                case "author_disliked":
                    if (reqvar_empty("rated_by")) {
                        $search_title = sprintf(text("MessagesMemberWasDisliked"), $author);
                    } else {
                        $search_title = sprintf(text("MessagesMemberWasDislikedBy"), $author, reqvar("rated_by"));
                    }
                    break;
                default:
                    $search_title .= text("Author") . ": " . $author;
                    break;
            }
        }
        
        if (!reqvar_empty("unseen")) {
            $search_title .= ", " . text("SinceLastView");
        } elseif (!reqvar_empty("start_date") || !reqvar_empty("end_date")) {
            if (!reqvar_empty("author")) {
                $search_title .= ", " . text("SearchInPeriod");
            } else {
                if (!empty($search_title)) {
                    $search_title .= "; ";
                }
                
                if (reqvar("author_mode") == "wrote_post" || reqvar("author_mode") == "last_posts") {
                    $search_title .= text("SearchMessagesCreated");
                } else {
                    $search_title .= text("SearchTopicsCreated");
                }
            }
            
            if (!reqvar_empty("start_date")) {
                $search_title .= " " . text("SearchInPeriodFrom") . " " . reqvar("start_date");
            }
            
            if (!reqvar_empty("end_date")) {
                $search_title .= " " . text("SearchInPeriodTo") . " " . reqvar("end_date");
            }
        }
        
        if (!reqvar_empty("ip")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("IPAddressOrFingerprint") . ": " . reqvar("ip");
        }
        
        if (!reqvar_empty("polls_only")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchPollsOnly");
        }
        
        if (!reqvar_empty("hot_topics")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("HotTopics");
        }

        if (!reqvar_empty("favourites_only")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchTopicFavourites");
        }
        
        if (!reqvar_empty("favourite_posts_only")) {
            // not necessary because already prepended as topic name "Favourite Posts"
        }
        
        if (!reqvar_empty("include_deleted")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchDeletedToo");
        }

        if (!reqvar_empty("include_ignored")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchIgnoredToo");
        }

        if (!reqvar_empty("deleted_only")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchDeletedOnly");
        }
        
        if (!reqvar_empty("deleted_topics_only")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchDeletedTopicsOnly");
        }
        
        if (!reqvar_empty("has_attachment")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchAttachmentsOnly");
        }
        
        if (!reqvar_empty("has_picture")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchPicturesOnly");
        }
        
        if (!reqvar_empty("has_video")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchVideosOnly");
        }
        
        if (!reqvar_empty("has_audio")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchAudioOnly");
        }
        
        if (!reqvar_empty("has_adult")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchAdultOnly");
        }
        
        if (!reqvar_empty("has_link")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchLinksOnly");
        }
        
        if (!reqvar_empty("has_code")) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchCodesOnly");
        }
        
        if (!empty($_REQUEST["tags"])) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $user_tags = array();
            $this->get_user_tags($user_tags, -1 /* all */);
            
            $search_title .= text("SearchTags") . ": ";
            
            foreach ($_REQUEST["tags"] as $tid) {
                if (empty($user_tags[$tid])) {
                    continue;
                }
                
                $search_title .= "#" . $user_tags[$tid] . ", ";
            }
            
            $search_title = trim($search_title, ", ");
        }
        
        if (!empty($_REQUEST["forums"])) {
            if (!empty($search_title)) {
                $search_title .= "; ";
            }
            
            $search_title .= text("SearchInForums") . ": ";
            
            foreach ($_REQUEST["forums"] as $fid) {
                if (!empty($forum_list[$fid]["name"])) {
                    $search_title .= val_or_empty($forum_list[$fid]["name"]) . ", ";
                } elseif ($fid == "private") {
                    $search_title .= text("PrivateTopics");
                }
            }
        }
        
        $search_title = trim($search_title, ", ");
        
        return $search_title;
    } // build_search_title
    
    //-----------------------------------------------------------------
    function check_skin(&$skin)
    {
        global $settings;
        
        if (empty($skin)) {
            $skin = val_or_empty($settings["skin"]);
        }
        
        if (empty($skin) ||
            !file_exists(APPLICATION_ROOT . "skins/" . $skin . "/")
        ) {
            $skin = DEFAULT_SKIN;
        }
    } // check_skin
    
    //-----------------------------------------------------------------
    function switch_skin($skin)
    {
        if ($skin == "mobile") {
            $device = "mobile";
        } elseif ($skin == "tablet") {
            $device = "tablet";
        } else {
            $device = "desktop";
        }
        
        set_cookie("q_device", $device, time() + 90 * 24 * 3600);
        
        return true;
    } // switch_skin

    //-----------------------------------------------------------------
    function define_view_path(&$skin, &$view_path, &$view_mode, &$skin_version)
    {
        $skin = "";
        
        if (!empty($_SESSION["skin"])) {
            $skin = $_SESSION["skin"];
        }
        
        $this->check_skin($skin);
        
        $device = get_cookie("q_device");
        
        // first time, cookie is not set yet
        // and it is a smartphone
        if (empty($device) && detect_device(val_or_empty($_SERVER["HTTP_USER_AGENT"])) == "smartphone") {
            $device = "mobile";
        } elseif (empty($device) && detect_device(val_or_empty($_SERVER["HTTP_USER_AGENT"])) == "tablet") {
            $device = "tablet";
        } elseif (empty($device)) {
            $device = "desktop";
        }
        
        set_cookie("q_device", $device, time() + 90 * 24 * 3600);
        
        $view_mode = "desktop";
        $view_mode_path = "desktop";
        if ($device == "mobile") {
            $view_mode = "mobile";
            $view_mode_path = "mobile";
        }
        if ($device == "tablet") {
            $view_mode = "tablet";
            $view_mode_path = "mobile";
        }
        
        $view_path = "skins/" . $skin . "/" . $view_mode_path . "/";
        
        $skin_version = "1.0.0";
        if (!file_exists(APPLICATION_ROOT . "skins/" . $skin . "/info.xml")) {
            return true;
        }
        
        $xmldoc = new DOMDocument();
        if (!$xmldoc->load(APPLICATION_ROOT . "skins/" . $skin . "/info.xml")) {
            return true;
        }
        
        $xsdpath = new DOMXPath($xmldoc);
        
        if (defined("DEVELOPER_MODE") && DEVELOPER_MODE) {
            $skin_version = time();
        } else {
            $nodes = $xsdpath->evaluate("/description/version");
            if ($nodes->length) {
                $skin_version = $nodes->item(0)->nodeValue;
            }
        }
        
        $nodes = $xsdpath->evaluate("/description/properties/property");
        if ($nodes->length == 0) {
            return true;
        }
        
        for ($i = 0; $i < $nodes->length; $i++) {
            $proerty_name = $nodes->item($i)->getAttribute("name");
            if (empty($proerty_name)) {
                continue;
            }
            
            if (!isset($_SESSION["skin_properties"][$skin][$proerty_name])) {
                $_SESSION["skin_properties"][$skin][$proerty_name] = $nodes->item($i)->getAttribute("default");
            }
        }
        
        return true;
    } // define_view_path
    
    //-----------------------------------------------------------------
    function build_action_list(&$action_list)
    {
        global $settings;
        
        if (!empty($settings["rates_active"])) {
            $action_list["include_rate_actions"] = text("IncludeRatingActions");
            
            $action_list["post_liked"] = text("ActionPostLiked");
            $action_list["like_revoked"] = text("ActionLikeRevoked");
            
            if (!empty($settings["dislikes_active"])) {
                $action_list["post_disliked"] = text("ActionPostDisliked");
                $action_list["dislike_revoked"] = text("ActionDislikeRevoked");
            }
            
            $action_list["delete_user_rates"] = text("ActionLastNRatesDeleted");
            
            $action_list["disallow_rating"] = text("ActionRatingDisallowed");
            $action_list["allow_rating"] = text("ActionRatingAllowed");
        }

        $action_list["change_post"] = text("ActionPostChanged");
        $action_list["move_post"] = text("ActionPostsMoved");
        $action_list["pin_post"] = text("ActionPostPinned");
        $action_list["unpin_post"] = text("ActionPostUnpinned");
        $action_list["convert_to_thematic"] = text("ActionMessageConvertedToThematic");
        $action_list["convert_to_comment"] = text("ActionMessageConvertedToComments");
        $action_list["convert_to_adult"] = text("ActionMessageConvertedToAdult");
        $action_list["convert_to_nonadult"] = text("ActionMessageConvertedToNonAdult");
        $action_list["delete_post"] = text("ActionPostDeleted");
        $action_list["restore_post"] = text("ActionPostRestored");
        $action_list["delete_posts_in_topic"] = text("ActionPostsDeletedInTopic");
        $action_list["restore_posts_in_topic"] = text("ActionPostsRestoredInTopic");

        $action_list["delete_last_N_posts"] = text("ActionLastNPostsDeleted");
        $action_list["delete_all_posts"] = text("ActionPostsDeleted");
        $action_list["bulk_delete_posts"] = text("ActionBulkDeleteMessages");
        $action_list["bulk_restore_posts"] = text("ActionBulkRestoreMessages");
        $action_list["delete_attachment"] = text("ActionAttachmentDeleted");
        $action_list["restore_attachment"] = text("ActionAttachmentRestored");

        $action_list["change_topic"] = text("ActionTopicChanged");
        $action_list["delete_topic"] = text("ActionTopicDeleted");
        $action_list["restore_topic"] = text("ActionTopicRestored");
        $action_list["move_topic"] = text("ActionTopicMoved");
        $action_list["merge_topic"] = text("ActionTopicMerged");
        $action_list["close_topic"] = text("ActionTopicClosed");
        $action_list["open_topic"] = text("ActionTopicOpened");
        $action_list["pin_topic"] = text("ActionTopicPinned");
        $action_list["unpin_topic"] = text("ActionTopicUnpinned");
        $action_list["publish_poll"] = text("ActionPollCompleted");
        $action_list["unpublish_poll"] = text("ActionPollOpened");
        $action_list["allow_guests"] = text("ActionTopicGuestsAllowed");
        $action_list["disallow_guests"] = text("ActionTopicGuestsDisallowed");
        $action_list["profiled_topic_on"] = text("ActionTopicProfiledModeTurnedOn");
        $action_list["profiled_topic_off"] = text("ActionTopicProfiledModeTurnedOff");

        $action_list["create_forum"] = text("ActionForumCreated");
        $action_list["delete_forum"] = text("ActionForumDeleted");
        $action_list["restore_forum"] = text("ActionForumRestored");
        $action_list["close_forum"] = text("ActionForumClosed");
        $action_list["open_forum"] = text("ActionForumOpened");
        $action_list["turn_on_restricted_mode"] = text("ActionRestrictedGuestModeOn");
        $action_list["turn_off_restricted_mode"] = text("ActionRestrictedGuestModeOff");

        $action_list["warn_post"] = text("ActionPostWarned");
        $action_list["hide_profile"] = text("ActionProfileHidden");
        $action_list["open_profile"] = text("ActionProfileOpened");
        $action_list["block_user"] = text("ActionUserBlocked");
        $action_list["unblock_user"] = text("ActionUserUnblocked");
        $action_list["ignore_user"] = text("ActionUserIgnored");
        $action_list["unignore_user"] = text("ActionUserUnignored");
        $action_list["block_user_forum"] = text("ActionUserForumBlocked");
        $action_list["unblock_user_forum"] = text("ActionUserForumUnblocked");
        $action_list["block_user_topic"] = text("ActionUserTopicBlocked");
        $action_list["unblock_user_topic"] = text("ActionUserTopicUnblocked");
        $action_list["delete_user"] = text("ActionUserDeleted");
        $action_list["rename_user"] = text("ActionUserRenamed");
        $action_list["delete_avatar"] = text("ActionAvatarDeleted");

        $action_list["grant_forum_access"] = text("ActionGrantForumAccess");
        $action_list["revoke_forum_access"] = text("ActionRevokeForumAccess");
        $action_list["make_topic_moderator"] = text("ActionTopicModeratorMade");
        $action_list["revoke_topic_moderator"] = text("ActionTopicModeratorRevoked");
        $action_list["make_forum_moderator"] = text("ActionForumModeratorMade");
        $action_list["revoke_forum_moderator"] = text("ActionForumModeratorRevoked");
        $action_list["make_administrator"] = text("ActionAdministratorMade");
        $action_list["revoke_administrator"] = text("ActionAdministratorRevoked");

        $action_list["block_ip"] = text("ActionIPBlocked");
        $action_list["unblock_ip"] = text("ActionIPUnblocked");
        $action_list["block_user_marker"] = text("ActionFingerPrintBlocked");
        $action_list["unblock_user_marker"] = text("ActionFingerPrintUnblocked");
    } // build_action_list

    //-----------------------------------------------------------------
    function build_codes_table()
    {
        global $SUPPORTED_CODES;
        
        if (empty($SUPPORTED_CODES)) {
            $SUPPORTED_CODES = array();
        }
        
        $nohighlight["plaintext"] = escape_html(text("NoHighlighting"));
        
        $SUPPORTED_CODES = array_merge($nohighlight, $SUPPORTED_CODES);
        
        $cnt = count($SUPPORTED_CODES);
        $rowcount = ceil($cnt / 3);
        
        $table = "<table>\n";
        
        $keys = array_keys($SUPPORTED_CODES);
        
        for ($i = 0; $i < $rowcount; $i++) {
            $table .= "<tr>\n";
            
            if (!empty($keys[$i]) && !empty($SUPPORTED_CODES[$keys[$i]])) {
                $table .= "<td class='active_code' onclick=\"insert_tag('[code=" . escape_html($keys[$i]) . "]','[/code]', 0)\">" . escape_html($SUPPORTED_CODES[$keys[$i]]) . "</td>\n";
            } else {
                $table .= "<td></td>\n";
            }
            
            if (!empty($keys[$i + $rowcount]) && !empty($SUPPORTED_CODES[$keys[$i + $rowcount]])) {
                $table .= "<td class='active_code' onclick=\"insert_tag('[code=" . escape_html($keys[$i + $rowcount]) . "]','[/code]', 0)\">" . escape_html($SUPPORTED_CODES[$keys[$i + $rowcount]]) . "</td>\n";
            } else {
                $table .= "<td></td>\n";
            }
            
            if (!empty($keys[$i + 2 * $rowcount]) && !empty($SUPPORTED_CODES[$keys[$i + 2 * $rowcount]])) {
                $table .= "<td class='active_code' onclick=\"insert_tag('[code=" . escape_html($keys[$i + 2 * $rowcount]) . "]','[/code]', 0)\">" . escape_html($SUPPORTED_CODES[$keys[$i + 2 * $rowcount]]) . "</td>\n";
            } else {
                $table .= "<td></td>\n";
            }
            
            $table .= "</tr>\n";
        }
        
        $table .= "</table>\n";
        
        return $table;
    } // build_codes_table
    
    //-----------------------------------------------------------------
    function log_user_event($user_id, $author_id, $author_name, $event_code, $params, $post_id = null, $unset_new = false)
    {
        global $settings;

        if (empty($user_id) || empty($author_name) || empty($event_code)) {
            return true;
        }
        
        if (!empty($settings["archive_mode"])) {
            return true;
        }

        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $now = $dbw->format_datetime(time());
        
        $user_id = $dbw->escape($user_id);
        
        $event_code = $dbw->escape($event_code);
        
        $author_name = $dbw->escape($author_name);
        $author_id = $dbw->escape($author_id);
        if (empty($author_id)) {
            $author_id = "NULL";
        }
        
        $topic_name = quotes_or_null($dbw->escape(val_or_empty($params["{topic_name}"])));
        $topic_id = val_or_empty($params["{topic_id}"]);
        if (empty($topic_id) || !is_numeric($topic_id)) {
            $topic_id = "NULL";
        }
        
        $source_topic_name = quotes_or_null($dbw->escape(val_or_empty($params["{source_topic_name}"])));
        $source_topic_id = val_or_empty($params["{source_topic_id}"]);
        if (empty($source_topic_id) || !is_numeric($source_topic_id)) {
            $source_topic_id = "NULL";
        }
        
        $forum_name = quotes_or_null($dbw->escape(val_or_empty($params["{forum_name}"])));
        $forum_id = val_or_empty($params["{forum_id}"]);
        if (empty($forum_id) || !is_numeric($forum_id)) {
            $forum_id = "NULL";
        }
        
        $comment = quotes_or_null($dbw->escape(Emoji::Encode(val_or_empty($params["{comment}"]))));
        
        $params_str = "";
        serialize_array($params, $params_str);
        $params_str = quotes_or_null($dbw->escape(Emoji::Encode($params_str)));
        
        if (empty($post_id) || !is_numeric($post_id)) {
            $post_id = "NULL";
        }
        
        $todo = 0;
        if (!empty($params["todo"])) {
            $todo = $params["todo"];
            
            if ($unset_new) {
                $todo = 0;
            }
        }
        
        // if the same event repeats, delete the previous
        if ($post_id != "NULL") {
            $start_date = $dbw->format_datetime(time() - 30 * 60);
            
            if ($author_id != "NULL") {
                $author_appendix = " and author_id = $author_id";
            } else {
                $author_appendix = " and author_name = '$author_name'";
            }
            
            if (!$dbw->execute_query("update {$prfx}_events set redundant = 1
                                      where event_code = '$event_code' and post_id = $post_id and user_id = $user_id
                                      and event_time > '$start_date' $author_appendix")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
        }
        
        $is_new = $unset_new ? 0 : 1;
        
        if (!$dbw->execute_query("insert into {$prfx}_events
                             (event_time, user_id, event_code, params, author_name, author_id, post_id, todo, is_new,
                             topic_name,
                             topic_id,
                             source_topic_name,
                             source_topic_id,
                             forum_name,
                             forum_id,
                             comment
                             )
                             values
                             ('$now', $user_id, '$event_code', $params_str, '$author_name', $author_id, $post_id, $todo, $is_new,
                             $topic_name,
                             $topic_id,
                             $source_topic_name,
                             $source_topic_id,
                             $forum_name,
                             $forum_id,
                             $comment
                             )")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // log_user_event
    
    //-----------------------------------------------------------------
    function reset_unnecessary_events(&$post_list)
    {
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            return true;
        }
        
        $in_list = implode(",", array_keys($post_list));
        if (empty($in_list)) {
            return true;
        }
        
        if (!$dbw->execute_query("update {$prfx}_events set is_new = 0, todo = 0
                                  where user_id = $current_uid and post_id in ($in_list) and
                                  event_code in ('MsgEventNewMessageInTopic', 'MsgEventCitatedMessageInTopic', 'MsgEventCitatedSubscribedMessageInTopic', 'MsgEventWordsMentionedInTopic', 'MsgEventAttentionAsked', 'MsgEventGrantTopicModerator', 'MsgEventGrantTopicModeratorAnonym', 'MsgEventRevokeTopicModerator', 'MsgEventRevokeTopicModeratorAnonym', 'MsgEventNewTopicModeratorAdded', 'MsgEventNewTopicModeratorAddedAnonym', 'MsgEventTopicModeratorRemoved', 'MsgEventTopicModeratorRemovedAnonym', 'MsgEventModerationRequested')")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        measure_action_time("reset unnec. events");
        
        return true;
    } // reset_unnecessary_events
    
    //-----------------------------------------------------------------
    function set_post_events_done($post_id)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            return true;
        }
        
        if (empty($post_id)) {
            return true;
        }
        
        $post_id = $dbw->escape($post_id);
        
        if (!$dbw->execute_query("update {$prfx}_events set todo = 0
                             where user_id = $current_uid and post_id = $post_id")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // set_post_events_done
    
    //-----------------------------------------------------------------
    function set_event_done($evid)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            return true;
        }
        
        if (empty($evid)) {
            return true;
        }
        
        $evid = $dbw->escape($evid);
        
        if (!$dbw->execute_query("update {$prfx}_events set todo = 0
                             where user_id = $current_uid and id = $evid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // set_event_done

    //-----------------------------------------------------------------
    function track_last_events_read_date()
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        // handle possible block expiration
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            return true;
        }
        
        $now = $dbw->format_datetime(time());
        
        if (!$dbw->execute_query("update {$prfx}_user set last_events_view_date = '$now'
                             where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // track_last_events_read_date
    
    //-----------------------------------------------------------------
    function unset_events_new_status(&$event_list)
    {
        if (empty($event_list)) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        // handle possible block expiration
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            return true;
        }
        
        $in_list = $dbw->escape(implode(", ", array_keys($event_list)));
        if (!$dbw->execute_query("update {$prfx}_events set is_new = 0
                                  where user_id = $uid and id in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // unset_events_new_status
    
    //-----------------------------------------------------------------
    function build_event_html(&$evinfo, $target_blank)
    {
        return $this->format_manager->build_event_html($evinfo, $target_blank);
    } // build_event_html
    
    //-----------------------------------------------------------------
    function change_master_password()
    {
        if (reqvar_empty("current_password")) {
            MessageHandler::setError(text("ErrCurrentPasswordRequired"));
            MessageHandler::setErrorElement("current_password");
            return false;
        }
        
        if (reqvar_empty("password", true)) {
            MessageHandler::setError(text("ErrPasswordEmpty"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        $password_hash = System::generateHash(reqvar("current_password"), SALT_KEY);
        if (ADMIN_PASSWORD != $password_hash) {
            MessageHandler::setError(text("ErrWrongPassword"));
            MessageHandler::setErrorElement("current_password");
            return false;
        }
        
        if (reqvar("password") != reqvar("password2")) {
            MessageHandler::setError(text("ErrPwdNotIdentical"));
            MessageHandler::setErrorElement("password");
            return false;
        }
        
        $contents = @file_get_contents(APPLICATION_ROOT . "include/admin_config_inc.php");
        if ($contents === false) {
            MessageHandler::setError(sprintf(text("ErrReadingFile"), "include/admin_config_inc.php"), sys_get_last_error());
            return false;
        }
        
        $old_hash = ADMIN_PASSWORD;
        $admin_password_hash = System::generateHash(reqvar("password"), SALT_KEY);
        $contents = str_replace("define('ADMIN_PASSWORD', '" . escape_php($old_hash) . "')", "define('ADMIN_PASSWORD', '" . escape_php($admin_password_hash) . "')", $contents);
        
        $res = @file_put_contents(APPLICATION_ROOT . "include/admin_config_inc.php", $contents);
        if ($res === false) {
            MessageHandler::setError(sprintf(text("ErrWritingFile"), "include/admin_config_inc.php"), sys_get_last_error());
            return false;
        }
        
        $_SESSION["password_hash"] = $admin_password_hash;
        
        MessageHandler::setFocusElement("current_password");
        MessageHandler::setInfo(text("MsgPasswordChangeSuccess"));
        return true;
    } // change_master_password
    
    //-----------------------------------------------------------------
    function get_skin_list(&$skin_list, &$property_list)
    {
        global $settings;
        
        $skin_list[DEFAULT_SKIN] = DEFAULT_SKIN;
        
        $dir = APPLICATION_ROOT . "skins/";
        $files = scandir($dir);
        if (!$files) {
            return;
        }
        
        foreach ($files as $file) {
            if ($file == "." || $file == ".." || !is_dir($dir . "/" . $file)) {
                continue;
            }
            
            $skin_list[$file] = $file;
            
            if (!file_exists($dir . "/" . $file . "/info.xml")) {
                continue;
            }
            
            $xmldoc = new DOMDocument();
            if (!$xmldoc->load($dir . "/" . $file . "/info.xml")) {
                continue;
            }
            
            $xsdpath = new DOMXPath($xmldoc);
            
            $nodes = $xsdpath->evaluate("/description/caption");
            if ($nodes->length) {
                $skin_list[$file] = $nodes->item(0)->getAttribute(current_language());
            }
            
            if (empty($skin_list[$file])) {
                $skin_list[$file] = $file;
            }
            
            $nodes = $xsdpath->evaluate("/description/properties/property");
            if ($nodes->length == 0) {
                continue;
            }
            
            for ($i = 0; $i < $nodes->length; $i++) {
                $property_name = $nodes->item($i)->getAttribute("name");
                if (empty($property_name)) {
                    continue;
                }
                
                if ($nodes->item($i)->getAttribute("users_only") && $this->get_user_id() == "") {
                    continue;
                }
                
                if ($nodes->item($i)->getAttribute("guests_only") && $this->get_user_id() != "") {
                    continue;
                }
                
                if ($nodes->item($i)->getAttribute("rates_active") && empty($settings["rates_active"])) {
                    continue;
                }
                
                if ($nodes->item($i)->getAttribute("dislikes_active") && empty($settings["dislikes_active"])) {
                    continue;
                }
                
                $restriction = $nodes->item($i)->getAttribute("restriction");
                if (!empty($restriction)) {
                    if ($restriction == "user" && $this->get_user_id() == "") {
                        continue;
                    }
                    
                    if ($restriction == "guest" && $this->get_user_id() != "") {
                        continue;
                    }
                }
                
                $property_list[$file][$property_name]["name"] = $property_name;
                
                $property_list[$file][$property_name]["caption"] = $nodes->item($i)->getAttribute(current_language());
                if (empty($property_list[$file][$property_name]["caption"])) {
                    $property_list[$file][$property_name]["caption"] = $property_name;
                }
                
                $property_list[$file][$property_name]["type"] = $nodes->item($i)->getAttribute("type");
                $property_list[$file][$property_name]["default"] = $nodes->item($i)->getAttribute("default");
                
                if (!isset($_SESSION["skin_properties"][$file][$property_name])) {
                    $_SESSION["skin_properties"][$file][$property_name] = $nodes->item($i)->getAttribute("default");
                }
            }
        }
    } // get_skin_list
    
    //-----------------------------------------------------------------
    function update_user_cookies()
    {
        // we store the last guest name to the cookie only if the user is not logged
        
        if (!$this->is_logged_in()) {
            set_cookie("q_last_guest_name", val_or_empty($_SESSION["user_name"]), time() + 90 * 24 * 3600);
        }
        
        // we store the settings for all - guests and users, so that if the user loggs out,
        // he keeps the settings.
        
        set_cookie("q_hide_pictures", val_or_empty($_SESSION["hide_pictures"]), time() + 90 * 24 * 3600);
        set_cookie("q_donot_hide_adult_pictures", val_or_empty($_SESSION["donot_hide_adult_pictures"]), time() + 90 * 24 * 3600);
        set_cookie("q_hide_user_info", val_or_empty($_SESSION["hide_user_info"]), time() + 90 * 24 * 3600);
        set_cookie("q_hide_user_avatars", val_or_empty($_SESSION["hide_user_avatars"]), time() + 90 * 24 * 3600);
        set_cookie("q_hide_ignored", val_or_empty($_SESSION["hide_ignored"]), time() + 90 * 24 * 3600);
        set_cookie("q_hide_comments", val_or_empty($_SESSION["hide_comments"]), time() + 90 * 24 * 3600);
        set_cookie("q_thematic_per_default", val_or_empty($_SESSION["thematic_per_default"]), time() + 90 * 24 * 3600);
        set_cookie("q_skin", val_or_empty($_SESSION["skin"]), time() + 90 * 24 * 3600);
        set_cookie("q_custom_css", val_or_empty($_SESSION["custom_css"]), time() + 90 * 24 * 3600);
        set_cookie("q_interface_language", current_language(), time() + 90 * 24 * 3600);
        set_cookie("q_time_zone", val_or_empty($_SESSION["time_zone"]), time() + 90 * 24 * 3600);
        
        set_cookie("q_ignore_new_guests", val_or_empty($_SESSION["ignore_new_guests"]), time() + 90 * 24 * 3600);
        set_cookie("q_ignore_guests_blacklist", val_or_empty($_SESSION["ignore_guests_blacklist"]), time() + 90 * 24 * 3600);
        set_cookie("q_ignore_guests_whitelist", val_or_empty($_SESSION["ignore_guests_whitelist"]), time() + 90 * 24 * 3600);
        
        $skin_properties = "";
        if (!empty($_SESSION["skin_properties"])) {
            $skin_properties = array_to_json($_SESSION["skin_properties"]);
        }
        set_cookie("q_skin_properties", $skin_properties, time() + 90 * 24 * 3600);
        
        $ignored_guests_blacklist = "";
        if (!empty($_SESSION["ignored_guests_blacklist"])) {
            $ignored_guests_blacklist = implode("\n", $_SESSION["ignored_guests_blacklist"]);
        }
        set_cookie("q_ignored_guests_blacklist", $ignored_guests_blacklist, time() + 90 * 24 * 3600);
        
        $ignored_guests_whitelist = "";
        if (!empty($_SESSION["ignored_guests_whitelist"])) {
            $ignored_guests_whitelist = implode("\n", $_SESSION["ignored_guests_whitelist"]);
        }
        set_cookie("q_ignored_guests_whitelist", $ignored_guests_whitelist, time() + 90 * 24 * 3600);
        
        $ignored_users = "";
        if (!empty($_SESSION["ignored_users"])) {
            $ignored_users = implode("\n", $_SESSION["ignored_users"]);
        }
        set_cookie("q_ignored_users", $ignored_users, time() + 90 * 24 * 3600);
        
        $hidden_profiles = "";
        if (!empty($_SESSION["hidden_profiles"])) {
            $hidden_profiles = implode("\n", $_SESSION["hidden_profiles"]);
        }
        set_cookie("q_hidden_profiles", $hidden_profiles, time() + 90 * 24 * 3600);
        
        $hidden_guest_profiles = "";
        if (!empty($_SESSION["hidden_guest_profiles"])) {
            $hidden_guest_profiles = implode("\n", $_SESSION["hidden_guest_profiles"]);
        }
        set_cookie("q_hidden_guest_profiles", $hidden_guest_profiles, time() + 90 * 24 * 3600);
        
        $ignored_topics = "";
        if (!empty($_SESSION["ignored_topics"])) {
            $ignored_topics = implode("\n", $_SESSION["ignored_topics"]);
        }
        set_cookie("q_ignored_topics", $ignored_topics, time() + 90 * 24 * 3600);
        
        $favourite_topics = "";
        if (!empty($_SESSION["favourite_topics"])) {
            $favourite_topics = implode("\n", $_SESSION["favourite_topics"]);
        }
        set_cookie("q_favourite_topics", $favourite_topics, time() + 90 * 24 * 3600);
        
        $pinned_topics = "";
        if (!empty($_SESSION["pinned_topics"])) {
            $pinned_topics = implode("\n", $_SESSION["pinned_topics"]);
        }
        set_cookie("q_pinned_topics", $pinned_topics, time() + 90 * 24 * 3600);
        
        $favourite_posts = "";
        if (!empty($_SESSION["favourite_posts"])) {
            $favourite_posts = implode("\n", $_SESSION["favourite_posts"]);
        }
        set_cookie("q_favourite_posts", $favourite_posts, time() + 90 * 24 * 3600);
        
        $ignored_forums = "";
        if (!empty($_SESSION["ignored_forums"])) {
            $ignored_forums = implode(",", $_SESSION["ignored_forums"]);
        }
        set_cookie("q_ignored_forums", $ignored_forums, time() + 90 * 24 * 3600);
    } // update_user_cookies
    
    //-----------------------------------------------------------------
    function read_user_cookies()
    {
        global $settings;
        global $READ_MARKER;
        
        // by normal users, the settings are read from the profile in the DB
        
        if (!is_maintenance() && $this->is_logged_in() && !$this->is_master_admin()) {
            return true;
        }
        
        // we do not load the last guest name from cookie if the admin is logged in
        
        if (!$this->is_master_admin()) {
            $_SESSION["user_name"] = get_cookie("q_last_guest_name");
            
            if (!$this->check_author($_SESSION["user_name"])) {
                $_SESSION["user_name"] = text("Guest");
            }
            
            if (!empty($settings["max_user_name_symbols"])) {
                $_SESSION["user_name"] = utf8_trim(utf8_substr($_SESSION["user_name"], 0, $settings["max_user_name_symbols"]));
            }
            
            if (!is_maintenance()) {
                if (empty($_SESSION["last_posted_user"]) && $this->check_read_marker_last_activity($READ_MARKER)) {
                    $_SESSION["last_posted_user"] = $_SESSION["user_name"];
                }
            }
        }
        
        // we load the settings for all - guests and users
        
        $_SESSION["hide_ignored"] = get_cookie("q_hide_ignored");
        $_SESSION["hide_pictures"] = get_cookie("q_hide_pictures");
        $_SESSION["donot_hide_adult_pictures"] = get_cookie("q_donot_hide_adult_pictures");
        $_SESSION["hide_user_info"] = get_cookie("q_hide_user_info");
        $_SESSION["hide_user_avatars"] = get_cookie("q_hide_user_avatars");
        $_SESSION["hide_comments"] = get_cookie("q_hide_comments");
        $_SESSION["thematic_per_default"] = get_cookie("q_thematic_per_default");
        
        $_SESSION["skin"] = get_cookie("q_skin");
        $this->check_skin($_SESSION["skin"]);
        
        $skin_properties = get_cookie("q_skin_properties");
        if (!empty($skin_properties)) {
            $_SESSION["skin_properties"] = json_decode($skin_properties, true);
            if (empty($_SESSION["skin_properties"])) {
                $_SESSION["skin_properties"] = array();
            }
        } else {
            $_SESSION["skin_properties"] = array();
        }
        
        $_SESSION["ignore_new_guests"] = get_cookie("q_ignore_new_guests");
        $_SESSION["ignore_guests_blacklist"] = get_cookie("q_ignore_guests_blacklist");
        $_SESSION["ignore_guests_whitelist"] = get_cookie("q_ignore_guests_whitelist");
        
        $_SESSION["ignored_new_guests"] = array();
        
        $_SESSION["ignored_guests_blacklist"] = array();
        if (get_cookie("q_ignored_guests_blacklist") != "") {
            $ignored_guests = preg_split("/[\n\r]+/", get_cookie("q_ignored_guests_blacklist"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($ignored_guests as $guest) {
                $_SESSION["ignored_guests_blacklist"][utf8_strtolower($guest)] = $guest;
            }
        }
        
        $_SESSION["ignored_guests_whitelist"] = array();
        if (get_cookie("q_ignored_guests_whitelist") != "") {
            $ignored_guests = preg_split("/[\n\r]+/", get_cookie("q_ignored_guests_whitelist"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($ignored_guests as $guest) {
                $_SESSION["ignored_guests_whitelist"][utf8_strtolower($guest)] = $guest;
            }
        }
        
        $_SESSION["ignored_users"] = array();
        if (get_cookie("q_ignored_users") != "") {
            $ignored_users = preg_split("/[\n\r]+/", get_cookie("q_ignored_users"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($ignored_users as $uid) {
                if (!is_numeric($uid)) {
                    continue;
                }
                
                $_SESSION["ignored_users"][$uid] = $uid;
            }
        }
        
        $_SESSION["hidden_profiles"] = array();
        if (get_cookie("q_hidden_profiles") != "") {
            $hidden_profiles = preg_split("/[\n\r]+/", get_cookie("q_hidden_profiles"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($hidden_profiles as $uid) {
                if (!is_numeric($uid)) {
                    continue;
                }
                
                $_SESSION["hidden_profiles"][$uid] = $uid;
            }
        }
        
        $_SESSION["hidden_guest_profiles"] = array();
        if (get_cookie("q_hidden_guest_profiles") != "") {
            $hidden_guest_profiles = preg_split("/[\n\r]+/", get_cookie("q_hidden_guest_profiles"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($hidden_guest_profiles as $guest) {
                $_SESSION["hidden_guest_profiles"][$guest] = $guest;
            }
        }
        
        $_SESSION["ignored_topics"] = array();
        if (get_cookie("q_ignored_topics") != "") {
            $ignored_topics = preg_split("/[\n\r]+/", get_cookie("q_ignored_topics"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($ignored_topics as $tid) {
                if (!is_numeric($tid)) {
                    continue;
                }
                
                $_SESSION["ignored_topics"][$tid] = $tid;
            }
        }
        
        $_SESSION["favourite_topics"] = array();
        if (get_cookie("q_favourite_topics") != "") {
            $favourite_topics = preg_split("/[\n\r]+/", get_cookie("q_favourite_topics"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($favourite_topics as $tid) {
                if (!is_numeric($tid)) {
                    continue;
                }
                
                $_SESSION["favourite_topics"][$tid] = $tid;
            }
        }
        
        $_SESSION["pinned_topics"] = array();
        if (get_cookie("q_pinned_topics") != "") {
            $pinned_topics = preg_split("/[\n\r]+/", get_cookie("q_pinned_topics"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($pinned_topics as $tid) {
                if (!is_numeric($tid)) {
                    continue;
                }
                
                $_SESSION["pinned_topics"][$tid] = $tid;
            }
        }
        
        $_SESSION["favourite_posts"] = array();
        if (get_cookie("q_favourite_posts") != "") {
            $favourite_posts = preg_split("/[\n\r]+/", get_cookie("q_favourite_posts"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($favourite_posts as $pid) {
                if (!is_numeric($pid)) {
                    continue;
                }
                
                $_SESSION["favourite_posts"][$pid] = $pid;
            }
        }
        
        $_SESSION["ignored_forums"] = array();
        if (get_cookie("q_ignored_forums") != "") {
            $ignored_forums = explode(",", get_cookie("q_ignored_forums"));
            foreach ($ignored_forums as $fid) {
                if (!is_numeric($fid)) {
                    continue;
                }
                
                $_SESSION["ignored_forums"][$fid] = $fid;
            }
            }

        $_SESSION["time_zone"] = get_cookie("q_time_zone");
        if (empty($_SESSION["time_zone"]) || !in_array($_SESSION["time_zone"], $GLOBALS['time_zones'])) {
            $_SESSION["time_zone"] = TIME_ZONE;
        }
        
        $_SESSION["verified_protected_forums"] = array();
        
        if (get_cookie("q_interface_language") != "") {
            set_language(get_cookie("q_interface_language"));
        }
        
        if (is_maintenance()) {
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->execute_query("select id, password from {$prfx}_forum where protected_by_password = 1")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $fid = $dbw->field_by_name("id");
            $pwhash = md5($dbw->field_by_name("password"));
            
            if (get_cookie("password_verified_$fid") == $pwhash) {
                $_SESSION["verified_protected_forums"][$fid] = $fid;
            }
        }
        
        $dbw->free_result();

        // preferred forums
        
        $_SESSION["preferred_forums"] = array();
        
        if (!empty($_SESSION["ignored_forums"])) {
            $in_list = $dbw->escape(implode(",", $_SESSION["ignored_forums"]));

            $query = "select id from {$prfx}_forum where id not in ($in_list) and {$prfx}_forum.name <> 'PRIVATE_MESSAGES'";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $fid = $dbw->field_by_name("id");
                
                $_SESSION["preferred_forums"][$fid] = $fid;
            }
            
            $dbw->free_result();
        }
    } // read_user_cookies
    
    //-----------------------------------------------------------------
    function get_guest_data(&$user_data)
    {
        global $READ_MARKER;
        
        $user_data["user_name"] = val_or_empty($_SESSION["user_name"]);
        $user_data["hide_ignored"] = val_or_empty($_SESSION["hide_ignored"]);
        $user_data["hide_pictures"] = val_or_empty($_SESSION["hide_pictures"]);
        $user_data["donot_hide_adult_pictures"] = val_or_empty($_SESSION["donot_hide_adult_pictures"]);
        $user_data["hide_user_info"] = val_or_empty($_SESSION["hide_user_info"]);
        $user_data["hide_user_avatars"] = val_or_empty($_SESSION["hide_user_avatars"]);
        
        $user_data["hide_comments"] = val_or_empty($_SESSION["hide_comments"]);
        $user_data["thematic_per_default"] = val_or_empty($_SESSION["thematic_per_default"]);
        
        $user_data["custom_css"] = val_or_empty($_SESSION["custom_css"]);
        
        $user_data["skin"] = val_or_empty($_SESSION["skin"]);
        if (!empty($_SESSION["skin_properties"])) {
            $user_data["skin_properties"] = $_SESSION["skin_properties"];
        } else {
            $user_data["skin_properties"] = array();
        }
        
        $user_data["ignore_new_guests"] = val_or_empty($_SESSION["ignore_new_guests"]);
        $user_data["ignore_guests_blacklist"] = val_or_empty($_SESSION["ignore_guests_blacklist"]);
        $user_data["ignore_guests_whitelist"] = val_or_empty($_SESSION["ignore_guests_whitelist"]);
        
        $user_data["ignored_guests_blacklist"] = "";
        if (!empty($_SESSION["ignored_guests_blacklist"])) {
            foreach($_SESSION["ignored_guests_blacklist"] as $guest) {
                if ($guest == "admin") {
                    $guest = text("MasterAdministrator");
                }
                
                $user_data["ignored_guests_blacklist"] .= $guest . "\n";
            }
            
            $user_data["ignored_guests_blacklist"] = trim($user_data["ignored_guests_blacklist"]);
        }
        
        $user_data["ignored_guests_whitelist"] = "";
        if (!empty($_SESSION["ignored_guests_whitelist"])) {
            foreach($_SESSION["ignored_guests_whitelist"] as $guest) {
                if ($guest == "admin") {
                    $guest = text("MasterAdministrator");
                }

                $user_data["ignored_guests_whitelist"] .= $guest . "\n";
            }
            
            $user_data["ignored_guests_whitelist"] = trim($user_data["ignored_guests_whitelist"]);
        }
        
        $user_data["interface_language"] = current_language();
        
        $user_data["time_zone"] = val_or_empty($_SESSION["time_zone"]);
        if (empty($user_data["time_zone"]) || !in_array($user_data["time_zone"], $GLOBALS['time_zones'])) {
            $user_data["time_zone"] = TIME_ZONE;
        }
        
        $user_data["preferred_forums"] = array();
        if (!empty($_SESSION["preferred_forums"])) {
            $user_data["preferred_forums"] = $_SESSION["preferred_forums"];
        }
        
        if ($this->is_master_admin()) {
            $user_data["aname"] = "admin";
        } else {
            $user_data["aname"] = System::generateHash($READ_MARKER . $user_data["user_name"], SALT_KEY);
        }
        
        $exts = AttachmentManager::get_picture_exts();
        foreach ($exts as $ext) {
            if (file_exists(APPLICATION_ROOT . "user_data/avatars/" . $user_data["aname"] . "." . $ext)) {
                $user_data["avatar"] = "user_data/avatars/" . $user_data["aname"] . "." . $ext;
                $user_data["avatar_ctime"] = filectime(APPLICATION_ROOT . "user_data/avatars/" . $user_data["aname"] . "." . $ext);
            }
        }
        
        return true;
    } // get_guest_data
    
    //-----------------------------------------------------------------
    function save_guest_profile()
    {
        global $READ_MARKER;
        global $settings;
        
        if ($this->is_logged_in()) {
            return true;
        }

        if (!empty($_FILES["avatar"]["name"]) && reqvar_empty("user_name", true)) {
            MessageHandler::setError(text("ErrUserNameEmpty"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        if (Emoji::HasEmoji(reqvar("user_name"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        shrink_spaces($_REQUEST["user_name"]);
        
        if (utf8_strlen(reqvar("user_name")) > $settings["max_user_name_symbols"]) {
            MessageHandler::setError(sprintf(text("ErrUserNameTooLong"), $settings["max_user_name_symbols"]));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        if (!$this->check_author(reqvar("user_name"))) {
            MessageHandler::setError(text("ErrStringContainsInvalidSymbols"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        // check the user_name
        
        $check = $this->check_name_usage(reqvar("user_name"), "", false);
        if ($check == 1) {
            MessageHandler::setError(text("ErrUserNameInUse"));
            MessageHandler::setErrorElement("user_name");
            return false;
        } elseif ($check == 2) {
            MessageHandler::setError(text("ErrUserNameReserved"));
            MessageHandler::setErrorElement("user_name");
            return false;
        } elseif ($check == 3) {
            MessageHandler::setError(text("ErrUserNameProtected"));
            MessageHandler::setErrorElement("user_name");
            return false;
        }
        
        $_SESSION["user_name"] = reqvar("user_name");
        
        // user wants to clear his name and presence
        if (empty($_SESSION["user_name"])) {
            $_SESSION["last_posted_user"] = "";
        }
        
        $_SESSION["skin"] = reqvar("skin");
        
        $_SESSION["skin_properties"] = array();
        if (!empty($_REQUEST["skin_properties_placeholders"])) {
            $_SESSION["skin_properties"] = $_REQUEST["skin_properties_placeholders"];
        }
        
        if (!empty($_REQUEST["skin_properties"])) {
            foreach ($_REQUEST["skin_properties"] as $skin_name => $properties) {
                foreach ($properties as $property_name => $property_value) {
                    $_SESSION["skin_properties"][$skin_name][$property_name] = $property_value;
                }
            }
        }
        
        $_SESSION["custom_css"] = reqvar("custom_css");
        $_SESSION["time_zone"] = reqvar("time_zone");
        
        $_SESSION["hide_ignored"] = reqvar_empty("hide_ignored") ? "0" : "1";
        $_SESSION["hide_pictures"] = reqvar_empty("hide_pictures") ? "0" : "1";
        $_SESSION["donot_hide_adult_pictures"] = reqvar_empty("donot_hide_adult_pictures") ? "0" : "1";
        $_SESSION["hide_user_info"] = reqvar_empty("hide_user_info") ? "0" : "1";
        $_SESSION["hide_user_avatars"] = reqvar_empty("hide_user_avatars") ? "0" : "1";
        
        $_SESSION["hide_comments"] = reqvar_empty("hide_comments") ? "0" : "1";
        $_SESSION["thematic_per_default"] = reqvar_empty("thematic_per_default") ? "0" : "1";
        
        $_SESSION["ignore_new_guests"] = reqvar_empty("ignore_new_guests") ? "0" : "1";
        $_SESSION["ignore_guests_blacklist"] = reqvar_empty("ignore_guests_blacklist") ? "0" : "1";
        $_SESSION["ignore_guests_whitelist"] = reqvar_empty("ignore_guests_whitelist") ? "0" : "1";
        
        $_SESSION["ignored_guests_blacklist"] = array();
        if (!reqvar_empty("ignored_guests_blacklist")) {
            $ignored_guests = preg_split("/[\n\r]+/", reqvar("ignored_guests_blacklist"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($ignored_guests as $guest) {
                shrink_spaces($guest);

                $guest = $this->display_name_to_name($guest);
                
                if ($guest == "") {
                    continue;
                }

                $_SESSION["ignored_guests_blacklist"][utf8_strtolower($guest)] = $guest;
            }
        }
        
        if (empty($_SESSION["ignored_guests_blacklist"])) {
            $_SESSION["ignore_guests_blacklist"] = 0;
        }
        
        $_SESSION["ignored_guests_whitelist"] = array();
        if (!reqvar_empty("ignored_guests_whitelist")) {
            $ignored_guests = preg_split("/[\n\r]+/", reqvar("ignored_guests_whitelist"), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($ignored_guests as $guest) {
                shrink_spaces($guest);

                $guest = $this->display_name_to_name($guest);
                
                if ($guest == "") {
                    continue;
                }

                $_SESSION["ignored_guests_whitelist"][utf8_strtolower($guest)] = $guest;
            }
        }
        
        // ignores
        
        if (!empty($_REQUEST["remove_from_ignore"])) {
            foreach ($_REQUEST["remove_from_ignore"] as $uid) {
                unset($_SESSION["ignored_users"][$uid]);
            }
        }
        
        unset($_SESSION["preferred_forums"]);
        unset($_SESSION["ignored_forums"]);
        
        if (!empty($_REQUEST["preferred_forums"])) {
            $_SESSION["preferred_forums"] = $_REQUEST["preferred_forums"];

            $forum_list = array();
            if (!$this->get_forum_list($forum_list, false)) {
                return false;
            }
            
            foreach ($forum_list as $fid => $dummy) {
                if (empty($_REQUEST["preferred_forums"][$fid])) {
                    $_SESSION["ignored_forums"][$fid] = $fid;
                }
            }            
        }
        
        if (!reqvar_empty("interface_language")) {
            set_language(reqvar("interface_language"));
        }
        
        $this->update_user_cookies();
        
        if (!reqvar_empty("user_name", true)) {
            if (!empty($_FILES["avatar"]["name"]) && $_FILES["avatar"]["size"] > 0 &&
                $this->check_blocked("")) {
                return false;
            }
            
            if ($this->is_master_admin()) {
                $aname = "admin";
            } else {
                $aname = System::generateHash($READ_MARKER . reqvar("user_name"), SALT_KEY);
            }
            
            $this->handle_avatar($aname);
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        MessageHandler::setInfo(text("MsgDataSaved"));
        return true;
    } // save_guest_profile
    
    //-----------------------------------------------------------------
    function delete_guest_avatar($pid, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        if (empty($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $pid = $dbw->escape($pid);
        
        // get the author data from post
        
        $event_data = array();
        
        if (!$dbw->execute_query("select forum_id, topic_id, {$prfx}_post.id,
                             {$prfx}_post.author, {$prfx}_post.read_marker,
                             {$prfx}_topic.name topic_name, {$prfx}_forum.name forum_name
                             from
                             {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             where {$prfx}_post.id = $pid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $aname = "";
        
        if ($dbw->fetch_row()) {
            $author = $dbw->field_by_name("author");
            
            if ($author == "admin") {
                $aname = "admin";
            } else {
                $aname = System::generateHash($dbw->field_by_name("read_marker") . $author, SALT_KEY);
            }
            
            $event_data = array(
                "post_id" => $dbw->field_by_name("id"),
                "topic_id" => $dbw->field_by_name("topic_id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "author_id" => "",
                "author_name" => $author,
                "author_email" => "",
                "send_notifications" => 0,
                "action" => "delete_avatar"
            );
        } else {
            $dbw->free_result();
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        $dbw->free_result();
        
        if (empty($event_data["topic_id"])) {
            MessageHandler::setError(text("ErrNoTopicSelected"));
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!empty($aname)) {
            $exts = AttachmentManager::get_picture_exts();
            foreach ($exts as $ext) {
                if (file_exists(APPLICATION_ROOT . "user_data/avatars/" . $aname . "." . $ext)) {
                    @unlink(APPLICATION_ROOT . "user_data/avatars/" . $aname . "." . $ext);
                }
            }
        }
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgAvatarDeleted"));
        
        return true;
    } // delete_guest_avatar
    
    //-----------------------------------------------------------------
    function delete_guest_avatar_by_guest_id($guest_name, $aname)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        if (empty($aname)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $event_data = array(
            "author_name" => $guest_name,
            "action" => "delete_avatar"
        );
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!empty($aname)) {
            $exts = AttachmentManager::get_picture_exts();
            foreach ($exts as $ext) {
                if (file_exists(APPLICATION_ROOT . "user_data/avatars/" . $aname . "." . $ext)) {
                    @unlink(APPLICATION_ROOT . "user_data/avatars/" . $aname . "." . $ext);
                }
            }
        }
        
        if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgAvatarDeleted"));
        
        return true;
    } // delete_guest_avatar_by_guest_id
    
    //-----------------------------------------------------------------
    function delete_read_marker($read_marker)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        if (empty($read_marker)) {
            MessageHandler::setError(text("ErrReadMarkerEmpty"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $read_marker = $dbw->escape($read_marker);
        
        $query = "delete from {$prfx}_read_marker_activity where read_marker = '$read_marker'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgReadMarkerDeleted"));
        
        return true;
    } // delete_read_marker
    
    //-----------------------------------------------------------------
    function has_auto_saved_message($tid)
    {
        global $READ_MARKER;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (empty($tid) || !is_numeric($tid)) {
            $tid = 0;
        }
        $tid = $dbw->escape($tid);
        
        $rm = $dbw->escape($READ_MARKER);
        
        $query = "select 1 from {$prfx}_auto_saved where topic_id = $tid and read_marker = '$rm'";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            return true;
        }
        
        $dbw->free_result();
        
        return false;
    } // has_auto_saved_message
    
    //-----------------------------------------------------------------
    function load_auto_saved_message($tid, &$message)
    {
        global $READ_MARKER;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (empty($tid) || !is_numeric($tid)) {
            $tid = 0;
        }
        $tid = $dbw->escape($tid);
        
        $rm = $dbw->escape($READ_MARKER);
        
        $query = "select text_content from {$prfx}_auto_saved where topic_id = $tid and read_marker = '$rm'";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $message = Emoji::Decode($dbw->field_by_name("text_content"));
        }
        
        $dbw->free_result();
        
        return true;
    } // load_auto_saved_message
    
    //-----------------------------------------------------------------
    function auto_save_message($tid, $message)
    {
        global $READ_MARKER;
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (empty($tid) || !is_numeric($tid)) {
            $tid = 0;
        }
        $tid = $dbw->escape($tid);
        
        $rm = $dbw->escape($READ_MARKER);
        
        $now = $dbw->format_datetime(time());
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "delete from {$prfx}_auto_saved where topic_id = $tid and read_marker = '$rm'";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $message = Emoji::Encode(reqvar("message"));
        $message = quotes_or_null($dbw->escape($message));
        
        $query = "insert into {$prfx}_auto_saved
              (topic_id, read_marker, dt, text_content)
              values
              ($tid, '$rm', '$now', $message)";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // auto_save_message
    
    //-----------------------------------------------------------------
    function find_moderated_users($fid, $start_date, $hour, $minute, &$found_users)
    {
        $start_date = iso_date($start_date, text("DateFormat"));
        if (empty($start_date) || $start_date == "error") {
            MessageHandler::setError(text("ErrStartDateEmpty"));
            MessageHandler::setErrorElement("start_date");
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $start_date = xstrtotime($start_date);
        
        if (!empty($hour) && is_numeric($hour)) {
            $start_date += $hour * 3600;
        }
        if (!empty($minute) && is_numeric($minute)) {
            $start_date += $minute * 60;
        }
        
        $start_date = back_adjust_timezone($start_date);

        $where = "where {$prfx}_post.deleted <> 1 and {$prfx}_post.creation_date >= '" . $dbw->format_datetime($start_date) . "'";
        if (!empty($fid) && is_numeric($fid)) {
            $fid = $dbw->escape($fid);
            
            if ($this->is_admin()) {
                $where .= " and {$prfx}_topic.forum_id = $fid";
            } else {
                $where .= " and {$prfx}_topic.forum_id = $fid and {$prfx}_topic.forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $uid) and {$prfx}_topic.is_private < 1";
            }
        } elseif (!$this->is_admin()) {
            $uid = $dbw->escape($this->get_user_id());
            if (empty($uid)) {
                $uid = "NULL";
            }
            
            $where .= " and {$prfx}_topic.forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $uid)";
        } else { // is admin
            $where .= " and {$prfx}_topic.is_private < 1";
        }
        
        if ($this->demo_mode()) {
            $where .= " and {$prfx}_topic.forum_id in (select id from {$prfx}_forum where
                                                  {$prfx}_forum.name <> 'PRIVATE_MESSAGES' and
                                                  ((restricted_access = 0 and deleted <> 1) or
                                                   (restricted_access = 2 and deleted <> 1)
                                                  )
                                                )";
        }
        
        $query = "select
                  {$prfx}_post.author, {$prfx}_post.read_marker
                  from {$prfx}_post
                  inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                  left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                  $where
                  and {$prfx}_post.user_id is NULL
                  group by
                  {$prfx}_post.author, {$prfx}_post.read_marker
                  ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $guests = array();
        
        while ($dbw->fetch_row()) {
            $rm = $dbw->field_by_name("read_marker");
            
            if (empty($guests[$rm])) {
                $guests[$rm] = $dbw->field_by_name("author");
            } else {
                $guests[$rm] .= " / " . $dbw->field_by_name("author");
            }
        }
        
        $dbw->free_result();
        
        $query = $this->get_query_post_count($prfx, $where);
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            if ($dbw->field_by_name("user_id") == "") {
                $uid = $dbw->field_by_name("uid");
                
                $uname = val_or_empty($guests[$uid]);
                
                $ln = 35;
                if (utf8_strlen($uname) > ($ln + 4)) {
                    $uname = utf8_trim(utf8_substr($uname, 0, $ln), "/. ") . " ...";
                }
                
                $uname = $uname . " [" . $dbw->field_by_name("cnt") . " / " . text("Guest") . "]";
                $uid = "g:" . $uid;
            } else {
                $uid = "u:" . $dbw->field_by_name("uid");
                
                $duration = time() - xstrtotime($dbw->field_by_name("registration_date"));
                
                if ($duration > 24 * 3600) {
                    $duration = floor($duration / (24 * 3600)) * 24 * 3600;
                }
                
                $uname = $dbw->field_by_name("user_name");
                
                $ln = 35;
                if (utf8_strlen($uname) > ($ln + 4)) {
                    $uname = utf8_trim(utf8_substr($uname, 0, $ln), "/. ") . " ...";
                }
                
                $uname = $uname . " [" . $dbw->field_by_name("cnt") . " / " . format_duration($duration) . "]";
            }
            
            $found_users[$uid] = $uname;
        }
        
        $dbw->free_result();
        
        if (count($found_users) == 0) {
            MessageHandler::setWarning(text("UsersNotFound"));
            return false;
        }
        
        return true;
    } // find_moderated_users
    
    //-----------------------------------------------------------------
    function bulk_delete_posts_by_users($fid, $start_date, $hour, $minute)
    {
        global $settings;
        
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($_REQUEST["selected_users"]) || count($_REQUEST["selected_users"]) == 0) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        $start_date = iso_date($start_date, text("DateFormat"));
        if (empty($start_date) || $start_date == "error") {
            MessageHandler::setError(text("ErrStartDateEmpty"));
            MessageHandler::setErrorElement("start_date");
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = "0";
        }

        $start_date = xstrtotime($start_date);
        
        if (!empty($hour) && is_numeric($hour)) {
            $start_date += $hour * 3600;
        }
        if (!empty($minute) && is_numeric($minute)) {
            $start_date += $minute * 60;
        }
        
        $start_date = back_adjust_timezone($start_date);
        
        $is_private = false;
        
        $email_template_prefix = "email_posts_bulk_deleted";
        $event_code = "MsgEventBulkMessagesDeleted";

        $where = "{$prfx}_post.deleted <> 1 and {$prfx}_post.creation_date >= '" . $dbw->format_datetime($start_date) . "'";
        if (!empty($fid) && is_numeric($fid)) {
            $email_template_prefix = "email_posts_bulk_forum_deleted";
            $event_code = "MsgEventBulkMessagesDeletedOnForum";

            $is_private = $fid == $this->get_private_forum_id();

            $fid = $dbw->escape($fid);
            
            if ($this->is_admin()) {
                $where .= " and {$prfx}_post.topic_id in (select id from {$prfx}_topic where forum_id = $fid)";
            } else {
                $where .= " and {$prfx}_post.topic_id in (select id from {$prfx}_topic where forum_id = $fid and {$prfx}_topic.forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $current_uid) and {$prfx}_topic.is_private < 1)";
            }
        } elseif (!$this->is_admin()) {
            $where .= " and {$prfx}_post.topic_id in (select id from {$prfx}_topic where forum_id in (select forum_id from {$prfx}_forum_moderator where user_id = $current_uid))";
        } else {
            $where .= " and {$prfx}_post.topic_id in (select id from {$prfx}_topic where {$prfx}_topic.is_private < 1)";
        }
        
        $users = array();
        $guests = array();
        
        foreach ($_REQUEST["selected_users"] as $val) {
            if (preg_match("/g:(.+)/", $val, $matches)) {
                $guests[] = $dbw->escape($matches[1]);
            } elseif (preg_match("/u:(\d+)/", $val, $matches)) {
                $users[] = $dbw->escape($matches[1]);
            }
        }
        
        $user_guest_clause = "";
        
        $user_in_list = implode(",", $users);
        if (empty($user_in_list)) {
            $user_in_list = "NULL";
        } else {
            $user_guest_clause .= "{$prfx}_post.user_id in ($user_in_list)";
        }
        
        $guest_in_list = implode("','", $guests);
        if (empty($guest_in_list)) {
            $guest_in_list = "NULL";
        } else {
            $guest_in_list = "'" . $guest_in_list . "'";
            
            if (!empty($user_guest_clause)) {
                $user_guest_clause .= " or ";
            }
            
            $user_guest_clause .= "({$prfx}_post.user_id is NULL and {$prfx}_post.read_marker in ($guest_in_list))";
        }
        
        $affected_users = array();
        
        if (!$dbw->execute_query("select {$prfx}_user.id, email, user_name, last_host, send_notifications, interface_language, is_admin, count(*) cnt
                             from {$prfx}_post
                             inner join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                             where $where and {$prfx}_user.id in ($user_in_list)
                             group by {$prfx}_user.id, email, user_name, last_host, send_notifications, interface_language, is_admin
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            if ($dbw->field_by_name("is_admin") && !reqvar_empty("block_users")) {
                MessageHandler::setError(text("ErrModeratorBlockNotAllowed"));
                $dbw->free_result();
                return false;
            }
            
            $affected_users[$dbw->field_by_name("id")] = array(
                "user_name" => $dbw->field_by_name("user_name"),
                "user_email" => $dbw->field_by_name("email"),
                "send_notifications" => $dbw->field_by_name("send_notifications"),
                "last_host" => $dbw->field_by_name("last_host"),
                "interface_language" => $dbw->field_by_name("interface_language"),
                "post_count" => $dbw->field_by_name("cnt")
            );
        }
        
        $dbw->free_result();
        
        $affected_guests = array();
        
        if (!$dbw->execute_query("select author, count(*) cnt
                             from {$prfx}_post
                             where $where and {$prfx}_post.user_id is NULL and {$prfx}_post.read_marker in ($guest_in_list)
                             group by author")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $affected_guests[] = array(
                "guest_name" => $dbw->field_by_name("author"),
                "post_count" => $dbw->field_by_name("cnt")
            );
        }
        
        $dbw->free_result();
        
        if (!empty($user_guest_clause)) {
            $where .= " and ($user_guest_clause)";
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $forums = array();
        $topics = array();
        $topics_with_pinned = array();
        
        if (!$dbw->execute_query("select topic_id, forum_id, sum({$prfx}_post.pinned) pinned_cnt
                             from {$prfx}_post
                             inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                             where
                             $where
                             group by topic_id, forum_id
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $topics[$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
            $forums[$dbw->field_by_name("forum_id")] = $dbw->field_by_name("forum_id");
            
            if ($dbw->field_by_name("pinned_cnt") > 0) {
                $topics_with_pinned[$dbw->field_by_name("topic_id")] = $dbw->field_by_name("topic_id");
            }
        }
        
        $dbw->free_result();
        
        // unset topics with deleted pinned posts
        
        if (!empty($topics_with_pinned)) {
            $topic_in_list = $dbw->escape(implode(",", $topics_with_pinned));
            $query = "update {$prfx}_topic set has_pinned_post = 0 where id in ($topic_in_list)";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $topic_in_list = $dbw->escape(implode(",", $topics));
        if (empty($topic_in_list)) {
            $topic_in_list = "NULL";
        }

        $rate_affected_users = array();
        
        $delete_physically = ($this->is_admin() && !reqvar_empty("delete_physically"));
        
        if (!$delete_physically) {
            $query = "update {$prfx}_post set deleted = 1, pinned = 0 where $where";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        } else {
            if (!$this->cascade_delete_post($dbw, $where)) {
                $dbw->rollback_transaction();
                return false;
            }
        } // if delete physically
        
        $event_data = array();
        $event_data["action"] = "bulk_delete_posts";

        $event_data["forum_id"] = "";
        $event_data["forum_name"] = "";
        
        if (!empty($fid) && is_numeric($fid)) {
            if (!$dbw->execute_query("select id, name from {$prfx}_forum where id = $fid")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $event_data["forum_id"] = $dbw->field_by_name("id");
                $event_data["forum_name"] = $dbw->field_by_name("name");
            }
            
            $dbw->free_result();
        }
        
        // track bulk deletion event
        
        if (!$is_private) {
            foreach ($affected_users as $uid => $uinfo) {
                $event_data["author_id"] = $uid;
                $event_data["author_name"] = $uinfo["user_name"];
                $event_data["comment"] = "MSG(Messages): " . $uinfo["post_count"];
                if (!reqvar_empty("comment")) {
                    $event_data["comment"] .= "\n\n" . reqvar("comment");
                }
                
                if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
            }

            foreach ($affected_guests as $guest_info) {
                $event_data["author_id"] = "";
                $event_data["author_name"] = $guest_info["guest_name"];
                $event_data["comment"] = "MSG(Messages): " . $guest_info["post_count"];
                if (!reqvar_empty("comment")) {
                    $event_data["comment"] .= "\n\n" . reqvar("comment");
                }
                
                if (!$this->log_moderator_event($dbw, $prfx, $event_data)) {
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        // find topics with 0 posts
        
        $topics_with_no_posts_list = "";

        foreach ($topics as $tid) {
            if (!$dbw->execute_query($this->get_query_empty_topic($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $topics_with_no_posts_list .= $dbw->field_by_name("id") . ",";
            }
            
            $dbw->free_result();
        }

        $topics_with_no_posts_list = trim($topics_with_no_posts_list, ",");
        
        $topic_notifications = array();

        if (!empty($topics_with_no_posts_list)) {
            if (!$dbw->execute_query("select {$prfx}_topic.id, user_id, forum_id,
                             {$prfx}_forum.name forum_name, {$prfx}_topic.name topic_name,
                             email, user_name, author, last_host, send_notifications
                             from
                             {$prfx}_topic
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                             where {$prfx}_topic.id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $topics_with_no_posts = array();

            while ($dbw->fetch_row()) {
                $topics_with_no_posts[$dbw->field_by_name("id")] = array(
                    "topic_id" => $dbw->field_by_name("id"),
                    "topic_name" => $dbw->field_by_name("topic_name"),
                    "forum_id" => $dbw->field_by_name("forum_id"),
                    "forum_name" => $dbw->field_by_name("forum_name"),
                    "author_id" => $dbw->field_by_name("user_id"),
                    "author_name" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                    "author_email" => $dbw->field_by_name("email"),
                    "last_host" => $dbw->field_by_name("last_host"),
                    "send_notifications" => $dbw->field_by_name("send_notifications"),
                    "action" => "delete_topic",
                    "comment" => reqvar("comment")
                );
            }
            
            $dbw->free_result();            
            
            if (!$this->collect_notifiable_topic_users($dbw, $topic_notifications, $topics_with_no_posts_list, "delete_topic")) {
                return false;
            }

            if (!$dbw->execute_query("delete from {$prfx}_topic_moderator where topic_id in ($topics_with_no_posts_list)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }

            if (!$delete_physically) {
                // delete the topic if all posts are deleted
                
                if (!$dbw->execute_query("update {$prfx}_topic set deleted = 1, publish_delay = 0, pinned = 0 where id in ($topics_with_no_posts_list)")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            } else {
                // topics with no physical posts
                
                // delete the topic if all posts are deleted
                
                if (!$this->cascade_delete_topic($dbw, "id in ($topics_with_no_posts_list)")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
                
                foreach ($affected_users as $uid => $uinfo) {
                    if (!$dbw->execute_query($this->get_query_user_post_cnt_update($prfx, $uid))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                    
                    if (!$dbw->execute_query($this->get_query_user_rate_cnt_update($prfx, $uid))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
            } // delete physically

            if (!$is_private) {
                foreach ($topics_with_no_posts as $tid => $tdata) {
                    if (!$this->log_moderator_event($dbw, $prfx, $tdata)) {
                        $dbw->rollback_transaction();
                        return false;
                    }
                }
            }
        } // if topics with no posts exist            
        
        // update post count in the affected topics
        
        foreach ($topics as $tid) {
            if (!$dbw->execute_query($this->get_query_post_cnt_update($prfx, $tid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        // update topic count in the affected forums
        
        foreach ($forums as $fid) {
            if (!$dbw->execute_query($this->get_query_topic_cnt_update($prfx, $fid))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        $now = $dbw->format_datetime(time());
        if (!$dbw->execute_query("update {$prfx}_cache_invalidation set new_dt = '$now'")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $params = array();
        $params["{moderator_name}"] = $this->get_user_name();
        if (!reqvar_empty("comment")) {
            $params["{comment}"] = reqvar("comment");
        } else {
            $params["{comment}"] = "MSG(" . self::get_reason_lang_code("flood") . ")";
        }

        foreach ($affected_users as $uid => $uinfo) {
            // if the actor and the receiver are the same, do not notify
            if ($uid == $this->get_user_id()) {
                continue;
            }
            
            $anonym_appendix = "";
            $anonym_appendix2 = "";
            $this->get_anonym_appendixes($uid, $anonym_appendix, $anonym_appendix2);
            
            $params["{user_name}"] = $uinfo["user_name"];
            $params["{count}"] = $uinfo["post_count"];
            $params["{site_url}"] = get_host_address($uinfo["last_host"]) . get_url_path();
            
            if (!empty($event_data["forum_id"])) {
                $params["{forum_id}"] = $event_data["forum_id"];
                $params["{forum_name}"] = $event_data["forum_name"];
                $params["{forum_url}"] = get_host_address($uinfo["last_host"]) . get_url_path() . "forum.php?fid=" . xrawurlencode($event_data["forum_id"]);
                $params["{forum_url_relative}"] = "forum.php?fid=" . xrawurlencode($event_data["forum_id"]);
            }
            
            $this->log_user_event($uid, $this->get_user_id(), $this->get_user_name(), "{$event_code}{$anonym_appendix2}", $params);
            
            if (!empty($uinfo["user_email"]) && !empty($uinfo["send_notifications"])) {
                $this->format_manager->format_email_message($dbw, $prfx, $params["{comment}"], $uinfo["interface_language"], get_host_address($uinfo["last_host"]) . get_url_path());
                $this->email_manager->send_email($settings["default_sender"], $uinfo["user_email"], "{$email_template_prefix}{$anonym_appendix}.txt", $params, $uinfo["interface_language"]);
            }
        }
        
        MessageHandler::setInfo(text("MsgOperationSuccessful"));
        
        $this->do_topic_notifications($dbw, $prfx, $topic_notifications, $settings, "delete_topic");

        return true;
    } // bulk_delete_posts_by_users
    
    //-----------------------------------------------------------------
    function get_my_ignore_status_for_users(&$dbw, &$user_data)
    {
        global $READ_MARKER;

        $prfx = $dbw->escape(System::getDBPrefix());
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = "0";
        }
        
        $in_list = implode(",", array_keys($user_data));
        if (empty($in_list)) {
            return true;
        }
        
        // if the user ignores single guests, not all, we have to reset the ignores_all_guests to false
        
        $query = "select distinct user_id
              from {$prfx}_ignored_guests
              where
              whitelist = 1 and user_id in ($in_list)";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $user_data[$dbw->field_by_name("user_id")]["ignores_all_guests"] = false;
        }
        
        $dbw->free_result();
        
        // is ignoring me
        
        $query = "select user_id
              from {$prfx}_ignored_users
              where user_id in ($in_list) and ignored_user_id = $current_uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $user_data[$dbw->field_by_name("user_id")]["ignoring_me"] = true;
        }
        
        $dbw->free_result();
        
        if (!empty($current_uid)) {
            return true;
        }
        
        $rm = $dbw->escape($READ_MARKER);

        // is ignoring me as a guest
        
        $guest_name = $dbw->escape($this->get_user_name());
        
        // the mode is ignore listed guests
        
        $query = "select user_id
              from {$prfx}_ignored_guests
              where user_id in (select id from {$prfx}_user where id in ($in_list) and ignore_guests_blacklist = 1 and read_marker <> '$rm') and guest_name = '$guest_name' and whitelist = 0";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $user_data[$dbw->field_by_name("user_id")]["ignoring_me"] = 1;
        }
        
        $dbw->free_result();
        
        // the mode is ignore all except listed guests
        
        $query = "select id, read_marker
              from
              (select id, read_marker from {$prfx}_user where id in ($in_list) and ignore_guests_whitelist = 1) except_user
              left join {$prfx}_ignored_guests on (except_user.id = {$prfx}_ignored_guests.user_id and guest_name = '$guest_name' and whitelist = 1)
              group by id, read_marker
              having count(user_id) = 0
              ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            if ($dbw->field_by_name("read_marker") != $READ_MARKER) {
                $user_data[$dbw->field_by_name("id")]["ignoring_me"] = 2;
            }
        }
        
        $dbw->free_result();
        
        // the mode is ignore new guests
        
        if (!empty($_SESSION["ignored_new_guests"])) {
            $query = "select id from {$prfx}_user where id in ($in_list) and ignore_new_guests = 1 and read_marker <> '$rm'";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                if (!empty($_SESSION["ignored_new_guests"][$READ_MARKER])) {
                    $user_data[$dbw->field_by_name("id")]["ignoring_me"] = 3;
                }
            }
            
            $dbw->free_result();
        }
        
        return true;
    } // get_my_ignore_status_for_users
    
    //-----------------------------------------------------------------
    function get_additional_post_data($dbw, $prfx, $fid, $tid, &$user_ids, &$post_list, &$user_data)
    {
        global $view_path;
        global $settings;
        
        $exts = AttachmentManager::get_picture_exts();
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = "0";
        }
        
        $in_list = implode(",", array_keys($post_list));
        if (empty($in_list)) {
            $in_list = "NULL";
        }
        
        $now = $dbw->format_datetime(time());
        
        // my blocks
        
        if (!$dbw->execute_query("select {$prfx}_post.id,
                                         {$prfx}_post.is_system,
                                        {$prfx}_forum.no_guests forum_no_guests,
                                        {$prfx}_topic.no_guests topic_no_guests,
                                        {$prfx}_topic.closed topic_closed,
                                        {$prfx}_forum.closed forum_closed,
                                        {$prfx}_forum_blocked.block_expires forum_block_expires,
                                        {$prfx}_forum_blocked.user_id forum_blocked,
                                        {$prfx}_topic_blocked.user_id topic_blocked
                             from {$prfx}_post
                                  inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                  inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                  left join {$prfx}_forum_blocked on ({$prfx}_forum_blocked.user_id = $current_uid and {$prfx}_forum_blocked.forum_id = {$prfx}_forum.id)
                                  left join {$prfx}_topic_blocked on ({$prfx}_topic_blocked.user_id = $current_uid and {$prfx}_topic_blocked.topic_id = {$prfx}_topic.id)
                             where {$prfx}_post.id in ($in_list)
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $pid = $dbw->field_by_name("id");
            
            $post_list[$pid]["is_system"] = $dbw->field_by_name("is_system");
            if (empty($post_list[$pid]["topic_private"]) && !empty($post_list[$pid]["is_system"]) && !$this->are_moderator_names_visible()) {
                $post_list[$pid]["user_id"] = "";
                $post_list[$pid]["author"] = text("Moderator");
            }
            
            $post_list[$pid]["topic_closed"] = $dbw->field_by_name("topic_closed");
            $post_list[$pid]["forum_closed"] = $dbw->field_by_name("forum_closed");
            
            $post_list[$pid]["me_forum_guest_blocked"] = ($dbw->field_by_name("forum_no_guests") && $current_uid == 0) ? 1 : 0;
            $post_list[$pid]["me_forum_blocked"] = $dbw->field_by_name("forum_blocked");
            if ($dbw->field_by_name("forum_block_expires") && xstrtotime($dbw->field_by_name("forum_block_expires")) < time()) {
                $post_list[$pid]["me_forum_blocked"] = "";
            }
            
            $post_list[$pid]["me_topic_guest_blocked"] = ($dbw->field_by_name("topic_no_guests") && $current_uid == 0) ? 1 : 0;
            $post_list[$pid]["me_topic_blocked"] = $dbw->field_by_name("topic_blocked");
        }
        
        $dbw->free_result();
        
        // ips
        
        if (!$dbw->execute_query("select id, block_expires, tp
                             from {$prfx}_post
                             inner join {$prfx}_ip_blocked on ({$prfx}_ip_blocked.ip = {$prfx}_post.ip or {$prfx}_ip_blocked.ip = {$prfx}_post.user_marker)
                             where id in ($in_list)
                             and (block_expires is NULL or block_expires > '$now')
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $pid = $dbw->field_by_name("id");
            
            if ($dbw->field_by_name("tp") == "IP") {
                $post_list[$pid]["ip_blocked"] = 1;
            }
            
            if (!empty($post_list[$pid]["user_id"])) {
                continue;
            }
            
            if (empty($post_list[$pid]["is_system"]) && $post_list[$pid]["author"] != "admin") {
                $post_list[$pid]["guest_blocked"] = 1;
            }
            
            if (!$dbw->field_by_name("block_expires")) {
                continue;
            }
            
            if (empty($post_list[$pid]["guest_block_expires"])) {
                $post_list[$pid]["guest_block_expires"] = xstrtotime($dbw->field_by_name("block_expires"));
            } else {
                $post_list[$pid]["guest_block_expires"] = max($post_list[$pid]["guest_block_expires"], xstrtotime($dbw->field_by_name("block_expires")));
            }
            
            $post_list[$pid]["guest_block_time_left"] = format_duration($post_list[$pid]["guest_block_expires"] - time());
        }
        
        $dbw->free_result();
        
        // tor ips
        
        if (!$dbw->execute_query("select id, block_level
                             from {$prfx}_post
                             inner join {$prfx}_tor_ips on ({$prfx}_tor_ips.ip = {$prfx}_post.ip)
                             where id in ($in_list)
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $pid = $dbw->field_by_name("id");
            
            $post_list[$pid]["tor_ip"] = 1;
            
            $post_list[$pid]["tor_ip_block_level"] = "tor_allow";
            if (!empty($settings["block_tor_ips"])) {
                $post_list[$pid]["tor_ip_block_level"] = "tor_block_write";
            }
            
            switch ($dbw->field_by_name("block_level")) {
                case 1:
                    $post_list[$pid]["tor_ip_block_level"] = "tor_block_write";
                    break;
                
                case 2:
                    $post_list[$pid]["tor_ip_block_level"] = "tor_block_read";
                    break;
                
                case 3:
                    $post_list[$pid]["tor_ip_block_level"] = "tor_allow";
                    break;
            }
        }
        
        $dbw->free_result();
        
        // versions
        
        $query = "select post_id, id, dt, author, self_edited
              from {$prfx}_post_history
              where post_id in ($in_list)
              order by dt desc";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $post_list[$dbw->field_by_name("post_id")]["versions"][$dbw->field_by_name("id")] = array(
                "date" => adjust_and_format_timezone(xstrtotime($dbw->field_by_name("dt")), text("DateTimeFormat")),
                "self_edited" => $dbw->field_by_name("self_edited"),
                "author" => $dbw->field_by_name("author")
            );
        }
        
        $dbw->free_result();
        
        // posts carma
        
        if (!empty($settings["rates_active"])) {
            $query = "select post_id,
                like_count,
                dislike_count
                from {$prfx}_post_statistics
                where post_id in ($in_list)";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $post_list[$dbw->field_by_name("post_id")]["carma_minus"] = $dbw->field_by_name("dislike_count");
                $post_list[$dbw->field_by_name("post_id")]["carma_plus"] = $dbw->field_by_name("like_count");
            }
            
            $dbw->free_result();
            
            // liked users
            
            $query = "select post_id, user_id, user_name
                from {$prfx}_post_rating
                inner join {$prfx}_user on ({$prfx}_post_rating.user_id = {$prfx}_user.id)
                where post_id in ($in_list) and rating = 1
                order by user_name";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                if (!empty($_SESSION["hide_ignored"]) && $this->is_user_ignored($dbw->field_by_name("user_id"))) {
                    continue;
                }
                
                $post_list[$dbw->field_by_name("post_id")]["liked_users"][$dbw->field_by_name("user_id")] = $dbw->field_by_name("user_name");
            }
            
            $dbw->free_result();
        }
        
        // disliked users
        
        if (!empty($settings["dislikes_active"]) && empty($settings["dislikes_anonym"])) {
            $query = "select post_id, user_id, user_name
                from {$prfx}_post_rating
                inner join {$prfx}_user on ({$prfx}_post_rating.user_id = {$prfx}_user.id)
                where post_id in ($in_list) and rating = -1
                order by user_name";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                if (!empty($_SESSION["hide_ignored"]) && $this->is_user_ignored($dbw->field_by_name("user_id"))) {
                    continue;
                }
                
                $post_list[$dbw->field_by_name("post_id")]["disliked_users"][$dbw->field_by_name("user_id")] = $dbw->field_by_name("user_name");
            }
            
            $dbw->free_result();
        }
        
        // tags
        
        $query = "select post_id, {$prfx}_user_tags.id, {$prfx}_user_tags.name
              from {$prfx}_user_tag_post
              inner join {$prfx}_user_tags on ({$prfx}_user_tag_post.tag_id = {$prfx}_user_tags.id and user_id = $current_uid)
              where post_id in ($in_list)
              order by {$prfx}_user_tags.name";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $post_list[$dbw->field_by_name("post_id")]["tags"]["#" . $dbw->field_by_name("id")] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        // replies
        
        $forum_restriction_appendix = $this->get_forum_restriction_appendix($dbw, $prfx);
        if (!empty($forum_restriction_appendix)) {
            $forum_restriction_appendix = " and $forum_restriction_appendix";
        }
        
        $ignore_post_where_appendix = $this->get_ignore_post_where_appendix($dbw, $prfx, 3);
        
        $query = "select parent_post_id, count(*) cnt
              from {$prfx}_post_hierarchy
              inner join {$prfx}_post on ({$prfx}_post_hierarchy.reply_post_id = {$prfx}_post.id)
              inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
              inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
              where parent_post_id in ($in_list) and publish_delay <> 1
              and {$prfx}_post.deleted <> 1 and {$prfx}_topic.deleted <> 1 and {$prfx}_forum.deleted <> 1
              and ({$prfx}_topic.is_private < 1 or {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = $current_uid))
              $forum_restriction_appendix
              $ignore_post_where_appendix
              group by parent_post_id";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $post_list[$dbw->field_by_name("parent_post_id")]["replies"] = $dbw->field_by_name("cnt");
        }
        
        $dbw->free_result();
        
        // collect user info
        
        $in_list = implode(",", $user_ids);
        if (empty($in_list)) {
            $in_list = "NULL";
        }
        
        if (empty($tid) || empty($fid)) {
            $query = "select id, is_admin, activated, approved, blocked, self_blocked, hidden, {$prfx}_user.block_expires, location, message, signature, ignore_guests_whitelist,
                post_count,
                like_count,
                dislike_count,
                last_visit_date, logout,
                NULL forum_block_expires,
                NULL forum_blocked,
                NULL topic_blocked
                from {$prfx}_user
                left join {$prfx}_user_statistics on ({$prfx}_user.id = {$prfx}_user_statistics.user_id)
                where id in ($in_list)";
        } else {
            $query = "select id, is_admin, activated, approved, blocked, self_blocked, hidden, {$prfx}_user.block_expires, location, message, signature, ignore_guests_whitelist,
                post_count,
                like_count,
                dislike_count,
                last_visit_date, logout,
                {$prfx}_forum_blocked.block_expires forum_block_expires,
                {$prfx}_forum_blocked.user_id forum_blocked,
                {$prfx}_topic_blocked.user_id topic_blocked
                from {$prfx}_user
                left join {$prfx}_user_statistics on ({$prfx}_user.id = {$prfx}_user_statistics.user_id)
                left join {$prfx}_forum_blocked on ({$prfx}_user.id = {$prfx}_forum_blocked.user_id and {$prfx}_forum_blocked.forum_id = $fid)
                left join {$prfx}_topic_blocked on ({$prfx}_user.id = {$prfx}_topic_blocked.user_id and {$prfx}_topic_blocked.topic_id = $tid)
                where id in ($in_list)";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $uid = $dbw->field_by_name("id");
            
            $user_data[$uid]["post_count"] = 0;
            $user_data[$uid]["is_admin"] = $dbw->field_by_name("is_admin");
            $user_data[$uid]["hidden"] = $dbw->field_by_name("hidden");
            $user_data[$uid]["ignores_all_guests"] = $dbw->field_by_name("ignore_guests_whitelist");
            
            $user_data[$uid]["activated"] = $dbw->field_by_name("activated");
            $user_data[$uid]["approved"] = $dbw->field_by_name("approved");
            
            $user_data[$uid]["blocked"] = $dbw->field_by_name("blocked");
            $user_data[$uid]["self_blocked"] = $dbw->field_by_name("self_blocked");
            
            $user_data[$uid]["block_expires"] = "";
            $user_data[$uid]["block_time_left"] = "";
            if ($dbw->field_by_name("block_expires")) {
                if (xstrtotime($dbw->field_by_name("block_expires")) < time()) {
                    $user_data[$uid]["blocked"] = "";
                } else {
                    $user_data[$uid]["block_expires"] = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("block_expires")), text("DateTimeFormat"));
                    $user_data[$uid]["block_time_left"] = format_duration(xstrtotime($dbw->field_by_name("block_expires")) - time());
                }
            }
            
            $user_data[$uid]["forum_blocked"] = $dbw->field_by_name("forum_blocked");
            $user_data[$uid]["forum_block_expires"] = "";
            $user_data[$uid]["forum_block_time_left"] = "";
            if ($dbw->field_by_name("forum_block_expires")) {
                if (xstrtotime($dbw->field_by_name("forum_block_expires")) < time()) {
                    $user_data[$uid]["forum_blocked"] = "";
                } else {
                    $user_data[$uid]["forum_block_expires"] = adjust_and_format_timezone(xstrtotime($dbw->field_by_name("forum_block_expires")), text("DateTimeFormat"));
                    $user_data[$uid]["forum_block_time_left"] = format_duration(xstrtotime($dbw->field_by_name("forum_block_expires")) - time());
                }
            }
            
            $user_data[$uid]["topic_blocked"] = $dbw->field_by_name("topic_blocked");
            
            $user_data[$uid]["location"] = Emoji::Decode($dbw->field_by_name("location"));
            $user_data[$uid]["message"] = Emoji::Decode($dbw->field_by_name("message"));
            $user_data[$uid]["signature"] = Emoji::Decode($dbw->field_by_name("signature"));
            
            $user_data[$uid]["carma_minus"] = $dbw->field_by_name("dislike_count") ? $dbw->field_by_name("dislike_count") : 0;
            $user_data[$uid]["carma_plus"] = $dbw->field_by_name("like_count") ? $dbw->field_by_name("like_count") : 0;
            $user_data[$uid]["post_count"] = $dbw->field_by_name("post_count") ? $dbw->field_by_name("post_count") : 0;
            
            $user_data[$uid]["online"] = (xstrtotime($dbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $dbw->field_by_name("logout") == 0);
            
            $user_data[$uid]["photo"] = "";
            $user_data[$uid]["photo_ctime"] = "";
            $user_data[$uid]["avatar"] = $view_path . "images/guest.jpg";
            $user_data[$uid]["avatar_ctime"] = "";
            
            foreach ($exts as $ext) {
                if (file_exists(APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . $ext)) {
                    $user_data[$uid]["avatar"] = "user_data/avatars/" . $uid . "." . $ext;
                    $user_data[$uid]["avatar_ctime"] = filectime(APPLICATION_ROOT . "user_data/avatars/" . $uid . "." . $ext);
                }
                
                if (file_exists(APPLICATION_ROOT . "user_data/photos/" . $uid . "." . $ext)) {
                    $user_data[$uid]["photo"] = "user_data/photos/" . $uid . "." . $ext;
                    $user_data[$uid]["photo_ctime"] = filectime(APPLICATION_ROOT . "user_data/photos/" . $uid . "." . $ext);
                }
            }
        }
        
        $dbw->free_result();
        
        // notes
        
        $query = "select commented_user_id, comment from {$prfx}_user_comment
                  where user_id = $current_uid and commented_user_id in ($in_list) and comment is not NULL
                 ";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $user_data[$dbw->field_by_name("commented_user_id")]["notes"] = $dbw->field_by_name("comment");
        }
        
        $dbw->free_result();
        
        foreach ($user_data as $uid => &$udata) {
            if (empty($udata["notes"])) {
                continue;
            }
            
            $this->format_manager->format_message_simple($dbw, $prfx, $udata["notes"], "message");
            postprocess_message($udata["notes"]);
        }
        
        // moderator comments and guest ips
        
        $ip_rules = array();
        $ips = "";
        $matched_rule = "";
        $this->get_white_list_ips($ips, $ip_rules);
        
        foreach ($post_list as $pid => &$pdata) {
            if ($this->is_ip_whitelisted($pdata["ip"], $ip_rules, $matched_rule)) {
                $post_list[$pid]["guest_ip_whitelisted"] = 1;
            }
            
            postprocess_message($pdata["html_content"]);
            postprocess_message($pdata["last_warned_by"]);
            
            $this->format_manager->format_message_simple($dbw, $prfx, $pdata["last_warning"], "warning");
            postprocess_message($pdata["last_warning"]);
        }
        
        // forum moderator status
        
        if (!empty($fid)) {
            $query = "select user_id
                from {$prfx}_forum_moderator
                where user_id in ($in_list) and forum_id = $fid";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $uid = $dbw->field_by_name("user_id");
                
                $user_data[$uid]["is_forum_moderator"] = true;
            }
            
            $dbw->free_result();
        }
        
        // user moderator status
        
        if (!empty($tid)) {
            $query = "select user_id
                from {$prfx}_topic_moderator
                where user_id in ($in_list) and topic_id = $tid";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            while ($dbw->fetch_row()) {
                $uid = $dbw->field_by_name("user_id");
                
                $user_data[$uid]["is_topic_moderator"] = true;
            }
            
            $dbw->free_result();
        }
        
        if (!$this->get_my_ignore_status_for_users($dbw, $user_data)) {
            return false;
        }
        
        // is hidden by the current user or guest
        // is ignored by the current user or guest
        
        foreach ($user_ids as $uid) {
            if (!empty($_SESSION["ignored_users"][$uid])) {
                $user_data[$uid]["ignored"] = true;
            }
            
            if (!empty($_SESSION["hidden_profiles"][$uid])) {
                $user_data[$uid]["hidden_by_me"] = true;
            }
            
            if (!empty($_SESSION["subscribed_authors"]["u_" . $uid])) {
                $user_data[$uid]["subscribed"] = true;
            }
            
            if (!empty($_SESSION["hidden_profiles"][$uid]) || !empty($_SESSION["hide_user_info"]) || !empty($user_data[$uid]["hidden"]) || !empty($user_data[$uid]["hidden_by_me"])) {
                $user_data[$uid]["location"] = "";
                $user_data[$uid]["homepage"] = "";
                $user_data[$uid]["info"] = "";
                $user_data[$uid]["message"] = "";
                $user_data[$uid]["signature"] = "";
            }
            
            if (!empty($_SESSION["hidden_profiles"][$uid]) || !empty($_SESSION["hide_user_avatars"]) || !empty($user_data[$uid]["hidden"]) || !empty($user_data[$uid]["hidden_by_me"])) {
                $user_data[$uid]["photo"] = "";
                $user_data[$uid]["photo_ctime"] = "";
                $user_data[$uid]["avatar"] = $view_path . "images/guest.jpg";
                $user_data[$uid]["avatar_ctime"] = "";
            }
            
            if (!empty($user_data[$uid]["signature"])) {
                $this->format_manager->format_message_simple($dbw, $prfx, $user_data[$uid]["signature"], "signature");
                postprocess_message($user_data[$uid]["signature"]);
            }
        }
        
        return true;
    } // get_additional_post_data
    
    //-----------------------------------------------------------------
    function get_post_date($pid, &$is_adult)
    {
        if (empty($pid) || !is_numeric($pid)) {
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $pid = $dbw->escape($pid);
        
        $query = "select creation_date, is_adult from {$prfx}_post where id = $pid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $date = false;
        if ($dbw->fetch_row()) {
            $date = xstrtotime($dbw->field_by_name("creation_date"));
            $is_adult = $dbw->field_by_name("is_adult");
        }
        
        $dbw->free_result();
        
        return $date;
    } // get_post_date
    
    //-----------------------------------------------------------------
    function get_post_data($pid, &$fid, &$tid, &$post_list, &$user_data)
    {
        if (empty($pid)) {
            return false;
        }
        
        $user_ids = array();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $pid = $dbw->escape($pid);
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = "0";
        }
        
        $where = "where {$prfx}_post.id = $pid";
        
        if (!$dbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, "", ""))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $post_list = array();
        $this->collect_posts($dbw, $current_uid, $post_list, $user_ids);
        
        $dbw->free_result();
        
        if (!empty($post_list[$pid])) {
            $tid = $post_list[$pid]["topic_id"];
            $fid = $post_list[$pid]["forum_id"];
        }
        
        return $this->get_additional_post_data($dbw, $prfx, $fid, $tid, $user_ids, $post_list, $user_data);
    } // get_post_data
    
    //-----------------------------------------------------------------
    function track_load_statistics($tmp, $topic_readmarker_count, $forum_readmarker_count)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $user_name = quotes_or_null($dbw->escape($this->get_user_name()));
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = "NULL";
        }
        
        $tmp = $dbw->escape($tmp);
        if (empty($tmp) || !is_numeric($tmp)) {
            $tmp = 0;
        }
        
        $topic_readmarker_count = $dbw->escape($topic_readmarker_count);
        if (empty($topic_readmarker_count) || !is_numeric($topic_readmarker_count)) {
            $topic_readmarker_count = 0;
        }
        
        $forum_readmarker_count = $dbw->escape($forum_readmarker_count);
        if (empty($forum_readmarker_count) || !is_numeric($forum_readmarker_count)) {
            $forum_readmarker_count = 0;
        }
        
        $url = val_or_empty($_SERVER['SCRIPT_NAME']);
        if (!empty($url)) {
            $url = basename($url);
        }
        
        $url = $dbw->escape($url);
        
        $now = $dbw->format_datetime(time());
        
        $ip = quotes_or_null($dbw->escape(val_or_empty($_SERVER["REMOTE_ADDR"])));
        
        $query = "insert into {$prfx}_load_statistics (dt, url, user_id, user_name, ip, exec_time, topic_rm_count, forum_rm_count)
              values
              ('$now', '$url', $uid, $user_name, $ip, $tmp, $topic_readmarker_count, $forum_readmarker_count)";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // track_load_statistics
    
    //-----------------------------------------------------------------
    function toggle_post_tag($pid, $tgid, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        if (empty($tgid)) {
            MessageHandler::setError(text("ErrNoTagSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            return true;
        }
        
        $pid = $dbw->escape($pid);
        $tgid = $dbw->escape($tgid);
        
        $query = "select 1
              from {$prfx}_user_tag_post
              where post_id = $pid and tag_id = $tgid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $is_selected = 0;
        
        if ($dbw->fetch_row()) {
            $is_selected = 1;
        }
        
        $dbw->free_result();
        
        if ($is_selected) {
            $query = "delete
                from {$prfx}_user_tag_post
                where post_id = $pid and tag_id in
                  (select id from {$prfx}_user_tags where id = $tgid and user_id = $uid)";
        } else {
            $query = "insert into {$prfx}_user_tag_post
                (post_id, tag_id)
                select
                $pid, $tgid
                from {$prfx}_user_tags where id = $tgid and user_id = $uid";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response['tag_selected'] = !$is_selected;
        
        // selected tags
        
        $query = "select {$prfx}_user_tags.id
              from {$prfx}_user_tag_post
              inner join {$prfx}_user_tags on ({$prfx}_user_tag_post.tag_id = {$prfx}_user_tags.id and user_id = $uid)
              where post_id = $pid
              order by {$prfx}_user_tags.name";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $response['selected_tags'][] = '#' . $dbw->field_by_name("id");
        }
        
        $dbw->free_result();
        
        return true;
    } // toggle_post_tag
    
    //-----------------------------------------------------------------
    function add_new_tag($pid, $new_tag, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($pid)) {
            MessageHandler::setError(text("ErrNoPostSelected"));
            return false;
        }
        
        if (empty($new_tag)) {
            MessageHandler::setError(text("ErrTagNameEmpty"));
            MessageHandler::setErrorElement("new_tag_" . $pid);
            return false;
        }
        
        if (utf8_strlen($new_tag) > 50) {
            MessageHandler::setError(sprintf(text("ErrTagNameTooLong"), 50));
            MessageHandler::setErrorElement("new_tag_" . $pid);
            return false;
        }
        
        // check if already exists
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            return true;
        }
        
        $pid = $dbw->escape($pid);
        $new_tag_db = $dbw->escape($new_tag);
        
        $query = "select id
              from {$prfx}_user_tags
              where user_id = $uid and name = '$new_tag_db'";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $tgid = 0;
        
        if ($dbw->fetch_row()) {
            $tgid = $dbw->field_by_name("id");
        }
        
        $dbw->free_result();
        
        if (!empty($tgid)) {
            $query = "select 1
                from {$prfx}_user_tag_post
                where post_id = $pid and tag_id = $tgid";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $is_selected = 0;
            
            if ($dbw->fetch_row()) {
                $is_selected = 1;
            }
            
            $dbw->free_result();
            
            if (!$is_selected) {
                $query = "insert into {$prfx}_user_tag_post
                  (post_id, tag_id)
                  select
                  $pid, $tgid
                  from {$prfx}_user_tags where id = $tgid and user_id = $uid";
                
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    return false;
                }
                
                $response['tag_to_select'] = $tgid;
            }
        } // exists
        else {
            if (!$dbw->start_transaction()) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $query = "insert into {$prfx}_user_tags
                (user_id, name)
                values
                ($uid, '$new_tag')";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $tgid = $dbw->insert_id();
            
            $query = "insert into {$prfx}_user_tag_post
                (post_id, tag_id)
                select
                $pid, $tgid
                from {$prfx}_user_tags where id = $tgid and user_id = $uid";
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            if (!$dbw->commit_transaction()) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $response['tag_to_select'] = $tgid;
            $response['added_tag'] = $new_tag;
        }
        
        // selected tags
        
        $query = "select {$prfx}_user_tags.id
              from {$prfx}_user_tag_post
              inner join {$prfx}_user_tags on ({$prfx}_user_tag_post.tag_id = {$prfx}_user_tags.id and user_id = $uid)
              where post_id = $pid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $response['selected_tags'][] = '#' . $dbw->field_by_name("id");
        }
        
        $dbw->free_result();
        
        return true;
    } // add_new_tag
    
    //-----------------------------------------------------------------
    function delete_tags(&$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($_REQUEST["tags"])) {
            MessageHandler::setError(text("ErrNoTagSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        if (empty($uid)) {
            return true;
        }
        
        $in_list = $dbw->escape(implode(",", $_REQUEST["tags"]));
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "delete from {$prfx}_user_tag_post
              where tag_id in (select id from {$prfx}_user_tags where id in ($in_list) and user_id = $uid)";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $query = "delete from {$prfx}_user_tags where id in ($in_list) and user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("select id, name
                             from {$prfx}_user_tags
                             where
                             user_id = $uid
                             order by name
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $response['user_tags']['#' . $dbw->field_by_name("id")] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        MessageHandler::setInfo(text("MsgTagsDeleted"));
        
        return true;
    } // delete_tags
    
    //-----------------------------------------------------------------
    function add_new_tag2($new_tag, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        if (empty($new_tag)) {
            // must be so beause us sys user input
            $response["tag_error"] = text("ErrTagNameEmpty");
            return true;
        }
        
        if (utf8_strlen($new_tag) > 50) {
            // must be so beause us sys user input
            $response["tag_error"] = sprintf(text("ErrTagNameTooLong"), 50);
            return true;
        }
        
        // check if already exists
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            return true;
        }
        
        $new_tag_db = $dbw->escape($new_tag);
        
        $query = "select id
              from {$prfx}_user_tags
              where user_id = $uid and name = '$new_tag_db'";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            
            // must be so beause us sys user input
            $response["tag_error"] = text("ErrTagNameExists");
            return true;
        }
        
        $dbw->free_result();
        
        $query = "insert into {$prfx}_user_tags
              (user_id, name)
              values
              ($uid, '$new_tag')";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response['added_tag'] = $dbw->insert_id();
        
        if (!$dbw->execute_query("select id, name
                             from {$prfx}_user_tags
                             where
                             user_id = $uid
                             order by name
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $response['user_tags']['#' . $dbw->field_by_name("id")] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        MessageHandler::setInfo(text("MsgTagAdded"));
        
        return true;
    } // add_new_tag2
    
    //-----------------------------------------------------------------
    function edit_tag($tgid, $tag_name, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        if (empty($tag_name)) {
            // must be so beause us sys user input
            $response["tag_error"] = text("ErrTagNameEmpty");
            return true;
        }
        
        if (utf8_strlen($tag_name) > 50) {
            // must be so beause us sys user input
            $response["tag_error"] = sprintf(text("ErrTagNameTooLong"), 50);
            return true;
        }
        
        if (empty($tgid)) {
            // must be so beause us sys user input
            $response["tag_error"] = text("ErrTagNameEmpty");
            return true;
        }
        
        // check if already exists
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            return true;
        }
        
        $tgid = $dbw->escape($tgid);
        
        $tag_name_db = $dbw->escape($tag_name);
        
        $query = "select id
              from {$prfx}_user_tags
              where user_id = $uid and name = '$tag_name_db' and id <> $tgid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $dbw->free_result();
            
            // must be so beause us sys user input
            $response["tag_error"] = text("ErrTagNameExists");
            return true;
        }
        
        $dbw->free_result();
        
        $query = "update {$prfx}_user_tags
              set name = '$tag_name_db'
              where id = $tgid and user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("select id, name
                             from {$prfx}_user_tags
                             where
                             user_id = $uid
                             order by name
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $response['user_tags']['#' . $dbw->field_by_name("id")] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        MessageHandler::setInfo(text("MsgTagChanged"));
        
        return true;
    } // edit_tag
    
    //-----------------------------------------------------------------
    function merge_tags($tgid, $tag_name, &$response)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return false;
        }
        
        if (empty($tag_name)) {
            // must be so beause us sys user input
            $response["tag_error"] = text("ErrTagNameEmpty");
            return true;
        }
        
        if (utf8_strlen($tag_name) > 50) {
            // must be so beause us sys user input
            $response["tag_error"] = sprintf(text("ErrTagNameTooLong"), 50);
            return true;
        }
        
        if (empty($tgid)) {
            // must be so beause us sys user input
            $response["tag_error"] = text("ErrNoTagSelected");
            return true;
        }
        
        if (empty($_REQUEST["tags"])) {
            // must be so beause us sys user input
            $response["tag_error"] = text("ErrNoTagSelected");
            return false;
        }
        
        // check if already exists
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            return true;
        }
        
        $tgid = $dbw->escape($tgid);
        
        $tag_name_db = $dbw->escape($tag_name);
        
        // if an existing tag entered,
        // use it as target
        
        $query = "select id
              from {$prfx}_user_tags
              where user_id = $uid and name = '$tag_name_db' and id <> $tgid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $tgid = $dbw->field_by_name("id");
        }
        
        $dbw->free_result();
        
        $in_list = $dbw->escape(implode(",", $_REQUEST["tags"]));
        
        $response['merge_target_tag'] = $tgid;
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "update {$prfx}_user_tags
              set name = '$tag_name_db'
              where id = $tgid and user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $query = "insert into {$prfx}_user_tag_post
              (tag_id, post_id)
              select distinct $tgid, post_id from {$prfx}_user_tag_post utp1
              where
              tag_id in (select id from {$prfx}_user_tags where id in ($in_list) and user_id = $uid) and
              (select 1 from {$prfx}_user_tag_post utp2 where utp2.tag_id = $tgid and utp2.post_id = utp1.post_id) is NULL";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $query = "delete from {$prfx}_user_tag_post
              where tag_id in (select id from {$prfx}_user_tags where id in ($in_list) and user_id = $uid)";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $query = "delete from {$prfx}_user_tags where id in ($in_list) and id <> $tgid and user_id = $uid";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->execute_query("select id, name
                             from {$prfx}_user_tags
                             where
                             user_id = $uid
                             order by name
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $response['user_tags']['#' . $dbw->field_by_name("id")] = $dbw->field_by_name("name");
        }
        
        $dbw->free_result();
        
        MessageHandler::setInfo(text("MsgTagsMerged"));
        
        return true;
    } // merge_tags
    
    //-----------------------------------------------------------------
    function export_profile_data()
    {
        global $READ_MARKER;
        
        $data = array();
        
        $data["read_marker"] = $READ_MARKER;
        $data["user_name"] = val_or_empty($_SESSION["user_name"]);
        $data["hide_pictures"] = val_or_empty($_SESSION["hide_pictures"]);
        $data["donot_hide_adult_pictures"] = val_or_empty($_SESSION["donot_hide_adult_pictures"]);
        $data["hide_user_info"] = val_or_empty($_SESSION["hide_user_info"]);
        $data["hide_user_avatars"] = val_or_empty($_SESSION["hide_user_avatars"]);
        $data["hide_ignored"] = val_or_empty($_SESSION["hide_ignored"]);
        $data["hide_comments"] = val_or_empty($_SESSION["hide_comments"]);
        $data["thematic_per_default"] = val_or_empty($_SESSION["thematic_per_default"]);
        $data["custom_css"] = val_or_empty($_SESSION["custom_css"]);
        $data["skin"] = val_or_empty($_SESSION["skin"]);
        
        $data["skin_properties"] = "";
        if (!empty($_SESSION["skin_properties"])) {
            $data["skin_properties"] = array_to_json($_SESSION["skin_properties"]);
        }
        
        $data["language"] = current_language();
        $data["time_zone"] = val_or_empty($_SESSION["time_zone"]);
        $data["ignore_new_guests"] = val_or_empty($_SESSION["ignore_new_guests"]);
        $data["ignore_guests_blacklist"] = val_or_empty($_SESSION["ignore_guests_blacklist"]);
        $data["ignore_guests_whitelist"] = val_or_empty($_SESSION["ignore_guests_whitelist"]);
        
        if (!empty($_SESSION["ignored_guests_blacklist"])) {
            $data["ignored_guests_blacklist"] = $_SESSION["ignored_guests_blacklist"];
        }
        
        if (!empty($_SESSION["ignored_guests_whitelist"])) {
            $data["ignored_guests_whitelist"] = $_SESSION["ignored_guests_whitelist"];
        }
        
        if (!empty($_SESSION["ignored_users"])) {
            $data["ignored_users"] = $_SESSION["ignored_users"];
        }
        
        if (!empty($_SESSION["hidden_profiles"])) {
            $data["hidden_profiles"] = $_SESSION["hidden_profiles"];
        }
        
        if (!empty($_SESSION["ignored_topics"])) {
            $data["ignored_topics"] = $_SESSION["ignored_topics"];
        }
        
        if (!empty($_SESSION["favourite_topics"])) {
            $data["favourite_topics"] = $_SESSION["favourite_topics"];
        }
        
        if (!empty($_SESSION["pinned_topics"])) {
            $data["pinned_topics"] = $_SESSION["pinned_topics"];
        }
        
        if (!empty($_SESSION["favourite_posts"])) {
            $data["favourite_posts"] = $_SESSION["favourite_posts"];
        }
        
        if (!empty($_SESSION["ignored_forums"])) {
            $data["ignored_forums"] = $_SESSION["ignored_forums"];
        }
        
        $xmldoc = new DOMDocument("1.0", "UTF-8");
        $xmldoc->formatOutput = true;
        
        $root = $xmldoc->createElement("array");
        $root = $xmldoc->appendChild($root);
        
        if (!empty($data)) {
            array_to_dom($xmldoc, $root, $data);
        }
        
        if (!$xmldoc->save(APPLICATION_ROOT . "tmp/profile_export_" . session_id() . ".xml")) {
            MessageHandler::setError(text("ErrCreatingExportFile"));
            
            return false;
        }
        
        return true;
    } // export_profile_data
    
    //-----------------------------------------------------------------
    function import_profile_data()
    {
        global $READ_MARKER;
        global $settings;
        
        if ($this->is_logged_in()) {
            return true;
        }

        if (empty($_FILES["profile_file"]["name"])) {
            MessageHandler::setError(text("ErrImportFileNotSpecified"));
            MessageHandler::setErrorElement("profile_file");
            return false;
        }
        
        $xmldoc = new DOMDocument();
        
        if (!@$xmldoc->load($_FILES["profile_file"]["tmp_name"])) {
            MessageHandler::setError(text("ErrFileIsInvalid"));
            MessageHandler::setErrorElement("profile_file");
            return false;
        }
        
        $data = array();
        dom_to_array($xmldoc, $xmldoc->documentElement, $data);
        
        if (!empty($data["user_name"])) {
            $_SESSION["user_name"] = $data["user_name"];
            
            if (!$this->check_author($_SESSION["user_name"])) {
                $_SESSION["user_name"] = text("Guest");
            }
            
            if (!empty($settings["max_user_name_symbols"])) {
                $_SESSION["user_name"] = utf8_trim(utf8_substr($_SESSION["user_name"], 0, $settings["max_user_name_symbols"]));
            }
            
            if (empty($_SESSION["last_posted_user"]) && $this->check_read_marker_last_activity($READ_MARKER)) {
                $_SESSION["last_posted_user"] = $_SESSION["user_name"];
            }
        }
        
        $_SESSION["hide_pictures"] = val_or_empty($data["hide_pictures"]);
        $_SESSION["donot_hide_adult_pictures"] = val_or_empty($data["donot_hide_adult_pictures"]);
        $_SESSION["hide_user_info"] = val_or_empty($data["hide_user_info"]);
        $_SESSION["hide_user_avatars"] = val_or_empty($data["hide_user_avatars"]);
        $_SESSION["hide_ignored"] = val_or_empty($data["hide_ignored"]);
        $_SESSION["hide_comments"] = val_or_empty($data["hide_comments"]);
        $_SESSION["thematic_per_default"] = val_or_empty($data["thematic_per_default"]);
        $_SESSION["ignore_new_guests"] = val_or_empty($data["ignore_new_guests"]);
        $_SESSION["ignore_guests_blacklist"] = val_or_empty($data["ignore_guests_blacklist"]);
        $_SESSION["ignore_guests_whitelist"] = val_or_empty($data["ignore_guests_whitelist"]);
        $_SESSION["custom_css"] = val_or_empty($data["custom_css"]);
        
        if (!empty($data["skin"])) {
            $_SESSION["skin"] = $data["skin"];
        }
        
        if (!empty($data["skin_properties"])) {
            $_SESSION["skin_properties"] = json_decode($data["skin_properties"], true);
            if (empty($_SESSION["skin_properties"])) {
                $_SESSION["skin_properties"] = array();
            }
        } else {
            $_SESSION["skin_properties"] = array();
        }
        
        if (!empty($data["time_zone"])) {
            $_SESSION["time_zone"] = $data["time_zone"];
        }
        if (!empty($data["language"])) {
            set_language($data["language"]);
        }
        
        $_SESSION["ignored_guests_blacklist"] = array();
        if (!empty($data["ignored_guests_blacklist"])) {
            $_SESSION["ignored_guests_blacklist"] = $data["ignored_guests_blacklist"];
        }
        
        $_SESSION["ignored_guests_whitelist"] = array();
        if (!empty($data["ignored_guests_whitelist"])) {
            $_SESSION["ignored_guests_whitelist"] = $data["ignored_guests_whitelist"];
        }
        
        $_SESSION["ignored_users"] = array();
        if (!empty($data["ignored_users"])) {
            $_SESSION["ignored_users"] = $data["ignored_users"];
        }
        
        $_SESSION["hidden_profiles"] = array();
        if (!empty($data["hidden_profiles"])) {
            $_SESSION["hidden_profiles"] = $data["hidden_profiles"];
        }
        
        $_SESSION["ignored_topics"] = array();
        if (!empty($data["ignored_topics"])) {
            $_SESSION["ignored_topics"] = $data["ignored_topics"];
        }
        
        $_SESSION["favourite_topics"] = array();
        if (!empty($data["favourite_topics"])) {
            $_SESSION["favourite_topics"] = $data["favourite_topics"];
        }
        
        $_SESSION["pinned_topics"] = array();
        if (!empty($data["pinned_topics"])) {
            $_SESSION["pinned_topics"] = $data["pinned_topics"];
        }
        
        $_SESSION["favourite_posts"] = array();
        if (!empty($data["favourite_posts"])) {
            $_SESSION["favourite_posts"] = $data["favourite_posts"];
        }
        
        $_SESSION["ignored_forums"] = array();
        if (!empty($data["ignored_forums"])) {
            $_SESSION["ignored_forums"] = $data["ignored_forums"];
        }
        
        $this->update_user_cookies();
        
        if (!empty($data["read_marker"])) {
            $READ_MARKER = $data["read_marker"];
            set_cookie("q_read_marker", $READ_MARKER, time() + 90 * 24 * 3600);
        }
        
        MessageHandler::setInfo(text("MsgProfileImportSuccess"));
        
        return true;
    } // import_profile_data
    
    //-----------------------------------------------------------------
    function execute_forum_jobs($called_by_user_visit)
    {
        $job_per_cron = (defined('JOB_PER_CRON') && JOB_PER_CRON);
        
        if ($called_by_user_visit && $job_per_cron) {
            return true;
        }
        
        // if we misuse a visitor for running job, we do it only in this time period
        if (!$job_per_cron && !(date("G") == 3 && date("i") >= 0 && date("i") <= 10)) {
            return true;
        }
        
        // use a temp file as a semaphore to avoid redundant running jobs by multiple requests
        
        $sm_file = APPLICATION_ROOT . "tmp/clean_jobs_running.sm";
        
        if (file_exists($sm_file) && (time() - filemtime($sm_file) < 1 * 3600)) {
            return true;
        }
        
        start_action_time_measure();
        
        @touch($sm_file);
        
        $start_time = time();
        echo "Job 'clean_old_read_markers': ";
        $this->job_manager->clean_old_read_markers();
        echo (time() - $start_time) . " seconds\r\n";
        
        $start_time = time();
        echo "Job 'clean_old_blocked_ips_and_users': ";
        $this->job_manager->clean_old_blocked_ips_and_users();
        echo (time() - $start_time) . " seconds\r\n";
        
        $start_time = time();
        echo "Job 'clean_old_autosaved_messages': ";
        $this->job_manager->clean_old_autosaved_messages();
        echo (time() - $start_time) . " seconds\r\n";
        
        $start_time = time();
        echo "Job 'clean_old_search_cache': ";
        $this->job_manager->clean_old_search_cache();
        echo (time() - $start_time) . " seconds\r\n";
        
        $start_time = time();
        echo "Job 'clean_old_topic_views': ";
        $this->job_manager->clean_old_topic_views();
        echo (time() - $start_time) . " seconds\r\n";
        
        $start_time = time();
        echo "Job 'clean_inactive_ignored_guests_and_topics': ";
        $this->job_manager->clean_inactive_ignored_guests_and_topics();
        echo (time() - $start_time) . " seconds\r\n";
        
        $start_time = time();
        echo "Job 'clean_old_statistics': ";
        $this->job_manager->clean_old_statistics();
        echo (time() - $start_time) . " seconds\r\n";
        
        $start_time = time();
        echo "Job 'clean_tmp_directory': ";
        $this->job_manager->clean_tmp_directory();
        echo (time() - $start_time) . " seconds\r\n";
        
        $start_time = time();
        echo "Job 'refresh_tor_ips': ";
        $this->refresh_tor_ips();
        echo (time() - $start_time) . " seconds\r\n";
        
        measure_action_time("exec clean jobs");
        
        return true;
    } // execute_forum_jobs
    
    //-----------------------------------------------------------------
    function refresh_tor_ips()
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        try {
            $url = 'https://check.torproject.org/torbulkexitlist';
            $client = new Zend_Http_Client($url, array(
                'maxredirects' => 5,
                'timeout' => 50
            ));
            
            $request = $client->request('GET');
            $response = $request->getBody();
            
            $ips = preg_split("/[\n\r]+/", $response, -1, PREG_SPLIT_NO_EMPTY);
        } catch (Exception $ex) {
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $now = $dbw->format_datetime(time());
        
        foreach ($ips as $ip) {
            $ip = $dbw->escape($ip);
            
            $query = "select 1 from {$prfx}_tor_ips where ip = '$ip'";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
            
            $exists = false;
            if ($dbw->fetch_row()) {
                $exists = true;
            }
            
            $dbw->free_result();
            
            if ($exists) {
                $query = "update {$prfx}_tor_ips set refresh_date = '$now' where ip = '$ip'";
            } else {
                $query = "insert into {$prfx}_tor_ips (ip, refresh_date) values ('$ip', '$now')";
            }
            
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // refresh_tor_ips
    
    //-----------------------------------------------------------------
    function get_tor_ip_list(&$ip_list)
    {
        global $settings;
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        start_action_time_measure();
        
        $ip_rules = array();
        $ips = "";
        $matched_rule = "";
        $this->get_white_list_ips($ips, $ip_rules);
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        // last 60 days
        $start_date = $rodbw->format_datetime(time() - 60 * 24 * 3600);

        $where = "where {$prfx}_post.creation_date > '$start_date'";
        if (!reqvar_empty("search_key")) {
            $search_key = $rodbw->escape(reqvar("search_key"));
            
            $where .= " and {$prfx}_tor_ips.ip like '" . $search_key . "%'";
        }
        
        $query = $this->get_query_tor_ip_list($prfx, $where);
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            
            $tor_ip_block_level = "tor_allow";
            if (!empty($settings["block_tor_ips"])) {
                $tor_ip_block_level = "tor_block_write";
            }
            
            switch ($rodbw->field_by_name("block_level")) {
                case 1:
                    $tor_ip_block_level = "tor_block_write";
                    break;
                
                case 2:
                    $tor_ip_block_level = "tor_block_read";
                    break;
                
                case 3:
                    $tor_ip_block_level = "tor_allow";
                    break;
            }
            
            $ip_list[$ip] = array(
                "ip" => $ip,
                "tor_ip" => 1,
                "tor_ip_block_level" => $tor_ip_block_level,
                "guest_ip_whitelisted" => $this->is_ip_whitelisted($ip, $ip_rules, $matched_rule) ? 1 : 0,
                "first_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("first_message")), text("DateTimeFormat")),
                "last_message" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("last_message")), text("DateTimeFormat")),
                "block_level" => $rodbw->field_by_name("block_level"),
                "cnt" => $rodbw->field_by_name("cnt")
            );
        }
        
        $rodbw->free_result();
        
        if (count($ip_list) == 0) {
            return true;
        }
        
        $in_list = "'" . implode("','", array_keys($ip_list)) . "'";
        $now = $rodbw->format_datetime(time());
        
        $query = "select ip
              from {$prfx}_ip_blocked
              where ip in ($in_list)
              and (block_expires is NULL or block_expires > '$now')";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            
            $ip_list[$ip]["ip_blocked"] = 1;
        }
        
        $rodbw->free_result();
        
        measure_action_time("get TOR IP list");
        
        return true;
    } // get_tor_ip_list
    
    //-----------------------------------------------------------------
    
    function get_guest_ip_list(&$ip_list, &$ips)
    {
        global $settings;
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        start_action_time_measure();
        
        $ip_rules = array();
        $this->get_white_list_ips($ips, $ip_rules);
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        // last 14 days
        $start_date = $rodbw->format_datetime(time() - 14 * 24 * 3600);
        
        $where = "where creation_date > '$start_date' and user_id is NULL";
        if (!reqvar_empty("search_key")) {
            $search_key = $rodbw->escape(reqvar("search_key"));
            
            $where .= " and ip like '" . $search_key . "%'";
        }
        
        $query = "select creation_date, ip, author
        from {$prfx}_post
        $where
        order by creation_date desc
        ";
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            
            $ip_list[$ip]["matched_rule"] = $ip;
            if ($this->is_ip_whitelisted($ip, $ip_rules, $ip_list[$ip]["matched_rule"])) {
                $ip_list[$ip]["guest_ip_whitelisted"] = 1;
            }
            
            $ip_list[$ip]["ip"] = $rodbw->field_by_name("ip");
            if (empty($ip_list[$ip]["first_message_timestamp"])) {
                $ip_list[$ip]["first_message_timestamp"] = xstrtotime($rodbw->field_by_name("creation_date"));
            }
            
            if (empty($ip_list[$ip]["last_message_timestamp"])) {
                $ip_list[$ip]["last_message_timestamp"] = xstrtotime($rodbw->field_by_name("creation_date"));
            }
            
            if (empty($ip_list[$ip]["cnt"])) {
                $ip_list[$ip]["cnt"] = 0;
            }
            $ip_list[$ip]["cnt"]++;
            
            $ip_list[$ip]["first_message_timestamp"] = min($ip_list[$ip]["first_message_timestamp"], xstrtotime($rodbw->field_by_name("creation_date")));
            $ip_list[$ip]["last_message_timestamp"] = max($ip_list[$ip]["last_message_timestamp"], xstrtotime($rodbw->field_by_name("creation_date")));
            
            $ip_list[$ip]["first_message"] = adjust_and_format_timezone($ip_list[$ip]["first_message_timestamp"], text("DateTimeFormat"));
            $ip_list[$ip]["last_message"] = adjust_and_format_timezone($ip_list[$ip]["last_message_timestamp"], text("DateTimeFormat"));
            
            $ip_list[$ip]["authors"][$this->hash_user_name($rodbw->field_by_name("author"))] = $rodbw->field_by_name("author");
        }
        
        $rodbw->free_result();
        
        if (count($ip_list) == 0) {
            return true;
        }
        
        $in_list = "'" . implode("','", array_keys($ip_list)) . "'";
        $now = $rodbw->format_datetime(time());
        
        $query = "select ip
              from {$prfx}_ip_blocked
              where ip in ($in_list)
              and (block_expires is NULL or block_expires > '$now')";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            
            $ip_list[$ip]["ip_blocked"] = 1;
        }
        
        $rodbw->free_result();
        
        if (!$rodbw->execute_query("select ip, block_level from {$prfx}_tor_ips where ip in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            $ip_list[$ip]["tor_ip"] = 1;
            
            $ip_list[$ip]["tor_ip_block_level"] = "tor_allow";
            if (!empty($settings["block_tor_ips"])) {
                $ip_list[$ip]["tor_ip_block_level"] = "tor_block_write";
            }
            
            switch ($rodbw->field_by_name("block_level")) {
                case 1:
                    $ip_list[$ip]["tor_ip_block_level"] = "tor_block_write";
                    break;
                
                case 2:
                    $ip_list[$ip]["tor_ip_block_level"] = "tor_block_read";
                    break;
                
                case 3:
                    $ip_list[$ip]["tor_ip_block_level"] = "tor_allow";
                    break;
            }
        }
        
        $rodbw->free_result();
        
        measure_action_time("get guest ip list");
        
        return true;
    } // get_guest_ip_list
    
    //-----------------------------------------------------------------
    function get_read_marker_list(&$read_marker_list, &$pagination_info)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $where = "";
        if (!reqvar_empty("search_key")) {
            $search_key = $dbw->escape(reqvar("search_key"));
            
            $where = "where {$prfx}_read_marker_activity.read_marker = '" . $search_key . "' or {$prfx}_read_marker_activity.ip like '%" . $search_key . "%' or author like '%" . $search_key . "%' or user_agent like '%" . $search_key . "%'";
        }
        
        // define the page count
        if (!$dbw->execute_query("select count(*) cnt from {$prfx}_read_marker_activity $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if (!$dbw->fetch_row()) {
            MessageHandler::setError(text("ErrQueryFailed"), "No result by select count(*)");
            $dbw->free_result();
            return false;
        }
        
        $pagination_info["total_count"] = $dbw->field_by_name("cnt");
        
        $dbw->free_result();
        
        $pagination_info["rows_per_page"] = TOPICS_PER_PAGE;
        if ($pagination_info["rows_per_page"] < 1) {
            $pagination_info["rows_per_page"] = 40;
        }
        if (empty($pagination_info["page"]) || !is_numeric($pagination_info["page"])) {
            $pagination_info["page"] = 1;
        }
        $pagination_info["page"] = round($pagination_info["page"]);
        
        $pagination_info["page_count"] = ceil(($pagination_info["total_count"]) / $pagination_info["rows_per_page"]);
        if ($pagination_info["page_count"] < 1) {
            $pagination_info["page_count"] = 1;
        }
        if ($pagination_info["page"] > $pagination_info["page_count"]) {
            $pagination_info["page"] = $pagination_info["page_count"];
        }
        if ($pagination_info["page"] < 1) {
            $pagination_info["page"] = 1;
        }
        
        $order_by = "last_activity desc, hits";
        
        if (empty($_SESSION["last_read_marker_sort"])) {
            $_SESSION["last_read_marker_sort"] = "last_activity";
        }
        
        switch ($_SESSION["last_read_marker_sort"]) {
            case "last_activity":
                $order_by = "last_activity desc, hits";
                break;
            case "first_activity":
                $order_by = "first_activity desc, hits";
                break;
            default:
                $order_by = "last_activity desc, hits";
                break;
        }
        
        if (!$dbw->execute_query($this->get_query_read_marker_list($prfx, $where, $order_by, $pagination_info))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $rm = $dbw->field_by_name("read_marker");
            
            $read_marker_list[$rm] = array(
                "ream_marker" => $rm,
                "ip" => $dbw->field_by_name("ip"),
                "user_id" => $dbw->field_by_name("id"),
                "author" => $dbw->field_by_name("author"),
                "user_agent" => $dbw->field_by_name("user_agent"),
                "hits" => $dbw->field_by_name("hits"),
                "current_name_hits" => $dbw->field_by_name("current_name_hits"),
                "last_activity" => format_duration(time() - xstrtotime($dbw->field_by_name("last_activity"))),
                "first_activity" => format_duration(time() - xstrtotime($dbw->field_by_name("first_activity"))),
                "current_name_start" => format_duration(time() - xstrtotime($dbw->field_by_name("current_name_start"))),
                "author_online" => (xstrtotime($dbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $dbw->field_by_name("logout") == 0)
            );
        }
        
        $dbw->free_result();
        
        return true;
    } // get_read_marker_list
    
    //-----------------------------------------------------------------
    function get_user_list(&$user_list, &$pagination_info)
    {
        global $settings;
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        start_action_time_measure();
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $where = "where id > 0";
        if (!reqvar_empty("user_name")) {
            if ($this->is_admin()) {
                $where .= " and (user_name like '" . $rodbw->escape(reqvar("user_name")) . "%' or login = '" . $rodbw->escape(reqvar("user_name")) . "' or email_hash = '" . $rodbw->escape($this->hash_email(reqvar("user_name"))) . "')";
            } else {
                $where .= " and user_name like '" . $rodbw->escape(reqvar("user_name")) . "%'";
            }
        }
        
        if (val_or_empty($_SESSION["last_user_sort"]) == "blocked_users") {
            $now = $rodbw->format_datetime(time());
            $where .= " and blocked = 1 and (block_expires is NULL or block_expires > '$now')";
        }
        
        if (val_or_empty($_SESSION["last_user_sort"]) == "left_users") {
            $dt = $rodbw->format_datetime(time() - 30 * 24 * 3600);
            $where .= " and {$prfx}_user.last_visit_date <= '$dt' and post_count >= 500";
        }
        
        if (val_or_empty($_SESSION["last_user_sort"]) == "moderators") {
            $where .= " and id in (select user_id from {$prfx}_forum_moderator)";
        }
        
        if (val_or_empty($_SESSION["last_user_sort"]) == "administrators") {
            $where .= " and is_admin = 1";
        }
        
        // define the page count
        if (!$rodbw->execute_query("select count(*) cnt 
                                    from {$prfx}_user 
                                    left join {$prfx}_user_statistics
                                    on ({$prfx}_user.id = {$prfx}_user_statistics.user_id)
                                    $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if (!$rodbw->fetch_row()) {
            MessageHandler::setError(text("ErrQueryFailed"), "No result by select count(*)");
            $rodbw->free_result();
            return false;
        }
        
        $pagination_info["total_count"] = $rodbw->field_by_name("cnt");
        
        $rodbw->free_result();
        
        $pagination_info["rows_per_page"] = TOPICS_PER_PAGE;
        if ($pagination_info["rows_per_page"] < 1) {
            $pagination_info["rows_per_page"] = 40;
        }
        if (empty($pagination_info["page"]) || !is_numeric($pagination_info["page"])) {
            $pagination_info["page"] = 1;
        }
        $pagination_info["page"] = round($pagination_info["page"]);
        
        $pagination_info["page_count"] = ceil(($pagination_info["total_count"]) / $pagination_info["rows_per_page"]);
        if ($pagination_info["page_count"] < 1) {
            $pagination_info["page_count"] = 1;
        }
        if ($pagination_info["page"] > $pagination_info["page_count"]) {
            $pagination_info["page"] = $pagination_info["page_count"];
        }
        if ($pagination_info["page"] < 1) {
            $pagination_info["page"] = 1;
        }
        
        $order_by = "registration_date desc";
        
        if (empty($_SESSION["last_user_sort"])) {
            $_SESSION["last_user_sort"] = "new_members";
        }
        
        switch ($_SESSION["last_user_sort"]) {
            case "max_count":
                $order_by = "post_count desc, registration_date desc";
                break;
            case "blocked_users":
                $order_by = $this->get_query_blocked_user_list_order_clause($prfx);
                break;
            case "left_users":
                $order_by = "{$prfx}_user.last_visit_date desc, post_count desc";
                break;
            case "active_writers":
                $order_by = "week_statistics.week_post_count desc, registration_date desc";
                break;
            case "active_readers":
                $order_by = "week_statistics.week_hits_count desc, registration_date desc";
                break;
            case "regulars":
                $order_by = "time_online desc, registration_date desc";
                break;
            case "best_rating":
                if (!empty($settings["rates_active"])) {
                    $order_by = "like_count desc, registration_date desc";
                }
                break;
            case "best_rating_weighed":
                if (!empty($settings["rates_active"])) {
                    $order_by = "100.0 * {$prfx}_user_statistics.like_count / case when {$prfx}_user_statistics.post_count > 1000 then {$prfx}_user_statistics.post_count else 1000 end desc, registration_date desc";
                }
                break;
            case "worst_rating":
                if (!empty($settings["dislikes_active"])) {
                    $order_by = "dislike_count desc, registration_date desc";
                }
                break;
            case "worst_rating_weighed":
                if (!empty($settings["dislikes_active"])) {
                    $order_by = "100.0 * {$prfx}_user_statistics.dislike_count / case when {$prfx}_user_statistics.post_count > 1000 then {$prfx}_user_statistics.post_count else 1000 end desc, registration_date desc";
                }
                break;
            case "last_activity":
            case "moderators":
            case "administrators":
                if (empty($settings["hide_online_status"])) {
                    $order_by = "{$prfx}_user.last_visit_date desc, registration_date desc";
                }
                break;
            default:
                $order_by = "registration_date desc";
                break;
        }
        
        $start_date = $rodbw->format_date(time() - 7 * 24 * 3600);
        
        if (!$rodbw->execute_query($this->get_query_user_list($prfx, $start_date, $where, $order_by, $pagination_info))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $uid = $rodbw->field_by_name("id");
            
            $user_list[$uid] = array(
                "id" => $rodbw->field_by_name("id"),
                "user_name" => $rodbw->field_by_name("user_name"),
                "activated" => $rodbw->field_by_name("activated"),
                "approved" => $rodbw->field_by_name("approved"),
                "hidden" => $rodbw->field_by_name("hidden"),
                "carma_minus" => $rodbw->field_by_name("dislike_count") ? $rodbw->field_by_name("dislike_count") : 0,
                "carma_plus" => $rodbw->field_by_name("like_count") ? $rodbw->field_by_name("like_count") : 0,
                
                "carma_minus_weighed" => $rodbw->field_by_name("dislike_count_weighed") ? $rodbw->field_by_name("dislike_count_weighed") : 0,
                "carma_plus_weighed" => $rodbw->field_by_name("like_count_weighed") ? $rodbw->field_by_name("like_count_weighed") : 0,
                
                "post_count" => $rodbw->field_by_name("post_count") ? $rodbw->field_by_name("post_count") : 0,
                "topic_count" => $rodbw->field_by_name("topic_count") ? $rodbw->field_by_name("topic_count") : 0,
                "time_online" => $rodbw->field_by_name("time_online") ? $rodbw->field_by_name("time_online") : 0,
                
                "week_post_count" => $rodbw->field_by_name("week_post_count") ? $rodbw->field_by_name("week_post_count") / 7 : 0,
                "week_view_count" => $rodbw->field_by_name("week_hits_count") ? $rodbw->field_by_name("week_hits_count") / 7 : 0,
                "week_time_online" => $rodbw->field_by_name("week_time_online") ? $rodbw->field_by_name("week_time_online") / 7 : 0,
                
                "registration_date" => smart_date2(xstrtotime($rodbw->field_by_name("registration_date"))),
                "last_visit_date" => smart_date2(xstrtotime($rodbw->field_by_name("last_visit_date"))),
                
                "online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0)
            );
            
            $user_list[$uid]["blocked"] = $rodbw->field_by_name("blocked");
            $user_list[$uid]["self_blocked"] = $rodbw->field_by_name("self_blocked");
            $user_list[$uid]["block_expires"] = "";
            $user_list[$uid]["block_time_left"] = "";
            if ($rodbw->field_by_name("block_expires")) {
                if (xstrtotime($rodbw->field_by_name("block_expires")) < time()) {
                    $user_list[$uid]["blocked"] = "";
                } else {
                    $user_list[$uid]["block_expires"] = adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("block_expires")), text("DateTimeFormat"));
                    $user_list[$uid]["block_time_left"] = format_duration(xstrtotime($rodbw->field_by_name("block_expires")) - time());
                }
            }
        }
        
        $rodbw->free_result();
        
        measure_action_time("get user list");
        
        return true;
    } // get_user_list
    
    //-----------------------------------------------------------------
    function get_forum_topics($mode, $fid, &$topic_list, &$pagination_info)
    {
        if ($mode != "new_messages" && $mode != "favourites") {
            if (empty($fid)) {
                MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), "-"));
                return false;
            }
            
            if (!is_numeric($fid)) {
                MessageHandler::setError(sprintf(text("ErrForumDoesNotExist"), $fid));
                return false;
            }
        }
        
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        $fid = $rodbw->escape($fid);
        
        $where = "where {$prfx}_topic.forum_id = $fid";
        
        $uid = $rodbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        $private_fid = $this->get_private_forum_id();
        
        $pagination_info["rows_per_page"] = TOPICS_PER_PAGE;
        if ($pagination_info["rows_per_page"] < 1) {
            $pagination_info["rows_per_page"] = 40;
        }
        if (empty($pagination_info["page"]) || !is_numeric($pagination_info["page"])) {
            $pagination_info["page"] = 1;
        }
        $pagination_info["page"] = round($pagination_info["page"]);
        
        $pagination_info["page_count"] = ceil($pagination_info["total_count"] / $pagination_info["rows_per_page"]);
        if ($pagination_info["page_count"] < 1) {
            $pagination_info["page_count"] = 1;
        }
        if ($pagination_info["page"] > $pagination_info["page_count"]) {
            $pagination_info["page"] = $pagination_info["page_count"];
        }
        if ($pagination_info["page"] < 1) {
            $pagination_info["page"] = 1;
        }
        
        $pinned_count = 0;
        
        // private
        if ($private_fid == $fid && $mode != "new_messages") {
            
            if (empty($uid)) {
                return true;
            }
            
            $delete_appendix = "";
            if (!empty($_SESSION["show_deleted"])) {
                $delete_appendix = " or ({$prfx}_topic.deleted = 1 and {$prfx}_topic.id in (select {$prfx}_topic_moderator.topic_id from {$prfx}_topic_moderator where user_id = $uid))";
            }
            
            $where = "where exists (select 1 from {$prfx}_private_topics where {$prfx}_private_topics.topic_id = {$prfx}_topic.id and {$prfx}_private_topics.participant_id = $uid)
                       and ({$prfx}_topic.deleted <> 1 $delete_appendix)";
        }
        
        // favourites
        
        if ($mode == "favourites") {
            if (empty($_SESSION["favourite_topics"])) {
                $favourite_topics_in_list = "-1";
            } else {
                $favourite_topics_in_list = $rodbw->escape(implode(",", $_SESSION["favourite_topics"]));
            }
            
            $where = "where {$prfx}_topic.id in ($favourite_topics_in_list)";
            
            // cut off the private topics
            $where .= " and (is_private < 1 or exists (select 1 from {$prfx}_private_topics where {$prfx}_private_topics.topic_id = {$prfx}_topic.id and {$prfx}_private_topics.participant_id = $uid))";
            
            $forum_restriction_appendix = $this->get_forum_restriction_appendix($rodbw, $prfx);
            if (!empty($forum_restriction_appendix)) {
                $forum_restriction_appendix = " and $forum_restriction_appendix";
            }
            
            $where .= $forum_restriction_appendix;
            
            // check favourite posts
            
            $post_deleted_where_appendix = $this->get_deleted_where_appendix($rodbw, $prfx, !empty($_SESSION["show_deleted"]), true);
            
            if (empty($_SESSION["favourite_posts"])) {
                $favourite_posts_in_list = "-1";
            } else {
                $favourite_posts_in_list = $rodbw->escape(implode(",", $_SESSION["favourite_posts"]));
            }
            
            $query = "select count(*) cnt, max({$prfx}_post.creation_date) last_message_date,
                  max({$prfx}_post.id) last_post_id
                  from {$prfx}_post
                  inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                  inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                  where {$prfx}_post.id in ($favourite_posts_in_list)
                   and (is_private < 1 or exists (select 1 from {$prfx}_private_topics where {$prfx}_private_topics.topic_id = {$prfx}_topic.id and {$prfx}_private_topics.participant_id = $uid))
                  $forum_restriction_appendix
                  $post_deleted_where_appendix";
            
            if (!$rodbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $fav_count = 0;
            $last_message_date = "";
            
            $last_post_id = "";
            while ($rodbw->fetch_row()) {
                $last_post_id = $rodbw->field_by_name("last_post_id");
                
                $fav_count = $rodbw->field_by_name("cnt");
                $last_message_date = smart_date2(xstrtotime($rodbw->field_by_name("last_message_date")));
            }
            
            $rodbw->free_result();
            
            if ($fav_count > 0 && $pagination_info["page"] == 1) {
                $query = "select {$prfx}_post.id, author, user_id, user_name, {$prfx}_post.read_marker,
                  last_visit_date, logout
                  from {$prfx}_post
                  left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                  where {$prfx}_post.id = $last_post_id";
                
                if (!$rodbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                    return false;
                }
                
                $last_author_id = "";
                $last_author = "";
                $last_author_readmarker = "";
                $last_author_online = 0;
                
                if ($rodbw->fetch_row()) {
                    $last_author_id = $rodbw->field_by_name("user_id");
                    $last_author = $rodbw->field_by_name("user_name") ? $rodbw->field_by_name("user_name") : $rodbw->field_by_name("author");
                    $last_author_readmarker = $rodbw->field_by_name("read_marker");
                    $last_author_online = (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0);
                }
                
                $rodbw->free_result();
                
                $last_author_ignored = false;
                $this->clear_if_ignored($last_author_id, $last_author, $last_author_readmarker, $last_author_online, $last_author_ignored, "", "");
                
                $topic_list[-1] = array(
                    "name" => text("FavouriteMessages"),
                    "creation_date" => "",
                    "last_message_date" => $last_message_date,
                    "post_count" => $fav_count,
                    "posts_per_page" => $this->get_posts_per_page(),
                    "hits_count" => $fav_count,
                    "pinned" => 1,
                    "is_poll" => 0,
                    "closed" => 0,
                    "deleted" => 0,
                    "forum_id" => -1,
                    "topic_in_favourites" => 1,
                    "forum_name" => text("Favourites"),
                    "user_id" => $uid,
                    "author" => $this->get_user_name(),
                    "online" => 1,
                    "last_author" => $last_author,
                    "last_author_id" => $last_author_id,
                    "last_author_online" => $last_author_online,
                    "last_author_ignored" => $last_author_ignored,
                    "new_messages_count" => 0,
                    "new_marker_ignored" => 0,
                    "receiver_id" => "",
                    "receiver_name" => ""
                );
            }
            
            if ($fav_count > 0 && $pagination_info["page"] > 1) {
                $pinned_count += 1;
            }
        } // favourites
        
        // new messages
        
        if ($mode == "new_messages") {
            if ($fid == -1 && !empty($_SESSION["new_messages_info_cache"]["data"]["favourites"])) {
                $where = "where {$prfx}_topic.id in (" . implode(",", array_keys($_SESSION["new_messages_info_cache"]["data"]["favourites"])) . ")";
            } elseif ($fid == -2 && !empty($_SESSION["new_messages_info_cache"]["data"]["my_topics"])) {
                $where = "where {$prfx}_topic.id in (" . implode(",", array_keys($_SESSION["new_messages_info_cache"]["data"]["my_topics"])) . ")";
            } elseif ($fid == -3 && !empty($_SESSION["new_messages_info_cache"]["data"]["my_part_topics"])) {
                $where = "where {$prfx}_topic.id in (" . implode(",", array_keys($_SESSION["new_messages_info_cache"]["data"]["my_part_topics"])) . ")";
            } elseif (($fid == "private" || $fid == $private_fid) && !empty($_SESSION["new_messages_info_cache"]["data"]["private_topics"])) {
                $where = "where {$prfx}_topic.id in (" . implode(",", array_keys($_SESSION["new_messages_info_cache"]["data"]["private_topics"])) . ")";
            } elseif (!empty($fid) && !empty($_SESSION["new_messages_info_cache"]["data"]["forums"][$fid])) {
                $where = "where {$prfx}_topic.id in (" . implode(",", array_keys($_SESSION["new_messages_info_cache"]["data"]["forums"][$fid])) . ")";
            } elseif (empty($fid) && !empty($_SESSION["new_messages_info_cache"]["data"]["visible_topics"])) {
                $where = "where {$prfx}_topic.id in (" . implode(",", array_keys($_SESSION["new_messages_info_cache"]["data"]["visible_topics"])) . ")";
            } else {
                $where = "where {$prfx}_topic.id = -1";
            }
        }
        
        // We do not exclude the ignored topics from favourites by any condition,
        // we just display them in grey.
        
        if ($mode != "favourites") {
            $where .= $this->get_ignore_topic_where_appendix($rodbw, $prfx, $mode == "new_messages" ? 1 : 0);
        }
        
        $where .= $this->get_deleted_where_appendix($rodbw, $prfx, !empty($_SESSION["show_deleted"]), false);
        
        if (empty($_SESSION["pinned_topics"])) {
            $pinned_in_list = -1;
        } else {
            $pinned_in_list = $rodbw->escape(implode(",", $_SESSION["pinned_topics"]));
        }
        
        $user_pinned_topic_appendix = "or {$prfx}_topic.id in ($pinned_in_list)";
        
        $user_delayed_topic_appendix = "";
        if (!empty($uid)) {
            $user_delayed_topic_appendix = "or ({$prfx}_topic.publish_delay = 1 and {$prfx}_topic.user_id = $uid)";
        }
        
        if ($pagination_info["page"] == 1) {
            $query = "select {$prfx}_topic.id, {$prfx}_topic.name, {$prfx}_topic.creation_date,
                             {$prfx}_topic_statistics.last_message_date,
                             {$prfx}_topic_statistics.post_count,
                             {$prfx}_topic_statistics.post_count_total,
                             {$prfx}_topic_statistics.hits_count,
                             {$prfx}_topic_statistics.bot_hits_count,
                             {$prfx}_topic.profiled_topic,
                             {$prfx}_topic.deleted, {$prfx}_topic.closed, {$prfx}_topic.pinned, {$prfx}_topic.publish_delay, has_pinned_post,
                             {$prfx}_forum.deleted forum_deleted,
                             {$prfx}_topic.user_id, {$prfx}_topic.author, {$prfx}_user.user_name, {$prfx}_topic.read_marker,
                             {$prfx}_user.last_visit_date, {$prfx}_user.logout,
                             forum_id, {$prfx}_forum.name forum_name, is_poll
                             from {$prfx}_topic
                             inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
                             inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                             left join {$prfx}_user on ({$prfx}_topic.user_id = {$prfx}_user.id)
                             $where
                             and ({$prfx}_topic.pinned = 1 $user_pinned_topic_appendix $user_delayed_topic_appendix)
                             order by {$prfx}_topic.publish_delay, {$prfx}_topic_statistics.last_message_date desc, {$prfx}_topic.id desc";
            
            if (!$rodbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            while ($rodbw->fetch_row()) {
                $tid = $rodbw->field_by_name("id");
                $forum_id = $rodbw->field_by_name("forum_id");
                
                $post_count = $rodbw->field_by_name("post_count");
                if (!empty($_SESSION["show_deleted"]) && ($this->is_admin() || $this->is_forum_moderator($forum_id) || $this->is_topic_moderator($tid))) {
                    $post_count = $rodbw->field_by_name("post_count_total");
                }
                
                $forum_name = $rodbw->field_by_name("forum_name");
                if ($forum_name == "PRIVATE_MESSAGES") {
                    $forum_id = "private";
                    $forum_name = text("PrivateTopics");
                }
                
                $user_id = $rodbw->field_by_name("user_id");
                $author = $rodbw->field_by_name("user_name") ? $rodbw->field_by_name("user_name") : $rodbw->field_by_name("author");
                $author_readmarker = $rodbw->field_by_name("read_marker");
                $online = (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0);
                
                $author_ignored = false;
                $this->clear_if_ignored($user_id, $author, $author_readmarker, $online, $author_ignored, $forum_id, $tid);
                
                $topic_list[$tid] = array(
                    "name" => $rodbw->field_by_name("name"),
                    "creation_date" => smart_date2(xstrtotime($rodbw->field_by_name("creation_date"))),
                    "last_message_date" => smart_date2(xstrtotime($rodbw->field_by_name("last_message_date"))),
                    "post_count" => $post_count,
                    "posts_per_page" => $this->get_posts_per_page(),
                    "hits_count" => $rodbw->field_by_name("hits_count"),
                    "bot_hits_count" => $rodbw->field_by_name("bot_hits_count"),
                    "has_pinned_post" => $rodbw->field_by_name("has_pinned_post"),
                    "pinned" => $rodbw->field_by_name("pinned") || !empty($_SESSION["pinned_topics"][$tid]),
                    "is_poll" => $rodbw->field_by_name("is_poll"),
                    "is_blocked" => 0,
                    "profiled_topic" => $rodbw->field_by_name("profiled_topic"),
                    "publish_delay" => $rodbw->field_by_name("publish_delay"),
                    "closed" => $rodbw->field_by_name("closed"),
                    "deleted" => $rodbw->field_by_name("deleted") || $rodbw->field_by_name("forum_deleted"),
                    "forum_id" => $forum_id,
                    "forum_name" => $forum_name,
                    "user_id" => $user_id,
                    "author" => $author,
                    "online" => $online,
                    "author_ignored" => $author_ignored,
                    "new_messages_count" => 0,
                    "new_marker_ignored" => !empty($_SESSION["ignored_topics"][$tid]) && empty($_SESSION["topic_moderator"][$tid]) && empty($_SESSION["forum_moderator"][$forum_id]),
                    "receiver_id" => "",
                    "receiver_name" => ""
                );
            }
            
            $rodbw->free_result();
            
            $pinned_count += count($topic_list);
        } else {
            if (!$rodbw->execute_query("select count(*) cnt
                                      from {$prfx}_topic
                                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                      left join {$prfx}_private_topics on ({$prfx}_topic.id = {$prfx}_private_topics.topic_id and {$prfx}_private_topics.participant_id = $uid)
                                      $where
                                      and ({$prfx}_topic.pinned = 1 $user_pinned_topic_appendix $user_delayed_topic_appendix)")
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            if ($rodbw->fetch_row()) {
                $pinned_count += $rodbw->field_by_name("cnt");
            }
            
            $rodbw->free_result();
        }
        
        $pagination_info["pinned_count"] = $pinned_count;
        $user_pinned_topic_appendix = "and {$prfx}_topic.id not in ($pinned_in_list)";
        
        if (!$rodbw->execute_query($this->get_query_forum_topics($prfx, $uid, $user_pinned_topic_appendix, $where, $pagination_info))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $tid = $rodbw->field_by_name("id");
            $forum_id = $rodbw->field_by_name("forum_id");
            
            $post_count = $rodbw->field_by_name("post_count");
            if (!empty($_SESSION["show_deleted"]) && ($this->is_admin() || $this->is_forum_moderator($forum_id) || $this->is_topic_moderator($tid))) {
                $post_count = $rodbw->field_by_name("post_count_total");
            }
            
            $forum_name = $rodbw->field_by_name("forum_name");
            if ($forum_name == "PRIVATE_MESSAGES") {
                $forum_id = "private";
                $forum_name = text("PrivateTopics");
            }
            
            $user_id = $rodbw->field_by_name("user_id");
            $author = $rodbw->field_by_name("user_name") ? $rodbw->field_by_name("user_name") : $rodbw->field_by_name("author");
            $author_readmarker = $rodbw->field_by_name("read_marker");
            $online = (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0);
            
            $author_ignored = false;
            $this->clear_if_ignored($user_id, $author, $author_readmarker, $online, $author_ignored, $forum_id, $tid);
            
            $topic_list[$tid] = array(
                "name" => $rodbw->field_by_name("name"),
                "creation_date" => smart_date2(xstrtotime($rodbw->field_by_name("creation_date"))),
                "last_message_date" => smart_date2(xstrtotime($rodbw->field_by_name("last_message_date"))),
                "post_count" => $post_count,
                "posts_per_page" => $this->get_posts_per_page(),
                "has_pinned_post" => $rodbw->field_by_name("has_pinned_post"),
                "hits_count" => $rodbw->field_by_name("hits_count"),
                "bot_hits_count" => $rodbw->field_by_name("bot_hits_count"),
                "pinned" => 0,
                "is_poll" => $rodbw->field_by_name("is_poll"),
                "is_blocked" => $rodbw->field_by_name("no_guests") && !$this->is_logged_in(),
                "profiled_topic" => $rodbw->field_by_name("profiled_topic"),
                "publish_delay" => $rodbw->field_by_name("publish_delay"),
                "closed" => $rodbw->field_by_name("closed"),
                "deleted" => $rodbw->field_by_name("deleted") || $rodbw->field_by_name("forum_deleted"),
                "forum_id" => $forum_id,
                "forum_name" => $forum_name,
                "user_id" => $user_id,
                "author" => $author,
                "online" => $online,
                "author_ignored" => $author_ignored,
                "new_messages_count" => 0,
                "new_marker_ignored" => !empty($_SESSION["ignored_topics"][$tid]) && empty($_SESSION["topic_moderator"][$tid]) && empty($_SESSION["forum_moderator"][$forum_id]),
                "receiver_id" => "",
                "receiver_name" => ""
            );
        }
        
        $rodbw->free_result();
        
        if (count($topic_list) == 0) {
            measure_action_time("get page topics");
            return true;
        }
        
        $in_list = implode(",", array_keys($topic_list));
        
        // last authors
        
        $query = "select {$prfx}_topic.id, forum_id,
            {$prfx}_post.user_id last_author_id, {$prfx}_post.author last_author, {$prfx}_post.read_marker last_author_readmarker,
            last_user.last_visit_date last_user_last_visit_date, last_user.logout last_user_logout
            from
            {$prfx}_topic 
            inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
            left join {$prfx}_post on ({$prfx}_topic_statistics.last_message_id = {$prfx}_post.id)
            left join {$prfx}_user last_user on ({$prfx}_post.user_id = last_user.id)
            where {$prfx}_topic.id in ($in_list)
            ";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $fid = $rodbw->field_by_name("forum_id");
            $tid = $rodbw->field_by_name("id");
            
            $topic_list[$tid]["last_author_id"] = $rodbw->field_by_name("last_author_id");
            $topic_list[$tid]["last_author"] = $rodbw->field_by_name("last_author");
            $topic_list[$tid]["last_author_readmarker"] = $rodbw->field_by_name("last_author_readmarker");
            $topic_list[$tid]["last_author_online"] = (xstrtotime($rodbw->field_by_name("last_user_last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("last_user_logout") == 0);
            
            $last_author_ignored = false;
            $this->clear_if_ignored($topic_list[$tid]["last_author_id"], $topic_list[$tid]["last_author"], $topic_list[$tid]["last_author_readmarker"], $topic_list[$tid]["last_author_online"], $last_author_ignored, $fid, $tid);
            
            $topic_list[$tid]["last_author_ignored"] = $last_author_ignored;
        }
        
        $rodbw->free_result();
        
        // participants
        
        if (!$rodbw->execute_query("select topic_id, participant_id, user_name,
                             {$prfx}_user.last_visit_date, {$prfx}_user.logout
                             from {$prfx}_private_topics
                             inner join {$prfx}_user on ({$prfx}_private_topics.participant_id = {$prfx}_user.id)
                             where topic_id in ($in_list)
                             order by {$prfx}_private_topics.last_visit_date desc")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            if ($this->is_user_ignored($rodbw->field_by_name("participant_id"))) {
                continue;
            }
            
            $tid = $rodbw->field_by_name("topic_id");
            
            $topic_list[$tid]["participants"][$rodbw->field_by_name("participant_id")] = array(
                "name" => $rodbw->field_by_name("user_name"),
                "online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0)
            );
        }
        
        $rodbw->free_result();
        
        // topic moderators
        
        if (!$rodbw->execute_query("select topic_id, user_id, user_name,
                             last_visit_date, logout
                             from {$prfx}_topic_moderator
                             inner join {$prfx}_user on ({$prfx}_topic_moderator.user_id = {$prfx}_user.id)
                             where topic_id in ($in_list)
                             order by user_name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $topic_list[$rodbw->field_by_name("topic_id")]["moderators"][$rodbw->field_by_name("user_id")] = array(
                "name" => $rodbw->field_by_name("user_name"),
                "online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0)
            );
        }
        
        $rodbw->free_result();
        
        // hots
        
        $now = $rodbw->format_datetime(time() - 60 * 60); // 60 min
        
        $query = "select topic_id
              from
              {$prfx}_post
              inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
              where {$prfx}_post.creation_date >= '$now'
              group by topic_id
              having count(*) >= 15 and count(distinct {$prfx}_post.author) > 2";
              
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            if (empty($topic_list[$rodbw->field_by_name("topic_id")])) {
                continue;
            }
            
            $topic_list[$rodbw->field_by_name("topic_id")]["hot"] = true;
        }
        
        $rodbw->free_result();
        
        $now = $rodbw->format_datetime(time() - 24 * 60 * 60); // day
        
        $query = "select topic_id
              from
              {$prfx}_post
              inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
              where {$prfx}_post.creation_date >= '$now'
              group by topic_id
              having count(*) >= 100 and count(distinct {$prfx}_post.author) > 2";
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            if (empty($topic_list[$rodbw->field_by_name("topic_id")])) {
                continue;
            }

            $topic_list[$rodbw->field_by_name("topic_id")]["hot"] = true;
        }
        
        $rodbw->free_result();

        // blocking in topic

        if (!empty($uid)) {
            $query = "select topic_id from {$prfx}_topic_blocked where user_id = $uid and topic_id in ($in_list)";
        
            if (!$rodbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            while ($rodbw->fetch_row()) {
                $topic_list[$rodbw->field_by_name("topic_id")]["is_blocked"] = true;
            }
            
            $rodbw->free_result();
        }
        
        // favourites
        
        if (empty($uid)) {
            if (empty($_SESSION["favourite_topics"])) {
                $favourite_in_list = "-1";
            } else {
                $favourite_in_list = $rodbw->escape(implode(",", $_SESSION["favourite_topics"]));
            }
            
            $query = "select id topic_id from {$prfx}_topic where id in ($favourite_in_list) and id in ($in_list)";
        } else {
            $query = "select topic_id from {$prfx}_favourite_topics where user_id = $uid and topic_id in ($in_list)";
        }
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $topic_list[$rodbw->field_by_name("topic_id")]["topic_in_favourites"] = true;
        }
        
        $rodbw->free_result();
        
        // ignores
        
        if (empty($uid)) {
            if (empty($_SESSION["ignored_topics"])) {
                $ignored_in_list = "-1";
            } else {
                $ignored_in_list = $rodbw->escape(implode(",", $_SESSION["ignored_topics"]));
            }
            
            $query = "select id topic_id from {$prfx}_topic where id in ($ignored_in_list) and id in ($in_list)";
        } else {
            $query = "select topic_id from {$prfx}_ignored_topics where user_id = $uid and topic_id in ($in_list)";
        }
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $topic_list[$rodbw->field_by_name("topic_id")]["topic_ignored"] = true;
        }
        
        $rodbw->free_result();
        
        measure_action_time("get page topics");
        
        return true;
    } // get_forum_topics
    
    //-----------------------------------------------------------------
    function build_order_by($prfx, $standard_order, $desired_order)
    {
        // The standard order maybe ASC or DESC depending on the
        // approach of the post retrieval.
        // If the desired order is not ascending,
        // we have to reverse the standard order.
        
        if ($desired_order == "desc") {
            if ($standard_order == "asc") {
                $standard_order = "desc";
            } else {
                $standard_order = "asc";
            }
        }
        
        $order_by = "order by {$prfx}_post.id $standard_order";
        
        if (!reqvar_empty("rate_statistics")) {
            if (reqvar("rate_statistics") == "top_dislikes") {
                $order_by = "order by {$prfx}_post_statistics.dislike_count $standard_order, {$prfx}_post.id desc";
            } elseif (reqvar("rate_statistics") == "top_likes") {
                $order_by = "order by {$prfx}_post_statistics.like_count $standard_order, {$prfx}_post.id desc";
            } else {
                $order_by = "order by ({$prfx}_post_statistics.like_count + {$prfx}_post_statistics.dislike_count) $standard_order, {$prfx}_post.id desc";
            }
        }
        
        if (!reqvar_empty("news_digest")) {
            $order_by = "order by {$prfx}_topic_statistics.last_message_id $standard_order, {$prfx}_post.id asc";
        }
        
        return $order_by;
    } // build_order_by
    
    //-----------------------------------------------------------------
    function collect_posts(&$dbw, $current_uid, &$post_list, &$user_ids)
    {
        global $READ_MARKER;
        
        $exts = AttachmentManager::get_picture_exts();
        
        while ($dbw->fetch_row()) {
            $pid = $dbw->field_by_name("id");
            $tid = $dbw->field_by_name("topic_id");
            $fid = $dbw->field_by_name("forum_id");
            
            $read_marker = $dbw->field_by_name("read_marker");
            $uid = $dbw->field_by_name("user_id");
            $author = $dbw->field_by_name("author");
            $guest_ignored = false;
            
            if (!empty($uid)) {
                $user_ids[$uid] = $uid;
            } else {
                $guest_ignored = $this->is_guest_ignored($author, $read_marker);
            }
            
            if ($author == "admin") {
                $aname = "admin";
            } else {
                $aname = System::generateHash($read_marker . $author, SALT_KEY);
            }
            
            $avatar = "";
            $avatar_ctime = "";
            
            if (empty($uid)) {
                foreach ($exts as $ext) {
                    if (file_exists(APPLICATION_ROOT . "user_data/avatars/" . $aname . "." . $ext)) {
                        $avatar = "user_data/avatars/" . $aname . "." . $ext;
                        $avatar_ctime = filectime(APPLICATION_ROOT . "user_data/avatars/" . $aname . "." . $ext);
                    }
                }
            }
            
            $post_time = xstrtotime($dbw->field_by_name("creation_date"));
            
            $forum_allow_edit = $dbw->field_by_name("allow_edit") && (time() - $post_time <= get_allow_edit_period()); // edit period not expired
            $topic_allow_moderate = (time() - $post_time <= get_allow_moderate_period()) || $this->is_privileged_topic_moderator();
            
            $is_private = $dbw->field_by_name("is_private");
            
            $editable = false;
            if (($forum_allow_edit && !empty($uid) && $uid == $this->get_user_id()) ||
                ($forum_allow_edit && $read_marker == $READ_MARKER && empty($uid) && ($this->get_user_id() == "" || ($dbw->field_by_name("user_posting_as_guest") && !empty($_SESSION["guest_posting_mode"])))) ||
                ($is_private == 2 && $this->is_topic_moderator($tid)) ||
                (!$is_private && $dbw->field_by_name("topic_author_id") == $current_uid && $dbw->field_by_name("publish_delay") == 1) ||
                (!$is_private && ($this->is_admin() || $this->is_forum_moderator($fid))) ||
                (!$is_private && $topic_allow_moderate && $this->is_topic_moderator($tid))
            ) {
                $editable = true;
            }
            
            $moderatable = false;
            if (($is_private == 2 && $this->is_topic_moderator($tid)) ||
                (!$is_private && ($this->is_admin() || $this->is_forum_moderator($fid))) ||
                (!$is_private && $this->is_topic_moderator($tid))
            ) {
                $moderatable = true;
            }
            
            $ip = $dbw->field_by_name("ip");
            if (!$this->is_admin() && 
                (!$this->is_forum_moderator($dbw->field_by_name("forum_id")) || !$this->may_see_ip()) &&
                !($this->get_user_id() == "" && $READ_MARKER == $read_marker) &&
                !(!empty($uid) && $uid == $this->get_user_id())
                ) {
                $ip = "";
            }
            
            $post_list[$pid] = array(
                "html_content" => Emoji::Decode($dbw->field_by_name("html_content")),
                "creation_date" => adjust_and_format_timezone(xstrtotime($dbw->field_by_name("creation_date")), text("DateTimeFormat")),
                "creation_date_sec" => xstrtotime($dbw->field_by_name("creation_date")),
                "read_marker" => $dbw->field_by_name("read_marker"),
                "user_marker" => $dbw->field_by_name("user_marker"),
                "user_agent" => $dbw->field_by_name("user_agent"),
                "deleted" => $dbw->field_by_name("deleted"),
                "pinned" => $dbw->field_by_name("pinned"),
                "is_comment" => $dbw->field_by_name("is_comment"),
                "is_adult" => $dbw->field_by_name("is_adult"),
                "in_favourites" => !empty($_SESSION["favourite_posts"][$pid]),
                "subscribed" => !empty($_SESSION["subscribed_posts"][$pid]),
                "carma_minus" => 0,
                "carma_plus" => 0,
                "ip" => $ip,
                "has_attachment" => $dbw->field_by_name("has_attachment"),
                "already_rated" => $dbw->field_by_name("post_id"),
                "may_reset_rating" => (time() - xstrtotime($dbw->field_by_name("rating_dt")) <= get_allow_edit_period()),
                "no_private_messages" => $dbw->field_by_name("no_private_messages"),
                "user_id" => $uid,
                "aname" => $aname,
                "avatar" => $avatar,
                "avatar_ctime" => $avatar_ctime,
                "hidden_by_me" => !empty($_SESSION["hidden_guest_profiles"][$aname]),
                "guest_subscribed" => !empty($_SESSION["subscribed_authors"]["g_" . utf8_strtolower($dbw->field_by_name("author"))]),
                "forum_id" => $dbw->field_by_name("forum_id"),
                "forum_id_for_url" => $is_private ? "private" : $dbw->field_by_name("forum_id"),
                "forum_name" => $dbw->field_by_name("is_private") ? text("PrivateTopics") : $dbw->field_by_name("forum_name"),
                "topic_id" => $dbw->field_by_name("topic_id"),
                "topic_name" => $dbw->field_by_name("topic_name"),
                "topic_private" => $is_private,
                "profiled_topic" => $dbw->field_by_name("profiled_topic"),
                "stringent_rules" => $dbw->field_by_name("stringent_rules"),
                "topic_creation_date_sec" => xstrtotime($dbw->field_by_name("topic_creation_date")),
                "topic_author" => $dbw->field_by_name("topic_author"),
                "topic_author_id" => $dbw->field_by_name("topic_author_id"),
                "topic_author_read_marker" => $dbw->field_by_name("topic_author_read_marker"),
                "author" => $dbw->field_by_name("user_name") ? $dbw->field_by_name("user_name") : $dbw->field_by_name("author"),
                "guest_ignored" => $guest_ignored,
                "comment_ignored" => !empty($_SESSION["hide_comments"]) && $dbw->field_by_name("is_comment") && $read_marker != $READ_MARKER,
                "last_updated" => adjust_and_format_timezone(xstrtotime($dbw->field_by_name("last_updated")), text("DateTimeFormat")),
                "last_updated_by" => $dbw->field_by_name("last_updated_by"),
                "self_edited" => $dbw->field_by_name("self_edited"),
                "last_warned_by" => $dbw->field_by_name("last_warned_by"),
                "last_warning" => Emoji::Decode($dbw->field_by_name("last_warning")),
                "editable" => $editable,
                "moderatable" => $moderatable
            );
        }
    } // collect_posts
    
    //-----------------------------------------------------------------
    function calculate_message_position(&$pagination_info, $pid, $tid, &$position, $show_deleted, $dbw = null, $prfx = null)
    {
        global $READ_MARKER;
        
        if (empty($dbw)) {
            $dbw = System::getDBWorker();
            if (!$dbw) {
                return false;
            }
        }
        
        if (empty($prfx)) {
            $prfx = $dbw->escape(System::getDBPrefix());
        }
        
        $tid = $dbw->escape($tid);
        $pid = $dbw->escape($pid);
        
        // IMPORTANT!
        // We calcualte the positions independent of the ignorance and comments
        
        // get position of the first message
        
        if (!$dbw->execute_query("select count(*) cnt from {$prfx}_post
                     where topic_id = $tid 
                     and {$prfx}_post.id <= " . $pid
        )) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        if ($dbw->fetch_row()) {
            $position = $dbw->field_by_name("cnt");
        }
        
        $dbw->free_result();
        
        if (!empty($pagination_info["topic_has_pinned_post"])) {
            if (!$dbw->execute_query("select count(*) cnt from {$prfx}_post
                         where topic_id = $tid and {$prfx}_post.pinned = 1
                         and {$prfx}_post.id < " . $pid
            )) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $position -= $dbw->field_by_name("cnt");
            }
            
            $dbw->free_result();
        }
        
        if (!$show_deleted && !empty($pagination_info["topic_has_deleted_posts"])) {
            $previous_post_cnt = 0;
            $previous_post_appendix = "";
            if (!empty($pagination_info["deleted_calcualted"])) {
               $previous_post_cnt = $pagination_info["deleted_calcualted"]["cnt"];
               $previous_post_appendix = " and {$prfx}_post.id >= " . $pagination_info["deleted_calcualted"]["until_post"];
            }
            
            if (!$dbw->execute_query("select count(*) cnt from {$prfx}_post
                          where topic_id = $tid and deleted = 1
                          $previous_post_appendix and {$prfx}_post.id < " . $pid)
            ) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            if ($dbw->fetch_row()) {
                $position -= ($dbw->field_by_name("cnt") + $previous_post_cnt);
                
                $pagination_info["deleted_calcualted"]["cnt"] = $dbw->field_by_name("cnt");
                $pagination_info["deleted_calcualted"]["until_post"] = $pid;
            }
            
            $dbw->free_result();
        }
        
        return true;
    } // calculate_message_position
    
    //-----------------------------------------------------------------
    function calculate_message_positions($tid, &$pagination_info, $show_deleted, $dbw = null, $prfx = null)
    {
        global $READ_MARKER;
        
        if (empty($dbw)) {
            $dbw = System::getDBWorker();
            if (!$dbw) {
                return false;
            }
        }
        
        if (empty($prfx)) {
            $prfx = $dbw->escape(System::getDBPrefix());
        }
        
        $tid = $dbw->escape($tid);
        
        if ($pagination_info["first_page_message"] == $pagination_info["first_topic_message"] &&
            $pagination_info["last_page_message"] == $pagination_info["first_topic_message"]) {
            // There is only one message
            $pagination_info["first_message_position"] = 1;
            $pagination_info["last_message_position"] = 1;
            
            return true;
        }
        
        // IMPORTANT!
        // We calcualte the positions independent of the ignorance and comments
        
        
        $pagination_info["deleted_calcualted"] = array();
        
        // get position of the first message
        if (!$this->calculate_message_position($pagination_info, $pagination_info["first_page_message"], $tid, $pagination_info["first_message_position"], $show_deleted, $dbw, $prfx)) {
            return false;
        }
        
        // get position of the last message
        if (!$this->calculate_message_position($pagination_info, $pagination_info["last_page_message"], $tid, $pagination_info["last_message_position"], $show_deleted, $dbw, $prfx)) {
            return false;
        }
        
        if ($pagination_info["mode"] == "all") {
            return true;
        }
        
        // check whether next page is the last one
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = "0";
        }
        
        $deleted_where_appendix = $this->get_deleted_where_appendix($dbw, $prfx, $show_deleted, true);
        
        $ignore_post_where_appendix = $this->get_ignore_post_where_appendix($dbw, $prfx);
        
        $where = "where {$prfx}_post.topic_id = $tid and {$prfx}_post.pinned <> 1
                        $deleted_where_appendix
                        $ignore_post_where_appendix";
        
        $order_by = "order by {$prfx}_post.id";
        $where_appendix = " and {$prfx}_post.id > " . $dbw->escape($pagination_info["last_page_message"]);
        if (!$dbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $pagination_info["posts_per_page"], $order_by))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $tmp_post_list = array();
        $this->collect_posts($dbw, $current_uid, $tmp_post_list, $user_ids);
        
        $dbw->free_result();
        
        $pids = array_keys($tmp_post_list);
        
        if (end($pids) == $pagination_info["last_topic_message"]) {
            $pagination_info["page_before_last"] = true;
        }
        
        return true;
    } // calculate_message_positions
    
    //-----------------------------------------------------------------
    function get_topic_posts($fid, $tid, &$post_list, &$user_data, &$pagination_info, $topic_deleted)
    {
        global $READ_MARKER;
        
        if (empty($tid)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($tid)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            return false;
        }
        
        start_action_time_measure();
        
        $user_ids = array();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        $tid = $rodbw->escape($tid);
        $fid = $rodbw->escape($fid);
        
        $current_uid = $rodbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = "0";
        }
        
        $show_deleted = !empty($_SESSION["show_deleted"]);
        
        // If we enter a deleted topic and we may do this,
        // we want to see the posts.
        if ($topic_deleted) {
            $show_deleted = true;
        }
        
        $posts_per_page = $pagination_info["posts_per_page"];
        
        // By going to a definite post, we allow the owner to see it,
        // even if is is deleted.
        //
        // We append it extra and the page has +1 message if the post 
        // should not have been shown but will be shown.
        //
        // For that, we have to add the clause OR (post.id = $pid),
        // but only in the case if the post is not present in the selection.
        // It can only be if the post is deleted and the user is not moderator
        // or is moderator but not in the deleted-mode.
        
        $current_post_appendix = "";
        $deleted_visible_pid = "";
        if ($pagination_info["mode"] == "gotomsg" && !empty($pagination_info["msg"])) {
            $pid = $rodbw->escape($pagination_info["msg"]);
            
            if (!$rodbw->execute_query("select read_marker from {$prfx}_post 
                                        where id = $pid and deleted = 1")) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            if ($rodbw->fetch_row()) {
                // the moderator od admin may see it, but the post is not in the selection
                if (($this->is_admin() || $this->is_forum_moderator($fid) || $this->is_topic_moderator($tid)) && empty($show_deleted)) {
                    $current_post_appendix = " or {$prfx}_post.id = $pid";
                    $deleted_visible_pid = $pid;
                } elseif ($rodbw->field_by_name("read_marker") == $READ_MARKER) {
                    $current_post_appendix = " or {$prfx}_post.id = $pid";
                    $deleted_visible_pid = $pid;
                }
            }
            
            $rodbw->free_result();
        }
        
        $deleted_where_appendix = $this->get_deleted_where_appendix($rodbw, $prfx, $show_deleted, true, $current_post_appendix);
        
        $ignore_post_where_appendix = $this->get_ignore_post_where_appendix($rodbw, $prfx);
        
        $pinned_post_list = array();

        if (!empty($pagination_info["topic_has_pinned_post"])) {
            $where = "where {$prfx}_post.topic_id = $tid and {$prfx}_post.pinned = 1
                      $deleted_where_appendix
                      $ignore_post_where_appendix";
            
            $order_by = "order by {$prfx}_post.id asc";
            if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, "", $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $this->collect_posts($rodbw, $current_uid, $pinned_post_list, $user_ids);
            
            $rodbw->free_result();
        }

        if ($pagination_info["mode"] == "gotopage") {
            $pagination_info["mode"] = "topic_begin";
            if (empty($pagination_info["page"]) || !is_numeric($pagination_info["page"]) || $pagination_info["page"] < 1) {
                $pagination_info["page"] = 1;
            }
            
            $pinned_position_correction = 0;
            if ($pagination_info["pinned_message_count"] > 0) {
                $pinned_position_correction = $pagination_info["pinned_message_count"];
            }
            
            $page_count = ceil(($pagination_info["total_count"] - $pinned_position_correction) / $pagination_info["posts_per_page"]);
            if ($page_count < 1) {
                $page_count = 1;
            }
            
            if ($pagination_info["page"] > $page_count) {
                $pagination_info["page"] = $page_count;
            }

            $position = ($pagination_info["page"] - 1) * $pagination_info["posts_per_page"];
            
            $deleted_appendix = " and {$prfx}_post.deleted <> 1";
            if (!empty($show_deleted)) {
                $deleted_appendix = "";
            }
            
            $query = "select nr, id from
                          (select
                           row_number() over (order by {$prfx}_post.id) nr,
                           {$prfx}_post.id
                          from {$prfx}_post 
                          inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                          inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                          where {$prfx}_post.topic_id = $tid and {$prfx}_post.pinned = 0 $deleted_appendix) posts
                      where nr = $position";

            if (!$rodbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            if ($rodbw->fetch_row()) {
                $pagination_info["mode"] = "startmsg";
                $pagination_info["startmsg"] = $rodbw->field_by_name("id");
                $pagination_info["offset"] = 1;
            }
            
            $rodbw->free_result();
        } // if gotopage
        
        $where = "where {$prfx}_post.topic_id = $tid and {$prfx}_post.pinned <> 1
                        $deleted_where_appendix
                        $ignore_post_where_appendix";
                        
        if (!empty($current_post_appendix)) {
            // see comment above
            $posts_per_page++;
        }
        
        if ($pagination_info["mode"] == "download") {
            $where_appendix = "";
            if (!empty($pagination_info["startmsg"]) && is_numeric($pagination_info["startmsg"])) {
                $where_appendix = " and {$prfx}_post.id >= " . $rodbw->escape($pagination_info["startmsg"]);
            }
            
            $order_by = "order by {$prfx}_post.id asc";
            if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, 1000, $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $post_list = array();
            $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
            
            $rodbw->free_result();
        } elseif ($pagination_info["mode"] == "all") {
            $where_appendix = "";
            if (!empty($pagination_info["startmsg"]) && is_numeric($pagination_info["startmsg"])) {
                $where_appendix = " and {$prfx}_post.id >= " . $rodbw->escape($pagination_info["startmsg"]);
            }
            
            $order_by = "order by {$prfx}_post.id asc";
            if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, "", $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $post_list = array();
            $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
            
            $rodbw->free_result();
        } elseif ($pagination_info["mode"] == "gotomsg") {
            // we get the remainder to jump to the exact boundary of the pagination
            $position = 0;
            if (!$this->calculate_message_position($pagination_info, $pagination_info["msg"], $tid, $position, $show_deleted, $rodbw, $prfx)) {
                return false;
            }
            
            if (!empty($_SESSION["hide_ignored"]) && $position < 1000) {
                if (!$rodbw->execute_query("select count(*) cnt
                                            from {$prfx}_post
                                            inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                            inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                            $where and {$prfx}_post.id <= " . $rodbw->escape($pagination_info["msg"]))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                    return false;
                }
                
                if ($rodbw->fetch_row()) {
                    $position = $rodbw->field_by_name("cnt");
                }
                
                $rodbw->free_result();
            }

            $limit = ($position % $pagination_info["posts_per_page"]);
            if ($limit == 0) {
                $limit = $pagination_info["posts_per_page"];
            }
            
            // we get the posts from the target post in reverse order
            
            $order_by = "order by {$prfx}_post.id desc";
            $where_appendix = " and {$prfx}_post.id <= " . $rodbw->escape($pagination_info["msg"]);
            if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $limit, $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $post_list = array();
            $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
            
            $rodbw->free_result();
            
            $post_list = array_reverse($post_list, true);
            
            $retrieved_post_count = count($post_list);
            
            if ($retrieved_post_count < $posts_per_page) {
                $order_by = "order by {$prfx}_post.id asc";
                $where_appendix = " and {$prfx}_post.id > " . $rodbw->escape($pagination_info["msg"]);
                if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $posts_per_page - $retrieved_post_count, $order_by))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                    return false;
                }
                
                $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
                
                $rodbw->free_result();
            }
        } elseif ($pagination_info["mode"] == "gotolast") {
            $actual_position = $pagination_info["total_count"];
            
            if (!empty($_SESSION["hide_ignored"]) && $pagination_info["total_count"] < 1000) {
                if (!$rodbw->execute_query("select count(*) cnt
                                            from {$prfx}_post
                                            inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                            inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                            $where")) {
                    MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                    return false;
                }
                
                if ($rodbw->fetch_row()) {
                    $actual_position = $rodbw->field_by_name("cnt");
                }
                
                $rodbw->free_result();
            }
            
            // we get the remainder to jump to the exact boundary of the pagination
            $limit = (($actual_position - count($pinned_post_list)) % $posts_per_page);
            if ($limit == 0) {
                $limit = $posts_per_page;
            }
            
            $order_by = "order by {$prfx}_post.id desc";
            if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, $limit, $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $post_list = array();
            $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
            
            $rodbw->free_result();
            
            $post_list = array_reverse($post_list, true);
        } elseif ($pagination_info["mode"] == "startmsg") {
            
            if (empty($pagination_info["startmsg"]) || (is_numeric($pagination_info["startmsg"]) && $pagination_info["startmsg"] < 1)) {
                $pagination_info["startmsg"] = "first";
            }
            
            if (is_numeric($pagination_info["startmsg"])) {
                if (empty($pagination_info["offset"])) {
                    $limit = $posts_per_page;
                    
                    $order_by = "order by {$prfx}_post.id asc";
                    $where_appendix = " and {$prfx}_post.id >= " . $rodbw->escape($pagination_info["startmsg"]);
                    if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $limit, $order_by))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                        return false;
                    }
                    
                    $post_list = array();
                    $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
                    
                    $rodbw->free_result();
                } elseif ($pagination_info["offset"] < 0) {
                    // we get the posts from the end in reverse order
                    
                    $limit = abs($pagination_info["offset"]) * $posts_per_page;
                    
                    $order_by = "order by {$prfx}_post.id desc";
                    $where_appendix = " and {$prfx}_post.id < " . $rodbw->escape($pagination_info["startmsg"]);
                    if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $limit, $order_by))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                        return false;
                    }
                    
                    $post_list = array();
                    $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
                    
                    $rodbw->free_result();
                    
                    $post_list = array_slice(array_reverse($post_list, true), 0, $posts_per_page, true);
                } else /* positive offset */ {
                    $limit = abs($pagination_info["offset"]) * $posts_per_page;
                    
                    $order_by = "order by {$prfx}_post.id asc";
                    $where_appendix = " and {$prfx}_post.id > " . $rodbw->escape($pagination_info["startmsg"]);
                    if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $limit, $order_by))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                        return false;
                    }
                    
                    $post_list = array();
                    $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
                    
                    $rodbw->free_result();
                    
                    $post_list = array_slice($post_list, -1 * $posts_per_page, null, true);
                }
                
                $retrieved_post_count = count($post_list);
                
                // we are on the fist page,
                // retrieve missing up to the posts_per_page
                
                if ($retrieved_post_count > 0 && $retrieved_post_count < $posts_per_page) {
                    $pids = array_keys($post_list);
                    
                    $last_pid = end($pids);
                    
                    $order_by = "order by {$prfx}_post.id asc";
                    $where_appendix = " and {$prfx}_post.id > " . $rodbw->escape($last_pid);
                    if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $posts_per_page - $retrieved_post_count, $order_by))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                        return false;
                    }
                    
                    $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
                    
                    $rodbw->free_result();
                }
            }
            
            if ($pagination_info["startmsg"] == "first") {
                if (empty($pagination_info["offset"])) {
                    $pagination_info["offset"] = 1;
                }
                
                $limit = abs($pagination_info["offset"]) * $posts_per_page;
                
                $order_by = "order by {$prfx}_post.id asc";
                if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, $limit, $order_by))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                    return false;
                }
                
                $post_list = array();
                $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
                
                $rodbw->free_result();
                
                $post_list = array_slice($post_list, -1 * $posts_per_page, null, true);
            } elseif ($pagination_info["startmsg"] == "last") {
                // we get the posts from the end in reverse order
                
                if (empty($pagination_info["offset"])) {
                    $pagination_info["offset"] = -1;
                }
                
                $actual_position = $pagination_info["total_count"];
                if (!empty($_SESSION["hide_ignored"]) && $pagination_info["total_count"] < 1000) {
                    if (!$rodbw->execute_query("select count(*) cnt
                                                from {$prfx}_post
                                                inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                                inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                                $where")) {
                        MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                        return false;
                    }
                    
                    if ($rodbw->fetch_row()) {
                        $actual_position = $rodbw->field_by_name("cnt");
                    }
                    
                    $rodbw->free_result();
                }
                
                // we get the remainder to jump to the exact boundary of the pagination
                $remainder = (($actual_position - count($pinned_post_list)) % $posts_per_page);
                if ($remainder == 0) {
                    $remainder = $posts_per_page;
                }
                
                $limit = abs($pagination_info["offset"]) * $posts_per_page - $posts_per_page + $remainder;
                
                $order_by = "order by {$prfx}_post.id desc";
                if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, $limit, $order_by))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                    return false;
                }
                
                $post_list = array();
                $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
                
                $rodbw->free_result();
                
                $post_list = array_slice(array_reverse($post_list, true), 0, $posts_per_page, true);
            }
        } else /* from first */ {
            $order_by = "order by {$prfx}_post.id asc";
            if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, $posts_per_page, $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $post_list = array();
            $this->collect_posts($rodbw, $current_uid, $post_list, $user_ids);
            
            $rodbw->free_result();
        }
        
        $pagination_info["first_message_position"] = 0;
        $pagination_info["last_message_position"] = 0;
        $pagination_info["loaded_message_count"] = count($post_list);
        $pagination_info["pinned_message_count"] = count($pinned_post_list);
        
        if ($pagination_info["loaded_message_count"] > 0) {
            $pids = array_keys($post_list);
            $pagination_info["first_page_message"] = array_shift($pids);
            $pagination_info["last_page_message"] = array_pop($pids);
            
            if ($pagination_info["last_page_message"] == $deleted_visible_pid) {
                $pagination_info["last_page_message"] = array_pop($pids);
            }
            
            if (!empty($deleted_visible_pid)) {
                $pagination_info["loaded_message_count"] -= 1;
            }
            
            // if only one post
            if (empty($pagination_info["last_page_message"])) {
                $pagination_info["last_page_message"] = $pagination_info["first_page_message"];
            }
            
            // check whether the previous post exits
            
            $order_by = "order by {$prfx}_post.id desc";
            $where_appendix = " and {$prfx}_post.id < " . $pagination_info["first_page_message"];
            if (!$rodbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, 1, $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            $tmp_post_list = array();
            $this->collect_posts($rodbw, $current_uid, $tmp_post_list, $user_ids);
            
            $rodbw->free_result();
            
            $prev_post_time = time();
            if (count($tmp_post_list) > 0) {
                foreach ($tmp_post_list as $post_data) {
                    $prev_post_time = $post_data["creation_date_sec"];
                }
            }
            
            foreach ($post_list as $pid => $post_data) {
                if ($post_list[$pid]["creation_date_sec"] - $prev_post_time > 365 * 24 * 3600) {
                    $post_list[$pid]["warn_year_interval"] = true;
                }
                
                $prev_post_time = $post_list[$pid]["creation_date_sec"];
            }
        } elseif ($pagination_info["pinned_message_count"] > 0) {
            $pagination_info["first_page_message"] = $pagination_info["first_topic_pinned_message"];
            $pagination_info["last_page_message"] = $pagination_info["first_topic_pinned_message"];
        }
        
        if (!$this->calculate_message_positions($tid, $pagination_info, $show_deleted, $rodbw, $prfx)) {
            return false;
        }
        
        $post_list = $pinned_post_list + $post_list;
        
        // get additional data
        
        $result = $this->get_additional_post_data($rodbw, $prfx, $fid, $tid, $user_ids, $post_list, $user_data);
        
        measure_action_time("get page messages");
        
        return $result;
    } // get_topic_posts
    
    //-----------------------------------------------------------------
    function get_moderator_events(&$event_list, &$pagination_info)
    {
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $where = "where redundant = 0";
        
        $user_moderation_log = false;
        
        if (!reqvar_empty("uid") && is_numeric(reqvar("uid"))) {
            $where .= " and author_id = " . reqvar("uid");
            
            $user_moderation_log = true;
        }
        
        if (reqvar("ip") != "") {
            $where .= " and {$prfx}_moderator_log.ip = '" . $rodbw->escape(reqvar("ip")) . "'";
            
            $user_moderation_log = true;
        }
        
        if (val_or_empty($_SESSION["moderator_log_filter"]["action_name"]) == "include_rate_actions") {
            // do nothing
        } elseif (!empty($_SESSION["moderator_log_filter"]["action_name"])) {
            $where .= " and action = '" . $rodbw->escape($_SESSION["moderator_log_filter"]["action_name"]) . "'";
        } else {
            $where .= " and action not in ('post_liked', 'post_disliked', 'like_revoked', 'dislike_revoked')";
        }
        
        if (!$user_moderation_log) {
            if (!empty($_SESSION["moderator_log_filter"]["moderator_name"])) {
                $where .= " and moderator_name = '" . $rodbw->escape($this->display_name_to_name($_SESSION["moderator_log_filter"]["moderator_name"])) . "'";
            }
            
            if (!empty($_SESSION["moderator_log_filter"]["topic_name"])) {
                $where .= " and (";
                
                $tid = ltrim($_SESSION["moderator_log_filter"]["topic_name"], "#");
                
                if (is_numeric($tid)) {
                    $where .= "topic_id = $tid or ";
                    $where .= "source_topic_id = $tid or ";
                }
                
                $topic_search_key_clause = $this->get_topic_search_clause($rodbw, $prfx, $_SESSION["moderator_log_filter"]["topic_name"], true);
                if (!empty($topic_search_key_clause)) {
                    $topic_search_key_clause = "where " . $topic_search_key_clause;
                }
                
                $where .= "topic_id in (select {$prfx}_topic.id from {$prfx}_topic $topic_search_key_clause) or " .
                    "source_topic_id in (select {$prfx}_topic.id from {$prfx}_topic $topic_search_key_clause) or " .
                    "(topic_name like '%" . $rodbw->escape($_SESSION["moderator_log_filter"]["topic_name"]) . "%') or " .
                    "(source_topic_name like '%" . $rodbw->escape($_SESSION["moderator_log_filter"]["topic_name"]) . "%')";
                
                $where .= ")";
            }
            
            if (!empty($_SESSION["moderator_log_filter"]["forum"])) {
                if ($_SESSION["moderator_log_filter"]["forum"] == "private") {
                    $private_fid = $this->get_private_forum_id();
                    $where .= " and forum_id = $private_fid";
                } else {
                    $where .= " and forum_id = " . $rodbw->escape($_SESSION["moderator_log_filter"]["forum"]) . "";
                }
            }
            
            if (!empty($_SESSION["moderator_log_filter"]["user_name"])) {
                $where .= " and (author_name = '" . $rodbw->escape($this->display_name_to_name($_SESSION["moderator_log_filter"]["user_name"])) . "' or {$prfx}_moderator_log.ip = '" . $rodbw->escape($_SESSION["moderator_log_filter"]["user_name"]) . "')";
            }
            
            $start_date = iso_date(val_or_empty($_SESSION["moderator_log_filter"]["start_date"]), text("DateFormat"));
            if (empty($start_date) || $start_date == "error") {
                $_SESSION["moderator_log_filter"]["start_date"] = "";
            } else {
                $start_date = xstrtotime(date("Ymd 00:00:00", xstrtotime($start_date)));
                $start_date = back_adjust_timezone($start_date);
                $start_date = xstrtotime(date("Ymd 00:00:00", $start_date));
                
                $where .= " and event_time >= '" . $rodbw->format_datetime($start_date) . "'";
            }
            
            $end_date = iso_date(val_or_empty($_SESSION["moderator_log_filter"]["end_date"]), text("DateFormat"));
            if (empty($end_date) || $end_date == "error") {
                $_SESSION["moderator_log_filter"]["end_date"] = "";
            } else {
                $end_date = xstrtotime(date("Ymd 23:59:59", xstrtotime($end_date)));
                $end_date = back_adjust_timezone($end_date);
                $end_date = xstrtotime(date("Ymd 23:59:59", $end_date));
                
                $where .= " and event_time <= '" . $rodbw->format_datetime($end_date) . "'";
            }
        }
        
        if (reqvar("event") != "" && is_numeric(reqvar("event"))) {
            $where = "where redundant = 0 and {$prfx}_moderator_log.id = '" . $rodbw->escape(reqvar("event")) . "'";
        }
        
        //---------------------------------------------------------------------
        // restricted and protected forums
        $forum_restriction_appendix = $this->get_forum_restriction_appendix($rodbw, $prfx);
        if (!empty($forum_restriction_appendix)) {
            $forum_restriction_appendix = " and ({$prfx}_forum.id is NULL or $forum_restriction_appendix)";
        }
        
        $where .= $forum_restriction_appendix;
        //---------------------------------------------------------------------
        
        if (!$rodbw->execute_query("select count(*) cnt
                                    from {$prfx}_moderator_log
                                    left join {$prfx}_forum on ({$prfx}_moderator_log.forum_id = {$prfx}_forum.id)
                                    $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if ($rodbw->fetch_row()) {
            $pagination_info["total_count"] = $rodbw->field_by_name("cnt");
        }
        
        $rodbw->free_result();
        
        $pagination_info["rows_per_page"] = TOPICS_PER_PAGE;
        if ($pagination_info["rows_per_page"] < 1) {
            $pagination_info["rows_per_page"] = 40;
        }
        if (empty($pagination_info["page"]) || !is_numeric($pagination_info["page"])) {
            $pagination_info["page"] = 1;
        }
        $pagination_info["page"] = round($pagination_info["page"]);
        
        $pagination_info["page_count"] = ceil($pagination_info["total_count"] / $pagination_info["rows_per_page"]);
        if ($pagination_info["page_count"] < 1) {
            $pagination_info["page_count"] = 1;
        }
        if ($pagination_info["page"] > $pagination_info["page_count"]) {
            $pagination_info["page"] = $pagination_info["page_count"];
        }
        if ($pagination_info["page"] < 1) {
            $pagination_info["page"] = 1;
        }
        
        if (!$rodbw->execute_query($this->get_query_moderator_events($prfx, $where, $pagination_info))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip_blocked = false;
            if ($rodbw->field_by_name("ip_blocked")) {
                $ip_blocked = true;
                
                if ($rodbw->field_by_name("block_expires") && xstrtotime($rodbw->field_by_name("block_expires")) < time()) {
                    $ip_blocked = false;
                }
            }
            
            $event_list[$rodbw->field_by_name("id")] = array(
                "event_time" => smart_date2(xstrtotime($rodbw->field_by_name("event_time"))),
                "moderator_name" => $rodbw->field_by_name("moderator_name"),
                "moderator_id" => $rodbw->field_by_name("moderator_id"),
                "moderator_online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0),
                "action" => $rodbw->field_by_name("action"),
                "action_expires" => smart_date(adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("action_expires")), text("DateTimeFormat"))),
                "author_name" => $rodbw->field_by_name("author_name"),
                "author_id" => $rodbw->field_by_name("author_id"),
                "ip" => $rodbw->field_by_name("ip"),
                "ip_blocked" => $ip_blocked,
                "author_online" => (xstrtotime($rodbw->field_by_name("author_last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("author_logout") == 0),
                "post_id" => $rodbw->field_by_name("post_id"),
                "topic_name" => $rodbw->field_by_name("topic_name"),
                "topic_id" => $rodbw->field_by_name("topic_id"),
                "forum_name" => $rodbw->field_by_name("forum_name") == "PRIVATE_MESSAGES" ? text("PrivateTopics") : $rodbw->field_by_name("forum_name"),
                "forum_id" => $rodbw->field_by_name("forum_name") == "PRIVATE_MESSAGES" ? "private" : $rodbw->field_by_name("forum_id"),
                "comment" => Emoji::Decode($rodbw->field_by_name("comment"))
            );
        }
        
        $rodbw->free_result();
        
        if (empty($event_list)) {
            measure_action_time("get moder. events");
            return true;
        }
        
        $in_list = implode(",", array_keys($event_list));
        $now = $rodbw->format_datetime(time());
        
        if (!$rodbw->execute_query("select id
                             from {$prfx}_moderator_log
                             where id in ($in_list)
                             and action in ('block_ip', 'unblock_ip', 'block_user_marker', 'unblock_user_marker', 'delete_reqad_marker')
                             and author_name in (select ip
                                                 from {$prfx}_ip_blocked
                                                 where block_expires is NULL or block_expires > '$now')
                             ")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $event_list[$rodbw->field_by_name("id")]["ip_blocked"] = 1;
        }
        
        $rodbw->free_result();
        
        foreach ($event_list as &$event) {
            $this->format_manager->format_message_simple($rodbw, $prfx, $event["comment"], "warning");
            postprocess_message($event["comment"]);
        }
        
        measure_action_time("get moder. events");
        
        return true;
    } // get_moderator_events
    
    //-----------------------------------------------------------------
    function get_event_list(&$event_list, &$pagination_info)
    {
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($this->get_user_id());
        if (empty($uid)) {
            return true;
        }
        
        start_action_time_measure();
        
        $where = "where redundant = 0 and user_id = $uid";
        
        $negative_events = array(
            'MsgEventMessageDisliked',
            'MsgEventMessageDislikedAnonym',
            'MsgEventPrivateRemoval',
            'MsgEventRevokeForumModerator',
            'MsgEventRevokeForumModeratorAnonym',
            'MsgEventRevokeTopicModerator',
            'MsgEventRevokeTopicModeratorAnonym',
            'MsgEventMessageWarned',
            'MsgEventMessageWarnedAnonym',
            'MsgEventAttachmentDeleted',
            'MsgEventAttachmentDeletedAnonym',
            'MsgEventMessageDeleted',
            'MsgEventMessageDeletedAnonym',
            'MsgEventTopicDeleted',
            'MsgEventTopicDeletedAnonym',
            'MsgEventTopicClosed',
            'MsgEventTopicClosedAnonym',
            'MsgEventMessagesInTopicDeleted',
            'MsgEventMessagesInTopicDeletedAnonym',
            'MsgEventMessagesInTopicDeletedForDays',
            'MsgEventMessagesInTopicDeletedForDaysAnonym',
            'MsgEventMessagesInForumDeleted',
            'MsgEventMessagesInForumDeletedAnonym',
            'MsgEventMessagesInTopicDeleted',
            'MsgEventMessagesInTopicDeletedAnonym',
            'MsgEventMessagesInTopicDeletedForDays',
            'MsgEventMessagesInTopicDeletedForDaysAnonym',
            'MsgEventMessagesInForumDeleted',
            'MsgEventMessagesInForumDeletedAnonym',
            'MsgEventAllMessagesDeleted',
            'MsgEventAllMessagesDeletedAnonym',
            'MsgEventBulkMessagesDeleted',
            'MsgEventBulkMessagesDeletedAnonym',
            'MsgEventNMessagesDeleted',
            'MsgEventNMessagesDeletedAnonym',
            'MsgEventNRatesDeleted',
            'MsgEventNRatesDeletedAnonym',
            'MsgEventRevokeAdministrator',
            'MsgEventUserBlocked',
            'MsgEventUserBlockedAnonym',
            'MsgEventUserBlockedTime',
            'MsgEventUserBlockedTimeAnonym',
            'MsgEventUserForumBlocked',
            'MsgEventUserForumBlockedAnonym',
            'MsgEventUserForumBlockedTime',
            'MsgEventUserForumBlockedTimeAnonym',
            'MsgEventUserTopicBlocked',
            'MsgEventUserTopicBlockedAnonym',
            'MsgEventUserAccessRevoked',
            'MsgEventUserAccessRevokedAnonym',
            'MsgEventProfileHidden',
            'MsgEventProfileHiddenAnonym',
            'MsgEventRatingDisallowed',
            'MsgEventRatingDisallowedAnonym'
        
        );
        
        $non_moderator_events = array('MsgEventMessageLiked', 'MsgEventMessageDisliked', 'MsgEventMessageDislikedAnonym', 'MsgEventLikeRevoked', 'MsgEventDislikeRevoked', 'MsgEventDislikeRevokedAnonym', 'MsgEventNewMessageInTopic', 'MsgEventNewPrivateMessage', 'MsgEventCitatedMessageInTopic', 'MsgEventUserRegistered', 'MsgEventWordsMentionedInTopic', 'MsgEventCitatedSubscribedMessageInTopic', 'MsgEventAttentionAsked');
        $non_mod_in_list = "'" . implode("', '", $non_moderator_events) . "'";
        
        if (!empty($_SESSION["event_log_filter"]["author_name"])) {
            $where .= " and author_name = '" . $rodbw->escape($this->display_name_to_name($_SESSION["event_log_filter"]["author_name"])) . "'";
        }
        
        if (!empty($_SESSION["event_log_filter"]["topic_name"])) {
            $where .= " and (";
            
            $tid = ltrim($_SESSION["event_log_filter"]["topic_name"], "#");
            
            if (is_numeric($tid)) {
                $where .= "topic_id = $tid or ";
                $where .= "source_topic_id = $tid or ";
            }
            
            $topic_search_key_clause = $this->get_topic_search_clause($rodbw, $prfx, $_SESSION["event_log_filter"]["topic_name"], true);
            if (!empty($topic_search_key_clause)) {
                $topic_search_key_clause = "where " . $topic_search_key_clause;
            }
            
            $where .= "topic_id in (select {$prfx}_topic.id from {$prfx}_topic $topic_search_key_clause) or " .
                "source_topic_id in (select {$prfx}_topic.id from {$prfx}_topic $topic_search_key_clause) or " .
                "(topic_name like '%" . $rodbw->escape($_SESSION["event_log_filter"]["topic_name"]) . "%') or " .
                "(source_topic_name like '%" . $rodbw->escape($_SESSION["event_log_filter"]["topic_name"]) . "%')";
            
            $where .= ")";
        }
        
        if (!empty($_SESSION["event_log_filter"]["forum"])) {
            if ($_SESSION["event_log_filter"]["forum"] == "private") {
                $private_fid = $this->get_private_forum_id();
                $where .= " and forum_id = $private_fid";
            } else {
                $where .= " and forum_id = " . $rodbw->escape($_SESSION["event_log_filter"]["forum"]) . "";
            }
        }
        
        $start_date = iso_date(val_or_empty($_SESSION["event_log_filter"]["start_date"]), text("DateFormat"));
        if (empty($start_date) || $start_date == "error") {
            $_SESSION["event_log_filter"]["start_date"] = "";
        } else {
            $start_date = xstrtotime(date("Ymd 00:00:00", xstrtotime($start_date)));
            $start_date = back_adjust_timezone($start_date);
            $start_date = xstrtotime(date("Ymd 00:00:00", $start_date));
            
            $where .= " and event_time >= '" . $rodbw->format_datetime($start_date) . "'";
        }
        
        $end_date = iso_date(val_or_empty($_SESSION["event_log_filter"]["end_date"]), text("DateFormat"));
        if (empty($end_date) || $end_date == "error") {
            $_SESSION["event_log_filter"]["end_date"] = "";
        } else {
            $end_date = xstrtotime(date("Ymd 23:59:59", xstrtotime($end_date)));
            $end_date = back_adjust_timezone($end_date);
            $end_date = xstrtotime(date("Ymd 23:59:59", $end_date));
            
            $where .= " and event_time <= '" . $rodbw->format_datetime($end_date) . "'";
        }
        
        switch (val_or_empty($_SESSION["event_log_filter"]["event_type"])) {
            case "unprocessed_events":
                $where .= " and (todo = 1 or
                             (is_new <> 0 and
                                ((select last_events_view_date from {$prfx}_user where id = $uid) is NULL or
                                 event_time > (select last_events_view_date from {$prfx}_user where id = $uid)
                                )
                             )
                        )";
                break;
            
            case "mod_events":
                $where .= " and event_code not in ($non_mod_in_list)";
                break;
            
            case "warnings":
                $where .= " and event_code in ('MsgEventMessageWarned', 'MsgEventMessageWarnedAnonym')";
                break;
            
            case "complaints":
                $where .= " and event_code = 'MsgEventMessageComplained'";
                break;
            
            case "attention_events":
                $where .= " and event_code = 'MsgEventAttentionAsked'";
                break;
            
            case "likes":
                $where .= " and event_code in ('MsgEventMessageLiked', 'MsgEventLikeRevoked')";
                break;
            
            case "dislikes":
                $where .= " and event_code in ('MsgEventMessageDisliked', 'MsgEventMessageDislikedAnonym', 'MsgEventDislikeRevoked', 'MsgEventDislikeRevokedAnonym')";
                break;
            
            case "replies":
                $where .= " and event_code in ('MsgEventCitatedMessageInTopic', 'MsgEventCitatedSubscribedMessageInTopic')";
                break;
            
            case "unprocessed_mod_events":
                $where .= " and event_code not in ($non_mod_in_list)
                            and (todo = 1 or
                             (is_new <> 0 and
                                ((select last_events_view_date from {$prfx}_user where id = $uid) is NULL or
                                 event_time > (select last_events_view_date from {$prfx}_user where id = $uid)
                                )
                             )
                        )";
                break;
        }
        
        // last event read date
        
        if (!$rodbw->execute_query("select last_events_view_date from {$prfx}_user where id = $uid")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $last_events_view_date = 0;
        
        if ($rodbw->fetch_row()) {
            $last_events_view_date = xstrtotime($rodbw->field_by_name("last_events_view_date"));
        }
        
        $rodbw->free_result();
        
        // define the page count
        if (!$rodbw->execute_query("select count(*) cnt from {$prfx}_events $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        if (!$rodbw->fetch_row()) {
            MessageHandler::setError(text("ErrQueryFailed"), "No result by select count(*)");
            $rodbw->free_result();
            return false;
        }
        
        $pagination_info["total_count"] = $rodbw->field_by_name("cnt");
        
        $rodbw->free_result();
        
        $pagination_info["rows_per_page"] = TOPICS_PER_PAGE;
        if ($pagination_info["rows_per_page"] < 1) {
            $pagination_info["rows_per_page"] = 40;
        }
        if (empty($pagination_info["page"]) || !is_numeric($pagination_info["page"])) {
            $pagination_info["page"] = 1;
        }
        $pagination_info["page"] = round($pagination_info["page"]);
        
        $pagination_info["page_count"] = ceil(($pagination_info["total_count"]) / $pagination_info["rows_per_page"]);
        if ($pagination_info["page_count"] < 1) {
            $pagination_info["page_count"] = 1;
        }
        if ($pagination_info["page"] > $pagination_info["page_count"]) {
            $pagination_info["page"] = $pagination_info["page_count"];
        }
        if ($pagination_info["page"] < 1) {
            $pagination_info["page"] = 1;
        }
        
        if (!$rodbw->execute_query($this->get_query_event_list($prfx, $where, $pagination_info))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $reverse_mapping = array();
        
        while ($rodbw->fetch_row()) {
            $params_str = Emoji::Decode($rodbw->field_by_name("params"));
            $params = array();
            
            unserialize_array($params, $params_str);
            
            if (!empty($params["{post_id}"])) {
                $reverse_mapping[$params["{post_id}"]][] = $rodbw->field_by_name("id");
            }
            if (!empty($params["{first_post_id}"])) {
                $reverse_mapping[$params["{first_post_id}"]][] = $rodbw->field_by_name("id");
            }
            
            $event_time = xstrtotime($rodbw->field_by_name("event_time"));
            $is_new = ($event_time > $last_events_view_date) && $rodbw->field_by_name("is_new");
            
            $event_list[$rodbw->field_by_name("id")] = array(
                "event_time" => smart_date2(xstrtotime($rodbw->field_by_name("event_time"))),
                "event_code" => $rodbw->field_by_name("event_code"),
                "author_name" => $rodbw->field_by_name("author_name"),
                "author_id" => $rodbw->field_by_name("author_id"),
                "online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0),
                "is_new" => $is_new,
                "moderator_event" => !in_array($rodbw->field_by_name("event_code"), $non_moderator_events),
                "negative_event" => in_array($rodbw->field_by_name("event_code"), $negative_events),
                "attention_event" => $rodbw->field_by_name("event_code") == "MsgEventAttentionAsked",
                "like_event" => $rodbw->field_by_name("event_code") == "MsgEventMessageLiked",
                "dislike_event" => $rodbw->field_by_name("event_code") == "MsgEventMessageDisliked" || $rodbw->field_by_name("event_code") == "MsgEventMessageDislikedAnonym",
                "todo" => $rodbw->field_by_name("todo"),
                "params" => $params
            );
        }
        
        $rodbw->free_result();
        
        // get deleted status
        
        if (!empty($reverse_mapping)) {
            $in_list = $rodbw->escape(implode(",", array_keys($reverse_mapping)));
            
            $query = "select {$prfx}_post.id from 
                      {$prfx}_post
                      inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                      inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                      where 
                      {$prfx}_post.id in ($in_list) and
                      ({$prfx}_post.deleted = 1 or {$prfx}_topic.deleted = 1 or {$prfx}_forum.deleted = 1)
            ";

            if (!$rodbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
                return false;
            }
            
            while ($rodbw->fetch_row()) {
                $pid = $rodbw->field_by_name("id");
                
                if (empty($reverse_mapping[$pid])) {
                    continue;
                }
                
                foreach($reverse_mapping[$pid] as $evid) {
                    $event_list[$evid]["message_deleted"] = 1;
                }
            }
            
            $rodbw->free_result();
        }
        
        foreach ($event_list as &$event) {
            if (!empty($event["params"]["{message}"])) {
                postprocess_message($event["params"]["{message}"]);
            }
            
            if (!empty($event["params"]["{comment}"])) {
                $this->format_manager->format_message_simple($rodbw, $prfx, $event["params"]["{comment}"], "warning");
                postprocess_message($event["params"]["{comment}"]);
            }
        }
        
        measure_action_time("get event list");
        
        return true;
    } // get_event_list
    
    //-----------------------------------------------------------------
    function get_read_topics($uid, &$read_topics)
    {
        if (empty($uid)) {
            return true;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        
        // restricted and protected forums
        $forum_restriction_appendix = $this->get_forum_restriction_appendix($dbw, $prfx);
        if (!empty($forum_restriction_appendix)) {
            $forum_restriction_appendix = " and $forum_restriction_appendix";
        }
        
        if (!$dbw->execute_query($this->get_query_read_topics($prfx, $uid, $forum_restriction_appendix))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $read_topics[] = array(
                "tid" => $dbw->field_by_name("id"),
                "fid" => $dbw->field_by_name("forum_id"),
                "name" => $dbw->field_by_name("name"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "dt" => smart_date2(xstrtotime($dbw->field_by_name("dt")))
            );
        }
        
        $dbw->free_result();
        
        measure_action_time("get read topics");
        
        return true;
    } // get_read_topics
    
    //-----------------------------------------------------------------
    function get_guest_read_topics($guest, &$read_topics)
    {
        if (empty($guest)) {
            return true;
        }
        
        start_action_time_measure();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $guest = quotes_or_null($dbw->escape($guest));
        
        // restricted and protected forums
        $forum_restriction_appendix = $this->get_forum_restriction_appendix($dbw, $prfx);
        if (!empty($forum_restriction_appendix)) {
            $forum_restriction_appendix = " and $forum_restriction_appendix";
        }
        
        if (!$dbw->execute_query($this->get_query_guest_read_topics($prfx, $guest, $forum_restriction_appendix))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        while ($dbw->fetch_row()) {
            $read_topics[] = array(
                "tid" => $dbw->field_by_name("id"),
                "fid" => $dbw->field_by_name("forum_id"),
                "name" => $dbw->field_by_name("name"),
                "forum_name" => $dbw->field_by_name("forum_name"),
                "dt" => smart_date2(xstrtotime($dbw->field_by_name("dt")))
            );
        }
        
        $dbw->free_result();
        
        measure_action_time("get guest read topics");
        
        return true;
    } // get_guest_read_topics
    
    //-----------------------------------------------------------------
    function get_found_topics($search_hash, &$topic_list, &$pagination_info)
    {
        start_action_time_measure();
        
        $srdbw = System::getSRDBWorker();
        if (!$srdbw) {
            return false;
        }
        
        if (!empty($_SESSION["show_deleted"])) {
            $show_deleted = true;
        }
        if (!reqvar_empty("include_deleted") || !reqvar_empty("deleted_only") || !reqvar_empty("deleted_topics_only")) {
            $show_deleted = true;
        }
        
        $prfx = $srdbw->escape(System::getDBPrefix());
        
        $search_hash = $srdbw->escape($search_hash);
        $session_id = $srdbw->escape(session_id());
        
        $where = "where session_id = '$session_id' and search_hash = '$search_hash'";
        
        if (!$srdbw->execute_query("select count(*) cnt from {$prfx}_found_topic_cache $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        if ($srdbw->fetch_row()) {
            $pagination_info["total_count"] = $srdbw->field_by_name("cnt");
        }
        
        $srdbw->free_result();
        
        $current_uid = $srdbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = 0;
        }
        
        $pagination_info["ignored_count"] = 0;
        $author_id = 0;
        
        if (!empty($_SESSION["ignored_topics"])) {
            $ignored_in_list = $srdbw->escape(implode(",", $_SESSION["ignored_topics"]));
            $where .= " and {$prfx}_found_topic_cache.topic_id in ($ignored_in_list)";
            
            if (!$srdbw->execute_query("select count(*) cnt from {$prfx}_found_topic_cache $where")) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
        
            if ($srdbw->fetch_row()) {
                $pagination_info["ignored_count"] = $srdbw->field_by_name("cnt");
            }
            
            $srdbw->free_result();

            $author = reqvar("author");

            if (!empty($author) && $author[0] != ":") {
                $author = $srdbw->escape($this->display_name_to_name($author));
                $query = "select id from {$prfx}_user where user_name = '$author'";
                if (!$srdbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                    return "";
                }
                
                if ($srdbw->fetch_row()) {
                    $author_id = $srdbw->escape($srdbw->field_by_name("id"));
                }
                
                $srdbw->free_result();
            }
        }
        
        if (!empty($_SESSION["ignored_topics"]) &&
            $pagination_info["ignored_count"] == 0 &&
            in_array(reqvar("author_mode"), array("created_topic", "participating")) && $author_id == $current_uid) {
            $ignored_in_list = $srdbw->escape(implode(",", $_SESSION["ignored_topics"]));                    
            
            if (reqvar("author_mode") == "created_topic") {
                $query = "select count(*) cnt from {$prfx}_topic where user_id = $current_uid and id in ($ignored_in_list)";
            } else {
                $query = "select count(*) cnt from {$prfx}_topic_participants where user_id = $current_uid and topic_id in ($ignored_in_list)";
            }

            if (!$srdbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
        
            if ($srdbw->fetch_row()) {
                $pagination_info["ignored_count"] = $srdbw->field_by_name("cnt");
            }
            
            $srdbw->free_result();
        }
        
        $has_fav_posts = 0;
        if (!empty($_REQUEST["forums"]) && in_array(-1, $_REQUEST["forums"])) {
            if (!$srdbw->execute_query("select count(*) cnt, min(post_id) first_post_id
                               from {$prfx}_found_post_cache
                               where session_id = '$session_id' and search_hash = '$search_hash' and
                               post_id in (select post_id from {$prfx}_favourite_posts where user_id = $current_uid)")) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            $first_post_id = "";
            
            if ($srdbw->fetch_row()) {
                $first_post_id = $srdbw->field_by_name("first_post_id");
                
                if ($srdbw->field_by_name("cnt") > 0) {
                    $has_fav_posts = 1;
                }
            }
            
            $srdbw->free_result();
            
            $pagination_info["total_count"] += $has_fav_posts;
            
            if ($has_fav_posts > 0) {
                $query = "select count(*) cnt, max(creation_date) last_message_date,
                  max({$prfx}_post.id) last_post_id
                  from {$prfx}_favourite_posts
                  inner join {$prfx}_post on ({$prfx}_favourite_posts.post_id = {$prfx}_post.id)
                  where {$prfx}_favourite_posts.user_id = $current_uid";
                
                if (!$srdbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                    return false;
                }
                
                $fav_count = 0;
                $last_message_date = "";
                
                $last_post_id = "";
                while ($srdbw->fetch_row()) {
                    $last_post_id = $srdbw->field_by_name("last_post_id");
                    
                    $fav_count = $srdbw->field_by_name("cnt");
                    $last_message_date = smart_date2(xstrtotime($srdbw->field_by_name("last_message_date")));
                }
                
                $srdbw->free_result();
                
                $query = "select author, user_id, user_name, {$prfx}_post.read_marker,
                  last_visit_date, logout
                  from {$prfx}_post
                  left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)
                  where {$prfx}_post.id = $last_post_id";
                
                if (!$srdbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                    return false;
                }
                
                $last_author_id = "";
                $last_author = "";
                $last_author_readmarker = "";
                $last_author_online = 0;
                
                if ($srdbw->fetch_row()) {
                    $last_author_id = $srdbw->field_by_name("user_id");
                    $last_author = $srdbw->field_by_name("user_name") ? $srdbw->field_by_name("user_name") : $srdbw->field_by_name("author");
                    $last_author_readmarker = $srdbw->field_by_name("read_marker");
                    $last_author_online = (xstrtotime($srdbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $srdbw->field_by_name("logout") == 0);
                }
                
                $srdbw->free_result();
                
                $last_author_ignored = false;
                $this->clear_if_ignored($last_author_id, $last_author, $last_author_readmarker, $last_author_online, $last_author_ignored, "", "");
                
                $topic_list[-1] = array(
                    "name" => text("FavouriteMessages"),
                    "creation_date" => "",
                    "last_message_date" => $last_message_date,
                    "post_count" => $fav_count,
                    "posts_per_page" => $this->get_posts_per_page(),
                    "hits_count" => $fav_count,
                    "pinned" => 1,
                    "is_poll" => 0,
                    "is_blocked" => 0,
                    "closed" => 0,
                    "deleted" => 0,
                    "forum_id" => -1,
                    "topic_in_favourites" => 1,
                    "forum_name" => text("Favourites"),
                    "user_id" => $current_uid,
                    "author" => $this->get_user_name(),
                    "online" => 1,
                    "last_author" => $last_author,
                    "last_author_id" => $last_author_id,
                    "last_author_online" => $last_author_online,
                    "last_author_ignored" => $last_author_ignored,
                    "new_messages_count" => 0,
                    "new_marker_ignored" => 0,
                    "first_post" => $first_post_id,
                    "receiver_id" => "",
                    "receiver_name" => ""
                );
            } // has_fav_posts
        } // if favourites
        
        $pagination_info["rows_per_page"] = TOPICS_PER_PAGE - $has_fav_posts;
        
        if ($pagination_info["rows_per_page"] < 1) {
            $pagination_info["rows_per_page"] = 40;
        }
        if (empty($pagination_info["page"]) || !is_numeric($pagination_info["page"])) {
            $pagination_info["page"] = 1;
        }
        $pagination_info["page"] = round($pagination_info["page"]);
        
        $pagination_info["page_count"] = ceil(($pagination_info["total_count"] - $has_fav_posts) / $pagination_info["rows_per_page"]);
        if ($pagination_info["page_count"] < 1) {
            $pagination_info["page_count"] = 1;
        }
        if ($pagination_info["page"] > $pagination_info["page_count"]) {
            $pagination_info["page"] = $pagination_info["page_count"];
        }
        if ($pagination_info["page"] < 1) {
            $pagination_info["page"] = 1;
        }
        
        if (!$srdbw->execute_query($this->get_query_found_topics($prfx, $current_uid, $session_id, $search_hash, $pagination_info))) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        while ($srdbw->fetch_row()) {
            $tid = $srdbw->field_by_name("id");
            $forum_id = $srdbw->field_by_name("forum_id");
            
            $post_count = $srdbw->field_by_name("post_count");
            if (($this->is_admin() || $this->is_forum_moderator($forum_id) || $this->is_topic_moderator($tid)) && !empty($show_deleted)) {
                $post_count = $srdbw->field_by_name("post_count_total");
            }
            
            $forum_name = $srdbw->field_by_name("forum_name");
            if ($forum_name == "PRIVATE_MESSAGES") {
                $forum_id = "private";
                $forum_name = text("PrivateTopics");
            }
            
            $user_id = $srdbw->field_by_name("user_id");
            $author = $srdbw->field_by_name("user_name") ? $srdbw->field_by_name("user_name") : $srdbw->field_by_name("author");
            $author_readmarker = $srdbw->field_by_name("read_marker");
            $online = (xstrtotime($srdbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $srdbw->field_by_name("logout") == 0);
            
            $author_ignored = false;
            $this->clear_if_ignored($user_id, $author, $author_readmarker, $online, $author_ignored, $forum_id, $tid);
            
            $topic_list[$tid] = array(
                "name" => $srdbw->field_by_name("name"),
                "creation_date" => smart_date2(xstrtotime($srdbw->field_by_name("creation_date"))),
                "last_message_date" => smart_date2(xstrtotime($srdbw->field_by_name("last_message_date"))),
                "post_count" => $post_count,
                "posts_per_page" => $this->get_posts_per_page(),
                "has_pinned_post" => $srdbw->field_by_name("has_pinned_post"),
                "hits_count" => $srdbw->field_by_name("hits_count"),
                "bot_hits_count" => $srdbw->field_by_name("bot_hits_count"),
                "pinned" => $srdbw->field_by_name("pinned") || $srdbw->field_by_name("user_pinned") || !empty($_SESSION["pinned_topics"][$tid]),
                "publish_delay" => $srdbw->field_by_name("publish_delay"),
                "profiled_topic" => $srdbw->field_by_name("profiled_topic"),
                "is_poll" => $srdbw->field_by_name("is_poll"),
                "is_blocked" => $srdbw->field_by_name("no_guests") && !$this->is_logged_in(),
                "closed" => $srdbw->field_by_name("closed"),
                "deleted" => $srdbw->field_by_name("deleted") || $srdbw->field_by_name("forum_deleted"),
                "forum_id" => $forum_id,
                "forum_name" => $forum_name,
                "user_id" => $user_id,
                "author" => $author,
                "online" => $online,
                "author_ignored" => $author_ignored,
                "new_messages_count" => 0,
                "new_marker_ignored" => !empty($_SESSION["ignored_topics"][$tid]) && empty($_SESSION["topic_moderator"][$tid]) && empty($_SESSION["forum_moderator"][$forum_id]),
                "receiver_id" => "",
                "receiver_name" => ""
            );
        }
        
        $srdbw->free_result();
        
        if (count($topic_list) == 0) {
            measure_action_time("get found topics");
            return true;
        }
        
        $in_list = implode(",", array_keys($topic_list));
        
        // last authors
        
        $query = "select {$prfx}_topic.id, forum_id,
            {$prfx}_post.user_id last_author_id, {$prfx}_post.author last_author, {$prfx}_post.read_marker last_author_readmarker,
            last_user.last_visit_date last_user_last_visit_date, last_user.logout last_user_logout
            from
            {$prfx}_topic 
            inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
            left join {$prfx}_post on ({$prfx}_topic_statistics.last_message_id = {$prfx}_post.id)
            left join {$prfx}_user last_user on ({$prfx}_post.user_id = last_user.id)
            where {$prfx}_topic.id in ($in_list)
            ";
        
        if (!$srdbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        while ($srdbw->fetch_row()) {
            $fid = $srdbw->field_by_name("forum_id");
            $tid = $srdbw->field_by_name("id");
            
            $topic_list[$tid]["last_author_id"] = $srdbw->field_by_name("last_author_id");
            $topic_list[$tid]["last_author"] = $srdbw->field_by_name("last_author");
            $topic_list[$tid]["last_author_readmarker"] = $srdbw->field_by_name("last_author_readmarker");
            $topic_list[$tid]["last_author_online"] = (xstrtotime($srdbw->field_by_name("last_user_last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $srdbw->field_by_name("last_user_logout") == 0);
            
            $last_author_ignored = false;
            $this->clear_if_ignored($topic_list[$tid]["last_author_id"], $topic_list[$tid]["last_author"], $topic_list[$tid]["last_author_readmarker"], $topic_list[$tid]["last_author_online"], $last_author_ignored, $fid, $tid);
            
            $topic_list[$tid]["last_author_ignored"] = $last_author_ignored;
        }
        
        $srdbw->free_result();
        
        // participants
        
        if (!$srdbw->execute_query("select topic_id, participant_id, user_name
                             from {$prfx}_private_topics
                             inner join {$prfx}_user on ({$prfx}_private_topics.participant_id = {$prfx}_user.id)
                             where topic_id in ($in_list)
                             order by user_name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        while ($srdbw->fetch_row()) {
            if ($this->is_user_ignored($srdbw->field_by_name("participant_id"))) {
                continue;
            }
            
            $tid = $srdbw->field_by_name("topic_id");
            
            $topic_list[$tid]["participants"][$srdbw->field_by_name("participant_id")] = $srdbw->field_by_name("user_name");
        }
        
        $srdbw->free_result();
        
        // topic moderators
        
        if (!$srdbw->execute_query("select topic_id, user_id, user_name,
                             last_visit_date, logout
                             from {$prfx}_topic_moderator
                             inner join {$prfx}_user on ({$prfx}_topic_moderator.user_id = {$prfx}_user.id)
                             where topic_id in ($in_list)
                             order by user_name")) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        while ($srdbw->fetch_row()) {
            $topic_list[$srdbw->field_by_name("topic_id")]["moderators"][$srdbw->field_by_name("user_id")] = array(
                "name" => $srdbw->field_by_name("user_name"),
                "online" => (xstrtotime($srdbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $srdbw->field_by_name("logout") == 0)
            );
        }
        
        $srdbw->free_result();
        
        $uid = $srdbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        // get first found posts
        
        if (!$srdbw->execute_query("select {$prfx}_post.topic_id, min(post_id) post_id
                             from {$prfx}_found_post_cache
                             inner join {$prfx}_post on ({$prfx}_found_post_cache.post_id = {$prfx}_post.id)
                             where {$prfx}_post.topic_id in ($in_list) and session_id = '$session_id' and search_hash = '$search_hash'
                             group by {$prfx}_post.topic_id")) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        while ($srdbw->fetch_row()) {
            $topic_list[$srdbw->field_by_name("topic_id")]["first_post"] = $srdbw->field_by_name("post_id");
        }
        
        $srdbw->free_result();
        
        // hots
        
        $now = $srdbw->format_datetime(time() - 60 * 60); // 60 min
        
        $query = "select topic_id
              from
              {$prfx}_post
              inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
              where {$prfx}_post.creation_date >= '$now'
              group by topic_id
              having count(*) >= 15 and count(distinct {$prfx}_post.author) > 2";
        if (!$srdbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        while ($srdbw->fetch_row()) {
            if (empty($topic_list[$srdbw->field_by_name("topic_id")])) {
                continue;
            }

            $topic_list[$srdbw->field_by_name("topic_id")]["hot"] = true;
        }
        
        $srdbw->free_result();
        
        $now = $srdbw->format_datetime(time() - 24 * 60 * 60); // day
        
        $query = "select topic_id
              from
              {$prfx}_post
              inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
              where {$prfx}_post.creation_date >= '$now'
              group by topic_id
              having count(*) >= 100 and count(distinct {$prfx}_post.author) > 2";
        if (!$srdbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        while ($srdbw->fetch_row()) {
            if (empty($topic_list[$srdbw->field_by_name("topic_id")])) {
                continue;
            }

            $topic_list[$srdbw->field_by_name("topic_id")]["hot"] = true;
        }
        
        $srdbw->free_result();

        // blocking in topic

        if (!empty($uid)) {
            $query = "select topic_id from {$prfx}_topic_blocked where user_id = $uid and topic_id in ($in_list)";
        
            if (!$srdbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            while ($srdbw->fetch_row()) {
                $topic_list[$srdbw->field_by_name("topic_id")]["is_blocked"] = true;
            }
            
            $srdbw->free_result();
        }

        // favorites
        
        if (empty($uid)) {
            if (empty($_SESSION["favourite_topics"])) {
                $favourite_in_list = "-1";
            } else {
                $favourite_in_list = $srdbw->escape(implode(",", $_SESSION["favourite_topics"]));
            }
            
            $query = "select id topic_id from {$prfx}_topic where id in ($favourite_in_list) and id in ($in_list)";
        } else {
            $query = "select topic_id from {$prfx}_favourite_topics where user_id = $uid and topic_id in ($in_list)";
        }
        
        if (!$srdbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        while ($srdbw->fetch_row()) {
            $topic_list[$srdbw->field_by_name("topic_id")]["topic_in_favourites"] = true;
        }
        
        $srdbw->free_result();
        
        // ignores
        
        if (empty($uid)) {
            if (empty($_SESSION["ignored_topics"])) {
                $ignored_in_list = "-1";
            } else {
                $ignored_in_list = $srdbw->escape(implode(",", $_SESSION["ignored_topics"]));
            }
            
            $query = "select id topic_id from {$prfx}_topic where id in ($ignored_in_list) and id in ($in_list)";
        } else {
            $query = "select topic_id from {$prfx}_ignored_topics where user_id = $uid and topic_id in ($in_list)";
        }
        
        if (!$srdbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        while ($srdbw->fetch_row()) {
            $topic_list[$srdbw->field_by_name("topic_id")]["topic_ignored"] = true;
        }
        
        $srdbw->free_result();
        
        measure_action_time("get found topics");
        
        return true;
    } // get_found_topics
    
    //-----------------------------------------------------------------
    function get_paginated_found_posts($search_hash, &$post_list, &$user_data, &$pagination_info, $order)
    {
        $user_ids = array();
        
        start_action_time_measure();
        
        $srdbw = System::getSRDBWorker();
        if (!$srdbw) {
            return false;
        }
        
        $prfx = $srdbw->escape(System::getDBPrefix());
        
        $current_uid = $srdbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = "0";
        }
        
        $session_id = $srdbw->escape(session_id());
        $search_hash = $srdbw->escape($search_hash);

        $order_by = $this->build_order_by($prfx, "asc", $order);

        $where = "where {$prfx}_post.id in (select {$prfx}_found_post_cache.post_id from {$prfx}_found_post_cache where session_id = '$session_id' and search_hash = '$search_hash')";

        if (!$srdbw->execute_query("select count(*) cnt
                                    from {$prfx}_post
                                    inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                    inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                    $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        $pagination_info["total_count"] = 0;
        
        if ($srdbw->fetch_row()) {
            $pagination_info["total_count"] = $srdbw->field_by_name("cnt");
        }
        
        $srdbw->free_result();
        
        if ($pagination_info["total_count"] == 0) {
            return false;
        }

        $pagination_info["page_count"] = ceil($pagination_info["total_count"] / $pagination_info["posts_per_page"]);
        if ($pagination_info["page_count"] < 1) {
            $pagination_info["page_count"] = 1;
        }
        
        if (!$srdbw->execute_query($this->get_query_paginated_found_posts($prfx, $current_uid, $where, $pagination_info, $order_by))) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        $post_list = array();
        $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
        
        $srdbw->free_result();
        
        if (count($post_list) == 0) {
            return true;
        }

        $pids = array_keys($post_list);
        $pagination_info["first_page_message"] = array_shift($pids);
        $pagination_info["last_page_message"] = array_pop($pids);

        // get additional data
        
        $result = $this->get_additional_post_data($srdbw, $prfx, "", "", $user_ids, $post_list, $user_data);
        
        measure_action_time("get digest posts");
        
        return $result;
    } // get_paginated_found_posts

    //-----------------------------------------------------------------
    function get_found_posts($search_hash, $tid, &$post_list, &$user_data, &$pagination_info, $order)
    {
        $user_ids = array();
        
        start_action_time_measure();
        
        $srdbw = System::getSRDBWorker();
        if (!$srdbw) {
            return false;
        }
        
        $prfx = $srdbw->escape(System::getDBPrefix());
        
        $current_uid = $srdbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = 0;
        }

        $session_id = $srdbw->escape(session_id());
        $search_hash = $srdbw->escape($search_hash);
        
        if ($search_hash == "favourite_posts") {
            if (empty($_SESSION["favourite_posts"])) {
                $favourite_posts_in_list = "-1";
            } else {
                $favourite_posts_in_list = $srdbw->escape(implode(",", $_SESSION["favourite_posts"]));
            }
            
            $where = "where {$prfx}_post.id in ($favourite_posts_in_list)";
            
            // cut off the private topics
            $where .= " and (is_private < 1 or exists (select 1 from {$prfx}_private_topics where {$prfx}_private_topics.topic_id = {$prfx}_topic.id and {$prfx}_private_topics.participant_id = $current_uid))";
            
            // cut off the restricted forums
            $forum_restriction_appendix = $this->get_forum_restriction_appendix($srdbw, $prfx);
            if (!empty($forum_restriction_appendix)) {
                $forum_restriction_appendix = " and $forum_restriction_appendix";
            }
            
            $where .= $forum_restriction_appendix;
            
            // cut off the deleted topics
            $where .= $this->get_deleted_where_appendix($srdbw, $prfx, !empty($_SESSION["show_deleted"]), true);
        } else {
            $topic_appendix = "";
            if (!empty($tid) && is_numeric($tid)) {
                $tid = $srdbw->escape($tid);
                $topic_appendix = " and {$prfx}_found_post_cache.topic_id = $tid";
            }

            $where = "where exists (select 1 from {$prfx}_found_post_cache where {$prfx}_found_post_cache.post_id = {$prfx}_post.id and session_id = '$session_id' and search_hash = '$search_hash' $topic_appendix)";
        }
                
        if (!$srdbw->execute_query("select count(*) cnt
                                    from {$prfx}_post
                                    inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                    inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                    $where")) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        $pagination_info["total_count"] = 0;
        
        if ($srdbw->fetch_row()) {
            $pagination_info["total_count"] = $srdbw->field_by_name("cnt");
        }
        
        $srdbw->free_result();
        
        if ($pagination_info["total_count"] == 0) {
            return false;
        }
            
        if (!reqvar_empty("start_from") && is_numeric(reqvar("start_from"))) {
            // get first valid post
            $order_by = "order by {$prfx}_post.id asc";
            $where_appendix = " and {$prfx}_post.id >= " . $srdbw->escape(reqvar("start_from"));
            
            if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, 1, $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            $tmp_post_list = array();
            $this->collect_posts($srdbw, $current_uid, $tmp_post_list, $user_ids);
            
            $srdbw->free_result();
            
            do {
                if (empty($tmp_post_list)) {
                    break;
                }
                
                $pids = array_keys($tmp_post_list);
                $target_msg = $pids[0];
                
                // Now, get previous posts_per_page posts
                
                $order_by = "order by {$prfx}_post.id desc";
                $where_appendix = " and {$prfx}_post.id <= " . $srdbw->escape($target_msg);
                
                if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $this->get_posts_per_page(), $order_by))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                    return false;
                }
                
                $tmp_post_list = array();
                $this->collect_posts($srdbw, $current_uid, $tmp_post_list, $user_ids);
                
                $srdbw->free_result();
                
                // calculate target_msg position
                
                if (!$srdbw->execute_query("select count(*) cnt
                                            from {$prfx}_post
                                            inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                                            inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                                            $where and {$prfx}_post.id <= " . $srdbw->escape($target_msg))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                    return false;
                }
                
                $target_message_position = 0;
                
                if ($srdbw->fetch_row()) {
                    $target_message_position = $srdbw->field_by_name("cnt");
                }
                
                $srdbw->free_result();
                
                $pagination_info["msg"] = $target_msg;
                
                if ($target_message_position == 0) {
                    break;
                }
                
                if ($target_message_position <= $this->get_posts_per_page()) {
                    break;
                }
                
                // we get the remainder to jump to the exact boundary of the pagination
                $remainder = ($target_message_position % $this->get_posts_per_page());
                if ($remainder == 0) {
                    $remainder = $this->get_posts_per_page();
                }
                $remainder--;
                
                $pids = array_keys($tmp_post_list);
                
                $pagination_info["mode"] = "startmsg";
                $pagination_info["startmsg"] = $pids[$remainder];
            } while (false);
        }
        
        if ($pagination_info["mode"] == "gotopage") {
            $pagination_info["mode"] = "topic_begin";
            
            $order_by = $this->build_order_by($prfx, "asc", $order);

            if (empty($pagination_info["page"]) || !is_numeric($pagination_info["page"]) || $pagination_info["page"] < 1) {
                $pagination_info["page"] = 1;
            }

            $pinned_position_correction = 0;
            if ($pagination_info["pinned_message_count"] > 0) {
                $pinned_position_correction = $pagination_info["pinned_message_count"];
            }
            
            $page_count = ceil(($pagination_info["total_count"] - $pinned_position_correction) / $pagination_info["posts_per_page"]);
            if ($page_count < 1) {
                $page_count = 1;
            }
            
            if ($pagination_info["page"] > $page_count) {
                $pagination_info["page"] = $page_count;
            }

            $position = ($pagination_info["page"] - 1) * $pagination_info["posts_per_page"];
            
            $query = "select nr, id from
                          (select
                           row_number() over ($order_by) nr,
                           {$prfx}_post.id
                          from {$prfx}_post 
                          inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                          inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
                          inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                          left join {$prfx}_post_statistics on ({$prfx}_post.id = {$prfx}_post_statistics.post_id)
                          $where) posts
                      where nr = $position";
                      
            if (!$srdbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            if ($srdbw->fetch_row()) {
                $pagination_info["mode"] = "startmsg";
                $pagination_info["startmsg"] = $srdbw->field_by_name("id");
                $pagination_info["offset"] = 1;
            }
            
            $srdbw->free_result();
        } // if gotopage
        
        if ($pagination_info["mode"] == "download") {
            $order_by = $this->build_order_by($prfx, "asc", $order);
            
            $where_appendix = "";
            if (!empty($pagination_info["startmsg"]) && is_numeric($pagination_info["startmsg"])) {
                $where_appendix = " and {$prfx}_post.id >= " . $srdbw->escape($pagination_info["startmsg"]);
                if ($order == "desc") {
                    $where_appendix = " and {$prfx}_post.id <= " . $srdbw->escape($pagination_info["startmsg"]);
                }
            }
            
            if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, 1000, $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            $post_list = array();
            $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
            
            $srdbw->free_result();
        } elseif ($pagination_info["mode"] == "all") {
            $order_by = $this->build_order_by($prfx, "asc", $order);
            
            $where_appendix = "";
            if (!empty($pagination_info["startmsg"]) && is_numeric($pagination_info["startmsg"])) {
                $where_appendix = " and {$prfx}_post.id >= " . $srdbw->escape($pagination_info["startmsg"]);
                if ($order == "desc") {
                    $where_appendix = " and {$prfx}_post.id <= " . $srdbw->escape($pagination_info["startmsg"]);
                }
            }
            
            if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, "", $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            $post_list = array();
            $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
            
            $srdbw->free_result();
        } elseif ($pagination_info["mode"] == "gotolast") {
            // we get the remainder to jump to the exact boundary of the pagination
            $limit = ($pagination_info["total_count"] % $this->get_posts_per_page());
            if ($limit == 0) {
                $limit = $this->get_posts_per_page();
            }
            
            // we get the posts from the end in reverse order
            $order_by = $this->build_order_by($prfx, "desc", $order);
            
            if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, $limit, $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            $post_list = array();
            $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
            
            $srdbw->free_result();
            
            $post_list = array_reverse($post_list, true);
        } elseif ($pagination_info["mode"] == "startmsg") {
            
            if (empty($pagination_info["startmsg"]) || (is_numeric($pagination_info["startmsg"]) && $pagination_info["startmsg"] < 1)) {
                $pagination_info["startmsg"] = "first";
            }
            
            if (is_numeric($pagination_info["startmsg"])) {
                if (empty($pagination_info["offset"])) {
                    $order_by = $this->build_order_by($prfx, "asc", $order);
                    
                    $limit = $this->get_posts_per_page();
                    $where_appendix = " and {$prfx}_post.id >= " . $srdbw->escape($pagination_info["startmsg"]);
                    if ($order == "desc") {
                        $where_appendix = " and {$prfx}_post.id <= " . $srdbw->escape($pagination_info["startmsg"]);
                    }
                    
                    if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $limit, $order_by))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                        return false;
                    }
                    
                    $post_list = array();
                    $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
                    
                    $srdbw->free_result();
                } elseif ($pagination_info["offset"] < 0) {
                    // we get the posts from the end in reverse order
                    $order_by = $this->build_order_by($prfx, "desc", $order);
                    
                    $limit = abs($pagination_info["offset"]) * $this->get_posts_per_page();
                    $where_appendix = " and {$prfx}_post.id < " . $srdbw->escape($pagination_info["startmsg"]);
                    if ($order == "desc") {
                        $where_appendix = " and {$prfx}_post.id > " . $srdbw->escape($pagination_info["startmsg"]);
                    }
                    
                    if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $limit, $order_by))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                        return false;
                    }
                    
                    $post_list = array();
                    $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
                    
                    $srdbw->free_result();
                    
                    $post_list = array_slice(array_reverse($post_list, true), 0, $this->get_posts_per_page(), true);
                } else /* positive offset */ {
                    $order_by = $this->build_order_by($prfx, "asc", $order);
                    
                    $limit = abs($pagination_info["offset"]) * $this->get_posts_per_page();
                    $where_appendix = " and {$prfx}_post.id > " . $srdbw->escape($pagination_info["startmsg"]);
                    if ($order == "desc") {
                        $where_appendix = " and {$prfx}_post.id < " . $srdbw->escape($pagination_info["startmsg"]);
                    }
                    
                    if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $limit, $order_by))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                        return false;
                    }
                    
                    $post_list = array();
                    $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
                    
                    $srdbw->free_result();
                    
                    $post_list = array_slice($post_list, -1 * $this->get_posts_per_page(), null, true);
                }
                
                $retrieved_post_count = count($post_list);
                
                // we are on the fist page,
                // retrieve missing up to the posts_per_page
                
                if ($retrieved_post_count > 0 && $retrieved_post_count < $this->get_posts_per_page()) {
                    $pids = array_keys($post_list);
                    
                    $last_pid = end($pids);
                    
                    $order_by = $this->build_order_by($prfx, "asc", $order);
                    $where_appendix = " and {$prfx}_post.id > " . $srdbw->escape($last_pid);
                    if ($order == "desc") {
                        $where_appendix = " and {$prfx}_post.id < " . $srdbw->escape($last_pid);
                    }
                    if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $this->get_posts_per_page() - $retrieved_post_count, $order_by))) {
                        MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                        return false;
                    }
                    
                    $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
                    
                    $srdbw->free_result();
                }
            }
            
            if ($pagination_info["startmsg"] == "first") {
                $order_by = $this->build_order_by($prfx, "asc", $order);
                
                if (empty($pagination_info["offset"])) {
                    $pagination_info["offset"] = 1;
                }
                
                $limit = abs($pagination_info["offset"]) * $this->get_posts_per_page();
                
                if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, $limit, $order_by))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                    return false;
                }
                
                $post_list = array();
                $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
                
                $srdbw->free_result();
                
                $post_list = array_slice($post_list, -1 * $this->get_posts_per_page(), null, true);
            } elseif ($pagination_info["startmsg"] == "last") {
                // we get the posts from the end in reverse order
                $order_by = $this->build_order_by($prfx, "desc", $order);
                
                if (empty($pagination_info["offset"])) {
                    $pagination_info["offset"] = -1;
                }
                
                // we get the remainder to jump to the exact boundary of the pagination
                $remainder = ($pagination_info["total_count"] % $this->get_posts_per_page());
                if ($remainder == 0) {
                    $remainder = $this->get_posts_per_page();
                }
                
                $limit = abs($pagination_info["offset"]) * $this->get_posts_per_page() - $this->get_posts_per_page() + $remainder;
                
                if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, $limit, $order_by))) {
                    MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                    return false;
                }
                
                $post_list = array();
                $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
                
                $srdbw->free_result();
                
                $post_list = array_slice(array_reverse($post_list, true), 0, $this->get_posts_per_page(), true);
            }
        } else /* from first */ {
            $order_by = $this->build_order_by($prfx, "asc", $order);
            
            if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where, $pagination_info["posts_per_page"], $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            $post_list = array();
            $this->collect_posts($srdbw, $current_uid, $post_list, $user_ids);
            
            $srdbw->free_result();
        }
        
        $pagination_info["first_message_position"] = 0;
        $pagination_info["last_message_position"] = 0;
        $pagination_info["loaded_message_count"] = count($post_list);
        
        if ($pagination_info["loaded_message_count"] > 0) {
            $pids = array_keys($post_list);
            $pagination_info["first_page_message"] = array_shift($pids);
            $pagination_info["last_page_message"] = array_pop($pids);
            
            // if only one post
            if (empty($pagination_info["last_page_message"])) {
                $pagination_info["last_page_message"] = $pagination_info["first_page_message"];
            }
            
            // get position of the last message
            // get very first and last message of the virtual topic
            
            $first_pid = $srdbw->escape($pagination_info["first_page_message"]);
            $last_pid = $srdbw->escape($pagination_info["last_page_message"]);
            $order_by = $this->build_order_by($prfx, "asc", $order);
            $query = "select nr, id from
                          (select
                           row_number() over ($order_by) nr,
                           {$prfx}_post.id
                          from {$prfx}_post
                          inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)
                          inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)
                          inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)
                          left join {$prfx}_post_statistics on ({$prfx}_post.id = {$prfx}_post_statistics.post_id)
                          $where) posts
                      where nr = 1 or nr = $pagination_info[total_count] or id = $first_pid or id = $last_pid
                  ";
            
            if (!$srdbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            while ($srdbw->fetch_row()) {
                if ($srdbw->field_by_name("nr") == 1) {
                    $pagination_info["first_topic_message"] = $srdbw->field_by_name("id");
                }
                
                if ($srdbw->field_by_name("nr") == $pagination_info["total_count"]) {
                    $pagination_info["last_topic_message"] = $srdbw->field_by_name("id");
                }
                
                if ($srdbw->field_by_name("id") == $pagination_info["first_page_message"]) {
                    $pagination_info["first_message_position"] = $srdbw->field_by_name("nr");
                }
                
                if ($srdbw->field_by_name("id") == $pagination_info["last_page_message"]) {
                    $pagination_info["last_message_position"] = $srdbw->field_by_name("nr");
                }
            }
            
            $srdbw->free_result();
            
            // check whether next page is the last one
            $order_by = $this->build_order_by($prfx, "asc", $order);
            $where_appendix = " and {$prfx}_post.id > " . $srdbw->escape($pagination_info["last_page_message"]);
            if ($order == "desc") {
                $where_appendix = " and {$prfx}_post.id < " . $srdbw->escape($pagination_info["last_page_message"]);
            }
            if (!$srdbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $pagination_info["posts_per_page"], $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            $tmp_post_list = array();
            $this->collect_posts($srdbw, $current_uid, $tmp_post_list, $user_ids);
            
            $srdbw->free_result();
            
            $pids = array_keys($tmp_post_list);
            
            if (end($pids) == $pagination_info["last_topic_message"]) {
                $pagination_info["page_before_last"] = true;
            }
        }
        
        // get additional data
        
        $result = $this->get_additional_post_data($srdbw, $prfx, "", "", $user_ids, $post_list, $user_data);
        
        measure_action_time("get found posts");
        
        return $result;
    } // get_found_posts
    
    //-----------------------------------------------------------------
    function calculate_new_topic_messages($last_pid, $fid, $tid, &$new_count, $topic_deleted)
    {
        return $this->new_checker->calculate_new_topic_messages($last_pid, $fid, $tid, $new_count, $topic_deleted);
    } // calculate_new_topic_messages
    
    //-----------------------------------------------------------------
    function get_new_topic_posts($last_pid, $limit, $fid, $tid, &$post_list, &$user_data, $topic_deleted)
    {
        if (empty($tid)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), "-"));
            return false;
        }
        
        if (!is_numeric($tid)) {
            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));
            return false;
        }
        
        $user_ids = array();
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $tid = $dbw->escape($tid);
        $fid = $dbw->escape($fid);
        $limit = $dbw->escape($limit);
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = "0";
        }
        
        $show_deleted = !empty($_SESSION["show_deleted"]);
        
        // If we enter a deleted topic and we may do this,
        // we want to see the posts.
        if ($topic_deleted) {
            $show_deleted = true;
        }
        
        $deleted_where_appendix = $this->get_deleted_where_appendix($dbw, $prfx, $show_deleted, true);
        
        $ignore_post_where_appendix = $this->get_ignore_post_where_appendix($dbw, $prfx);
        
        $where = "where {$prfx}_post.topic_id = $tid and {$prfx}_post.pinned <> 1
                  $deleted_where_appendix
                  $ignore_post_where_appendix";
        
        $where_appendix = "";
        if (!empty($last_pid)) {
            $last_pid = $dbw->escape($last_pid);
            $where_appendix = " and {$prfx}_post.id > $last_pid";
        }
        
        $order_by = "order by {$prfx}_post.id asc";
        if (!$dbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, $limit, $order_by))) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $post_list = array();
        $this->collect_posts($dbw, $current_uid, $post_list, $user_ids);
        
        $dbw->free_result();
        
        // check whether the previous post exits
        
        if (count($post_list) > 0) {
            $pids = array_keys($post_list);
            $first_message = array_shift($pids);
            
            $order_by = "order by {$prfx}_post.id desc";
            $where_appendix = " and {$prfx}_post.id < " . $first_message;
            if (!$dbw->execute_query($this->get_query_topic_posts($prfx, $current_uid, $where . $where_appendix, 1, $order_by))) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                return false;
            }
            
            $previous_post_list = array();
            $this->collect_posts($dbw, $current_uid, $previous_post_list, $user_ids);
            
            $dbw->free_result();
            
            $prev_post_time = time();
            if (count($previous_post_list) > 0) {
                foreach ($previous_post_list as $post_data) {
                    $prev_post_time = $post_data["creation_date_sec"];
                }
            }
            
            foreach ($post_list as $pid => $post_data) {
                if ($post_list[$pid]["creation_date_sec"] - $prev_post_time > 365 * 24 * 3600) {
                    $post_list[$pid]["warn_year_interval"] = true;
                }
                
                $prev_post_time = $post_list[$pid]["creation_date_sec"];
            }
        }
        
        return $this->get_additional_post_data($dbw, $prfx, $fid, $tid, $user_ids, $post_list, $user_data);
    } // get_new_topic_posts
    
    //-----------------------------------------------------------------
    function search_cache_exists($search_hash)
    {
        $srdbw = System::getSRDBWorker();
        if (!$srdbw) {
            return false;
        }
        
        $prfx = $srdbw->escape(System::getDBPrefix());
        $session_id = $srdbw->escape(session_id());
        $search_hash = $srdbw->escape($search_hash);
        
        $query = "select count(*) cnt from {$prfx}_found_topic_cache where session_id = '$session_id' and search_hash = '$search_hash'";
        if (!$srdbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        if ($srdbw->fetch_row()) {
            if ($srdbw->field_by_name("cnt") > 0) {
                $srdbw->free_result();
                
                return true;
            }
        }
        
        $srdbw->free_result();
        
        return false;
    } // search_cache_exists
    
    //-----------------------------------------------------------------
    function fill_search_cache($search_hash, &$found_topic_count, $order)
    {
        global $READ_MARKER;
        global $settings;
        
        start_action_time_measure();
        
        $srdbw = System::getSRDBWorker();
        if (!$srdbw) {
            return false;
        }
        
        $prfx = $srdbw->escape(System::getDBPrefix());
        
        $now = $srdbw->format_datetime(time());
        $session_id = $srdbw->escape(session_id());
        $search_hash = $srdbw->escape($search_hash);
        
        $max_search_results = defined('MAX_SEARCH_RESULTS') ? MAX_SEARCH_RESULTS : 10000;
        
        $new_tracking_period = defined('NEW_TRACKING_PERIOD') ? NEW_TRACKING_PERIOD : 30;
        $mindate = $srdbw->format_datetime(time() - $new_tracking_period * 24 * 3600);
        
        // check the time of last search try
        
        if (!empty($settings["min_search_interval"]) && !$this->is_admin() && !$this->is_privileged()) {
            $query = "select max(dt) dt from {$prfx}_found_topic_cache where session_id = '$session_id'";
            if (!$srdbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            $last_search = 0;
            
            if ($srdbw->fetch_row()) {
                $last_search = xstrtotime($srdbw->field_by_name("dt"));
            }
            
            $srdbw->free_result();
            
            $interval = time() - $last_search;
            if ($interval < $settings["min_search_interval"]) {
                MessageHandler::setWarning(sprintf(text("WarnSearchWait"), $settings["min_search_interval"] - $interval));
                return false;
            }
        }
        
        // invalidate last search
        
        $query = "delete from {$prfx}_found_post_cache where session_id = '$session_id' and search_hash = '$search_hash'";
        if (!$srdbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        $query = "delete from {$prfx}_found_topic_cache where session_id = '$session_id' and search_hash = '$search_hash'";
        if (!$srdbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        $current_uid = $srdbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            $current_uid = 0;
        }
        
        $author_id = 0;
        $author = reqvar("author");
        
        if (!empty($author) && $author[0] != ":") {
            $author = $srdbw->escape($this->display_name_to_name($author));
            $query = "select id from {$prfx}_user where user_name = '$author'";
            if (!$srdbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            if ($srdbw->fetch_row()) {
                $author_id = $srdbw->escape($srdbw->field_by_name("id"));
            }
            
            $srdbw->free_result();
        } elseif (!empty($author) && $author[0] == ":") {
            // search posts of the author when he was a guest
            $author = $srdbw->escape($this->display_name_to_name(ltrim($author, ":")));
        } else {
            $author = $srdbw->escape($this->display_name_to_name($author));
        }
        
        $any_guest = false;
        $subscribed_authors = false;
        foreach ($GLOBALS['LANGUAGES'] as $lng) {
            if (utf8_strtolower(reqvar("author")) == utf8_strtolower(try_translate("Guests", $lng))) {
                $any_guest = true;
            }
            
            if (utf8_strtolower(reqvar("author")) == utf8_strtolower(try_translate("Subscription", $lng))) {
                $subscribed_authors = true;
            }
        }
        
        $rated_by_id = 0;
        $rated_by = $srdbw->escape(reqvar("rated_by"));
        if (!empty($rated_by)) {
            $query = "select id from {$prfx}_user where user_name = '$rated_by'";
            if (!$srdbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                return false;
            }
            
            if ($srdbw->fetch_row()) {
                $rated_by_id = $srdbw->escape($srdbw->field_by_name("id"));
            }
            
            $srdbw->free_result();
        }
        
        $show_deleted = false;
        if (!empty($_SESSION["show_deleted"])) {
            $show_deleted = true;
        }
        if (!reqvar_empty("include_deleted") || !reqvar_empty("deleted_only") || !reqvar_empty("deleted_topics_only")) {
            $show_deleted = true;
        }
        // if we are viewing rates, we show also deleted posts
        if (in_array(reqvar("author_mode"), array("author_likes", "author_liked", "author_dislikes", "author_disliked")) && !reqvar_empty("author")) {
            $show_deleted = true;
        }
        
        if (!reqvar_empty("ip ")) {
            $show_deleted = true;
        }
        
        $start_date = iso_date(reqvar("start_date"), text("DateFormat"));
        if (!empty($start_date) && $start_date != "error") {
            $start_date = xstrtotime(date("Ymd 00:00:00", xstrtotime($start_date)));
            $start_date = back_adjust_timezone($start_date);
            $start_date = xstrtotime(date("Ymd 00:00:00", $start_date));
        } else {
            $start_date = "";
        }
        
        $end_date = iso_date(reqvar("end_date"), text("DateFormat"));
        if (!empty($end_date) && $end_date != "error") {
            $end_date = xstrtotime(date("Ymd 23:59:59", xstrtotime($end_date)));
            $end_date = back_adjust_timezone($end_date);
            $end_date = xstrtotime(date("Ymd 23:59:59", $end_date));
        } else {
            $end_date = "";
        }
        
        $private_fid = $this->get_private_forum_id();
        
        $topic_search_key_clause = $this->get_topic_search_clause($srdbw, $prfx, reqvar("search_keys"), !reqvar_empty("with_morphology"));
        $post_search_key_clause = $this->get_post_search_clause($srdbw, $prfx, reqvar("search_keys"), !reqvar_empty("with_morphology"));
        
        $delayed_clause = "{$prfx}_topic.publish_delay <> 1";
        
        $order_by = "order by {$prfx}_post.id $order";        
        if (!reqvar_empty("rate_statistics")) {
            if (reqvar("rate_statistics") == "top_dislikes") {
                $order_by = "order by dislike_count $order, {$prfx}_post.id desc";
            } elseif (reqvar("rate_statistics") == "top_likes") {
                $order_by = "order by like_count $order, {$prfx}_post.id desc";
            } else {
                $order_by = "order by (like_count + dislike_count) $order, {$prfx}_post.id desc";
            }
        }
        
        $hints = array();
        
        //---------------------------------------------------------------
        // handle deleted flag
        //---------------------------------------------------------------
        $topic_part_where = $this->get_deleted_where_appendix($srdbw, $prfx, $show_deleted, false);
        //---------------------------------------------------------------
        if (reqvar_empty("include_ignored") && reqvar_empty("favourite_posts") && reqvar_empty("favourite_posts_only") &&
            !in_array(reqvar("author_mode"), array("ignoring", "moderating", "author_likes", "author_liked", "author_dislikes", "author_disliked")) &&
            !(in_array(reqvar("author_mode"), array("last_topics")) && $author_id == $current_uid) &&
            !(in_array(reqvar("author_mode"), array("wrote_post", "last_posts")) && $author_id == $current_uid) &&
            reqvar_empty("non_ignored_by_author") && reqvar_empty("replies_to") &&
            reqvar_empty("rate_statistics")
            ) {
            // per default, we do not include ingored topics independent of the ignore mode.
            // but if the own or participated topics are requested, we consider the ignore mode.
            
            $mode = 1;
            if (in_array(reqvar("author_mode"), array("created_topic", "participating")) && $author_id == $current_uid) {
               $mode = 0;
            }
            
            $topic_part_where .= $this->get_ignore_topic_where_appendix($srdbw, $prfx, $mode);
        }
        //---------------------------------------------------------------
        // exclude private:
        // - if private forum is not explicitly selected
        // - if it is a guest
        //---------------------------------------------------------------
        if (empty($_REQUEST["forums"]) || empty($current_uid) || !in_array("private", $_REQUEST["forums"])) {
            if (reqvar_empty("unseen")) {
                $topic_part_where .= " and {$prfx}_topic.is_private < 1" . "\n";
            } else {
                $topic_part_where .= " and ({$prfx}_topic.is_private < 1 or ({$prfx}_topic.is_private = 2 and exists (select 1 from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = $current_uid and {$prfx}_topic.id = {$prfx}_private_topics.topic_id)))" . "\n";
            }
        } // exclude private
        //---------------------------------------------------------------
        // restricted and protected forums
        //---------------------------------------------------------------
        $forum_restriction_appendix = $this->get_forum_restriction_appendix($srdbw, $prfx);
        if (!empty($forum_restriction_appendix)) {
            $topic_part_where .= " and $forum_restriction_appendix";
        }
        //---------------------------------------------------------------
        // favorites
        //---------------------------------------------------------------
        if (!reqvar_empty("favourites_only")) {
            if (empty($_SESSION["favourite_topics"])) {
                $in_list = "-1";
            } else {
                $in_list = $srdbw->escape(implode(",", $_SESSION["favourite_topics"]));
            }
            
            $topic_part_where .= " and {$prfx}_topic.id in ($in_list)" . "\n";
        }
        //---------------------------------------------------------------
        // deleted topics
        //---------------------------------------------------------------
        if (!reqvar_empty("deleted_topics_only")) {
            $topic_part_where .= " and ({$prfx}_topic.deleted = 1 or {$prfx}_forum.deleted = 1)" . "\n";
        }
        //---------------------------------------------------------------
        if (!empty($_REQUEST["forums"])) {
            $forum_where = "";
            $forum_in_list = "";
            foreach ($_REQUEST["forums"] as $fid) {
                //-----------------------------------------------------------
                // private topics
                //-----------------------------------------------------------
                if ($fid == "private" || $fid == $private_fid) {
                    if (empty($current_uid)) {
                        continue;
                    }
                    
                    if (!empty($forum_where)) {
                        $forum_where .= " or ";
                    }
                    
                    $forum_where .= "exists (select 1 from {$prfx}_private_topics
                                             where
                                             {$prfx}_private_topics.participant_id = $current_uid
                                             and {$prfx}_topic.id = {$prfx}_private_topics.topic_id)" . "\n";
                    
                    continue;
                } // private
                //-----------------------------------------------------------
                // must be after handling $fid == "private"
                //-----------------------------------------------------------
                if (!is_numeric($fid)) {
                    continue;
                }
                //-----------------------------------------------------------
                // normal forums
                //-----------------------------------------------------------
                $forum_in_list .= $fid . ", ";
                //-----------------------------------------------------------
            } // foreach forum
            
            $forum_in_list = trim($forum_in_list, ", ");
            if (!empty($forum_in_list)) {
                if (!empty($forum_where)) {
                    $forum_where .= " or ";
                }
                
                $forum_where .= "{$prfx}_forum.id in ($forum_in_list)" . "\n";
            }
            
            if (!empty($forum_where)) {
                $topic_part_where .= " and (" . $forum_where . ")" . "\n";
            }
        } else { // forums 
            if (reqvar_empty("include_ignored") && 
                !in_array(reqvar("author_mode"), array("ignoring", "moderating", "author_likes", "author_liked", "author_dislikes", "author_disliked")) &&
                !(in_array(reqvar("author_mode"), array("last_topics")) && $author_id == $current_uid) &&
                !(in_array(reqvar("author_mode"), array("wrote_post", "last_posts")) && $author_id == $current_uid) &&
                reqvar_empty("non_ignored_by_author") && reqvar_empty("replies_to") &&
                reqvar_empty("rate_statistics")
                ) {
                // per default, we do not include ingored topics independent of the ignore mode.
                // but if the own or participated topics are requested, we consider the ignore mode.
                
                $mode = 1;
                if (in_array(reqvar("author_mode"), array("created_topic", "participating")) && $author_id == $current_uid) {
                   $mode = 0;
                }

                $topic_part_where .= $this->get_ignore_forum_where_appendix($srdbw, $prfx, 1);
            }
        }
        //---------------------------------------------------------------
        // hot_topics
        //---------------------------------------------------------------
        if (!reqvar_empty("hot_topics")) {
            $now1 = $srdbw->format_datetime(time() - 60 * 60); // 60 min
            $now2 = $srdbw->format_datetime(time() - 24 * 60 * 60); // day
            
            $topic_part_where .= $this->get_hot_topic_clause($prfx, $now1, $now2);
        }
        //---------------------------------------------------------------
        // polls
        //---------------------------------------------------------------
        if (!reqvar_empty("polls_only")) {
            $topic_part_where .= " and {$prfx}_topic.is_poll > 0" . "\n";
        }
        //---------------------------------------------------------------
        // author created the topic
        //---------------------------------------------------------------
        if ((reqvar("author_mode") == "created_topic" && (!empty($author) || !empty($start_date) || !empty($end_date))) ||
            (reqvar("author_mode") == "last_topics" && !empty($author))
        ) {
            $unseen_appendix = "";
            if (!reqvar_empty("unseen")) {
                $unseen_appendix = " and {$prfx}_topic.creation_date >= '$mindate' and {$prfx}_topic.creation_date > {$prfx}_user_subscription.last_view";
            }
            
            if ($subscribed_authors) {
                $topic_part_where .= " and exists (select 1 from {$prfx}_user_subscription where user_id = $current_uid $unseen_appendix and ({$prfx}_topic.author = {$prfx}_user_subscription.subscribed_user_name or {$prfx}_topic.user_id = {$prfx}_user_subscription.subscribed_user_id))" . "\n";
            } elseif ($any_guest) {
                $topic_part_where .= " and {$prfx}_topic.user_id is NULL" . "\n";
            } elseif (!empty($author_id)) {
                $topic_part_where .= " and {$prfx}_topic.user_id = $author_id" . "\n";
                
                if ($author_id == $current_uid) {
                    $delayed_clause = "1 = 1";
                }
            } elseif (!empty($author)) {
                $topic_part_where .= " and {$prfx}_topic.author = '$author' and {$prfx}_topic.user_id is NULL" . "\n";
            }
            
            if (!reqvar_empty("unseen") && empty($subscribed_authors)) {
                $topic_part_where .= " and exists (select 1 from {$prfx}_user_subscription where user_id = $current_uid $unseen_appendix and ({$prfx}_topic.author = {$prfx}_user_subscription.subscribed_user_name or {$prfx}_topic.user_id = {$prfx}_user_subscription.subscribed_user_id))" . "\n";
            }
            
            if (!empty($start_date)) {
                $topic_part_where .= " and {$prfx}_topic.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
            }
            
            if (!empty($end_date) && $end_date != "error") {
                $topic_part_where .= " and {$prfx}_topic.creation_date <= '" . $srdbw->format_datetime($end_date) . "'";
            }
        }
        //---------------------------------------------------------------
        // author participated in the topic
        //---------------------------------------------------------------
        if (!empty($author) && reqvar("author_mode") == "participating") {
            if ($any_guest) {
                $hints["post"]["primary"] = "primary";
                $topic_part_where .= " and exists (select 1 from {$prfx}_post where {$prfx}_post.deleted <> 1 and {$prfx}_post.user_id is NULL and {$prfx}_topic.id = {$prfx}_post.topic_id)" . "\n";
            } elseif (empty($author_id)) {
                $hints["post"]["primary"] = "primary";
                $hints["post"]["{$prfx}_post_author_idx"] = "{$prfx}_post_author_idx";
                $topic_part_where .= " and exists (select 1 from {$prfx}_post where {$prfx}_post.deleted <> 1 and {$prfx}_post.author = '$author' and {$prfx}_post.user_id is NULL and {$prfx}_topic.id = {$prfx}_post.topic_id)" . "\n";
            } else {
                $topic_part_where .= " and exists (select 1 from {$prfx}_topic_participants where user_id = $author_id and topic_id = {$prfx}_topic.id)" . "\n";
            }
            
            if (!empty($start_date)) {
                $topic_part_where .= " and {$prfx}_topic.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
            }
            
            if (!empty($end_date) && $end_date != "error") {
                $topic_part_where .= " and {$prfx}_topic.creation_date <= '" . $srdbw->format_datetime($end_date) . "'";
            }
        }
        //---------------------------------------------------------------
        // author ignores the topic
        //---------------------------------------------------------------
        if (!empty($author_id) && reqvar("author_mode") == "ignoring") {
            $topic_part_where .= " and exists (select 1 from {$prfx}_ignored_topics where {$prfx}_ignored_topics.user_id = $author_id and {$prfx}_topic.id = {$prfx}_ignored_topics.topic_id union select 1 from {$prfx}_ignored_topics_archive where {$prfx}_ignored_topics_archive.user_id = $author_id and {$prfx}_topic.id = {$prfx}_ignored_topics_archive.topic_id)" . "\n";
            
            if (!empty($start_date)) {
                $topic_part_where .= " and {$prfx}_topic.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
            }
            
            if (!empty($end_date) && $end_date != "error") {
                $topic_part_where .= " and {$prfx}_topic.creation_date <= '" . $srdbw->format_datetime($end_date) . "'";
            }
        }
        //---------------------------------------------------------------
        // author moderates the topic
        //---------------------------------------------------------------
        if (!empty($author_id) && reqvar("author_mode") == "moderating") {
            $topic_part_where .= " and exists (select 1 from {$prfx}_topic_moderator where {$prfx}_topic_moderator.user_id = $author_id and {$prfx}_topic.id = {$prfx}_topic_moderator.topic_id)" . "\n";
            
            if (!empty($start_date)) {
                $topic_part_where .= " and {$prfx}_topic.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
            }
            
            if (!empty($end_date) && $end_date != "error") {
                $topic_part_where .= " and {$prfx}_topic.creation_date <= '" . $srdbw->format_datetime($end_date) . "'";
            }
        }
        //---------------------------------------------------------------
        // search single topic
        //---------------------------------------------------------------
        if (!reqvar_empty("tid") && is_numeric(reqvar("tid"))) {
            $_REQUEST["author_mode"] = "wrote_post";
            
            $topic_part_where = $this->get_deleted_where_appendix($srdbw, $prfx, $show_deleted, false);
            $tid = $srdbw->escape(reqvar("tid"));
            $topic_part_where .= " and {$prfx}_topic.id = $tid";
            
            $hints["post"]["{$prfx}_post_topic_id_idx"] = "{$prfx}_post_topic_id_idx";
        } // single topic
        //---------------------------------------------------------------
        // we want to search only in topic names
        if (!reqvar_empty("topics_only") && !empty($topic_search_key_clause)) {
            $topic_part_where .= " and $topic_search_key_clause" . "\n";
        } // search_key
        //---------------------------------------------------------------
        
        //---------------------------------------------------------------
        // build post where
        //---------------------------------------------------------------
        $post_part_where = "";
        
        if ((!reqvar_empty("search_keys") && reqvar_empty("topics_only")) || (!reqvar_empty("ip")) || (!reqvar_empty("news_digest")) ||
            (reqvar("author_mode") == "wrote_post" && (!reqvar_empty("author") || !reqvar_empty("start_date") || !reqvar_empty("start_date"))) ||
            (reqvar("author_mode") == "last_posts" && !reqvar_empty("author")) ||
            (in_array(reqvar("author_mode"), array("author_likes", "author_liked", "author_dislikes", "author_disliked")) && !reqvar_empty("author")) ||
            (!reqvar_empty("author") && reqvar("stat") == "author_likes") || (!reqvar_empty("author") && reqvar("stat") == "author_liked") || (!reqvar_empty("author") && reqvar("stat") == "author_dislikes") || (!reqvar_empty("author") && reqvar("stat") == "author_disliked") ||
            !reqvar_empty("has_attachment") || !reqvar_empty("has_picture") || !reqvar_empty("has_video") || !reqvar_empty("has_audio") || !reqvar_empty("has_adult") || !reqvar_empty("has_link") || !reqvar_empty("has_code") || !reqvar_empty("thematic_only") || !reqvar_empty("replies_to") ||
            !reqvar_empty("non_ignored_by_author") || !reqvar_empty("deleted_only") ||
            !reqvar_empty("rate_statistics") ||
            !empty($_REQUEST["tags"])
        ) {
            $other_post_conditions_exist = false;
            
            //-------------------------------------------------------------
            // handle deleted flag
            //-------------------------------------------------------------
            if (empty($show_deleted)) {
                // exclude deleted if not desired
                $post_part_where .= " and {$prfx}_post.deleted <> 1";
            } elseif (empty($current_uid) && !$this->is_master_admin()) {
                // exclude deleted if not allowed
                $post_part_where .= " and {$prfx}_post.deleted <> 1";
            } elseif (!$this->is_admin()) {
                $forum_moderator_appendix = "";
                if (!empty($_SESSION["forum_moderator"])) {
                    $forum_moderator_appendix = "or {$prfx}_topic.forum_id in (select {$prfx}_forum_moderator.forum_id from {$prfx}_forum_moderator where user_id = $current_uid)";
                }
                
                $topic_moderator_appendix = "";
                if (!empty($_SESSION["topic_moderator"])) {
                    $topic_moderator_appendix .= "or {$prfx}_topic.id in (select {$prfx}_topic_moderator.topic_id from {$prfx}_topic_moderator where user_id = $current_uid)";
                }
                
                if (!reqvar_empty("deleted_only")) {
                    // user wants to search only in deleted posts.
                    // allow him only those where he is the moderator
                    $post_part_where .=
                        " and (({$prfx}_post.deleted = 1 or {$prfx}_topic.deleted = 1) and
                                ({$prfx}_post.user_id = $current_uid
                                 $forum_moderator_appendix
                                 $topic_moderator_appendix
                                )
                              )";
                    
                    $other_post_conditions_exist = true;
                } else {
                    // user wants to search also in deleted posts -
                    // he choose search in deleted topics or turned "show deleted" on.
                    $post_part_where .=
                        " and ({$prfx}_post.deleted <> 1 or
                               ({$prfx}_post.deleted = 1 and
                                ({$prfx}_post.user_id = $current_uid
                                 $forum_moderator_appendix
                                 $topic_moderator_appendix
                                )
                               )
                              )";
                }
            } else {
                // admin wants to search only in deleted posts.
                // allows him all.
                if (!reqvar_empty("deleted_only")) {
                    $post_part_where .= " and {$prfx}_post.deleted = 1";
                    $other_post_conditions_exist = true;
                }
            }
            //-------------------------------------------------------------------
            // In these modes, we do not exclude anything even if ignored
            if (reqvar_empty("include_ignored") && 
                !(in_array(reqvar("author_mode"), array("ignoring", "moderating", "author_likes", "author_liked", "author_dislikes", "author_disliked", "last_posts", "wrote_post")) && !reqvar_empty("author")) &&
                reqvar_empty("rate_statistics")                 
               ) {
                $mode = 1;
                if (!reqvar_empty("non_ignored_by_author")) {
                    $mode = 2;
                }
                if (!reqvar_empty("replies_to")) {
                    $mode = 3;
                }
                
                $post_part_where .= $this->get_ignore_post_where_appendix($srdbw, $prfx, $mode);
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("has_attachment")) {
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                $hints["post"]["{$prfx}_post_has_attachment_idx"] = "{$prfx}_post_has_attachment_idx";
                $hints["post"]["{$prfx}_post_has_attachment_ref_idx"] = "{$prfx}_post_has_attachment_ref_idx";
                $post_part_where .= " and ({$prfx}_post.has_attachment <> 0 or {$prfx}_post.has_attachment_ref <> 0)";
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("has_picture")) {
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                $hints["post"]["{$prfx}_post_has_picture_idx"] = "{$prfx}_post_has_picture_idx";
                $post_part_where .= " and {$prfx}_post.has_picture = 1";
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("has_video")) {
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                $hints["post"]["{$prfx}_post_has_video_idx"] = "{$prfx}_post_has_video_idx";
                $post_part_where .= " and {$prfx}_post.has_video = 1";
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("has_audio")) {
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                $hints["post"]["{$prfx}_post_has_audio_idx"] = "{$prfx}_post_has_audio_idx";
                $post_part_where .= " and {$prfx}_post.has_audio = 1";
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("has_adult")) {
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                $hints["post"]["{$prfx}_post_is_adult_idx"] = "{$prfx}_post_is_adult_idx";
                $post_part_where .= " and {$prfx}_post.is_adult = 1";
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("has_link")) {
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                $hints["post"]["{$prfx}_post_has_link_idx"] = "{$prfx}_post_has_link_idx";
                $post_part_where .= " and {$prfx}_post.has_link = 1";
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("has_code")) {
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                $hints["post"]["{$prfx}_post_has_code_idx"] = "{$prfx}_post_has_code_idx";
                $post_part_where .= " and {$prfx}_post.has_code = 1";
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("thematic_only")) {
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                $hints["post"]["{$prfx}_post_is_comment_idx"] = "{$prfx}_post_has_code_idx";
                $post_part_where .= " and {$prfx}_post.is_comment = 0";
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("replies_to")) {
                $post_part_where .= $this->get_reply_post_clause($srdbw, $prfx, reqvar("replies_to"));
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if (!reqvar_empty("favourite_posts_only")) {
                $hints["post"]["primary"] = "primary";
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                $post_part_where .= " and exists (select 1 from {$prfx}_favourite_posts where user_id = $current_uid and {$prfx}_favourite_posts.post_id = {$prfx}_post.id)";
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            // tags search
            //-------------------------------------------------------------------
            if (!empty($_REQUEST["tags"])) {
                $hints["post"]["primary"] = "primary";
                
                if (!reqvar_empty("conjunct_tags")) {
                    foreach ($_REQUEST["tags"] as $tag_id) {
                        $tag_id = $srdbw->escape($tag_id);
                        
                        $post_part_where .= " and exists (
                                select 1 from {$prfx}_user_tag_post
                                where
                                tag_id = $tag_id
                                and {$prfx}_user_tag_post.post_id = {$prfx}_post.id
                             )";
                    }
                } else {
                    $tags_in_list = $srdbw->escape(implode(",", $_REQUEST["tags"]));
                    
                    $post_part_where .= " and exists (
                                select 1 from {$prfx}_user_tag_post
                                where
                                tag_id in ($tags_in_list)
                                and {$prfx}_user_tag_post.post_id = {$prfx}_post.id
                             )";
                }
                
                $other_post_conditions_exist = true;
            }
            //-------------------------------------------------------------------
            if ((reqvar("author_mode") == "wrote_post" && (!empty($author) || !empty($start_date) || !empty($end_date))) ||
                (reqvar("author_mode") == "last_posts" && !empty($author))
            ) {
                if (reqvar("author_mode") == "last_posts") {
                    $hints["post"]["primary"] = "primary";
                }
                
                $unseen_appendix = "";
                if (!reqvar_empty("unseen")) {
                    $unseen_appendix = " and {$prfx}_post.creation_date >= '$mindate' and {$prfx}_post.creation_date > {$prfx}_user_subscription.last_view";
                }
                
                if ($subscribed_authors) {
                    $post_part_where .= " and exists (select 1 from {$prfx}_user_subscription where user_id = $current_uid $unseen_appendix and ({$prfx}_post.author = {$prfx}_user_subscription.subscribed_user_name or {$prfx}_post.user_id = {$prfx}_user_subscription.subscribed_user_id))" . "\n";
                } elseif ($any_guest) {
                    $post_part_where .= " and {$prfx}_post.user_id is NULL" . "\n";
                    
                    if (reqvar("author_mode") == "wrote_post" || reqvar("author_mode") == "last_posts") {
                        $hints["post"]["{$prfx}_post_user_id_idx"] = "{$prfx}_post_user_id_idx";
                    }
                } elseif (!empty($author_id)) {
                    $post_part_where .= " and {$prfx}_post.user_id = $author_id" . "\n";
                    
                    if (reqvar("author_mode") == "wrote_post" || reqvar("author_mode") == "last_posts") {
                        $hints["post"]["{$prfx}_post_user_id_idx"] = "{$prfx}_post_user_id_idx";
                    }
                } elseif (!empty($author)) {
                    $post_part_where .= " and {$prfx}_post.author = '$author' and {$prfx}_post.user_id is NULL" . "\n";

                    if (reqvar("author_mode") == "wrote_post" || reqvar("author_mode") == "last_posts") {
                        $hints["post"]["{$prfx}_post_author_idx"] = "{$prfx}_post_author_idx";
                    }
                }
                
                if (!reqvar_empty("unseen") && empty($subscribed_authors)) {
                    $post_part_where .= " and exists (select 1 from {$prfx}_user_subscription where user_id = $current_uid $unseen_appendix and ({$prfx}_post.author = {$prfx}_user_subscription.subscribed_user_name or {$prfx}_post.user_id = {$prfx}_user_subscription.subscribed_user_id))" . "\n";
                }
                
                if (!empty($start_date) && $start_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
                    
                    if (reqvar("author_mode") == "wrote_post") {
                        $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                    }
                }
                
                if (!empty($end_date) && $end_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date <= '" . $srdbw->format_datetime($end_date) . "'";
                    
                    if (reqvar("author_mode") == "wrote_post") {
                        $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                    }
                }
                
                $other_post_conditions_exist = true;
            } // author wrote_post
            //-------------------------------------------------------------------
            if (!reqvar_empty("rate_statistics")) {
                $hints["post"]["primary"] = "primary";
                $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                
                $rate_clause = "";
                if (reqvar("rate_statistics") == "top_dislikes") {
                    $rate_clause = " where rating = -1";
                } elseif (reqvar("rate_statistics") == "top_likes") {
                    $rate_clause = " where rating = 1";
                }
                
                $now_rounded = mktime(0, 0, 0, date("n"), date("j"), date("Y"));
                switch (reqvar("statistics_period")) {
                    case "previous_24":
                        $start_date = time() - 48 * 3600;
                        $end_date = time() - 24 * 3600 - 1;
                        $post_part_where .= " and {$prfx}_post.creation_date between '" . $srdbw->format_datetime($start_date) . "' and '" . $srdbw->format_datetime($end_date) . "'";
                        break;
                    
                    case "last_month":
                        $start_date = xstrtotime("-1 month", $now_rounded);
                        $post_part_where .= " and {$prfx}_post.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
                        break;
                    
                    case "last_half_year":
                        $start_date = xstrtotime("-6 months", $now_rounded);
                        $post_part_where .= " and {$prfx}_post.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
                        break;
                    
                    case "last_year":
                        $start_date = xstrtotime("-1 year", $now_rounded);
                        $post_part_where .= " and {$prfx}_post.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
                        break;
                    
                    case "whole_period":
                        break;
                    
                    default:
                        $start_date = time() - 24 * 3600;
                        $post_part_where .= " and {$prfx}_post.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
                        break;
                }
                
                $post_part_where .= " and {$prfx}_post.id in (select {$prfx}_post_rating.post_id from {$prfx}_post_rating
                                                         $rate_clause
                                                        )";
                $other_post_conditions_exist = true;
            } // author likes
            //-------------------------------------------------------------------
            if (!empty($author_id) && reqvar("author_mode") == "author_likes") {
                $post_part_where .= " and {$prfx}_post.id in (select {$prfx}_post_rating.post_id from {$prfx}_post_rating
                                     where
                                     rating = 1
                                     and {$prfx}_post_rating.user_id = $author_id)";

                if (!empty($start_date) && $start_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
                    $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                }
                
                if (!empty($end_date) && $end_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date <= '" . $srdbw->format_datetime($end_date) . "'";
                    $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                }

                $other_post_conditions_exist = true;
            } // author likes
            //-------------------------------------------------------------------
            if (!empty($author_id) && reqvar("author_mode") == "author_dislikes") {
                $post_part_where .= " and {$prfx}_post.id in (select {$prfx}_post_rating.post_id from {$prfx}_post_rating
                                     where
                                     rating = -1
                                     and {$prfx}_post_rating.user_id = $author_id)";

                if (!empty($start_date) && $start_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
                    $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                }
                
                if (!empty($end_date) && $end_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date <= '" . $srdbw->format_datetime($end_date) . "'";
                    $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                }

                $other_post_conditions_exist = true;
            } // author dislikes
            //-------------------------------------------------------------------
            if (!empty($author_id) && reqvar("author_mode") == "author_liked") {
                $hints["post"]["{$prfx}_post_user_id_idx"] = "{$prfx}_post_user_id_idx";
                
                $appendix = "";
                if (!empty($rated_by_id)) {
                    $appendix = " and {$prfx}_post_rating.user_id = $rated_by_id";
                }
                
                $post_part_where .= " and {$prfx}_post.user_id = $author_id
                                      and {$prfx}_post.id in (select {$prfx}_post_rating.post_id from {$prfx}_post_rating
                                                   where
                                                   rating = 1
                                                   $appendix
                                                  )
                                    ";

                if (!empty($start_date) && $start_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
                    $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                }
                
                if (!empty($end_date) && $end_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date <= '" . $srdbw->format_datetime($end_date) . "'";
                    $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                }

                $other_post_conditions_exist = true;
            } // author liked
            //-------------------------------------------------------------------
            if (!empty($author_id) && reqvar("author_mode") == "author_disliked") {
                $hints["post"]["{$prfx}_post_user_id_idx"] = "{$prfx}_post_user_id_idx";
                
                $appendix = "";
                if (!empty($rated_by_id)) {
                    $appendix = " and {$prfx}_post_rating.user_id = $rated_by_id";
                }
                
                $post_part_where .= " and {$prfx}_post.user_id = $author_id
                         and {$prfx}_post.id in (select {$prfx}_post_rating.post_id from {$prfx}_post_rating
                                     where
                                     rating = -1
                                     $appendix
                                    )
                       ";

                if (!empty($start_date) && $start_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date >= '" . $srdbw->format_datetime($start_date) . "'";
                    $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                }
                
                if (!empty($end_date) && $end_date != "error") {
                    $post_part_where .= " and {$prfx}_post.creation_date <= '" . $srdbw->format_datetime($end_date) . "'";
                    $hints["post"]["{$prfx}_post_creation_date_idx"] = "{$prfx}_post_creation_date_idx";
                }

                $other_post_conditions_exist = true;
            } // author disliked
            //-------------------------------------------------------------------
            if (!reqvar_empty("ip")) {
                $ip = $srdbw->escape(reqvar("ip"));
                
                if ($this->is_moderator()) {
                  $hints["post"]["{$prfx}_post_ip_idx"] = "{$prfx}_post_ip_idx";
                  $hints["post"]["{$prfx}_post_rm_idx"] = "{$prfx}_post_rm_idx";
                  $hints["post"]["{$prfx}_post_user_marker_idx"] = "{$prfx}_post_user_marker_idx";

                  if (!$this->is_admin()) {
                      $topic_part_where .= " and exists (select 1 from {$prfx}_forum_moderator where user_id = $current_uid and {$prfx}_topic.forum_id = {$prfx}_forum_moderator.forum_id)";
                  }

                  $post_part_where .= " and ({$prfx}_post.ip = '$ip' or {$prfx}_post.user_marker = '$ip' or {$prfx}_post.read_marker = '$ip')";

                  $other_post_conditions_exist = true;
                } elseif(reqvar("author_mode") == "wrote_post" && reqvar("author") == $this->get_user_name()) {
                  $hints["post"]["{$prfx}_post_ip_idx"] = "{$prfx}_post_ip_idx";
                  $hints["post"]["{$prfx}_post_rm_idx"] = "{$prfx}_post_rm_idx";
                  $hints["post"]["{$prfx}_post_user_marker_idx"] = "{$prfx}_post_user_marker_idx";

                  $post_part_where .= " and ({$prfx}_post.ip = '$ip')";

                  $other_post_conditions_exist = true;
                } else {
                  MessageHandler::setWarning(text("MsgIPClauseIgnored"));
                }
            } // ip
            //-------------------------------------------------------------------
            // If there is a post clause, the topic clause will be based on the found posts.
            $topic_where = " and ({$prfx}_topic.id in
                (select
                {$prfx}_post.topic_id
                from {$prfx}_found_post_cache
                inner join {$prfx}_post on ({$prfx}_found_post_cache.post_id = {$prfx}_post.id)
                where session_id = '$session_id' and search_hash = '$search_hash' 
                )" . "\n";
            
            // Handling of the case if words should be search in topic names and posts
            if (reqvar_empty("topics_only") && !empty($topic_search_key_clause) && !empty($post_search_key_clause)) {
                if (reqvar_empty("posts_only")) {
                    if (!empty($other_post_conditions_exist)) {
                        // If other post conditions except the word search exist, we unite the results
                        // of searching in topic names and in posts, but the topic clause
                        // will be based completely on the found posts.
                        
                        $hints["post"]["{$prfx}_post_ftx"] = "{$prfx}_post_ftx";
                        $post_part_where .= "\nand $post_search_key_clause" . "\n";
                    } else {
                        $hints["post"]["{$prfx}_post_ftx"] = "{$prfx}_post_ftx";
                        $post_part_where .= "\nand $post_search_key_clause" . "\n";
                        
                        // The special case if only on words is searched (no other post conditions).
                        // In that case we cannot base the topic clause only on found posts
                        // but we should add the topics which names match the word condition.
                        $topic_where .= " or ($topic_search_key_clause
                                              $topic_part_where
                                             )\n";
                    }
                } else {
                    $hints["post"]["{$prfx}_post_ftx"] = "{$prfx}_post_ftx";
                    $post_part_where .= "\nand $post_search_key_clause" . "\n";
                }
            }
            
            $topic_where .= ")";
            //-------------------------------------------------------------------
            
            if (!reqvar_empty("news_digest")) {
                $rm = $srdbw->escape($READ_MARKER);
                
                $query = $this->get_query_fill_digest_posts($srdbw, $prfx, $session_id, $now, $search_hash, $current_uid, $rm, reqvar("fid"), $private_fid);
                if (!$srdbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                    return false;
                }
            } else {
                if (reqvar("author_mode") == "last_posts") {
                    $max_search_results = 1000;
                }
                
                if (!reqvar_empty("rate_statistics")) {
                    $max_search_results = 5000;
                }                
                
                $query = $this->get_query_fill_search_posts($prfx, $session_id, $now, $search_hash, $topic_part_where, $post_part_where, $max_search_results, $order_by, $hints);
                if (!$srdbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
                    return false;
                }
                
                $found_post_count = $srdbw->affected_count();
                
                if (reqvar("author_mode") != "last_posts" && reqvar_empty("rate_statistics") && $found_post_count >= $max_search_results) {
                    MessageHandler::setWarning(sprintf(text("MsgNotAllFoundPostsShown"), $found_post_count));
                }
            }
            //---------------------------------------------------------------
        } else { // end post clause building
            // Post search will not be used
            $topic_where = $topic_part_where;
        } // if no post clause
        //---------------------------------------------------------------
        
        if (reqvar("author_mode") == "last_topics") {
            $max_search_results = 100;
        }
        
        $query = $this->get_query_fill_search_topics($prfx, $session_id, $now, $search_hash, $topic_where, $delayed_clause, $max_search_results);
        
        if (!$srdbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $srdbw->get_last_error() . "\n\n" . $srdbw->get_last_query());
            return false;
        }
        
        $found_topic_count = $srdbw->affected_count();
        
        if (reqvar("author_mode") != "last_topics" && $found_topic_count >= $max_search_results) {
            MessageHandler::setWarning(sprintf(text("MsgNotAllFoundTopicsShown"), $found_topic_count));
        }
        
        measure_action_time("searching");
        
        return true;
    } // fill_search_cache
    
    //-----------------------------------------------------------------
    function load_attachments(&$response, $last_att_post_id, $last_att_id)
    {
        $response["attachments"] = array();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($this->get_user_id());
        if (empty($uid)) {
            $uid = 0;
        }
        
        $current_appendex = "";

        $forum_restriction_appendix = $this->get_forum_restriction_appendix($rodbw, $prfx, true);
        if (!empty($forum_restriction_appendix)) {
            $current_appendex = " and " . $forum_restriction_appendix;
        }

        if (!empty($last_att_post_id)) {
            $last_att_post_id = $rodbw->escape($last_att_post_id);
            $last_att_id = $rodbw->escape($last_att_id);
            
            $current_appendex = "and (({$prfx}_attachment.last_post_id = $last_att_post_id and {$prfx}_attachment.id > $last_att_id) or
                                       {$prfx}_attachment.last_post_id < $last_att_post_id
                                      )
                                 and {$prfx}_attachment.favourite <> 1";
        }
        
        if (!$rodbw->execute_query($this->get_query_load_attachments($prfx, $uid, $current_appendex))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $response["attachments"][] = array(
                "id" => $rodbw->field_by_name("id"),
                "post_id" => $rodbw->field_by_name("post_id"),
                "last_post_id" => $rodbw->field_by_name("last_post_id"),
                "nr" => $rodbw->field_by_name("nr"),
                "topic_id" => $rodbw->field_by_name("topic_id"),
                "forum_id" => $rodbw->field_by_name("forum_id"),
                "forum_name" => $rodbw->field_by_name("name"),
                "favourite" => $rodbw->field_by_name("favourite"),
                "year" => $rodbw->field_by_name("year"),
                "month" => $this->get_month_name($rodbw->field_by_name("month"))
            );
        }
        
        $rodbw->free_result();
        
        return true;
    } // load_attachments
    
    //-----------------------------------------------------------------
    function get_banned_ips(&$banned_ips)
    {
        global $settings;
        
        start_action_time_measure();
        
        $ip_rules = array();
        $ips = "";
        $matched_rule = "";
        $this->get_white_list_ips($ips, $ip_rules);
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        if (!$rodbw->execute_query($this->get_query_banned_ips($prfx))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        $wait_time_after_attack = 30;
        if (defined("WAIT_TIME_AFTER_ATTACK") && WAIT_TIME_AFTER_ATTACK > 1) {
            $wait_time_after_attack = WAIT_TIME_AFTER_ATTACK;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            
            $banned_ips[$ip] = array(
                "ip" => $ip,
                "guest_ip_whitelisted" => $this->is_ip_whitelisted($ip, $ip_rules, $matched_rule) ? 1 : 0,
                "atype" => $rodbw->field_by_name("atype"),
                "first_attack" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("first_attack")) - $wait_time_after_attack * 60, text("DateTimeFormat")),
                "last_attack" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("last_attack")) - $wait_time_after_attack * 60, text("DateTimeFormat")),
                "cnt" => $rodbw->field_by_name("cnt"),
                "hits" => $rodbw->field_by_name("hits")
            );
        }
        
        $rodbw->free_result();
        
        if (count($banned_ips) == 0) {
            return true;
        }
        
        $in_list = "'" . implode("','", array_keys($banned_ips)) . "'";
        $now = $rodbw->format_datetime(time());
        
        $query = "select ip
              from {$prfx}_ip_blocked
              where ip in ($in_list)
              and (block_expires is NULL or block_expires > '$now')";
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            $banned_ips[$ip]["ip_blocked"] = 1;
        }
        
        $rodbw->free_result();
        
        if (!$rodbw->execute_query("select ip, block_level from {$prfx}_tor_ips where ip in ($in_list)")) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip = $rodbw->field_by_name("ip");
            $banned_ips[$ip]["tor_ip"] = 1;
            
            $banned_ips[$ip]["tor_ip_block_level"] = "tor_allow";
            if (!empty($settings["block_tor_ips"])) {
                $banned_ips[$ip]["tor_ip_block_level"] = "tor_block_write";
            }
            
            switch ($rodbw->field_by_name("block_level")) {
                case 1:
                    $banned_ips[$ip]["tor_ip_block_level"] = "tor_block_write";
                    break;
                
                case 2:
                    $banned_ips[$ip]["tor_ip_block_level"] = "tor_block_read";
                    break;
                
                case 3:
                    $banned_ips[$ip]["tor_ip_block_level"] = "tor_allow";
                    break;
            }
        }
        
        $rodbw->free_result();
        
        measure_action_time("get banned ips");
        
        return true;
    } // get_banned_ips
    
    //-----------------------------------------------------------------
    function get_user_agent_list(&$user_agent_list)
    {
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $start = $rodbw->format_datetime(time() - 30 * 24 * 3600);
        
        $where = "where dt > '$start'";
        if (!reqvar_empty("search_key")) {
            $search_key = $rodbw->escape(reqvar("search_key"));
            
            $where .= " and user_agent like '" . $search_key . "%'";
        }
        
        if (!$rodbw->execute_query($this->get_query_user_agent_list($prfx, $where))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $user_agent_list[] = array(
                "ip" => $rodbw->field_by_name("ip"),
                "user_id" => $rodbw->field_by_name("user_id"),
                "author" => $rodbw->field_by_name("guest_name"),
                "author_online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0),
                "user_agent" => $rodbw->field_by_name("user_agent"),
                "uri" => $rodbw->field_by_name("uri"),
                "dt" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("dt")), text("DateTimeFormat")),
            );
        }
        
        $rodbw->free_result();
        
        return true;
    } // get_user_agent_list
    
    //-----------------------------------------------------------------
    function get_ip_activity($ip, &$ip_activity_list)
    {
        if (!$this->is_admin()) {
            MessageHandler::setError(text("ErrActionNotAllowed"));
            return false;
        }
        
        if (empty($ip)) {
            MessageHandler::setError(text("ErrIPAddressEmpty"));
            MessageHandler::setFocusElement("ip");
            return false;
        }
        
        start_action_time_measure();
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $ip = $rodbw->escape($ip);
        
        $where = "where {$prfx}_forum_hits.ip = '$ip'";
        
        if (!$rodbw->execute_query($this->get_query_user_agent_list($prfx, $where))) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            $ip_activity_list[] = array(
                "ip" => $rodbw->field_by_name("ip"),
                "user_id" => $rodbw->field_by_name("user_id"),
                "author" => $rodbw->field_by_name("guest_name"),
                "author_online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0),
                "user_agent" => $rodbw->field_by_name("user_agent"),
                "uri" => $rodbw->field_by_name("uri"),
                "dt" => adjust_and_format_timezone(xstrtotime($rodbw->field_by_name("dt")), text("DateTimeFormat")),
            );
        }
        
        $rodbw->free_result();
        
        measure_action_time("get ip activity");
        
        return true;
    } // get_ip_activity

    //-----------------------------------------------------------------
    function save_notes(&$response, $uid, $notes)
    {
        if (empty($uid)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $uid = $dbw->escape($uid);
        $notes_db = quotes_or_null($dbw->escape(Emoji::Encode($notes)));
        
        $current_uid = $dbw->escape($this->get_user_id());
        if (empty($current_uid)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "delete from {$prfx}_user_comment where user_id = $current_uid and commented_user_id = $uid";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        $query = "insert into {$prfx}_user_comment (user_id, commented_user_id, comment) values ($current_uid, $uid, $notes_db)";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $response["notes"] = $notes;
        if (!empty($response["notes"])) {
            $this->format_manager->format_message_simple($dbw, $prfx, $response["notes"], "message");
            postprocess_message($response["notes"]);
        }
        
        return true;
    } // save_notes
    
    //-----------------------------------------------------------------
    function block_unblock_tor_ips($action)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if ($action == "block_all") {
            $msg = text("MsgTorIPsBlocked");
            $query = "update {$prfx}_settings set block_tor_ips = 1";
        } else {
            $msg = text("MsgTorIPsUnblocked");
            $query = "update {$prfx}_settings set block_tor_ips = 0";
        }
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo($msg);
        
        return true;
    } // block_unblock_tor_ips
    
    //-----------------------------------------------------------------
    function change_tor_ip_block_level($ip, $level)
    {
        if ($this->demo_mode()) {
            MessageHandler::setWarning(text("MsgDemoMode"));
            return true;
        }
        
        if (empty($ip)) {
            return false;
        }
        
        if (!is_numeric($level) || $level < 0 || $level > 3) {
            $level = 0;
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $ip = $dbw->escape($ip);
        
        $query = "update {$prfx}_tor_ips set block_level = $level where ip = '$ip'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        return true;
    } // change_tor_ip_block_level
    
    //-----------------------------------------------------------------
    function check_tor_ip($ip)
    {
        global $settings;
        
        if (empty($ip)) {
            return "tor_allow";
        }
        
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return "tor_allow";
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $ip = $dbw->escape($ip);
        
        $query = "select block_level from {$prfx}_tor_ips where ip = '$ip'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return "tor_allow";
        }
        
        if (!$dbw->fetch_row()) {
            $dbw->free_result();
            return "tor_allow";
        }
        
        $level = "tor_allow";
        if (!empty($settings["block_tor_ips"])) {
            $level = "tor_block_write";
        }
        
        switch ($dbw->field_by_name("block_level")) {
            case 1:
                $level = "tor_block_write";
                break;
            
            case 2:
                $level = "execute_forum_jobs";
                break;
            
            case 3:
                $level = "tor_allow";
                break;
        }
        
        $dbw->free_result();
        
        return $level;
    } // check_tor_ip
    
    //-----------------------------------------------------------------
    function mark_subscriptions_read($authors)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            return true;
        }
        
        $author_appendix = "";
        if (!empty($authors)) {
            foreach ($authors as &$author) {
                $author = $dbw->escape($author);
            }
            
            $in_list = implode("', '", $authors);
            
            $author_appendix = " and (subscribed_user_name in ('$in_list') or subscribed_user_id in (select id from {$prfx}_user where user_name in ('$in_list')))";
        }
        
        $now = $dbw->format_datetime(time());
        
        $query = "update {$prfx}_user_subscription
                  set last_view = '$now'
                  where user_id = $uid
                  $author_appendix";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        return true;
    } // mark_subscriptions_read
    
    //-----------------------------------------------------------------
    function unsubscribe_from_authors($authors)
    {
        $dbw = System::getDBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        $uid = $dbw->escape($this->get_user_id());
        
        if (empty($uid)) {
            return true;
        }
        
        if (empty($authors)) {
            MessageHandler::setError(text("ErrNoUserSelected"));
            return false;
        }
        
        foreach ($authors as &$author) {
            $author = $dbw->escape($author);
        }
        
        $in_list = implode("', '", $authors);
        
        $author_appendix = " and subscribed_user_name in ('$in_list') or subscribed_user_id in (select id from {$prfx}_user where user_name in ('$in_list'))";
        
        $query = "delete from {$prfx}_user_subscription
                  where user_id = $uid
                  $author_appendix";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        // invalidate new info cache
        if (!$this->new_checker->invalidate_new_messages_cache()) {
            return false;
        }
        
        // Not necessary because refresh is forced
        //$this->update_user_status();
        
        MessageHandler::setInfo(text("MsgUsersUnsubscribed"));
        
        return true;
    } // unsubscribe_from_authors
    
    //---------------------------------------------------------------
    function get_subscribed_authors(&$author_list)
    {
        $uid = $this->get_user_id();
        if (empty($uid)) {
            return true;
        }
        
        $rodbw = System::getRODBWorker();
        if (!$rodbw) {
            return false;
        }
        
        $prfx = $rodbw->escape(System::getDBPrefix());
        
        $uid = $rodbw->escape($uid);
        
        start_action_time_measure();
        
        $new_tracking_period = defined('NEW_TRACKING_PERIOD') ? NEW_TRACKING_PERIOD : 30;
        $mindate = $rodbw->format_datetime(time() - $new_tracking_period * 24 * 3600);
        
        $query = $this->get_query_subscribed_authors($prfx, $uid, $mindate);
        
        if (!$rodbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());
            return false;
        }
        
        while ($rodbw->fetch_row()) {
            if ($rodbw->field_by_name("subscribed_user_id")) {
                $dt = $rodbw->field_by_name("guest_last_post_date");
                if (empty($dt)) {
                    $dt = $rodbw->field_by_name("user_last_post_date");
                }
                if (!empty($dt)) {
                    $dt = smart_date2(xstrtotime($dt));
                }
                
                $author_list["u_" . $rodbw->field_by_name("subscribed_user_id")] = array(
                    "uid" => $rodbw->field_by_name("subscribed_user_id"),
                    "user_name" => $rodbw->field_by_name("user_name"),
                    "online" => (xstrtotime($rodbw->field_by_name("last_visit_date")) > (time() - KEEP_ONLINE_PERIOD) && $rodbw->field_by_name("logout") == 0),
                    "tm" => smart_date2(xstrtotime($rodbw->field_by_name("tm"))),
                    "last_post_date" => $dt,
                    "last_view" => smart_date2(xstrtotime($rodbw->field_by_name("last_view")))
                );
            } else {
                $dt = $rodbw->field_by_name("guest_last_post_date");
                if (!empty($dt)) {
                    $dt = smart_date2(xstrtotime($dt));
                }
                
                $author_list["g_" . utf8_strtolower($rodbw->field_by_name("subscribed_user_name"))] = array(
                    "user_name" => $rodbw->field_by_name("subscribed_user_name"),
                    "tm" => smart_date2(xstrtotime($rodbw->field_by_name("tm"))),
                    "last_post_date" => $dt,
                    "last_view" => smart_date2(xstrtotime($rodbw->field_by_name("last_view")))
                );
            }
        }
        
        $rodbw->free_result();
        
        measure_action_time("get subscribed authors");
        
        return true;
    } // get_subscribed_authors
    
    //---------------------------------------------------------------
    function get_white_list_ips(&$ips, &$ip_array)
    {
        $dbw = System::getRODBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $query = "select ip from {$prfx}_ip_white_list order by ip";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $ips = "";
        
        while ($dbw->fetch_row()) {
            $ip = $dbw->field_by_name("ip");
            
            $ip_array[$ip] = $ip;
            $ips .= $ip . "\n";
        }
        
        $dbw->free_result();
        
        return true;
    } // get_white_list_ips
    
    //---------------------------------------------------------------
    function save_white_list_ips()
    {
        $dbw = System::getRODBWorker();
        if (!$dbw) {
            return false;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "delete from {$prfx}_ip_white_list";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!reqvar_empty("ips")) {
            $ips = preg_split("/[\n\r]+/", Emoji::Encode(reqvar("ips")), -1, PREG_SPLIT_NO_EMPTY);
            foreach ($ips as $ip) {
                shrink_spaces($ip);
                
                if ($ip == "") {
                    continue;
                }
                
                $ip = $dbw->escape($ip);
                
                $query = "insert into {$prfx}_ip_white_list
                 (ip)
                 select '$ip' from {$prfx}_dual
                 where '$ip' not in (select ip from {$prfx}_ip_white_list)
                 ";
                if (!$dbw->execute_query($query)) {
                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                    $dbw->rollback_transaction();
                    return false;
                }
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        MessageHandler::setInfo(text("MsgDataSaved"));
        
        return true;
    } // save_white_list_ips
    
    //---------------------------------------------------------------
    function whitelist_ip(&$ips)
    {
        $dbw = System::getRODBWorker();
        if (!$dbw) {
            return false;
        }
        
        if (reqvar_empty("ip")) {
            return true;
        }
        
        $prfx = $dbw->escape(System::getDBPrefix());
        
        $ip = $dbw->escape(reqvar("ip"));
        
        if (!$dbw->start_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "delete from {$prfx}_ip_white_list where ip = '$ip'";
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            $dbw->rollback_transaction();
            return false;
        }
        
        if (!reqvar_empty("state")) {
            $query = "insert into {$prfx}_ip_white_list (ip) values ('$ip')";
            if (!$dbw->execute_query($query)) {
                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
                $dbw->rollback_transaction();
                return false;
            }
        }
        
        if (!$dbw->commit_transaction()) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $query = "select ip from {$prfx}_ip_white_list order by ip";
        
        if (!$dbw->execute_query($query)) {
            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());
            return false;
        }
        
        $ips = "";
        
        while ($dbw->fetch_row()) {
            $ip = $dbw->field_by_name("ip");
            
            $ip_array[$ip] = $ip;
            $ips .= $ip . "\n";
        }
        
        $dbw->free_result();
        
        return true;
    } // whitelist_ip
    
    //---------------------------------------------------------------
    function is_ip_whitelisted($ip, &$rules, &$matched_rule)
    {
        $ip = trim($ip);
        
        if (empty($ip)) {
            return false;
        }
        
        $matched_rule = $ip;
        
        foreach ($rules as $rule) {
            if (strpos($ip, $rule) === 0) {
                $matched_rule = $rule;
                return true;
            }
        }
        
        return false;
    } // is_ip_whitelisted
} // class ForumManager
?>