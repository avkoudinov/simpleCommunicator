<?php//-------------------------------------------------------------------// class NewChecker//-------------------------------------------------------------------class NewChecker{    //---------------------------------------------------------------    var $forum_manager;        function calculate_new_topic_messages($last_topic_read_date, $fid, $tid, &$new_count, $topic_deleted)    {        global $READ_MARKER;                if (empty($tid)) {            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), "-"));            return false;        }                if (!is_numeric($tid)) {            MessageHandler::setError(sprintf(text("ErrTopicDoesNotExist"), $tid));            return false;        }                $dbw = System::getDBWorker();        if (!$dbw) {            return false;        }        $prfx = $dbw->escape(System::getDBPrefix());        $tid = $dbw->escape($tid);                $show_deleted = !empty($_SESSION["show_deleted"]);                // If we enter a deleted topic and we may do this,        // we want to see the posts.        if ($topic_deleted) {            $show_deleted = true;        }                $deleted_where_appendix = $this->forum_manager->get_deleted_where_appendix($dbw, $prfx, $show_deleted, true);                $ignore_post_where_appendix = $this->forum_manager->get_ignore_post_where_appendix($dbw, $prfx, 1);                $ignore_comment_where_appendix = $this->forum_manager->get_ignore_comment_where_appendix($dbw, $prfx);            $rm = $dbw->escape($READ_MARKER);            $last_topic_read_date = $dbw->format_datetime($last_topic_read_date);                $where = "where topic_id = $tid                  and {$prfx}_post.read_marker <> '$rm'                  and {$prfx}_post.creation_date > '$last_topic_read_date'                                  $deleted_where_appendix                  $ignore_post_where_appendix                  $ignore_comment_where_appendix";                $query = "select count(*) cnt                  from {$prfx}_post                  inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)                  inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)                  $where                  ";                if (!$dbw->execute_query($query)) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                if ($dbw->fetch_row()) {            $new_count = $dbw->field_by_name("cnt");        }                $dbw->free_result();                return true;    } // calculate_new_topic_messages    //---------------------------------------------------------------    function calculate_new_messages($no_cache = false)    {        global $READ_MARKER;        global $new_check_time;        global $settings;        //debug_message("calculate_new_messages for user " .  $this->forum_manager->get_user_id() . ": " . $no_cache);        //$dtrace = debug_backtrace();        //debug_message(extract_call_stack($dtrace));        if (detect_bot(val_or_empty($_SERVER["HTTP_USER_AGENT"])) != "") {            return true;        }                if (!empty($settings["archive_mode"])) {            return true;        }                $new_check_time = microtime(true);                $rodbw = System::getRODBWorker();        if (!$rodbw) {            return false;        }                $prfx = $rodbw->escape(System::getDBPrefix());                // Caching approach is used to reduce wait time for the loading of the main content.        // When the main content is being loaded, the info about new messages is taken from the cache.        // Then, the site starts an ajax script for checking new every N seconds.        // This script refreshes the cache and the info about new messages on the site.                // We may use cache:        //        // - if it is not yet invalidated, that is, no new messages have been written since the last caching        // - the age of the cache is below NEW_CACHE_TTL seconds and using of cache is allowed        //        // Otherwise, we have to renew it.                // check whether some moderataion actions were made.        // if yes, invalidate the cache                if (empty($_SESSION["new_messages_info_cache"]["is_valid"])) {            unset($_SESSION["new_messages_info_cache"]);            //debug_message("New cache was locally invalidated");        }        if (!empty($_SESSION["new_messages_info_cache"]["modified"])) {            $modified = $_SESSION["new_messages_info_cache"]["modified"];                        $query = "select new_dt from {$prfx}_cache_invalidation";                        if (!$rodbw->execute_query($query)) {                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());                return false;            }                        $invalidation_date = 0;                        if ($rodbw->fetch_row()) {                $invalidation_date = xstrtotime($rodbw->field_by_name("new_dt"));            }                        $rodbw->free_result();                if ($invalidation_date > $modified) {                unset($_SESSION["new_messages_info_cache"]);                //g_message("New cache was globally invalidated");            }        } else {            unset($_SESSION["new_messages_info_cache"]);        }                if (!empty($_SESSION["new_messages_info_cache"]["modified"])) {            $modified = $_SESSION["new_messages_info_cache"]["modified"];                        $new_cache_ttl = defined('NEW_CACHE_TTL') ? NEW_CACHE_TTL : 180;            if (empty($no_cache) && time() - $modified < $new_cache_ttl) {                //debug_message("New cache may be used because TTL is ok");                // Cache TTL is not expired, we may use the cache.            } else {                // Cache TTL is expired.                // Check whether there are new posts. If not, we still may use the cache.                $modified_db = $rodbw->format_datetime($modified);                                $query = "select count(*) cnt from {$prfx}_post where creation_date >= '$modified_db'";                                if (!$rodbw->execute_query($query)) {                    MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());                    return false;                }                                if ($rodbw->fetch_row()) {                    if ($rodbw->field_by_name("cnt") > 0) {                        unset($_SESSION["new_messages_info_cache"]);                        //debug_message("New cache invalidated because new posts");                    }                }                                $rodbw->free_result();            }        } else {            unset($_SESSION["new_messages_info_cache"]);        }                // uncomment for debugging        //unset($_SESSION["new_messages_info_cache"]);                if (!empty($_SESSION["new_messages_info_cache"])) {            $new_check_time = round(1000 * (microtime(true) - $new_check_time));            if ($new_check_time == 0) {                $new_check_time = 1;            }                        //debug_message("Checked new using cache");                        return true;        }                $rm = $rodbw->escape($READ_MARKER);                $uid = $rodbw->escape($this->forum_manager->get_user_id());        if (empty($uid)) {            $uid = 0;        }                $new_tracking_period = defined('NEW_TRACKING_PERIOD') ? NEW_TRACKING_PERIOD : 30;        $mindate = $rodbw->format_datetime(time() - $new_tracking_period * 24 * 3600);                $new_where_appendix = $this->forum_manager->get_new_where_appendix($prfx, $rm);                $ignore_post_where_appendix = $this->forum_manager->get_ignore_post_where_appendix($rodbw, $prfx, 1);                $ignore_comment_where_appendix = $this->forum_manager->get_ignore_comment_where_appendix($rodbw, $prfx);                $timestamp = time();        $tmp = microtime(true);                $my_last_topics = array();        $my_part_last_topics = array();        if (!empty($uid)) {            $query = "select id                      from {$prfx}_topic                      inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)                      where user_id = $uid and is_private < 1 and {$prfx}_topic_statistics.last_message_date >= '$mindate'";            if (!$rodbw->execute_query($query)) {                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());                return false;            }                        while ($rodbw->fetch_row()) {                $my_last_topics[$rodbw->field_by_name("id")] = 1;            }                        $rodbw->free_result();                        $query = "select id                      from {$prfx}_topic                      inner join {$prfx}_topic_statistics on ({$prfx}_topic.id = {$prfx}_topic_statistics.topic_id)                      inner join {$prfx}_topic_participants on ({$prfx}_topic_participants.topic_id = {$prfx}_topic.id and {$prfx}_topic_participants.user_id = $uid)                      where is_private < 1 and {$prfx}_topic_statistics.last_message_date >= '$mindate'";                        if (!$rodbw->execute_query($query)) {                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());                return false;            }                        while ($rodbw->fetch_row()) {                // we exclude own topics from participated topics                if (!empty($my_last_topics[$rodbw->field_by_name("id")])) {                    continue;                }                                $my_part_last_topics[$rodbw->field_by_name("id")] = 1;            }                        $rodbw->free_result();        }            $NEW_MESSAGES_INFO_CHACHE = array();        $forum_appendix = "";        if ($this->forum_manager->is_admin()) {            // no restrictions          } elseif (empty($uid)) {            $forum_appendix = " and {$prfx}_forum.restricted_access = 0";        }        else {            $in_list = "";                        $query = "select forum_id from {$prfx}_forum_member where user_id = $uid                      union                      select forum_id from {$prfx}_forum_moderator where user_id = $uid                     ";            if (!$rodbw->execute_query($query)) {                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());                return false;            }                        while ($rodbw->fetch_row()) {                $in_list .= $rodbw->field_by_name("forum_id") . ", ";            }                        $rodbw->free_result();                        $in_list = trim($in_list, ", ");                        $protected_forum_appendix = "";            if (!empty($in_list)) {                $protected_forum_appendix = " or {$prfx}_forum.id in ($in_list)";            }                                       $forum_appendix = " and ({$prfx}_forum.restricted_access = 0 or {$prfx}_forum.restricted_access = 2 $protected_forum_appendix)";                        if (!empty($_SESSION["blocked_forums"])) {                $in_list = implode(",", $_SESSION["blocked_forums"]);                $forum_appendix .= " and ({$prfx}_forum.restricted_access = 0 or {$prfx}_forum.id not in ($in_list))";            }        }        $query = "          select {$prfx}_post.topic_id, {$prfx}_topic.forum_id, is_private,          {$prfx}_topic.creation_date topic_creation_date,          {$prfx}_forum_read_markers.first_read_date forum_first_read_date,          {$prfx}_topic_read_markers.last_read_date topic_last_read_date,                    count(*) cnt,          min({$prfx}_post.creation_date) first_new_post_date              from {$prfx}_post          inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)          inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)                    left join {$prfx}_topic_read_markers on ({$prfx}_topic.id = {$prfx}_topic_read_markers.topic_id and {$prfx}_topic_read_markers.read_marker = '$rm')          left join {$prfx}_forum_read_markers on ({$prfx}_topic.forum_id = {$prfx}_forum_read_markers.forum_id and {$prfx}_forum_read_markers.read_marker = '$rm')              where                    {$prfx}_post.deleted <> 1 and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1 and {$prfx}_topic.publish_delay <> 1                    and {$prfx}_topic.is_private < 1                    and {$prfx}_post.creation_date > '$mindate'                    $forum_appendix          $new_where_appendix                    $ignore_post_where_appendix                    $ignore_comment_where_appendix              group by {$prfx}_post.topic_id, {$prfx}_topic.forum_id, is_private,          {$prfx}_topic.creation_date, {$prfx}_forum_read_markers.first_read_date, {$prfx}_topic_read_markers.last_read_date        ";                if (!empty($uid)) {          $query .= "            union                      select {$prfx}_post.topic_id, {$prfx}_topic.forum_id, is_private,            {$prfx}_topic.creation_date topic_creation_date,            {$prfx}_forum_read_markers.first_read_date forum_first_read_date,            {$prfx}_topic_read_markers.last_read_date topic_last_read_date,                        count(*) cnt,            min({$prfx}_post.creation_date) first_new_post_date                  from {$prfx}_post            inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)            inner join {$prfx}_forum on ({$prfx}_topic.forum_id = {$prfx}_forum.id)                        left join {$prfx}_topic_read_markers on ({$prfx}_topic.id = {$prfx}_topic_read_markers.topic_id and {$prfx}_topic_read_markers.read_marker = '$rm')            left join {$prfx}_forum_read_markers on ({$prfx}_topic.forum_id = {$prfx}_forum_read_markers.forum_id and {$prfx}_forum_read_markers.read_marker = '$rm')                  where                        {$prfx}_post.deleted <> 1 and {$prfx}_forum.deleted <> 1 and {$prfx}_topic.deleted <> 1 and {$prfx}_topic.publish_delay <> 1                        and {$prfx}_topic.id in (select {$prfx}_private_topics.topic_id from {$prfx}_private_topics where {$prfx}_private_topics.participant_id = $uid)                        $new_where_appendix                        $ignore_post_where_appendix                        $ignore_comment_where_appendix                  group by {$prfx}_post.topic_id, {$prfx}_topic.forum_id, is_private,            {$prfx}_topic.creation_date, {$prfx}_forum_read_markers.first_read_date, {$prfx}_topic_read_markers.last_read_date          ";        }                if (!$rodbw->execute_query($query)) {            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());            return false;        }                while ($rodbw->fetch_row()) {            $fid = $rodbw->field_by_name("forum_id");            $tid = $rodbw->field_by_name("topic_id");                        $topic_last_read_date = xstrtotime($rodbw->field_by_name("topic_last_read_date"));            $forum_first_read_date = xstrtotime($rodbw->field_by_name("forum_first_read_date"));                        if (empty($topic_last_read_date)) {                $NEW_MESSAGES_INFO_CHACHE["topic_last_read_date"][$tid] = $forum_first_read_date;                                if (xstrtotime($rodbw->field_by_name("topic_creation_date")) > $forum_first_read_date) {                    $NEW_MESSAGES_INFO_CHACHE["never_visited_topics"][$tid] = 1;                }            } else {                $NEW_MESSAGES_INFO_CHACHE["topic_last_read_date"][$tid] = $topic_last_read_date;            }                        // ignored not moderated topic            // moderated ignored topics fall into normal            if (!empty($_SESSION["ignored_topics"][$tid]) && !$this->forum_manager->is_topic_moderator($tid) && !$this->forum_manager->is_forum_moderator($fid)) {                $NEW_MESSAGES_INFO_CHACHE["ignored_topics"][$tid] = $rodbw->field_by_name("cnt");            } // all other topics            else {                if ($rodbw->field_by_name("is_private")) {                    $NEW_MESSAGES_INFO_CHACHE["private_topics"][$tid] = $rodbw->field_by_name("cnt");                } else {                    $NEW_MESSAGES_INFO_CHACHE["topics"][$tid] = $rodbw->field_by_name("cnt");                                        if (empty($_SESSION["preferred_forums"]) || !empty($_SESSION["preferred_forums"][$fid])) {                        $NEW_MESSAGES_INFO_CHACHE["visible_topics"][$tid] = $rodbw->field_by_name("cnt");                            if (!empty($my_last_topics[$tid])) {                            $NEW_MESSAGES_INFO_CHACHE["my_topics"][$tid] = $rodbw->field_by_name("cnt");                        }                            if (!empty($my_part_last_topics[$tid])) {                            $NEW_MESSAGES_INFO_CHACHE["my_part_topics"][$tid] = $rodbw->field_by_name("cnt");                        }                    }                }                                if (!empty($_SESSION["favourite_topics"][$tid])) {                    $NEW_MESSAGES_INFO_CHACHE["favourites"][$tid] = $rodbw->field_by_name("cnt");                }                if (!$rodbw->field_by_name("is_private")) {                    $NEW_MESSAGES_INFO_CHACHE["forums"][$fid][$tid] = $rodbw->field_by_name("cnt");                }            }                        // We store the time of the first new message in the forum, to be able to clean up the topic read markers before            // and set the first forum read date to it.                        // But we must skip the topics where the messages had been marked explicitly unread,            // and that date is before the forum_first_read_date.            // We may not reduce the forum_first_read_date otherwise some already read topics might get new.                        if (!empty($topic_last_read_date) && $topic_last_read_date < $forum_first_read_date) {                continue;            }                        $first_new_post_date = xstrtotime($rodbw->field_by_name("first_new_post_date"));                        if (empty($NEW_MESSAGES_INFO_CHACHE["forum_first_read_date"][$fid])) {                $NEW_MESSAGES_INFO_CHACHE["forum_first_read_date"][$fid] = $first_new_post_date;            } else {                $NEW_MESSAGES_INFO_CHACHE["forum_first_read_date"][$fid] = min($NEW_MESSAGES_INFO_CHACHE["forum_first_read_date"][$fid], $first_new_post_date);            }        }                $rodbw->free_result();                if (!(date("G") == 3 && date("i") >= 0 && date("i") <= 10)) {            $topic_readmarker_count = 0;                        if (!$rodbw->execute_query("select count(distinct read_marker) cnt from {$prfx}_topic_read_markers")) {                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());                return false;            }                        if ($rodbw->fetch_row()) {                $topic_readmarker_count = $rodbw->field_by_name("cnt");            }                        $rodbw->free_result();                        $forum_readmarker_count = 0;                        if (!$rodbw->execute_query("select count(distinct read_marker) cnt from {$prfx}_forum_read_markers")) {                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());                return false;            }                        if ($rodbw->fetch_row()) {                $forum_readmarker_count = $rodbw->field_by_name("cnt");            }                        $rodbw->free_result();                        $this->forum_manager->track_load_statistics(round(1000 * (microtime(true) - $tmp)), $topic_readmarker_count, $forum_readmarker_count);        } // tracking statistics                $NEW_MESSAGES_INFO_CHACHE["subscription_authors_new_messages_count"] = 0;        $NEW_MESSAGES_INFO_CHACHE["subscription_authors_new_topics_count"] = 0;                $NEW_MESSAGES_INFO_CHACHE["subscription_author_new_messages"] = array();        $NEW_MESSAGES_INFO_CHACHE["subscription_author_new_topics"] = array();                if (!empty($_SESSION["subscribed_authors"])) {            $query = $this->forum_manager->get_query_subscribed_messages($rodbw, $prfx, $uid, $mindate);            if (!$rodbw->execute_query($query)) {                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());                return false;            }                        while ($rodbw->fetch_row()) {                $NEW_MESSAGES_INFO_CHACHE["subscription_authors_new_messages_count"] += $rodbw->field_by_name("cnt");                $NEW_MESSAGES_INFO_CHACHE["subscription_author_new_messages"][$rodbw->field_by_name("author")] = $rodbw->field_by_name("cnt");            }                        $rodbw->free_result();                        $query = $this->forum_manager->get_query_subscribed_topics($rodbw, $prfx, $uid, $mindate);            if (!$rodbw->execute_query($query)) {                MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());                return false;            }                        while ($rodbw->fetch_row()) {                $NEW_MESSAGES_INFO_CHACHE["subscription_authors_new_topics_count"] += $rodbw->field_by_name("cnt");                $NEW_MESSAGES_INFO_CHACHE["subscription_author_new_topics"][$rodbw->field_by_name("author")] = $rodbw->field_by_name("cnt");            }                        $rodbw->free_result();        }                unset($_SESSION["new_messages_info_cache"]);        $_SESSION["new_messages_info_cache"]["is_valid"] = true;        $_SESSION["new_messages_info_cache"]["modified"] = $timestamp;        $_SESSION["new_messages_info_cache"]["data"] = $NEW_MESSAGES_INFO_CHACHE;                //debug_message("Checked new using DB");                $new_check_time = round(1000 * (microtime(true) - $new_check_time));        if ($new_check_time == 0) {            $new_check_time = 1;        }                return true;    } // calculate_new_messages        //---------------------------------------------------------------    function check_new_events(&$new_events_count, &$new_mod_events_count)    {        global $settings;        $new_events_count = 0;        $new_mod_events_count = 0;        if (!empty($settings["archive_mode"])) {            return true;        }        $uid = $this->forum_manager->get_user_id();        if (empty($uid)) {            return true;        }                $rodbw = System::getRODBWorker();        if (!$rodbw) {            return false;        }                $prfx = $rodbw->escape(System::getDBPrefix());                $uid = $rodbw->escape($uid);            start_action_time_measure();                if (!$rodbw->execute_query("select count(*) cnt                             from                             {$prfx}_events                             where                             user_id = $uid and is_new <> 0 and redundant <> 1 and                             ((select last_events_view_date from {$prfx}_user where id = $uid) is NULL or                              event_time > (select last_events_view_date from {$prfx}_user where id = $uid)                             )                            ")) {            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());            return false;        }                if ($rodbw->fetch_row()) {            $new_events_count = $rodbw->field_by_name("cnt");        }                $rodbw->free_result();            if (!$rodbw->execute_query("select count(*) cnt                             from                             {$prfx}_events                             where                             user_id = $uid and is_new <> 0 and redundant <> 1  and                             ((select last_events_view_date from {$prfx}_user where id = $uid) is NULL or                              event_time > (select last_events_view_date from {$prfx}_user where id = $uid)                             )                             and event_code not in ('msgeventmessageliked', 'msgeventmessagedisliked', 'msgeventmessagedislikedanonym', 'msgeventlikerevoked', 'msgeventdislikerevoked', 'msgeventdislikerevokedanonym', 'msgeventnewmessageintopic', 'msgeventnewprivatemessage', 'msgeventprivateleaving', 'msgeventcitatedmessageintopic', 'msgeventuserregistered', 'msgeventwordsmentionedintopic', 'msgeventcitatedsubscribedmessageintopic', 'msgeventattentionasked')                            ")) {            MessageHandler::setError(text("ErrQueryFailed"), $rodbw->get_last_error() . "\n\n" . $rodbw->get_last_query());            return false;        }            if ($rodbw->fetch_row()) {            $new_mod_events_count = $rodbw->field_by_name("cnt");        }            $rodbw->free_result();        measure_action_time("checking new events");                return true;    } // check_new_events        //---------------------------------------------------------------    function update_topic_new_messages_cache($tid, $new_cnt, $last_post_read_date)    {        //debug_message("----------------------------------------------------------");        //debug_message("user: " . $this->forum_manager->get_user_name());        //debug_message($_SERVER["PHP_SELF"]);        //debug_message("updating cache state for topic $tid, count: " . $new_cnt . ", last_post_read_date: " . date("Y-m-d H:i", $last_post_read_date));                if (isset($_SESSION["new_messages_info_cache"]["data"]["never_visited_topics"][$tid])) {            unset($_SESSION["new_messages_info_cache"]["data"]["never_visited_topics"][$tid]);        }                if (!empty($last_post_read_date)) {            if (empty($_SESSION["new_messages_info_cache"]["data"]["topic_last_read_date"][$tid]) ||                $last_post_read_date > $_SESSION["new_messages_info_cache"]["data"]["topic_last_read_date"][$tid]) {                $_SESSION["new_messages_info_cache"]["data"]["topic_last_read_date"][$tid] = $last_post_read_date;            } else {                // new last read date below the current last read date, do nothing                return;            }        }                if ($new_cnt > 0) {            if (isset($_SESSION["new_messages_info_cache"]["data"]["ignored_topics"][$tid])) {                $_SESSION["new_messages_info_cache"]["data"]["ignored_topics"][$tid] = $new_cnt;            }                        if (isset($_SESSION["new_messages_info_cache"]["data"]["visible_topics"][$tid])) {                $_SESSION["new_messages_info_cache"]["data"]["visible_topics"][$tid] = $new_cnt;            }                        if (isset($_SESSION["new_messages_info_cache"]["data"]["topics"][$tid])) {                $_SESSION["new_messages_info_cache"]["data"]["topics"][$tid] = $new_cnt;            }                        if (isset($_SESSION["new_messages_info_cache"]["data"]["private_topics"][$tid])) {                $_SESSION["new_messages_info_cache"]["data"]["private_topics"][$tid] = $new_cnt;            }                        if (isset($_SESSION["new_messages_info_cache"]["data"]["favourites"][$tid])) {                $_SESSION["new_messages_info_cache"]["data"]["favourites"][$tid] = $new_cnt;            }                        if (isset($_SESSION["new_messages_info_cache"]["data"]["my_topics"][$tid])) {                $_SESSION["new_messages_info_cache"]["data"]["my_topics"][$tid] = $new_cnt;            }                if (isset($_SESSION["new_messages_info_cache"]["data"]["my_part_topics"][$tid])) {                $_SESSION["new_messages_info_cache"]["data"]["my_part_topics"][$tid] = $new_cnt;            }            return true;        }                // if the topic does not have new posts anymore,        // we have to remove it from the lists of topics - from the general        // and from the forum list                if (isset($_SESSION["new_messages_info_cache"]["data"]["ignored_topics"][$tid])) {            unset($_SESSION["new_messages_info_cache"]["data"]["ignored_topics"][$tid]);        }                if (isset($_SESSION["new_messages_info_cache"]["data"]["visible_topics"][$tid])) {            unset($_SESSION["new_messages_info_cache"]["data"]["visible_topics"][$tid]);        }                if (isset($_SESSION["new_messages_info_cache"]["data"]["topics"][$tid])) {            unset($_SESSION["new_messages_info_cache"]["data"]["topics"][$tid]);        }                if (isset($_SESSION["new_messages_info_cache"]["data"]["private_topics"][$tid])) {            unset($_SESSION["new_messages_info_cache"]["data"]["private_topics"][$tid]);        }                if (isset($_SESSION["new_messages_info_cache"]["data"]["favourites"][$tid])) {            unset($_SESSION["new_messages_info_cache"]["data"]["favourites"][$tid]);        }                if (isset($_SESSION["new_messages_info_cache"]["data"]["my_topics"][$tid])) {            unset($_SESSION["new_messages_info_cache"]["data"]["my_topics"][$tid]);        }            if (isset($_SESSION["new_messages_info_cache"]["data"]["my_part_topics"][$tid])) {            unset($_SESSION["new_messages_info_cache"]["data"]["my_part_topics"][$tid]);        }        if (!empty($_SESSION["new_messages_info_cache"]["data"]["forums"])) {            foreach ($_SESSION["new_messages_info_cache"]["data"]["forums"] as $fid => $topics) {                if (isset($_SESSION["new_messages_info_cache"]["data"]["forums"][$fid][$tid])) {                    unset($_SESSION["new_messages_info_cache"]["data"]["forums"][$fid][$tid]);                }            }        }                return true;    } // update_topic_new_messages_cache        //---------------------------------------------------------------    function invalidate_new_messages_cache()    {        unset($_SESSION["new_messages_info_cache"]["is_valid"]);                return true;    } // invalidate_new_messages_cache        //---------------------------------------------------------------    function get_forums_new_status(&$forum_list)    {        foreach ($forum_list as $fid => &$finfo) {            $forum_list[$fid]["not_preferred"] = !empty($_SESSION["preferred_forums"]) && empty($_SESSION["preferred_forums"][$fid]);                        if (!empty($_SESSION["new_messages_info_cache"]["data"]["forums"][$fid])) {                $forum_list[$fid]["topics_with_new_count"] = count($_SESSION["new_messages_info_cache"]["data"]["forums"][$fid]);            } else {                $forum_list[$fid]["topics_with_new_count"] = 0;            }        }                return true;    } // get_forums_new_status        //---------------------------------------------------------------    function get_topics_new_status(&$topic_list)    {        foreach ($topic_list as $tid => &$tinfo) {            if (!empty($_SESSION["new_messages_info_cache"]["data"]["ignored_topics"][$tid])) {                $topic_list[$tid]["new_messages_count"] = $_SESSION["new_messages_info_cache"]["data"]["ignored_topics"][$tid];                $topic_list[$tid]["new_marker_ignored"] = 1;            } elseif (!empty($_SESSION["new_messages_info_cache"]["data"]["topics"][$tid])) {                $topic_list[$tid]["new_messages_count"] = $_SESSION["new_messages_info_cache"]["data"]["topics"][$tid];                $topic_list[$tid]["never_visited_topic"] = !empty($_SESSION["new_messages_info_cache"]["data"]["never_visited_topics"][$tid]);            } elseif (!empty($_SESSION["new_messages_info_cache"]["data"]["private_topics"][$tid])) {                $topic_list[$tid]["new_messages_count"] = $_SESSION["new_messages_info_cache"]["data"]["private_topics"][$tid];                $topic_list[$tid]["never_visited_topic"] = !empty($_SESSION["new_messages_info_cache"]["data"]["never_visited_topics"][$tid]);            }        }                return true;    } // get_topics_new_status        //---------------------------------------------------------------    function get_authors_new_status(&$author_list)    {        foreach ($author_list as $author => &$ainfo) {            if (!empty($_SESSION["new_messages_info_cache"]["data"]["subscription_author_new_messages"][$ainfo["user_name"]])) {                $ainfo["new_messages"] = $_SESSION["new_messages_info_cache"]["data"]["subscription_author_new_messages"][$ainfo["user_name"]];            } else {                $ainfo["new_messages"] = 0;            }                        if (!empty($_SESSION["new_messages_info_cache"]["data"]["subscription_author_new_topics"][$ainfo["user_name"]])) {                $ainfo["new_topics"] = $_SESSION["new_messages_info_cache"]["data"]["subscription_author_new_topics"][$ainfo["user_name"]];            } else {                $ainfo["new_topics"] = 0;            }        }                return true;    } // get_authors_new_status    //---------------------------------------------------------------} // NewChecker//-------------------------------------------------------------------?>