<?php//-------------------------------------------------------------------// class TestHelper//-------------------------------------------------------------------class TestHelper{    //---------------------------------------------------------------    var $forum_manager;    var $current_log_file;        //---------------------------------------------------------------    function log_line($msg)    {        file_put_contents("log/" . $this->current_log_file, $msg . "\n", FILE_APPEND);        echo $msg . "\n";    }        //---------------------------------------------------------------    function gen_test_topics($fid)    {        $_REQUEST["fid"] = $fid;        $_REQUEST["new_topic"] = 1;        $_REQUEST["author"] = $this->forum_manager->get_user_name();        $_REQUEST["user_marker"] = "6b66ffb3e35628e1068c942d1435eafc";        $_REQUEST["post_message"] = 1;        $_REQUEST["user_logged"] = 1;        $_REQUEST["hash"] = $_SESSION["hash"];                $response = array();        for ($i = 120; $i >= 1; $i--) {            $_REQUEST["subject"] = "Тема " . $i;            $_REQUEST["message"] = "Тема " . $i;                        if (!$this->forum_manager->post_message($response)) {                return false;            }        }                return true;    }        //---------------------------------------------------------------    function gen_test_data()    {        $dbw = System::getDBWorker();        if (!$dbw) {            return false;        }                $prfx = $dbw->escape(System::getDBPrefix());                $ips = array();        for ($i = 1; $i < 50; $i++) {            $ips[] = rand(1, 192) . "." . rand(1, 192) . "." . rand(1, 192) . "." . rand(1, 192);        }                $tcnt = 100;        $tcntd = $tcnt - 1;                for ($i = $tcnt; $i >= 1; $i--) {            $now = $dbw->format_datetime(time() + ($i - 1200) * 3600);                        $uid = rand(1, 29);            $uname = "User";                        if (!$dbw->execute_query("select user_name from {$prfx}_user where id = $uid")) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }                        if ($dbw->fetch_row()) {                $uname = $dbw->field_by_name("user_name");            }                        $dbw->free_result();                        if ($i == 1190) {                $uid = "NULL";                $uname = "Prog 02";            }            if ($i == 1188) {                $uid = "NULL";                $uname = "Seva";            }                        $closed = 0;            $deleted = 0;            $pinned = 0;                        if ($i == 1187) {                $closed = "1";            }            if ($i == 1184) {                $pinned = "1";            }            if ($i == 1177) {                $deleted = "1";            }            if ($i == 1162) {                $pinned = "1";            }                        $uname = $dbw->escape($uname);                        $query = "insert into {$prfx}_topic                (name, user_id, author, forum_id, creation_date, closed, deleted, pinned)                values                ('topic $i', $uid, '$uname', 2, '$now', '$closed', '$deleted', '$pinned')                ";            if (!$dbw->execute_query($query)) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }                        $tid = $dbw->insert_id();                        $query = "insert into {$prfx}_topic_statistics (topic_id) values ($tid)";            if (!$dbw->execute_query($query)) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }                        if ($i != 1197 && $i != 1196) {                $cnt = rand(1, 70);            } else {                $cnt = rand(1, 50);            }                        for ($j = 1; $j <= $cnt; $j++) {                $uid = rand(1, 29);                $uname = "User";                                if (!$dbw->execute_query("select user_name from {$prfx}_user where id = $uid")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                                if ($dbw->fetch_row()) {                    $uname = $dbw->field_by_name("user_name");                }                                $dbw->free_result();                                if ($i == 7) {                    $uid = "NULL";                    $uname = "Prog 02";                }                if ($i == 12) {                    $uid = "NULL";                    $uname = "Seva";                }                                $ipi = array_rand($ips);                $ip = $ips[$ipi];                $now = $dbw->format_datetime(time() + ($j - 1200) * 3600);                                $rm = md5($ip);                                $uname = $dbw->escape($uname);                                $query = "insert into {$prfx}_post                  (topic_id, user_id, author, creation_date, text_content, html_content, ip, read_marker)                  values                  ($tid, $uid, '$uname', '$now', 'Topic $tid - $j', 'Topic $tid - $j', '$ip', '$rm')                  ";                if (!$dbw->execute_query($query)) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }            }                        $query = $this->forum_manager->get_query_post_cnt_update($prfx, $tid);                        if (!$dbw->execute_query($query)) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }        }                $query = $this->forum_manager->get_query_topic_cnt_update($prfx, 2);        if (!$dbw->execute_query($query)) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $query = $this->forum_manager->get_query_user_post_cnt_update($prfx, "SELECT ID FROM {$prfx}_USER");        if (!$dbw->execute_query($query)) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                return true;    } // gen_test_data        //---------------------------------------------------------------    function rebuild_attachments_old()    {        $dbw = System::getDBWorker();        if (!$dbw) {            return false;        }                $prfx = $dbw->escape(System::getDBPrefix());                if (!$dbw->execute_query("select post_id, nr, name from {$prfx}_attachment where favourite <> 1                                  order by post_id desc limit 5000")) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $attachments = array();                while ($dbw->fetch_row()) {            $attachments[] = array("post_id" => $dbw->field_by_name("post_id"), "nr" => $dbw->field_by_name("nr"), "name" => $dbw->field_by_name("name"));        }                $dbw->free_result();                $errors = 0;                foreach ($attachments as $attachment) {            if (!file_exists(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"])) {                trace("Attachment does not exists: " . $attachment["name"]);                $errors++;                                if (!$dbw->execute_query("update {$prfx}_attachment set favourite = 3 where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                                continue;            }                        $pi = pathinfo(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"]);                        $new_name = sha1_file(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"]);                        if (!empty($pi['extension'])) {                $new_name .= "." . strtolower($pi['extension']);            }                        if ($attachment["name"] == $new_name) {                if (!$dbw->execute_query("update {$prfx}_attachment set favourite = 1 where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                                continue;            }                        if (!rename(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"], APPLICATION_ROOT . "user_data/attachments/" . $new_name)) {                trace("Error by renaming: " . $attachment["name"] . " to " . $new_name);                $errors++;                                if (!$dbw->execute_query("update {$prfx}_attachment set favourite = 2 where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                                continue;            }                        $new_name = $dbw->escape($new_name);                        if (!$dbw->execute_query("update {$prfx}_attachment set favourite = 1, name = '$new_name' where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }                        //trace($attachment["name"] . " >> " . $new_name);        }                trace("Total attachments processed: " . count($attachments));        trace("Errors: " . $errors);    } // rebuild_attachments        //---------------------------------------------------------------    function gen_name_hashes()    {        $dbw = System::getDBWorker();        if (!$dbw) {            return false;        }                $prfx = $dbw->escape(System::getDBPrefix());                $query = "select id, user_name, email from {$prfx}_user";        if (!$dbw->execute_query($query)) {            echo $dbw->get_last_error() . "\n\n" . $dbw->get_last_query();            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $users = array();        while ($dbw->fetch_row()) {            $users[$dbw->field_by_name("id")] = array("user_name" => $this->forum_manager->hash_user_name($dbw->field_by_name("user_name")),                                                      "email" => $this->forum_manager->hash_email($dbw->field_by_name("email"))                                                     );        }                $dbw->free_result();                foreach ($users as $uid => $user_data) {            $user_name = $dbw->escape($user_data["user_name"]);            $user_email = $dbw->escape($user_data["email"]);            $query = "update {$prfx}_user set user_name_hash = '$user_name', email_hash = '$user_email' where id = $uid";            if (!$dbw->execute_query($query)) {                echo $dbw->get_last_error() . "\n\n" . $dbw->get_last_query();                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }        }                $query = "select user_name from {$prfx}_reserved_names";        if (!$dbw->execute_query($query)) {            echo $dbw->get_last_error() . "\n\n" . $dbw->get_last_query();            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $users = array();        while ($dbw->fetch_row()) {            $users[$dbw->field_by_name("user_name")] = $this->forum_manager->hash_user_name($dbw->field_by_name("user_name"));        }                $dbw->free_result();                foreach ($users as $user => $user_hash) {            $user = $dbw->escape($user);            $user_hash = $dbw->escape($user_hash);            $query = "update {$prfx}_reserved_names set user_name_hash = '$user_hash' where user_name = '$user'";            if (!$dbw->execute_query($query)) {                echo $dbw->get_last_error() . "\n\n" . $dbw->get_last_query();                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }        }                $query = "select guest_name from {$prfx}_protected_guests";        if (!$dbw->execute_query($query)) {            echo $dbw->get_last_error() . "\n\n" . $dbw->get_last_query();            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $users = array();        while ($dbw->fetch_row()) {            $users[$dbw->field_by_name("guest_name")] = $this->forum_manager->hash_user_name($dbw->field_by_name("guest_name"));        }                $dbw->free_result();                foreach ($users as $guest_name => $guest_name_hash) {            $guest_name = $dbw->escape($guest_name);            $guest_name_hash = $dbw->escape($guest_name_hash);            $query = "update {$prfx}_protected_guests set guest_name_hash = '$guest_name_hash' where guest_name = '$guest_name'";            if (!$dbw->execute_query($query)) {                echo $dbw->get_last_error() . "\n\n" . $dbw->get_last_query();                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }        }                return true;    } // gen_name_hashes        function rebuild_event($i)    {        $dbw = System::getDBWorker();        if (!$dbw) {            throw new Exception("DB Worker cannot be created!");        }                $prfx = $dbw->escape(System::getDBPrefix());                $query = "select params from {$prfx}_events where id = $i";        if (!$dbw->execute_query($query)) {            throw new Exception($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());        }                if (!$dbw->fetch_row()) {            $this->log_line("Event #$i does not exist!");                        $dbw->free_result();            return;        }                $params_str = Emoji::Decode($dbw->field_by_name("params"));        $params = array();                unserialize_array($params, $params_str);                $dbw->free_result();                $topic_id = "NULL";        $topic_name = val_or_empty($params["{topic_name}"]);        if (empty($topic_name)) {            $topic_name = val_or_empty($params["{target_topic_name}"]);        }                if (!empty($topic_name)) {            $topic_name = quotes_or_null($dbw->escape($topic_name));                        $query = "select id from {$prfx}_topic where name = $topic_name";            if (!$dbw->execute_query($query)) {                throw new Exception($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            }                        if ($dbw->fetch_row()) {                $topic_id = $dbw->field_by_name("id");            }                        $dbw->free_result();        } else {            $topic_name = "NULL";        }                $forum_id = "NULL";        $forum_name = val_or_empty($params["{forum_name}"]);        if (!empty($forum_name)) {            $forum_name = quotes_or_null($dbw->escape($forum_name));                        $query = "select id from {$prfx}_forum where name = $forum_name";            if (!$dbw->execute_query($query)) {                throw new Exception($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            }                        if ($dbw->fetch_row()) {                $forum_id = $dbw->field_by_name("id");            }                        $dbw->free_result();        } else {            $forum_name = "NULL";        }                $source_topic_id = "NULL";        $source_topic_name = val_or_empty($params["{source_topic_name}"]);        if (!empty($source_topic_name)) {            $source_topic_name = quotes_or_null($dbw->escape($source_topic_name));                        $query = "select id from {$prfx}_topic where name = $source_topic_name";            if (!$dbw->execute_query($query)) {                throw new Exception($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            }                        if ($dbw->fetch_row()) {                $source_topic_id = $dbw->field_by_name("id");            }                        $dbw->free_result();        } else {            $source_topic_name = "NULL";        }                $query = "update {$prfx}_events set                  source_topic_id = $source_topic_id,                  source_topic_name = $source_topic_name,                  topic_id = $topic_id,                  topic_name = $topic_name,                  forum_id = $forum_id,                  forum_name = $forum_name                  where id = $i";        if (!$dbw->execute_query($query)) {            throw new Exception($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());        }                $this->log_line("Event #$i processed!");    }        //---------------------------------------------------------------    function check_attachments()    {        $this->current_log_file = "rebuild_attachments-" . date("Y-m-d_H-i") . ".log";        if (($_REQUEST["act"] ?? "") == "Purge") {           $this->log_line("Attachment purge started: " . date("d.m.Y H:i"));        } else {           $this->log_line("Attachment check started: " . date("d.m.Y H:i"));        }        $this->log_line("");        $dbw = System::getDBWorker();        if (!$dbw) {            return false;        }                $prfx = $dbw->escape(System::getDBPrefix());        $dir = APPLICATION_ROOT . "user_data/attachments/";                $existing_attachments = 0;        $dead_attachments = 0;        $deleted_attachments = 0;                $adirs = scandir($dir);        foreach ($adirs as $adir) {            if ($adir == "." || $adir == ".." || $adir == ".htaccess") {                continue;            }                        if (is_dir($dir . "/" . $adir)) {                $attachments = scandir($dir . "/" . $adir);                foreach ($attachments as $attachment) {                    if ($adir == "." || $adir == ".." || is_dir($dir . "/" . $adir . "/" . $attachment)) {                        continue;                    }                    $name = $dbw->escape($adir . "/" . $attachment);                                        if (!$dbw->execute_query("select id from {$prfx}_attachment                                                where name = '$name'")) {                        $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                        return false;                    }                                        if ($dbw->fetch_row()) {                        $existing_attachments++;                    } else {                        $dead_attachments++;                                                if (($_REQUEST["act"] ?? "") == "Purge") {                            unlink($dir . "/" . $adir . "/" . $attachment);                            $deleted_attachments++;                        }                    }                                        $dbw->free_result();                }                } else {                $name = $dbw->escape($adir);                                if (!$dbw->execute_query("select id from {$prfx}_attachment                                            where name = '$name'")) {                    $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                                if ($dbw->fetch_row()) {                    $existing_attachments++;                } else {                    $dead_attachments++;                    if (($_REQUEST["act"] ?? "") == "Purge") {                        unlink($dir . "/" . $adir);                        $deleted_attachments++;                    }                }                                $dbw->free_result();            }        }        $this->log_line("");        $this->log_line("Total attachments found: " . ($existing_attachments + $dead_attachments));        $this->log_line("Existing attachments: " . $existing_attachments);        $this->log_line("Dead attachments: " . $dead_attachments);        if (($_REQUEST["act"] ?? "") == "Purge") {           $this->log_line("Attachments purged: " . $deleted_attachments);        }    }        //---------------------------------------------------------------    function rebuild_attachments()    {        function is_dir_empty($directory)        {            $files = scandir($directory);            $files = array_diff($files, array('..', '.'));                        return count($files) == 0;        }                $this->current_log_file = "rebuild_attachments-" . date("Y-m-d_H-i") . ".log";        $this->log_line("Attachment conversion started " . date("d.m.Y H:i"));        $this->log_line("");        $dbw = System::getDBWorker();        if (!$dbw) {            return false;        }                $prfx = $dbw->escape(System::getDBPrefix());                if (!$dbw->execute_query("select post_id, nr, name from {$prfx}_attachment                                    order by post_id desc")) {            $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $attachments = array();                while ($dbw->fetch_row()) {            $attachments[] = array("post_id" => $dbw->field_by_name("post_id"), "nr" => $dbw->field_by_name("nr"), "name" => $dbw->field_by_name("name"));        }                $dbw->free_result();                $moved = 0;        $already_moved = 0;        $errors = 0;        $fixes = 0;                foreach ($attachments as $attachment) {            $subfolder3 = substr(basename($attachment["name"]), 0, 3);            $subfolder5 = substr(basename($attachment["name"]), 0, 5);            if (strpos($attachment["name"], "/") == 3) {                if (!file_exists(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"])) {                  $this->log_line("Attachment $attachment[name] does not exist, trying to find in root.");                                    if (file_exists(APPLICATION_ROOT . "user_data/attachments/" . basename($attachment["name"]))) {                    $this->log_line("Attachment found in root, moving to " . $attachment["name"]);                    if (!rename(APPLICATION_ROOT . "user_data/attachments/" . basename($attachment["name"]), APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"])) {                        $this->log_line("Error by renaming: " . basename($attachment["name"]) . " to " . $attachment["name"]);                        $errors++;                                                continue;                    }                                        $fixes++;                    // path in DB already ok                    continue;                  }                                                       if (file_exists(APPLICATION_ROOT . "user_data/attachments/" . $subfolder5 . "/" . basename($attachment["name"]))) {                    $this->log_line("Attachment found in 5 symbol directory $subfolder5, moving to " . $attachment["name"]);                    if (!rename(APPLICATION_ROOT . "user_data/attachments/" . $subfolder5 . "/" . basename($attachment["name"]), APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"])) {                        $this->log_line("Error by renaming: $subfolder5/" . basename($attachment["name"]) . " to " . $attachment["name"]);                        $errors++;                                                continue;                    }                                        $fixes++;                    // path in DB already ok                    continue;                  }                                     $errors++;                  $this->log_line("Error: attachment $attachment[name] does not exist anywhere.");                  continue;                }                $already_moved++;                $this->log_line("Attachment $attachment[name] already moved to 3 symbol directory.");                continue;            }                                    if (strpos($attachment["name"], "/") == 5) {                $this->log_line("Attachment $attachment[name] is in the old 5 symbol folder $subfolder5.");            } elseif (strpos($attachment["name"], "/") !== false) {                $errors++;                $this->log_line("Attachment $attachment[name] is in an unknown folder.");                continue;            } else {                $this->log_line("Attachment $attachment[name] is in the root.");            }            if (file_exists(APPLICATION_ROOT . "user_data/attachments/" . $subfolder3 . "/" . basename($attachment["name"]))) {                $this->log_line("Attachment $attachment[name] is already in the subfolder $subfolder3");                $this->log_line("Updating the path in the database to " . $subfolder3 . "/" . basename($attachment["name"]));                $fixes++;                                $new_name = $dbw->escape($subfolder . "/" . basename($attachment["name"]));                                if (!$dbw->execute_query("update {$prfx}_attachment set name = '$new_name' where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                continue;            }                        if (file_exists(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"])) {                $source_path = "user_data/attachments/" . $attachment["name"];            } else if (file_exists(APPLICATION_ROOT . "user_data/attachments/" . $subfolder5 . "/" . basename($attachment["name"]))) {                $source_path = "user_data/attachments/" . $subfolder5 . "/" . basename($attachment["name"]);            } else {                $errors++;                $this->log_line("Attachment $attachment[name] does not exist anywhere.");                continue;            }                        $new_name = $subfolder3 . "/" . basename($attachment["name"]);            $this->log_line("Moving $attachment[name] to " . $new_name);                        if (!file_exists(APPLICATION_ROOT . "user_data/attachments/" . $subfolder3) &&                 !@mkdir(APPLICATION_ROOT . "user_data/attachments/" . $subfolder3)) {                $this->log_line("Error creating folder: " . $subfolder3);                $errors++;                                continue;            }            if (!rename(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"], APPLICATION_ROOT . "user_data/attachments/" . $new_name)) {                $this->log_line("Error by renaming: " . $attachment["name"] . " to " . $new_name);                $errors++;                                continue;            }                        $new_name = $dbw->escape($new_name);                        if (!$dbw->execute_query("update {$prfx}_attachment set name = '$new_name' where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }                        $moved++;        }                $dir = APPLICATION_ROOT . "user_data/attachments/";                $dir_deleted = 0;        $dir_non_empty = 0;                $files = scandir($dir);        foreach ($files as $file) {            if ($file == "." || $file == ".." || !is_dir($dir . "/" . $file)) {                continue;            }                        if (strlen($file) == 3) continue;                        if (!is_dir_empty($dir . "/" . $file)) {                $this->log_line("Error: non-empty directory $file cannot be deleted.");                $dir_non_empty++;                continue;            }                        if (!rmdir($dir . "/" . $file)) {                $this->log_line("Error by deleting the directory $file");                $errors++;                continue;            }                        $this->log_line("Empty directory $file has been deleted.");            $dir_deleted++;        }        $this->log_line("");        $this->log_line("Total attachments processed: " . count($attachments));        $this->log_line("Moved: " . $moved);        $this->log_line("Already moved: " . $already_moved);        $this->log_line("Fixed: " . $fixes);        $this->log_line("Non empty dirs: " . $dir_non_empty);        $this->log_line("Dirs deleted: " . $dir_deleted);        $this->log_line("Errors: " . $errors);    }        //---------------------------------------------------------------    function rebuild_attachments3()    {        $this->current_log_file = "rebuild_attachments-" . date("Y-m-d_H-i") . ".log";        $this->log_line("Attachment conversion started " . date("d.m.Y H:i"));        $dbw = System::getDBWorker();        if (!$dbw) {            return false;        }                $prfx = $dbw->escape(System::getDBPrefix());                if (!$dbw->execute_query("select post_id, nr, name from {$prfx}_attachment                                    order by post_id desc")) {            $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $attachments = array();                while ($dbw->fetch_row()) {            $attachments[] = array("post_id" => $dbw->field_by_name("post_id"), "nr" => $dbw->field_by_name("nr"), "name" => $dbw->field_by_name("name"));        }                $dbw->free_result();                $already_moved = 0;        $errors = 0;        $fixes = 0;                foreach ($attachments as $attachment) {            if (strpos($attachment["name"], "/") !== false) {                $this->log_line("Attachment already moved: " . $attachment["name"]);                                if (!file_exists(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"])) {                  $this->log_line("Attachment does not exist, trying to find in root");                                    if (file_exists(APPLICATION_ROOT . "user_data/attachments/" . basename($attachment["name"]))) {                    $fixes++;                    $this->log_line("Attachment found in root, moving to " . "user_data/attachments/" . $attachment["name"]);                    if (!rename(APPLICATION_ROOT . "user_data/attachments/" . basename($attachment["name"]), APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"])) {                        $this->log_line("Error by renaming: " . basename($attachment["name"]) . " to " . $attachment["name"]);                        $errors++;                                                continue;                    }                  } else {                    $errors++;                    $this->log_line("Attachment does not exist anywhere: " . $attachment["name"]);                  }                }                $already_moved++;                continue;            }                        $subfolder = substr($attachment["name"], 0, 5);            if (file_exists(APPLICATION_ROOT . "user_data/attachments/" . $subfolder . "/" . $attachment["name"])) {                $this->log_line("Attachment is already in the subfolder '$subfolder': " . $attachment["name"]);                $this->log_line("Updating the path in the database to " . $subfolder . "/" . $attachment["name"]);                $fixes++;                                $new_name = $dbw->escape($subfolder . "/" . $attachment["name"]);                                if (!$dbw->execute_query("update {$prfx}_attachment set name = '$new_name' where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                continue;            }            if (!file_exists(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"])) {                $this->log_line("Attachment does not exists: " . $attachment["name"]);                $errors++;                continue;            }            if (!file_exists(APPLICATION_ROOT . "user_data/attachments/" . $subfolder) &&                 !@mkdir(APPLICATION_ROOT . "user_data/attachments/" . $subfolder)) {                $this->log_line("Error creating folder: " . $subfolder);                $errors++;                                continue;            }            $new_name = $subfolder . "/" . $attachment["name"];                        if (!rename(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"], APPLICATION_ROOT . "user_data/attachments/" . $new_name)) {                $this->log_line("Error by renaming: " . $attachment["name"] . " to " . $new_name);                $errors++;                                continue;            }                        $new_name = $dbw->escape($new_name);                        if (!$dbw->execute_query("update {$prfx}_attachment set name = '$new_name' where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }        }                $this->log_line("Total attachments processed: " . count($attachments));        $this->log_line("Already moved: " . $already_moved);        $this->log_line("Fixed: " . $fixes);        $this->log_line("Errors: " . $errors);    }    function rebuild_attachments2()    {        $this->current_log_file = "rebuild_attachments-" . date("Y-m-d_H-i") . ".log";        $this->log_line("Attachment convertion started " . date("d.m.Y H:i"));        $dbw = System::getDBWorker();        if (!$dbw) {            return false;        }                $prfx = $dbw->escape(System::getDBPrefix());                if (!$dbw->execute_query("select post_id, nr, name from {$prfx}_attachment                                    order by post_id desc")) {            $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $attachments = array();                while ($dbw->fetch_row()) {            $attachments[] = array("post_id" => $dbw->field_by_name("post_id"), "nr" => $dbw->field_by_name("nr"), "name" => $dbw->field_by_name("name"));        }                $dbw->free_result();                $already_moved = 0;        $errors = 0;        $fixes = 0;                foreach ($attachments as $attachment) {            if (strpos($attachment["name"], "/") !== false) {                $already_moved++;                continue;            }                        $subfolder = substr($attachment["name"], 0, 5);            if (file_exists(APPLICATION_ROOT . "user_data/attachments/" . $subfolder . "/" . $attachment["name"])) {                $this->log_line("Attachment is already in the subfolder '$subfolder': " . $attachment["name"]);                $fixes++;                                $new_name = $dbw->escape($subfolder . "/" . $attachment["name"]);                                if (!$dbw->execute_query("update {$prfx}_attachment set name = '$new_name' where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                continue;            }            if (!file_exists(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"])) {                $this->log_line("Attachment does not exists: " . $attachment["name"]);                $errors++;                continue;            }            if (!file_exists(APPLICATION_ROOT . "user_data/attachments/" . $subfolder) &&                 !@mkdir(APPLICATION_ROOT . "user_data/attachments/" . $subfolder)) {                $this->log_line("Error creating folder: " . $subfolder);                $errors++;                                continue;            }            $new_name = $subfolder . "/" . $attachment["name"];                        if (!rename(APPLICATION_ROOT . "user_data/attachments/" . $attachment["name"], APPLICATION_ROOT . "user_data/attachments/" . $new_name)) {                $this->log_line("Error by renaming: " . $attachment["name"] . " to " . $new_name);                $errors++;                                continue;            }                        $new_name = $dbw->escape($new_name);                        if (!$dbw->execute_query("update {$prfx}_attachment set name = '$new_name' where post_id = $attachment[post_id] and nr = $attachment[nr]")) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                $this->log_line($dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }        }                $this->log_line("Total attachments processed: " . count($attachments));        $this->log_line("Already moved: " . $already_moved);        $this->log_line("Fixes: " . $fixes);        $this->log_line("Errors: " . $errors);    }    //---------------------------------------------------------------    function rebuild_events()    {        $this->current_log_file = "rebuild_events-" . date("Y-m-d_H-i") . ".log";                $this->log_line("------------------------------------------");        $this->log_line(date("d.m.Y H:i:s"));        $this->log_line("Event rebuilding started.");        $this->log_line("------------------------------------------");                try {            for ($i = 563374; $i >= 563374; $i--) {                $this->rebuild_event($i);            }                        $this->log_line("------------------------------------------");            $this->log_line(date("d.m.Y H:i:s"));            $this->log_line("Event rebuilding completed.");            $this->log_line("------------------------------------------");        } catch (Exception $ex) {            $this->log_line("------------------------------------------");            $this->log_line(date("d.m.Y H:i:s"));            $this->log_line("Error occurred!");            $this->log_line("");            $this->log_line($ex->getMessage());            $this->log_line("------------------------------------------");        }    } // rebuild_events        function reparse_post($post_id)    {        global $fmanager;        global $BB_PARSER_VERSION;                $target_dbw = System::getDBWorker();        if (empty($target_dbw)) {            throw new Exception("Target DB worker cannot be created!");        }                $target_prfx = System::getDBPrefix();                $query = "select text_content, has_attachment, user_id from {$target_prfx}_post where id = $post_id";        if (!$target_dbw->execute_query($query)) {            throw new Exception("SQL Query failed: " . $target_dbw->get_last_error() . "\n\n" . $target_dbw->get_last_query());        }                $message = "";        $has_attachment = 0;        $user_id = "";                if ($target_dbw->fetch_row()) {            $message = Emoji::Decode($target_dbw->field_by_name("text_content"));            $has_attachment = $target_dbw->field_by_name("has_attachment");            $user_id = $target_dbw->field_by_name("user_id");        } else {            $target_dbw->free_result();            $this->log_line("Post #$post_id not found.");            return;        }                $target_dbw->free_result();                if (!$target_dbw->start_transaction()) {            throw new Exception("SQL Query failed: " . $target_dbw->get_last_error() . "\n\n" . $target_dbw->get_last_query());        }                if (empty($user_id)) {            $user_id = null;        }                $GLOBALS["youtube_error"] = "";        $current_youtube_usage_counter = $GLOBALS["youtube_usage_counter"];                $html_message = "";        $has_picture = "0";        $has_video = "0";        $has_audio = "0";        $has_telegram = "0";        $has_link = "0";        $has_code = "0";        $has_attachment_ref = 0;        if (!$fmanager->format_manager->format_message($target_dbw, $message, $html_message, $has_picture, $has_video, $has_audio, $has_telegram, $has_link, $has_code, $has_attachment_ref, $post_id)) {            $target_dbw->rollback_transaction();            throw new Exception("Format message failed: " . MessageHandler::getErrors());        }                if (!empty($GLOBALS["youtube_error"])) {            if (stripos($GLOBALS["youtube_error"], "quota") !== false) {                throw new Exception("Youtube Error:\n" . $GLOBALS["youtube_error"]);            } else {                $this->log_line("Youtube Error:\n" . $GLOBALS["youtube_error"]);            }        }                $query = "update {$target_prfx}_post set has_attachment_ref = $has_attachment_ref where id = $post_id";        if (!$target_dbw->execute_query($query)) {            throw new Exception("SQL Query failed: " . $target_dbw->get_last_error() . "\n\n" . $target_dbw->get_last_query());            $target_dbw->rollback_transaction();        }                $message = Emoji::Encode($message);        $html_message = Emoji::Encode($html_message);                $plain_text = preg_replace("/[ \t]+/", " ", trim(strip_tags($html_message)));        $plain_text = preg_replace("/[\n\r]+/", "\r\n", $plain_text);                $message = quotes_or_null($target_dbw->escape($message));        $html_message = quotes_or_null($target_dbw->escape($html_message));                $query = "update {$target_prfx}_post set      text_content = $message,      html_content = $html_message,      has_picture = $has_picture,      has_video = $has_video,      has_telegram = $has_telegram,      has_audio = $has_audio,      has_link = $has_link,      has_code = $has_code,      bb_parser_version = $bb_parser_version      where id = $post_id";                if (!$target_dbw->execute_query($query)) {            $target_dbw->rollback_transaction();            throw new Exception("SQL Query failed: " . $target_dbw->get_last_error() . "\n\n" . $target_dbw->get_last_query());        }                // search issues                $plain_text = $target_dbw->escape($plain_text);        $query = "update {$target_prfx}_search_post                  set searchable_content = '$plain_text'                  where post_id = $post_id";                if (!$target_dbw->execute_query($query)) {            throw new Exception("SQL Query failed: " . $target_dbw->get_last_error() . "\n\n" . $target_dbw->get_last_query());            $target_dbw->rollback_transaction();        }                if (!$target_dbw->commit_transaction()) {            throw new Exception("SQL Query failed: " . $target_dbw->get_last_error() . "\n\n" . $target_dbw->get_last_query());        }                $this->log_line("Post #$post_id reparsed.");        if ($current_youtube_usage_counter != $GLOBALS["youtube_usage_counter"]) {            $this->log_line("Youtube API used: " . $GLOBALS["youtube_usage_counter"]);        }    } // reparse_post        function reparse_posts()    {        global $fmanager;        global $BB_PARSER_VERSION;                $GLOBALS['ignore_attachment_errors'] = true;                $this->current_log_file = "reparse_posts-" . date("Y-m-d_H-i") . ".log";                $this->log_line("------------------------------------------");        $this->log_line(date("d.m.Y H:i:s"));        $this->log_line("Post reparsing started");        $this->log_line("------------------------------------------");                $pid = 0;        $GLOBALS["youtube_usage_counter"] = 0;                try {            for ($pid = 3037000; $pid > 3000000; $pid--) {                if (file_exists("z_reparse_posts_stop.txt")) {                    $this->log_line("------------------------------------------");                    $this->log_line(date("d.m.Y H:i:s"));                    $this->log_line("Post reparsing stopped.");                    $this->log_line("------------------------------------------");                    return true;                }                                usleep(300000);                $this->reparse_post($pid);            }                        $this->log_line("------------------------------------------");            $this->log_line(date("d.m.Y H:i:s"));            $this->log_line("Post reparsing completed.");            $this->log_line("------------------------------------------");        } catch (Exception $ex) {            $this->log_line("------------------------------------------");            $this->log_line(date("d.m.Y H:i:s"));            $this->log_line("Post #$pid: ERROR by reparsing.");            $this->log_line("");            $this->log_line($ex->getMessage());            $this->log_line($ex->getFile() . ", line: " . $ex->getLine());            $this->log_line("------------------------------------------");            return false;        }                return true;    } // reparse_posts        function rebuild_reserved_words()    {        $dbw = System::getDBWorker(false);        if (!$dbw) {            return false;        }            $prfx = $dbw->escape(System::getDBPrefix());        $reserved_names = array(            "admin",            "sysadmin",            "sys_admin",            "админ",            "root",            "root_admin"        );            $reserved_name_codes = array(            "MasterAdministrator",            "Administrator",            "Administrators",            "Moderator",            "Moderators",            "Guest",            "Guests",            "Anonyms",            "Subscription",            "Citation"        );            foreach ($GLOBALS['LANGUAGES'] as $lng) {            foreach ($reserved_name_codes as $code) {                $name = try_translate($code, $lng);                $reserved_names[$name] = $name;            }        }            $cmd = "delete from {$prfx}_reserved_names";        if (!$dbw->execute_query($cmd)) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }        foreach ($reserved_names as $name) {            $name_hash = $dbw->escape($this->forum_manager->hash_user_name($name));            $name = $dbw->escape($name);                    $cmd = "insert into {$prfx}_reserved_names (user_name, user_name_hash)                    values ('$name', '$name_hash')";            if (!$dbw->execute_query($cmd)) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }        }                return true;    } // rebuild_reserved_words    function rebuild_hits()    {        $dbw = System::getDBWorker(false);        if (!$dbw) {            return false;        }        $this->current_log_file = "rebuild_hits-" . date("Y-m-d_H-i") . ".log";        $this->log_line("Hit rebuild started " . date("d.m.Y H:i"));        $this->log_line("");        $prfx = $dbw->escape(System::getDBPrefix());                if (!$dbw->execute_query("select distinct user_agent from {$prfx}_forum_hits")) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $user_agents = [];                while ($dbw->fetch_row()) {            if (!$dbw->field_by_name("user_agent")) continue;                        $user_agents[] = $dbw->field_by_name("user_agent");        }                $dbw->free_result();                foreach ($user_agents as $agent) {            $this->log_line($agent);            $os = "";            $browser = "";            $bot = "";            if ($bot_data = detect_bot(val_or_empty($agent))) {                $bot = $bot_data["name"];            } elseif ($browser_data = detect_browser($agent)) {                $browser = $browser_data["browser"];                $os = $browser_data["os"];            }                        $this->log_line("Browser: " . $browser);            $this->log_line("OS: " . $os);            $this->log_line("Bot: " . $bot);            $agent = $dbw->escape($agent);            $browser = $dbw->quotes_or_null($browser);            $os = $dbw->quotes_or_null($os);            $bot = $dbw->quotes_or_null($bot);            if (!$dbw->execute_query("update {$prfx}_forum_hits set                                       browser = $browser,                                       os = $os,                                       bot = $bot                                      where user_agent = '$agent'")) {                MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                return false;            }        }                if (!$dbw->execute_query("delete from {$prfx}_browser_daily_statistics")) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                /* insert browsers */        $this->log_line("Insert browsers ...");                if (!$dbw->execute_query("          insert into {$prfx}_browser_daily_statistics          (dt, browser, os, read_marker)          select              dt,              browser,              os,              read_marker             from (              select              read_marker,              browser,              os,              cast(dt as date) dt              from              {$prfx}_forum_hits              where bot is null and (browser is not null and os is not null)              group by read_marker, browser, os, cast(dt as date)              ) stat            where not exists             (select 1 from {$prfx}_browser_daily_statistics where               {$prfx}_browser_daily_statistics.dt = stat.dt and               {$prfx}_browser_daily_statistics.browser = stat.browser and              {$prfx}_browser_daily_statistics.os = stat.os            )        ")) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $this->log_line("Insert bots ...");        if (!$dbw->execute_query("            insert into {$prfx}_browser_daily_statistics            (dt, bot, bot_hits_count)            select                dt,                bot,                bot_hits_count               from (                select                cast(dt as date) dt,                bot,                count(*) bot_hits_count                from                {$prfx}_forum_hits                where bot is not null and (browser is null and os is null)                group by cast(dt as date), bot                ) stat              where not exists               (select 1 from {$prfx}_browser_daily_statistics where                 {$prfx}_browser_daily_statistics.dt = stat.dt and                 {$prfx}_browser_daily_statistics.bot = stat.bot              )        ")) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }        $this->log_line("Insert missing bots ...");        if (!$dbw->execute_query("            insert into {$prfx}_daily_statistics            (user_id, forum_id, bot, dt, time_online, bot_hits_count)            select user_id, forum_id, bot, dt, time_online, bot_hits_count            from                (select                user_id,                forum_id,                bot,                cast(dt as date) dt,                sum(duration) time_online,                sum(hits_count) bot_hits_count                from                {$prfx}_forum_hits                where bot is not null                group by user_id, forum_id, bot, cast(dt as date)                ) stat              where not exists (select 1 from {$prfx}_daily_statistics where                   ifnull({$prfx}_daily_statistics.user_id, -1000) = ifnull(stat.user_id, -1000) and                   ifnull({$prfx}_daily_statistics.forum_id, -1000) = ifnull(stat.forum_id, -1000) and                   {$prfx}_daily_statistics.dt = stat.dt and                   {$prfx}_daily_statistics.bot = stat.bot)        ")) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }        $this->log_line("Insert missing non-bots ...");                if (!$dbw->execute_query("              insert into {$prfx}_daily_statistics              (user_id, forum_id, dt, time_online, hits_count)              select user_id, forum_id, dt, time_online, hits_count              from                  (select                  user_id,                  forum_id,                      cast(dt as date) dt,                  sum(duration) time_online,                  sum(hits_count) hits_count                  from                  {$prfx}_forum_hits                  where browser is not null and os is not null                  group by user_id, forum_id, cast(dt as date)                  ) stat                where not exists (select 1 from {$prfx}_daily_statistics where                     ifnull({$prfx}_daily_statistics.user_id, -1000) = ifnull(stat.user_id, -1000) and                     ifnull({$prfx}_daily_statistics.forum_id, -1000) = ifnull(stat.forum_id, -1000) and                     {$prfx}_daily_statistics.dt = stat.dt and                     {$prfx}_daily_statistics.bot is null)        ")) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $this->log_line("Update bots ...");        if (!$dbw->execute_query("              update {$prfx}_daily_statistics              inner join                  (select                  user_id,                  forum_id,                  bot,                  cast(dt as date) dt,                  sum(duration) time_online,                  sum(hits_count) bot_hits_count                  from                  {$prfx}_forum_hits                  where bot is not null                  group by user_id, forum_id, bot, cast(dt as date)                  ) stat              on (ifnull({$prfx}_daily_statistics.user_id, -1000) = ifnull(stat.user_id, -1000) and                   ifnull({$prfx}_daily_statistics.forum_id, -1000) = ifnull(stat.forum_id, -1000) and                   {$prfx}_daily_statistics.dt = stat.dt and                   {$prfx}_daily_statistics.bot = stat.bot)              set               {$prfx}_daily_statistics.time_online = stat.time_online,              {$prfx}_daily_statistics.bot_hits_count = stat.bot_hits_count,              {$prfx}_daily_statistics.hits_count = 0        ")) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }                $this->log_line("Update non-bots ...");        if (!$dbw->execute_query("              update {$prfx}_daily_statistics              inner join                  (select                  user_id,                  forum_id,                  cast(dt as date) dt,                  sum(duration) time_online,                  sum(hits_count) hits_count                  from                  {$prfx}_forum_hits                  where bot is null                  group by user_id, forum_id, cast(dt as date)                  ) stat              on (ifnull({$prfx}_daily_statistics.user_id, -1000) = ifnull(stat.user_id, -1000) and                   ifnull({$prfx}_daily_statistics.forum_id, -1000) = ifnull(stat.forum_id, -1000) and                   {$prfx}_daily_statistics.dt = stat.dt and                   {$prfx}_daily_statistics.bot is null)              set               {$prfx}_daily_statistics.time_online = stat.time_online,              {$prfx}_daily_statistics.hits_count = stat.hits_count,              {$prfx}_daily_statistics.bot_hits_count = 0        ")) {            MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());            return false;        }        return true;    } // rebuild_hits} // TestHelper//-------------------------------------------------------------------?>