<?php//-------------------------------------------------------------------// class FormatManager//-------------------------------------------------------------------class FormatManager{    //---------------------------------------------------------------    var $forum_manager;        //---------------------------------------------------------------    function process_special_references(&$dbw, $prfx, &$text, $mode, $base_url = "")    {        $replacements = array();                //---------------------------------------        // references to messages        //---------------------------------------        $matches = array();        if (preg_match_all("/\\[(c*mid)=(\\d+)\\]/iU", $text, $matches, PREG_SET_ORDER)) {            foreach ($matches as $match) {                $fid = "";                $tid = "";                                $mid = $dbw->escape($match[2]);                                if (!$dbw->execute_query("select topic_id, forum_id, is_private                                 from {$prfx}_post                                 inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)                                 where {$prfx}_post.id = $mid")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                                if ($dbw->fetch_row()) {                    $tid = $dbw->field_by_name("topic_id");                    $fid = $dbw->field_by_name("forum_id");                                        if ($dbw->field_by_name("is_private") > 0) {                        $fid = "private";                    }                }                                $dbw->free_result();                                $class = "message_link";                if ($match[1] == "cmid") {                    $class = "citated_message_link";                }                                if ($mode == "email") {                    $link = "{{msg: {$base_url}topic.php?fid=$fid&tid=$tid&msg=$mid}}";                } else {                    $link = "<a href='topic.php?fid=$fid&amp;tid=$tid&amp;msg=$mid' target='_blank' class='$class' data-spec-link='" . escape_html($match[0]) . "'>$mid</a>";                }                                $replacements[$match[0]] = $link;            }        } // mids                //---------------------------------------        // references to users        //---------------------------------------        $matches = array();        if (preg_match_all("/\\[uid=(\\d+)\\]/iU", $text, $matches, PREG_SET_ORDER)) {            foreach ($matches as $match) {                $uid = $dbw->escape($match[1]);                $uname = $uid;                                if (!$dbw->execute_query("select user_name                                 from {$prfx}_user                                 where id = $uid")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                                if ($dbw->fetch_row()) {                    $uname = $dbw->field_by_name("user_name");                }                                $dbw->free_result();                                if ($mode == "email") {                    $link = "{{usr:$uname: {$base_url}view_profile.php?uid=$match[1]}}";                } else {                    $link = "<a href='view_profile.php?uid=$match[1]' target='_blank' class='user_link' data-spec-link='" . escape_html($match[0]) . "'>" . escape_html($uname) . "</a>";                }                                $replacements[$match[0]] = $link;            }        } // uids                //---------------------------------------        // references to moderator events        //---------------------------------------        $matches = array();        if (preg_match_all("/\\[mevt=(\\d+)\\]/iU", $text, $matches, PREG_SET_ORDER)) {            foreach ($matches as $match) {                if ($mode == "email") {                    $link = "{{mevt: {$base_url}moderation_log.php?event=$match[1]}}";                } else {                    $link = "<a href='moderation_log.php?event=$match[1]' target='_blank' class='mevnt_link' data-spec-link='" . escape_html($match[0]) . "'>$match[1]</a>";                }                                $replacements[$match[0]] = $link;            }        } // mevts                //---------------------------------------        // appeals to users        //---------------------------------------        $matches = array();        if (preg_match_all("/(@|%)([^%@\r\n\t]+?)\\1/iu", $text, $matches, PREG_SET_ORDER)) {            foreach ($matches as $match) {                $uname = $dbw->escape($match[2]);                                if (!$dbw->execute_query("select id                                 from {$prfx}_user                                 where user_name = '$uname'")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                                $user_id = "";                if ($dbw->fetch_row()) {                    $user_id = $dbw->field_by_name("id");                }                                $dbw->free_result();                                if (empty($user_id)) {                    continue;                }                                if ($mode == "email") {                    $user_appeal = $match[2];                } else {                    $user_appeal = "<a href='view_profile.php?uid=$user_id' target='_blank' class='user_appeal' data-spec-link='" . escape_html($match[0]) . "'>" . escape_html($match[2]) . "</a>";                }                                $replacements[$match[0]] = $user_appeal;            }        } // appeals                //---------------------------------------        // references to sql.ru        //---------------------------------------        $matches = array();        if (preg_match_all("/\\[msg=(\\d+)\\]/iU", $text, $matches, PREG_SET_ORDER)) {            foreach ($matches as $match) {                $mid = $match[1];                                if ($mode == "email") {                    $link = "{{msg: http://www.sql.ru/forum/actualutils.aspx?action=gotomsg&msg=$mid}}";                } else {                    $link = "<a href='http://www.sql.ru/forum/actualutils.aspx?action=gotomsg&amp;msg=$mid' target='_blank' class='message_link' data-spec-link='" . escape_html($match[0]) . "'>SQL.RU: $mid</a>";                }                                $replacements[$match[0]] = $link;            }        } // msg                $text = str_replace(array_keys($replacements), $replacements, $text);    } // process_special_references        //---------------------------------------------------------------    function format_message(&$dbw, &$in, &$out, &$has_picture, &$has_video, &$has_audio, &$has_telegram, &$has_link, &$has_code, &$has_attachment_ref, $pid)    {        $prfx = $dbw->escape(System::getDBPrefix());                $in = trim($in, "\r\n");        $in = str_replace("\r", "", $in);        $in = str_replace("\xc2\xa0", "\x20", $in);        $in = preg_replace("/ *\n/", "\n", $in);        $in = preg_replace("/\n{2,}/", "\n\n", $in);                fix_quot($in);                $out = $in;                // temporarily replace quotes because of links                $matches = array();        if (preg_match_all("/\[(quote|spoiler)=([^\[\]]+)\]/i", $out, $matches)) {            foreach ($matches[0] as $entry) {                $out = str_replace($entry, str_replace("'", "___:QT:___", str_replace("\"", "___:DQT:___", $entry)), $out);            }        }                fix_links($out);        tags_to_lowercase($out);        parse_bb_code($out, $out, $has_link, $has_code, $pid);                remove_nested_quotes($out, $out, 6);        remove_nested_spoilers($out, $out, 6);                $replacements = array();        $matches = array();        if (preg_match_all("/(<br \\/>\\s)*\\[attachment(\\d*)(=[^\\]]+)?\\](<br \\/>\\s)*/i", $out, $matches, PREG_SET_ORDER)) {            foreach ($matches as $match) {                $idx = $match[2];                if (empty($idx)) {                    $idx = 1;                }                $idx = $dbw->escape($idx);                                $att = trim(val_or_empty($match[3]), "=");                if (empty($att)) {                    $att = $pid;                }                $att = $dbw->escape($att);                                $path = "";                $name = "";                $type = "";                $appx = "";                                if ($att == "tmp") {                    $tmpidx = $idx;                    if ($tmpidx == 1) {                        $tmpidx = "";                    }                                        $path = $_SESSION["last_attachment$tmpidx"];                    $name = $_SESSION["last_attachment_name$tmpidx"];                    $type = $_SESSION["last_attachment_type$tmpidx"];                                        $appx = "&amp;rnd=" . time();                } elseif (!is_numeric($att)) {                    MessageHandler::setErrorElement("message");                    MessageHandler::setError(text("ErrAttachmentIdNotNumber"));                    return false;                } else {                    if (!$dbw->execute_query("select 1 from {$prfx}_post where id = $att")) {                        MessageHandler::setErrorElement("message");                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                        return false;                    }                                        if (!$dbw->fetch_row()) {                        $dbw->free_result();                                                if (!empty($GLOBALS['ignore_attachment_errors'])) {                            $GLOBALS["attachment_error"] = "att_message_not_found";                            continue;                        }                                                MessageHandler::setErrorElement("message");                        MessageHandler::setError(sprintf(text("ErrReferencedMessageDoesNotExist"), $att));                        return false;                    }                                        $dbw->free_result();                                        if (!$dbw->execute_query("select name, origin_name, type                                   from {$prfx}_attachment                                   where post_id = $att and nr = $idx and name is not NULL")) {                        MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                        return false;                    }                                        if ($dbw->fetch_row()) {                        $path = "user_data/attachments/" . $dbw->field_by_name("name");                        $name = Emoji::Decode($dbw->field_by_name("origin_name"));                        $type = $dbw->field_by_name("type");                    }                                        $dbw->free_result();                }                                if (empty($path)) {                    if (!empty($GLOBALS['ignore_attachment_errors'])) {                        $GLOBALS["attachment_error"] = "att_object_not_found";                        continue;                    }                                        MessageHandler::setErrorElement("message");                    if ($att == $pid) {                        MessageHandler::setError(text("ErrAttachmentNotProvided"));                    } else {                        MessageHandler::setError(sprintf(text("ErrReferencedAttachmentDoesNotExist"), $att));                    }                    return false;                }                                $own_attachment_class = "";                if ($att != "tmp" && $pid == $att) {                    $own_attachment_class = "own_attachment";                }                                if (preg_match("/.+\.(mp3)$/i", $name)) {                    $att_code = "<div class='attachment_wrapper $own_attachment_class' data-attid='$att' data-attnr='$idx'>                       <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx)'></div>                       <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                        <audio controls='controls' preload='metadata' autobuffer='metadata'>                          <source src='ajax/attachment.php?embedded=1&amp;aid=$att&amp;nr=$idx' type='audio/mpeg'>                          <a href='ajax/attachment.php?aid=$att&amp;nr=$idx'>" . escape_html($name) . "</a>                        </audio>                        <a class='attachment_link' href='ajax/attachment.php?aid=$att&amp;nr=$idx' target='_blank'>{{link}}</a>                        </div>";                } elseif (preg_match("/.+\.(ogg)$/i", $name)) {                    $att_code = "<div class='attachment_wrapper $own_attachment_class' data-attid='$att' data-attnr='$idx'>                       <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx)'></div>                       <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                        <audio controls='controls' preload='metadata' autobuffer='metadata'>                          <source src='ajax/attachment.php?embedded=1&amp;aid=$att&amp;nr=$idx' type='audio/ogg'>                          <a href='ajax/attachment.php?aid=$att&amp;nr=$idx'>" . escape_html($name) . "</a>                        </audio>                        <a class='attachment_link' href='ajax/attachment.php?aid=$att&amp;nr=$idx' target='_blank'>{{link}}</a>                        </div>";                } elseif ($type == "audio/mpeg") {                    $att_code = "<div class='attachment_wrapper $own_attachment_class' data-attid='$att' data-attnr='$idx'>                       <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx)'></div>                       <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                        <audio controls='controls' preload='metadata' autobuffer='metadata'>                          <source src='ajax/attachment.php?embedded=1&amp;aid=$att&amp;nr=$idx' type='audio/mpeg'>                          <a href='ajax/attachment.php?aid=$att&amp;nr=$idx'>" . escape_html($name) . "</a>                        </audio>                        <a class='attachment_link' href='ajax/attachment.php?aid=$att&amp;nr=$idx' target='_blank'>{{link}}</a>                        </div>";                } elseif ($type == "audio/ogg") {                    $att_code = "<div class='attachment_wrapper $own_attachment_class' data-attid='$att' data-attnr='$idx'>                       <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx)'></div>                       <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                        <audio controls='controls' preload='metadata' autobuffer='metadata'>                          <source src='ajax/attachment.php?embedded=1&amp;aid=$att&amp;nr=$idx' type='audio/ogg'>                          <a href='ajax/attachment.php?aid=$att&amp;nr=$idx'>" . escape_html($name) . "</a>                        </audio>                        <a class='attachment_link' href='ajax/attachment.php?aid=$att&amp;nr=$idx' target='_blank'>{{link}}</a>                        </div>";                } elseif (preg_match("/.+\.(mp4)$/i", $name)) {                    $att_code = "<div class='attachment_wrapper $own_attachment_class' data-attid='$att' data-attnr='$idx'>                       <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx)'></div>                       <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                       <div class='short_video'>                       <a class='emb_video_short_container' href='#' onclick='return show_embedded_video(this)'>" . escape_html(text("ShowEmbeddedVideo")) . "</a>                       </div><div class='emb_video_container detailed_video'><video controls='controls' preload='metadata'>                          <source src='ajax/attachment.php?embedded=1&amp;aid=$att&amp;nr=$idx' type='video/mp4'>                          <a href='ajax/attachment.php?aid=$att&amp;nr=$idx'>" . escape_html($name) . "</a>                        </video>                        </div>                        <a class='attachment_link' href='ajax/attachment.php?aid=$att&amp;nr=$idx' target='_blank'>{{link}}</a>                        </div>";                } elseif (preg_match("/.+\.(webm)$/i", $name)) {                    $att_code = "<div class='attachment_wrapper $own_attachment_class' data-attid='$att' data-attnr='$idx'>                       <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx)'></div>                       <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                       <div class='short_video'>                       <a class='emb_video_short_container' href='#' onclick='return show_embedded_video(this)'>" . escape_html(text("ShowEmbeddedVideo")) . "</a>                       </div><div class='emb_video_container detailed_video'><video controls='controls' preload='metadata'>                          <source src='ajax/attachment.php?embedded=1&amp;aid=$att&amp;nr=$idx' type='video/webm'>                          <a href='ajax/attachment.php?aid=$att&amp;nr=$idx'>" . escape_html($name) . "</a>                        </video>                        </div>                        <a class='attachment_link' href='ajax/attachment.php?aid=$att&amp;nr=$idx' target='_blank'>{{link}}</a>                        </div>";                } elseif ($type == "video/mp4") {                    $att_code = "<div class='attachment_wrapper $own_attachment_class' data-attid='$att' data-attnr='$idx'>                       <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx)'></div>                       <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                       <div class='short_video'>                       <a class='emb_video_short_container' href='#' onclick='return show_embedded_video(this)'>" . escape_html(text("ShowEmbeddedVideo")) . "</a>                       </div><div class='emb_video_container detailed_video'><video controls='controls' preload='metadata'>                          <source src='ajax/attachment.php?embedded=1&amp;aid=$att&amp;nr=$idx' type='video/mp4'>                          <a href='ajax/attachment.php?aid=$att&amp;nr=$idx'>" . escape_html($name) . "</a>                        </video>                        </div>                        <a class='attachment_link' href='ajax/attachment.php?aid=$att&amp;nr=$idx' target='_blank'>{{link}}</a>                        </div>";                } elseif ($type == "video/webm") {                    $att_code = "<div class='attachment_wrapper $own_attachment_class' data-attid='$att' data-attnr='$idx'>                       <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx)'></div>                       <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                       <div class='short_video'>                       <a class='emb_video_short_container' href='#' onclick='return show_embedded_video(this)'>" . escape_html(text("ShowEmbeddedVideo")) . "</a>                       </div><div class='emb_video_container detailed_video'><video controls='controls' preload='metadata'>                          <source src='ajax/attachment.php?embedded=1&amp;aid=$att&amp;nr=$idx' type='video/webm'>                          <a href='ajax/attachment.php?aid=$att&amp;nr=$idx'>" . escape_html($name) . "</a>                        </video>                        </div>                        <a class='attachment_link' href='ajax/attachment.php?aid=$att&amp;nr=$idx' target='_blank'>{{link}}</a>                        </div>";                } elseif (preg_match("/image.+/", $type) || preg_match("/.+\.(jpg|jpeg|gif|png|webp)$/i", $name)) {                    $att_code = "<div class='attachment_wrapper image_attachment $own_attachment_class' data-attid='$att' data-attnr='$idx'>                                 <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx$appx)'></div>                                 <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx$appx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                                 <a href='ajax/attachment.php?aid=$att&amp;nr=$idx&amp;picture=1$appx' class='lightbox_image attachment_image' target='_blank'><img class='post_image attachment_picture_{$att}_{$idx}' src='ajax/attachment.php?aid=$att&amp;nr=$idx&amp;thumb=1&amp;picture=1$appx' alt='" . escape_html($name) . "'></a>                                 </div>";                } else {                    $att_code = "<div class='attachment_wrapper binary_attachment $own_attachment_class' data-attid='$att' data-attnr='$idx'>                                 <div class='attachment_del_indicator attachment_del_indicator_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_del_indicator=1&amp;aid=$att&amp;nr=$idx$appx)'></div>                                 <div class='attachment_button attachment_button_{$att}_{$idx}' style='background-image:url(ajax/attachment.php?attachment_button=1&amp;aid=$att&amp;nr=$idx$appx)' onclick='return delete_restore_attachment(this, \"$att\", \"$idx\")'></div>                                 <a href='ajax/attachment.php?aid=$att&amp;nr=$idx$appx' target='_blank'><img class='post_image attachment_picture_{$att}_{$idx}' src='ajax/attachment.php?aid=$att&amp;nr=$idx&thumb=1$appx' alt='" . escape_html($name) . "'></a>                                 </div><div class='attachment_link'><a target='_blank' href='ajax/attachment.php?aid=$att&amp;nr=$idx' title='" . escape_html($name) . "'>" . escape_html($name) . "</a></div>";                }                                $replacements[$match[0]] = $att_code;            }        } // attachments                $matches = array();        if (preg_match_all("/<strong>(.+?)#(\\d+)\<\/strong\>/i", $out, $matches, PREG_SET_ORDER)) {                        foreach ($matches as $match) {                $fid = "";                $tid = "";                                $mid = $dbw->escape($match[2]);                                if (!$dbw->execute_query("select topic_id, forum_id, is_private, {$prfx}_post.user_id, {$prfx}_post.author, {$prfx}_user.user_name,                                          {$prfx}_post.read_marker                                          from {$prfx}_post                                          inner join {$prfx}_topic on ({$prfx}_post.topic_id = {$prfx}_topic.id)                                          left join {$prfx}_user on ({$prfx}_post.user_id = {$prfx}_user.id)                                          where {$prfx}_post.id = $mid")) {                    MessageHandler::setError(text("ErrQueryFailed"), $dbw->get_last_error() . "\n\n" . $dbw->get_last_query());                    return false;                }                                $author = $match[1];                $class_appendix = "";                $ignorance_appendix = "";                                if ($dbw->fetch_row()) {                    $tid = $dbw->field_by_name("topic_id");                    $fid = $dbw->field_by_name("forum_id");                                        if ($dbw->field_by_name("is_private") > 0) {                        $fid = "private";                    }                                        if ($dbw->field_by_name("user_name")) {                        $author = escape_html($dbw->field_by_name("user_name"));                                                $class_appendix .= " user_citation author_" . md5($dbw->field_by_name("user_name"));                                                $ignorance_appendix = "{{user_ignored:" . $dbw->field_by_name("user_id") . "}}";                    } else {                        $author = escape_html($dbw->field_by_name("author"));                        $class_appendix .= " guest_citation author_" . md5($dbw->field_by_name("author"));                        $ignorance_appendix = "{{guest_ignored:" . $dbw->field_by_name("author") . ":" . $dbw->field_by_name("read_marker") . "}}";                    }                }                                $dbw->free_result();                                $author2 = $author;                if ($author == "admin") {                    $author = "{{admin}}";                }                                $class = "reference_link";                $link = "<a href='topic.php?fid=$fid&tid=$tid&msg=$mid' target='_blank' class='$class_appendix $class' data-spec-link='" . escape_html("#" . $match[2]) . "'>&nbsp;</a>";                                $replacements[$match[0]] = "<strong class='author_reference $ignorance_appendix'><span class='visible_author' data-ref-author='$author2' data-ref-mid='$match[2]'>{$author}{$link}</span><span class='invisible_author'>[" . escape_html(text("ignored")) . "]{$link}</span></strong>";            }        } // refs                $out = str_replace(array_keys($replacements), $replacements, $out);                $this->process_special_references($dbw, $prfx, $out, "message");                // restore the special references escaped in the CODE tag if any                $out = preg_replace("/__uid=(\d+)__/i", "[uid=$1]", $out);        $out = preg_replace("/__mid=(\d+)__/i", "[mid=$1]", $out);        $out = preg_replace("/__mevt=(\d+)__/i", "[mevt=$1]", $out);        $out = preg_replace("/__msg=(\d+)__/i", "[msg=$1]", $out);        $out = preg_replace("/__attachment(\d+)?(=\d+)?__/i", "[attachment$1$2]", $out);        $out = preg_replace("/__appeal(%|@)=(.+?)\\1__/i", "$1$2$1", $out);                if (strpos($out, "lightbox_image") !== false) {            $has_picture = "1";        }                if (strpos($out, "telegram_container") !== false) {            $has_telegram = "1";        } elseif (strpos($out, "class='short_video'") !== false || strpos($out, "<video controls='controls'") !== false) {            $has_video = "1";        }                if (strpos($out, "<audio controls='controls'") !== false) {            $has_audio = "1";        }                if (strpos($out, "<div class='attachment_wrapper'") !== false) {            $has_attachment_ref = "1";        }                return true;    } // format_message    //---------------------------------------------------------------        //---------------------------------------------------------------    function format_message_simple(&$dbw, $prfx, &$text, $mode)    {        parse_bb_code_simple($text, $mode);                $text = preg_replace("/(<br \\/>\\s*)*\\[attachment(\\d*)=([^\\]]+)\\](\\s*<br \\/>\\s*)*/i", "<div class='block_wrapper'>[{{attachment}}]</div>", $text);                $this->process_special_references($dbw, $prfx, $text, $mode);                if ($mode == "short_message") {            $text = HtmlHelper::cut($text, 600);        }    } // format_message_simple        //---------------------------------------------------------------    function format_email_message(&$dbw, $prfx, &$text, $lang, $base_url, $cut_pos = null)    {        parse_bb_code_simple($text, "email");                $text = preg_replace("/(<br \\/>\\s)*\\[attachment(\\d*)=([^\\]]+)\\](<br \\/>\\s)*/i", "\n\n[{{attachment}}]\n\n", $text);                $this->process_special_references($dbw, $prfx, $text, "email", $base_url);                if (!empty($cut_pos)) {            if (preg_match_all("/{{.+}}/u", $text, $matches, PREG_OFFSET_CAPTURE)) {                foreach ($matches[0] as $match) {                    $start = utf8_strlen(substr($text, 0, $match[1]));                    $end = $start + utf8_strlen($match[0]);                                        if ($cut_pos > $start && $cut_pos < $end) {                        $cut_pos = $end;                    }                }            }                        $text = spec_cut($text, $cut_pos);        }                postprocess_message($text, $lang, false, true);                $text = html_entity_decode($text);                $text = preg_replace("/[ \t]+/", " ", trim(strip_tags($text)));        $text = str_replace("\r", "", $text);        $text = str_replace("\xc2\xa0", "\x20", $text);        $text = preg_replace("/ *\n/", "\n", $text);        $text = preg_replace("/\n{2,}/", "\n\n", $text);                $replacements = array();                $replacements["/{{base_url}}/msi"] = $base_url;                $replacements["/{{url: (.+?)}}/msi"] = "$1";        $replacements["/{{usr:([^:]+): (.+?)}}/msi"] = "$1: $2";        $replacements["/{{msg: (.+?)}}/msi"] = text("Message", $lang) . ": $1";        $replacements["/{{mevt: (.+?)}}/msi"] = text("Event", $lang) . ": $1";                $text = preg_replace(array_keys($replacements), $replacements, $text);    } // format_email_message        //---------------------------------------------------------------    function highlight_found_keys(&$text, $keys, $with_morphology)    {        if (empty($keys)) {            return;        }                $assertion = "[^\s.,;&:!\=\?\-\+\(\)\[\]\{\}\/\*'«»\"]";                $replace_pattern = "";                if (preg_match('/^"(.+)"$/iu', $keys, $matches)) {            $replace_pattern = "(?<!$assertion)" . preg_p_escape($matches[1]) . "(?!$assertion)";        } else {            $skey_array = preg_split("/[\\s\\|\\&]+/iu", $keys, -1, PREG_SPLIT_NO_EMPTY);            if (empty($skey_array)) {                return;            }                        foreach ($skey_array as $skey) {                $skey = utf8_trim($skey);                                if (empty($skey) || preg_match("/^(или|or|oder|и|and|und)$/iu", $skey)) {                    continue;                }                                $words = array();                if ($with_morphology && $this->forum_manager->get_unicore_words($skey, $words)) {                    foreach ($words as $word) {                        $replace_pattern .= "(?<!$assertion)" . preg_p_escape($word) . "(?!$assertion)|";                    }                } else {                    $replace_pattern .= "(?<!$assertion)" . preg_p_escape($skey) . "(?!$assertion)|";                }            }        }                $replace_pattern = "/" . trim($replace_pattern, "|") . "/miu";                if (!is_valid_utf8($replace_pattern)) {            return;        }                $chunks = preg_split('/(<[^<>]+>)/iu', $text, -1, PREG_SPLIT_DELIM_CAPTURE);                if (count($chunks) == 0) {            $text = preg_replace($replace_pattern,                "<span class='found_key'>\\0</span>",                $text);        } else {            $skip = false;            foreach ($chunks as &$chunk) {                if ($skip) {                    $skip = false;                    continue;                }                                $skip = true;                                $chunk = preg_replace($replace_pattern,                    "<span class='found_key'>\\0</span>",                    $chunk);            }                        $text = implode("", $chunks);        }    } // highlight_found_keys        //---------------------------------------------------------------    function build_smile_table()    {        global $view_path;                $dir = APPLICATION_ROOT . "user_data/smileys";        $files = scandir($dir);        if (!$files) {            return "";        }                $smiles = array();        $smiles_from_dir = array();        $smiles_from_sort = array();                $new_lines = array();                foreach ($files as $file) {            if ($file == "." || $file == "..") {                continue;            }                        if (!preg_match("/.+\.(jpg|jpeg|gif|png|webp)$/i", $file)) {                continue;            }                        $pi = pathinfo($file);                        $smiles_from_dir[$pi['filename']] = $file;        }                if (file_exists($dir . "/_sort.cnf")) {            $sort = file_get_contents($dir . "/_sort.cnf");            $sort = preg_split("/[\n\r]+/", $sort);                        $section = "_default_";            $last_file = "";            foreach ($sort as $file) {                $file = trim($file);                                if ($file == "[newline]") {                    $new_lines[$last_file] = $last_file;                    continue;                }                                if (preg_match("/\[(.+)\]/", $file, $matches)) {                    $section = $matches[1];                    continue;                }                                $pi = pathinfo($file);                                if (empty($smiles_from_dir[$pi['filename']])) {                    continue;                }                                $last_file = $pi['filename'];                                $smiles_from_sort[$pi['filename']] = $file;                $smiles[$section][$pi['filename']] = $file;            }                        $others = array_diff_key($smiles_from_dir, $smiles_from_sort);            if (!empty($others)) {                                if (count($smiles) == 1 && $section == "_default_") {                    // only one default section, put all to it                    $smiles[$section] = array_merge($smiles[$section], $others);                } else {                    // otherwise create the section others                    $smiles["_others_"] = $others;                }            }        } else {            $smiles["_default_"] = $smiles_from_dir;        }                $cnt = count($smiles);                if ($cnt == 0) {            return "";        }                $table = "";                // text("General")        // text("Drinking")        // text("Toilet")        // text("Sex")        // text("Girls")        // text("Nations")        // text("Religion")        // text("Posters")        // text("Gestures")        // text("Sport")        // text("_others_")                $smile_sections_exist = false;                if (count($smiles) > 1) {            $smile_sections_exist = true;                        $counter = 0;            $active = "active";            foreach ($smiles as $section => $section_smiles) {                $table .= "<div class='smile_tab $active' onclick='show_smile_tab($counter)'>" . escape_html(try_translate($section)) . "</div>";                $active = "";                $counter++;            }        }                if (!empty($_SESSION["custom_smiles"])) {            $smile_sections_exist = true;                        $table .= "<div class='smile_tab $active' onclick='show_smile_tab($counter)'>" . escape_html(text("MySmiles")) . "</div>";            $active = "";            $counter++;        }                if ($smile_sections_exist) {            $table .= "<div class='clear_both'></div>";        }                $table .= "<div id='smile_tab_contents'></div>";                $active = "active";        foreach ($smiles as $section => $section_smiles) {            $table .= "<div class='smile_tab_contents $active'>";            $active = "";                        foreach ($section_smiles as $code => $file) {                $table .= "<div class='smile_cell' onclick=\"insert_tag('[:" . escape_html($code) . "]','', 0)\" title='[:" . escape_html($code) . "]'><div class='smile_helper'></div><img src='user_data/smileys/" . xrawurlencode($file) . "' alt='[:" . escape_html($code) . "]'></div>\n";                                if (!empty($new_lines[$code])) {                    $table .= "<div class='smile_separator'></div>";                }            }                        $custom_smile = $view_path . "images/custom_smile.png";            $table .= "<div class='smile_cell custom_smile' onclick=\"insert_tag('[smile]','[/smile]', 0)\" title='" . escape_html(text("CustomSmile")) . "'><div class='smile_helper'></div><img src='$custom_smile' alt='...'></div>\n";                        $table .= "<div class='clear_both'></div>";                        $table .= "</div>";        }                if (empty($_SESSION["custom_smiles"])) {            return $table;        }                $table .= "<div class='smile_tab_contents $active'>";                foreach ($_SESSION["custom_smiles"] as $file) {            $table .= "<div class='smile_cell' onclick=\"insert_tag('[smile]" . $file . "[/smile]','', 0)\" title='" . escape_html(basename($file)) . "'><div class='smile_helper'></div><img src='" . $file . "' alt='" . escape_html(basename($file)) . "'></div>\n";        }                $custom_smile = $view_path . "images/custom_smile.png";        $table .= "<div class='smile_cell custom_smile' onclick=\"insert_tag('[smile]','[/smile]', 0)\" title='" . escape_html(text("CustomSmile")) . "'><div class='smile_helper'></div><img src='$custom_smile' alt='...'></div>\n";                $table .= "<div class='clear_both'></div>";                $table .= "</div>";                return $table;    } // build_smile_table        //---------------------------------------------------------------        function build_event_html(&$evinfo, $target_blank)    {        // text("MsgEventUserRegistered")        // text("MsgEventUserRegisteredForAdmin")        // text("MsgEventUserEmailChangedForAdmin")        // text("MsgEventMessageLiked")        // text("MsgEventMessageDisliked")        // text("MsgEventMessageDislikedAnonym")        // text("MsgEventLikeRevoked")        // text("MsgEventDislikeRevoked")        // text("MsgEventDislikeRevokedAnonym")        // text("MsgEventNewMessageInTopic")        // text("MsgEventCitatedMessageInTopic")        // text("MsgEventCitatedSubscribedMessageInTopic")        // text("MsgEventWordsMentionedInTopic")        // text("MsgEventAttentionAsked")        // text("MsgEventPrivateInvitation")        // text("MsgEventPrivateRemoval")        // text("MsgEventGrantForumModerator")        // text("MsgEventGrantForumModeratorAnonym")        // text("MsgEventRevokeForumModerator")        // text("MsgEventRevokeForumModeratorAnonym")        // text("MsgEventNewForumModeratorAdded")        // text("MsgEventNewForumModeratorAddedAnonym")        // text("MsgEventForumModeratorRemoved")        // text("MsgEventForumModeratorRemovedAnonym")        // text("MsgEventGrantTopicModerator")        // text("MsgEventGrantTopicModeratorAnonym")        // text("MsgEventRevokeTopicModerator")        // text("MsgEventRevokeTopicModeratorAnonym")        // text("MsgEventNewTopicModeratorAdded")        // text("MsgEventNewTopicModeratorAddedAnonym")        // text("MsgEventTopicModeratorRemoved")        // text("MsgEventTopicModeratorRemovedAnonym")        // text("MsgEventNewTopicModeratorAddedAuthor")        // text("MsgEventNewTopicModeratorAddedAuthorAnonym")        // text("MsgEventTopicModeratorRemovedAuthor")        // text("MsgEventTopicModeratorRemovedAuthorAnonym")        // text("MsgEventMessageWarned")        // text("MsgEventMessageWarnedAnonym")        // text("MsgEventMessageComplained")        // text("MsgEventMessageEdited")        // text("MsgEventMessageEditedAnonym")        // text("MsgEventAttachmentDeleted")        // text("MsgEventAttachmentDeletedAnonym")        // text("MsgEventAttachmentRestored")        // text("MsgEventAttachmentRestoredAnonym")        // text("MsgEventMessageDeleted")        // text("MsgEventMessageDeletedAnonym")        // text("MsgEventMessageRestored")        // text("MsgEventMessageRestoredAnonym")        // text("MsgEventTopicNameEdited")        // text("MsgEventTopicNameEditedAnonym")        // text("MsgEventModerationRequested")                // text("MsgEventTopicDeleted")        // text("MsgEventTopicDeletedAnonym")        // text("MsgEventTopicDeletedSubscribers")        // text("MsgEventTopicDeletedSubscribersAnonym")        // text("MsgEventTopicDeletedModerators")        // text("MsgEventTopicDeletedModeratorsAnonym")        // text("MsgEventTopicDeletedParticipants")        // text("MsgEventTopicDeletedParticipantsAnonym")        // text("MsgEventTopicRestored")        // text("MsgEventTopicRestoredAnonym")        // text("MsgEventTopicRestoredSubscribers")        // text("MsgEventTopicRestoredSubscribersAnonym")        // text("MsgEventTopicRestoredModerators")        // text("MsgEventTopicRestoredModeratorsAnonym")        // text("MsgEventTopicRestoredParticipants")        // text("MsgEventTopicRestoredParticipantsAnonym")        // text("MsgEventTopicClosed")        // text("MsgEventTopicClosedAnonym")        // text("MsgEventTopicClosedSubscribers")        // text("MsgEventTopicClosedSubscribersAnonym")        // text("MsgEventTopicClosedModerators")        // text("MsgEventTopicClosedModeratorsAnonym")        // text("MsgEventTopicClosedParticipants")        // text("MsgEventTopicClosedParticipantsAnonym")        // text("MsgEventTopicOpened")        // text("MsgEventTopicOpenedAnonym")        // text("MsgEventTopicOpenedSubscribers")        // text("MsgEventTopicOpenedSubscribersAnonym")        // text("MsgEventTopicOpenedModerators")        // text("MsgEventTopicOpenedModeratorsAnonym")        // text("MsgEventTopicOpenedParticipants")        // text("MsgEventTopicOpenedParticipantsAnonym")                // text("MsgEventMessagesInTopicDeleted")        // text("MsgEventMessagesInTopicDeletedAnonym")        // text("MsgEventMessagesInTopicDeletedForDays")        // text("MsgEventMessagesInTopicDeletedForDaysAnonym")        // text("MsgEventMessagesInTopicRestored")        // text("MsgEventMessagesInTopicRestoredAnonym")        // text("MsgEventMessagesInTopicRestoredForDays")        // text("MsgEventMessagesInTopicRestoredForDaysAnonym")        // text("MsgEventBulkMessagesRestoredInTopic")        // text("MsgEventBulkMessagesRestoredInTopicAnonym")        // text("MsgEventMessagesInForumDeleted")        // text("MsgEventMessagesInForumDeletedAnonym")        // text("MsgEventAllMessagesDeleted")        // text("MsgEventAllMessagesDeletedAnonym")        // text("MsgEventBulkMessagesDeleted")        // text("MsgEventBulkMessagesDeletedAnonym")        // text("MsgEventBulkMessagesDeletedOnForum")        // text("MsgEventBulkMessagesDeletedOnForumAnonym")        // text("MsgEventNMessagesDeleted")        // text("MsgEventNMessagesDeletedAnonym")        // text("MsgEventNRatesDeleted")        // text("MsgEventNRatesDeletedAnonym")        // text("MsgEventPostRatesDeleted")        // text("MsgEventPostRatesDeletedAnonym")        // text("MsgEventPostDislikeRatesDeleted")        // text("MsgEventPostDislikeRatesDeletedAnonym")        // text("MsgEventTopicMoved")        // text("MsgEventTopicMovedAnonym")        // text("MsgEventTopicMovedModerators")        // text("MsgEventTopicMovedModeratorsAnonym")        // text("MsgEventTopicMovedRevokeModerators")        // text("MsgEventTopicMovedRevokeModeratorsAnonym")        // text("MsgEventTopicMovedSubscribers")        // text("MsgEventTopicMovedSubscribersAnonym")        // text("MsgEventMessagesMoved")        // text("MsgEventMessagesMovedAnonym")        // text("MsgEventMessagesMovedSubscribers")        // text("MsgEventMessagesMovedSubscribersAnonym")        // text("MsgEventTopicMerged")        // text("MsgEventTopicMergedAnonym")        // text("MsgEventTopicMergedSubscribers")        // text("MsgEventTopicMergedSubscribersAnonym")        // text("MsgEventTopicMergedModerators")        // text("MsgEventTopicMergedModeratorsAnonym")        // text("MsgEventTopicMergedTargetSubscribers")        // text("MsgEventTopicMergedTargetSubscribersAnonym")        // text("MsgEventGrantAdministrator")        // text("MsgEventRevokeAdministrator")        // text("MsgEventNewAdministratorAdded")        // text("MsgEventAdministratorRemoved")        // text("MsgEventUserBlocked")        // text("MsgEventUserBlockedAnonym")        // text("MsgEventUserBlockedTime")        // text("MsgEventUserBlockedTimeAnonym")        // text("MsgEventUserForumBlocked")        // text("MsgEventUserForumBlockedAnonym")        // text("MsgEventUserForumBlockedTime")        // text("MsgEventUserForumBlockedTimeAnonym")        // text("MsgEventUserUnblocked")        // text("MsgEventUserUnblockedAnonym")        // text("MsgEventUserForumUnblocked")        // text("MsgEventUserForumUnblockedAnonym")        // text("MsgEventUserTopicBlocked")        // text("MsgEventUserTopicBlockedAnonym")        // text("MsgEventUserTopicUnblocked")        // text("MsgEventUserTopicUnblockedAnonym")        // text("MsgEventUserAccessGranted")        // text("MsgEventUserAccessGrantedAnonym")        // text("MsgEventUserAccessRevoked")        // text("MsgEventUserAccessRevokedAnonym")        // text("MsgEventProfileHidden")        // text("MsgEventProfileHiddenAnonym")        // text("MsgEventProfileOpened")        // text("MsgEventProfileOpenedAnonym")        // text("MsgEventRatingDisallowed")        // text("MsgEventRatingDisallowedAnonym")        // text("MsgEventRatingAllowed")        // text("MsgEventRatingAllowedAnonym")        // text("MsgEventMessageConvertedToThematic")        // text("MsgEventMessageConvertedToThematicAnonym")        // text("MsgEventMessageConvertedToComments")        // text("MsgEventMessageConvertedToCommentsAnonym")                // text("MsgEventMessageConvertedToAdult")        // text("MsgEventMessageConvertedToAdultAnonym")        // text("MsgEventMessageConvertedToNonAdult")        // text("MsgEventMessageConvertedToNonAdultAnonym")        // text("MsgEventNickRenamed")        // text("MsgEventNickRenamedAnonym")                $target = "";        if ($target_blank) {            $target = "target='_blank'";        }                $evinfo["event"] = try_translate(val_or_empty($evinfo["event_code"]));                $evinfo["author"] = escape_html($evinfo["author_name"]);        if (!empty($evinfo["author_id"])) {            $evinfo["author"] = "<a href='view_profile.php?uid=$evinfo[author_id]' $target>" . $evinfo["author"] . "</a>";        } elseif ($evinfo["author_name"] == "admin") {            $evinfo["author"] = "<a class='admin_link' href='view_guest_profile.php?guest=" . xrawurlencode($evinfo["author_name"]) . "' $target>" . escape_html(text("MasterAdministrator")) . "</a>";        } else {            $evinfo["author"] = "<a class='guest_link' href='view_guest_profile.php?guest=" . xrawurlencode($evinfo["author_name"]) . "' $target>" . $evinfo["author"] . "</a>";        }                if (preg_match("/.+Anonym$/", val_or_empty($evinfo["event_code"]))) {            $evinfo["author"] = "";        }                $evinfo["event"] = str_replace("{author}", $evinfo["author"], $evinfo["event"]);                if (!empty($evinfo["params"]["{forum_name}"])) {            if ($evinfo["params"]["{forum_name}"] == "PRIVATE_MESSAGES") {                $evinfo["params"]["{forum_name}"] = text("PrivateTopics");            }                        $forum = escape_html(val_or_empty($evinfo["params"]["{forum_name}"]));            if (!empty($evinfo["params"]["{forum_url_relative}"])) {                $forum = "<a href='" . $evinfo["params"]["{forum_url_relative}"] . "' $target>" . $forum . "</a>";            }            $evinfo["event"] = str_replace("{forum}", $forum, $evinfo["event"]);        }                if (!empty($evinfo["params"]["{topic_name}"])) {            postprocess_message($evinfo["params"]["{topic_name}"]);                        $topic = escape_html($evinfo["params"]["{topic_name}"]);            if (!empty($evinfo["params"]["{topic_url_relative}"])) {                $topic = "<a href='" . $evinfo["params"]["{topic_url_relative}"] . "' $target>" . $topic . "</a>";            }            $evinfo["event"] = str_replace("{topic}", $topic, $evinfo["event"]);        }                switch (val_or_empty($evinfo["event_code"])) {            //-----------------------------------------------            case "MsgEventUserRegistered":            case "MsgEventUserRegisteredForAdmin":            case "MsgEventUserEmailChangedForAdmin":                if (!empty($evinfo["author_id"])) {                    $approve = "<a href='edit_user.php?uid=$evinfo[author_id]' $target>" . escape_html(text("Approve")) . "</a>";                    $evinfo["event"] = str_replace("{approve}", $approve, $evinfo["event"]);                                        $view = "<a href='view_profile.php?uid=$evinfo[author_id]' $target>" . escape_html(text("View")) . "</a>";                    $evinfo["event"] = str_replace("{view}", $view, $evinfo["event"]);                }                break;            //-----------------------------------------------            case "MsgEventMessageDislikedAnonym":            case "MsgEventMessageDisliked":            case "MsgEventMessageLiked":            case "MsgEventLikeRevoked":            case "MsgEventDislikeRevoked":            case "MsgEventDislikeRevokedAnonym":            case "MsgEventPostRatesDeleted":            case "MsgEventPostRatesDeletedAnonym":            case "MsgEventPostDislikeRatesDeleted":            case "MsgEventPostDislikeRatesDeletedAnonym":            case "MsgEventNewMessageInTopic":            case "MsgEventCitatedMessageInTopic":            case "MsgEventCitatedSubscribedMessageInTopic":            case "MsgEventWordsMentionedInTopic":            case "MsgEventAttentionAsked":                if (empty($evinfo["params"]["{post_date}"])) {                    $evinfo["event"] = str_replace("{post_date}", "", $evinfo["event"]);                } elseif (!is_numeric($evinfo["params"]["{post_date}"])) {                    $evinfo["event"] = str_replace("{post_date}", $evinfo["params"]["{post_date}"], $evinfo["event"]);                } else {                    $evinfo["event"] = str_replace("{post_date}", smart_date(adjust_and_format_timezone($evinfo["params"]["{post_date}"], text("DateTimeFormat"))), $evinfo["event"]);                }                                $go_to_message_appendix = "";                $message = '#' . escape_html(val_or_empty($evinfo["params"]["{post_id}"]));                if (!empty($evinfo["params"]["{post_url_relative}"])) {                    $message = "<a href='" . $evinfo["params"]["{post_url_relative}"] . "' $target>" . $message . "</a>";                    $go_to_message_appendix = "<a href='" . $evinfo["params"]["{post_url_relative}"] . "' $target>" . escape_html(text("GoToMessage")) . "</a>";                }                if (!empty($evinfo["message_deleted"])) {                    $message .= "&nbsp;<span style='color:red'>✘</span>";                  }                $evinfo["event"] = str_replace("{message}", $message, $evinfo["event"]);                                if (!empty($evinfo["params"]["{post_url_unread_relative}"])) {                    $go_to_message_appendix .= " / <a href='" . $evinfo["params"]["{post_url_unread_relative}"] . "' $target>" . escape_html(text("DontResetNew")) . "</a>";                }                                if (!empty($go_to_message_appendix)) {                    $go_to_message_appendix = "<div class='goto_message'>" . $go_to_message_appendix . "</div>";                }                                if (!empty($evinfo["params"]["{count}"])) {                    $evinfo["event"] = str_replace("{count}", $evinfo["params"]["{count}"], $evinfo["event"]);                }                                if (!empty($evinfo["params"]["{words}"])) {                    $evinfo["event"] = str_replace("{words}", $evinfo["params"]["{words}"], $evinfo["event"]);                }                                if (!empty($evinfo["params"]["{rated_user_name}"])) {                    $evinfo["params"]["{rated_user_name}"] = escape_html($evinfo["params"]["{rated_user_name}"]);                                        if (!empty($evinfo["params"]["{rated_user_id}"])) {                        $evinfo["params"]["{rated_user_name}"] = "<a href='view_profile.php?uid=" . $evinfo["params"]["{rated_user_id}"] . "' $target>" . $evinfo["params"]["{rated_user_name}"] . "</a>";                    }                    $evinfo["event"] = str_replace("{rated_user_name}", $evinfo["params"]["{rated_user_name}"], $evinfo["event"]);                }                                if (!empty($evinfo["params"]["{citated_post}"])) {                    $citated_message = '#' . escape_html(val_or_empty($evinfo["params"]["{citated_post}"]));                    if (!empty($evinfo["params"]["{citated_post_url_relative}"])) {                        $citated_message = "<a href='" . $evinfo["params"]["{citated_post_url_relative}"] . "' $target>" . $citated_message . "</a>";                    }                    $evinfo["event"] = str_replace("{citated_message}", $citated_message, $evinfo["event"]);                }                                if (!empty($evinfo["params"]["{message}"])) {                    $evinfo["event"] .= "<div class='short_message'>" . trim($evinfo["params"]["{message}"]) . "</div>";                }                                $evinfo["event"] .= $go_to_message_appendix;                break;            //-----------------------------------------------            case "MsgEventPrivateInvitation":            case "MsgEventPrivateRemoval":                break;            //-----------------------------------------------            case "MsgEventNickRenamed":            case "MsgEventNickRenamedAnonym":                if (!empty($evinfo["params"]["{old_user_name}"])) {                    $evinfo["event"] = str_replace("{old_user_name}", $evinfo["params"]["{old_user_name}"], $evinfo["event"]);                }                if (!empty($evinfo["params"]["{new_user_name}"])) {                    $evinfo["event"] = str_replace("{new_user_name}", $evinfo["params"]["{new_user_name}"], $evinfo["event"]);                }                break;            //-----------------------------------------------            case "MsgEventGrantForumModerator":            case "MsgEventGrantForumModeratorAnonym":            case "MsgEventRevokeForumModerator":            case "MsgEventRevokeForumModeratorAnonym":            case "MsgEventNewForumModeratorAdded":            case "MsgEventNewForumModeratorAddedAnonym":            case "MsgEventForumModeratorRemoved":            case "MsgEventForumModeratorRemovedAnonym":                if (!empty($evinfo["params"]["{moderator_name}"])) {                    if (!empty($evinfo["params"]["{moderator_id}"])) {                        $moderator = "<a href='view_profile.php?uid=" . $evinfo["params"]["{moderator_id}"] . "' $target>" . escape_html($evinfo["params"]["{moderator_name}"]) . "</a>";                    } elseif (val_or_empty($evinfo["params"]["{moderator_name}"]) == "admin") {                        $moderator = "<a class='admin_link' href='view_guest_profile.php?guest=" . xrawurlencode(val_or_empty($evinfo["params"]["{moderator_name}"])) . "' $target>" . escape_html(text("MasterAdministrator")) . "</a>";                    } else {                        $moderator = "<a class='guest_link' href='view_guest_profile.php?guest=" . xrawurlencode(val_or_empty($evinfo["params"]["{moderator_name}"])) . "' $target>" . escape_html(val_or_empty($evinfo["params"]["{moderator_name}"])) . "</a>";                    }                                        $evinfo["event"] = str_replace("{moderator}", $moderator, $evinfo["event"]);                }                                break;            //-----------------------------------------------            case "MsgEventNewAdministratorAdded":            case "MsgEventAdministratorRemoved":                if (!empty($evinfo["params"]["{administrator_name}"])) {                    if (!empty($evinfo["params"]["{administrator_id}"])) {                        $moderator = "<a href='view_profile.php?uid=" . $evinfo["params"]["{administrator_id}"] . "' $target>" . escape_html($evinfo["params"]["{administrator_name}"]) . "</a>";                    } elseif (val_or_empty($evinfo["params"]["{administrator_name}"]) == "admin") {                        $moderator = "<a class='admin_link' href='view_guest_profile.php?guest=" . xrawurlencode(val_or_empty($evinfo["params"]["{administrator_name}"])) . "' $target>" . escape_html(text("MasterAdministrator")) . "</a>";                    } else {                        $moderator = "<a class='guest_link' href='view_guest_profile.php?guest=" . xrawurlencode(val_or_empty($evinfo["params"]["{administrator_name}"])) . "' $target>" . escape_html(val_or_empty($evinfo["params"]["{administrator_name}"])) . "</a>";                    }                                        $evinfo["event"] = str_replace("{administrator}", $moderator, $evinfo["event"]);                }                                break;            //-----------------------------------------------            case "MsgEventGrantTopicModerator":            case "MsgEventGrantTopicModeratorAnonym":            case "MsgEventRevokeTopicModerator":            case "MsgEventRevokeTopicModeratorAnonym":            case "MsgEventNewTopicModeratorAdded":            case "MsgEventNewTopicModeratorAddedAnonym":            case "MsgEventTopicModeratorRemoved":            case "MsgEventTopicModeratorRemovedAnonym":            case "MsgEventNewTopicModeratorAddedAuthor":            case "MsgEventNewTopicModeratorAddedAuthorAnonym":            case "MsgEventTopicModeratorRemovedAuthor":            case "MsgEventTopicModeratorRemovedAuthorAnonym":            case "MsgEventUserTopicBlocked":            case "MsgEventUserTopicBlockedAnonym":            case "MsgEventUserTopicUnblocked":            case "MsgEventUserTopicUnblockedAnonym":            case "MsgEventModerationRequested":                if (!empty($evinfo["params"]["{topic_moderator_name}"])) {                    if (!empty($evinfo["params"]["{topic_moderator_id}"])) {                        $moderator = "<a href='view_profile.php?uid=" . $evinfo["params"]["{topic_moderator_id}"] . "' $target>" . escape_html($evinfo["params"]["{topic_moderator_name}"]) . "</a>";                    } elseif (val_or_empty($evinfo["params"]["{topic_moderator_name}"]) == "admin") {                        $moderator = "<a class='admin_link' href='view_guest_profile.php?guest=" . xrawurlencode(val_or_empty($evinfo["params"]["{topic_moderator_name}"])) . "' $target>" . escape_html(text("MasterAdministrator")) . "</a>";                    } else {                        $moderator = "<a class='guest_link' href='view_guest_profile.php?guest=" . xrawurlencode(val_or_empty($evinfo["params"]["{topic_moderator_name}"])) . "' $target>" . escape_html(val_or_empty($evinfo["params"]["{topic_moderator_name}"])) . "</a>";                    }                                        $evinfo["event"] = str_replace("{moderator}", $moderator, $evinfo["event"]);                }                                if (!empty($evinfo["params"]["{comment}"])) {                    $evinfo["event"] .= "<div class='moderator_warning'>" . trim($evinfo["params"]["{comment}"]) . "</div>";                }                                if (val_or_empty($evinfo["event_code"]) == "MsgEventModerationRequested") {                    if (!empty($evinfo["params"]["{message}"])) {                        $evinfo["event"] .= "<div class='short_message'>" . trim($evinfo["params"]["{message}"]) . "</div>";                    }                                        $evinfo["event"] .= "<div class='goto_message'>					   <a href='" . $evinfo["params"]["{topic_url_relative}"] . "' $target>" . escape_html(text("GotoTopic")) . "</a> /					   <a class='moderator_link' href='" . $evinfo["params"]["{topic_url_relative}"] . "' $target onclick='return confirm_action(\"" . escape_js(text("MsgConfirmMakeTopicModerator"), true) . "\".replace(/%s/, \"" . escape_js($this->forum_manager->get_display_name(val_or_empty($evinfo["params"]["{user_name}"])), true) . "\"), { topic_action: \"make_topic_moderator\", post: \"" . escape_js(val_or_empty($evinfo["params"]["{post_id}"])) . "\", topic: \"" . escape_js(val_or_empty($evinfo["params"]["{topic_id}"])) . "\", forum: \"" . escape_js(val_or_empty($evinfo["params"]["{forum_id}"])) . "\", author_name: \"" . escape_js(val_or_empty($evinfo["params"]["{user_name}"]), true) . "\", display_author_name: \"" . escape_js($this->forum_manager->get_display_name(val_or_empty($evinfo["params"]["{user_name}"])), true) . "\" });'>" . escape_html(text("MakeAuthorTopicModerator")) . "</a>					   </div>";                }				                break;            //-----------------------------------------------            case "MsgEventMessageComplained":            case "MsgEventMessageWarned":            case "MsgEventMessageWarnedAnonym":                $go_to_message_appendix = "";                $message = '#' . escape_html(val_or_empty($evinfo["params"]["{post_id}"]));                if (!empty($evinfo["params"]["{post_url_relative}"])) {                    $message = "<a href='" . $evinfo["params"]["{post_url_relative}"] . "' $target>" . $message . "</a>";                    $go_to_message_appendix = "<a href='" . $evinfo["params"]["{post_url_relative}"] . "' $target>" . escape_html(text("GoToMessage")) . "</a>";                }                                if (!empty($evinfo["message_deleted"])) {                    $message .= "&nbsp;<span style='color:red'>✘</span>";                  }                                $evinfo["event"] = str_replace("{message}", $message, $evinfo["event"]);                                if (!empty($evinfo["params"]["{post_url_unread_relative}"])) {                    $go_to_message_appendix .= " / <a href='" . $evinfo["params"]["{post_url_unread_relative}"] . "' $target>" . escape_html(text("DontResetNew")) . "</a>";                }                                if (!empty($go_to_message_appendix)) {                    $go_to_message_appendix = "<div class='goto_message'>" . $go_to_message_appendix . "</div>";                }                                if (!empty($evinfo["params"]["{violator_id}"])) {                    $violator = "<a href='view_profile.php?uid=" . $evinfo["params"]["{violator_id}"] . "' $target>" . escape_html(val_or_empty($evinfo["params"]["{violator}"])) . "</a>";                } elseif (val_or_empty($evinfo["params"]["{violator}"]) == "admin") {                    $violator = "<a class='admin_link' href='view_guest_profile.php?guest=" . xrawurlencode(val_or_empty($evinfo["params"]["{violator}"])) . "' $target>" . escape_html(text("MasterAdministrator")) . "</a>";                } else {                    $violator = "<a class='guest_link' href='view_guest_profile.php?guest=" . xrawurlencode(val_or_empty($evinfo["params"]["{violator}"])) . "' $target>" . escape_html(val_or_empty($evinfo["params"]["{violator}"])) . "</a>";                }                                $evinfo["event"] = str_replace("{violator}", $violator, $evinfo["event"]);                                if (!empty($evinfo["params"]["{comment}"])) {                    $evinfo["event"] .= "<div class='moderator_warning'>" . trim($evinfo["params"]["{comment}"]) . "</div>";                }                                if (!empty($evinfo["params"]["{message}"])) {                    $evinfo["event"] .= "<div class='short_message'>" . trim($evinfo["params"]["{message}"]) . "</div>";                }                                $evinfo["event"] .= $go_to_message_appendix;                break;            //-----------------------------------------------            case "MsgEventAttachmentDeleted":            case "MsgEventAttachmentDeletedAnonym":            case "MsgEventAttachmentRestored":            case "MsgEventAttachmentRestoredAnonym":            case "MsgEventMessageEdited":            case "MsgEventMessageEditedAnonym":            case "MsgEventMessageDeleted":            case "MsgEventMessageDeletedAnonym":            case "MsgEventMessageRestored":            case "MsgEventMessageRestoredAnonym":            case "MsgEventTopicNameEdited":            case "MsgEventTopicNameEditedAnonym":                        case "MsgEventTopicDeleted":            case "MsgEventTopicDeletedAnonym":            case "MsgEventTopicDeletedSubscribers":            case "MsgEventTopicDeletedSubscribersAnonym":            case "MsgEventTopicDeletedModerators":            case "MsgEventTopicDeletedModeratorsAnonym":            case "MsgEventTopicDeletedParticipants":            case "MsgEventTopicDeletedParticipantsAnonym":            case "MsgEventTopicRestored":            case "MsgEventTopicRestoredAnonym":            case "MsgEventTopicRestoredSubscribers":            case "MsgEventTopicRestoredSubscribersAnonym":            case "MsgEventTopicRestoredModerators":            case "MsgEventTopicRestoredModeratorsAnonym":            case "MsgEventTopicRestoredParticipants":            case "MsgEventTopicRestoredParticipantsAnonym":            case "MsgEventTopicClosed":            case "MsgEventTopicClosedAnonym":            case "MsgEventTopicClosedSubscribers":            case "MsgEventTopicClosedSubscribersAnonym":            case "MsgEventTopicClosedModerators":            case "MsgEventTopicClosedModeratorsAnonym":            case "MsgEventTopicClosedParticipants":            case "MsgEventTopicClosedParticipantsAnonym":            case "MsgEventTopicOpened":            case "MsgEventTopicOpenedAnonym":            case "MsgEventTopicOpenedSubscribers":            case "MsgEventTopicOpenedSubscribersAnonym":            case "MsgEventTopicOpenedModerators":            case "MsgEventTopicOpenedModeratorsAnonym":            case "MsgEventTopicOpenedParticipants":            case "MsgEventTopicOpenedParticipantsAnonym":                        case "MsgEventMessageConvertedToThematic":            case "MsgEventMessageConvertedToThematicAnonym":            case "MsgEventMessageConvertedToComments":            case "MsgEventMessageConvertedToCommentsAnonym":                        case "MsgEventMessageConvertedToAdult":            case "MsgEventMessageConvertedToAdultAnonym":            case "MsgEventMessageConvertedToNonAdult":            case "MsgEventMessageConvertedToNonAdultAnonym":                $go_to_message_appendix = "";                $message = '#' . escape_html(val_or_empty($evinfo["params"]["{post_id}"]));                if (!empty($evinfo["params"]["{post_url_relative}"])) {                    $message = "<a href='" . $evinfo["params"]["{post_url_relative}"] . "' $target>" . $message . "</a>";                    $go_to_message_appendix = "<div class='goto_message'><a href='" . $evinfo["params"]["{post_url_relative}"] . "' $target>" . escape_html(text("GoToMessage")) . "</a></div>";                }                if (!empty($evinfo["message_deleted"])) {                    $message .= "&nbsp;<span style='color:red'>✘</span>";                  }                $evinfo["event"] = str_replace("{message}", $message, $evinfo["event"]);                                if (empty($evinfo["params"]["{post_date}"])) {                    $evinfo["event"] = str_replace("{post_date}", "", $evinfo["event"]);                } elseif (!is_numeric($evinfo["params"]["{post_date}"])) {                    $evinfo["event"] = str_replace("{post_date}", $evinfo["params"]["{post_date}"], $evinfo["event"]);                } else {                    $evinfo["event"] = str_replace("{post_date}", smart_date(adjust_and_format_timezone($evinfo["params"]["{post_date}"], text("DateTimeFormat"))), $evinfo["event"]);                }                                if (!empty($evinfo["params"]["{message}"])) {                    $evinfo["event"] .= "<div class='short_message'>" . trim($evinfo["params"]["{message}"]) . "</div>";                }                                if (!empty($evinfo["params"]["{comment}"])) {                    $evinfo["event"] .= "<div class='moderator_warning'>" . trim($evinfo["params"]["{comment}"]) . "</div>";                }                                $evinfo["event"] .= $go_to_message_appendix;                break;            //-----------------------------------------------            case "MsgEventMessagesInTopicDeleted":            case "MsgEventMessagesInTopicDeletedAnonym":            case "MsgEventMessagesInTopicDeletedForDays":            case "MsgEventMessagesInTopicDeletedForDaysAnonym":            case "MsgEventMessagesInTopicRestored":            case "MsgEventMessagesInTopicRestoredAnonym":            case "MsgEventMessagesInTopicRestoredForDays":            case "MsgEventMessagesInTopicRestoredForDaysAnonym":            case "MsgEventBulkMessagesRestoredInTopic":            case "MsgEventBulkMessagesRestoredInTopicAnonym":            case "MsgEventMessagesInForumDeleted":            case "MsgEventMessagesInForumDeletedAnonym":            case "MsgEventAllMessagesDeleted":            case "MsgEventAllMessagesDeletedAnonym":            case "MsgEventBulkMessagesDeleted":            case "MsgEventBulkMessagesDeletedAnonym":            case "MsgEventBulkMessagesDeletedOnForum":            case "MsgEventBulkMessagesDeletedOnForumAnonym":            case "MsgEventNMessagesDeleted":            case "MsgEventNMessagesDeletedAnonym":            case "MsgEventNRatesDeleted":            case "MsgEventNRatesDeletedAnonym":                if (!empty($evinfo["params"]["{count}"])) {                    $evinfo["event"] = str_replace("{count}", $evinfo["params"]["{count}"], $evinfo["event"]);                }                                if (!empty($evinfo["params"]["{days}"])) {                    $evinfo["event"] = str_replace("{days}", $evinfo["params"]["{days}"], $evinfo["event"]);                }                                if (!empty($evinfo["params"]["{comment}"])) {                    $evinfo["event"] .= "<div class='moderator_warning'>" . trim($evinfo["params"]["{comment}"]) . "</div>";                }                                break;            //-----------------------------------------------            case "MsgEventTopicMoved":            case "MsgEventTopicMovedAnonym":            case "MsgEventTopicMovedModerators":            case "MsgEventTopicMovedModeratorsAnonym":            case "MsgEventTopicMovedRevokeModerators":            case "MsgEventTopicMovedRevokeModeratorsAnonym":            case "MsgEventTopicMovedSubscribers":            case "MsgEventTopicMovedSubscribersAnonym":                $source_forum = escape_html(val_or_empty($evinfo["params"]["{source_forum_name}"]));                if (!empty($evinfo["params"]["{source_forum_url_relative}"])) {                    $source_forum = "<a href='" . $evinfo["params"]["{source_forum_url_relative}"] . "' $target>" . $source_forum . "</a>";                }                                $evinfo["event"] = str_replace("{source_forum}", $source_forum, $evinfo["event"]);                                $target_forum = escape_html(val_or_empty($evinfo["params"]["{target_forum_name}"]));                if (!empty($evinfo["params"]["{target_forum_url_relative}"])) {                    $target_forum = "<a href='" . $evinfo["params"]["{target_forum_url_relative}"] . "' $target>" . $target_forum . "</a>";                }                                $evinfo["event"] = str_replace("{target_forum}", $target_forum, $evinfo["event"]);                break;            //-----------------------------------------------            case "MsgEventMessagesMoved":            case "MsgEventMessagesMovedAnonym":            case "MsgEventMessagesMovedSubscribers":            case "MsgEventMessagesMovedSubscribersAnonym":                                $moved_count = 1;                if (!empty($evinfo["params"]["{moved_count}"])) {                    $moved_count = $evinfo["params"]["{moved_count}"];                }                $evinfo["event"] = str_replace("{moved_count}", $moved_count, $evinfo["event"]);                                $source_topic = escape_html(val_or_empty($evinfo["params"]["{source_topic_name}"]));                if (!empty($evinfo["params"]["{source_topic_url_relative}"])) {                    $source_topic = "<a href='" . $evinfo["params"]["{source_topic_url_relative}"] . "' $target>" . $source_topic . "</a>";                }                                $evinfo["event"] = str_replace("{source_topic}", $source_topic, $evinfo["event"]);                                $target_topic = escape_html(val_or_empty($evinfo["params"]["{target_topic_name}"]));                if (!empty($evinfo["params"]["{target_topic_url_relative}"])) {                    $target_topic = "<a href='" . $evinfo["params"]["{target_topic_url_relative}"] . "' $target>" . $target_topic . "</a>";                }                                $evinfo["event"] = str_replace("{target_topic}", $target_topic, $evinfo["event"]);                                $source_forum = escape_html(val_or_empty($evinfo["params"]["{source_forum_name}"]));                if (!empty($evinfo["params"]["{source_forum_url_relative}"])) {                    $source_forum = "<a href='" . $evinfo["params"]["{source_forum_url_relative}"] . "' $target>" . $source_forum . "</a>";                }                                $evinfo["event"] = str_replace("{source_forum}", $source_forum, $evinfo["event"]);                                $target_forum = escape_html(val_or_empty($evinfo["params"]["{target_forum_name}"]));                if (!empty($evinfo["params"]["{target_forum_url_relative}"])) {                    $target_forum = "<a href='" . $evinfo["params"]["{target_forum_url_relative}"] . "' $target>" . $target_forum . "</a>";                }                                $evinfo["event"] = str_replace("{target_forum}", $target_forum, $evinfo["event"]);                                $go_to_message_appendix = "";                $message = '#' . escape_html(val_or_empty($evinfo["params"]["{first_post_id}"]));                if (!empty($evinfo["params"]["{first_post_url_relative}"])) {                    $message = "<a href='" . $evinfo["params"]["{first_post_url_relative}"] . "' $target>" . $message . "</a>";                    $go_to_message_appendix = "<div class='goto_message'><a href='" . $evinfo["params"]["{first_post_url_relative}"] . "' $target>" . escape_html(text("GoToMessage")) . "</a></div>";                }                if (!empty($evinfo["message_deleted"])) {                    $message .= "&nbsp;<span style='color:red'>✘</span>";                  }                $evinfo["event"] = str_replace("{message}", $message, $evinfo["event"]);                                $evinfo["event"] .= $go_to_message_appendix;                break;            //-----------------------------------------------            case "MsgEventTopicMerged":            case "MsgEventTopicMergedAnonym":            case "MsgEventTopicMergedSubscribers":            case "MsgEventTopicMergedSubscribersAnonym":            case "MsgEventTopicMergedModerators":            case "MsgEventTopicMergedModeratorsAnonym":            case "MsgEventTopicMergedTargetSubscribers":            case "MsgEventTopicMergedTargetSubscribersAnonym":                $source_topic = escape_html(val_or_empty($evinfo["params"]["{source_topic_name}"]));                if (!empty($evinfo["params"]["{source_topic_url_relative}"])) {                    $source_topic = "<a href='" . $evinfo["params"]["{source_topic_url_relative}"] . "' $target>" . $source_topic . "</a>";                }                                $evinfo["event"] = str_replace("{source_topic}", $source_topic, $evinfo["event"]);                                $target_topic = escape_html(val_or_empty($evinfo["params"]["{target_topic_name}"]));                if (!empty($evinfo["params"]["{target_topic_url_relative}"])) {                    $target_topic = "<a href='" . $evinfo["params"]["{target_topic_url_relative}"] . "' $target>" . $target_topic . "</a>";                }                                $evinfo["event"] = str_replace("{target_topic}", $target_topic, $evinfo["event"]);                                $source_forum = escape_html(val_or_empty($evinfo["params"]["{source_forum_name}"]));                if (!empty($evinfo["params"]["{source_forum_url_relative}"])) {                    $source_forum = "<a href='" . $evinfo["params"]["{source_forum_url_relative}"] . "' $target>" . $source_forum . "</a>";                }                                $evinfo["event"] = str_replace("{source_forum}", $source_forum, $evinfo["event"]);                                $target_forum = escape_html(val_or_empty($evinfo["params"]["{target_forum_name}"]));                if (!empty($evinfo["params"]["{target_forum_url_relative}"])) {                    $target_forum = "<a href='" . $evinfo["params"]["{target_forum_url_relative}"] . "' $target>" . $target_forum . "</a>";                }                                $evinfo["event"] = str_replace("{target_forum}", $target_forum, $evinfo["event"]);                                $go_to_message_appendix = "";                $message = '#';                if (!empty($evinfo["params"]["{first_post_id}"])) {                    $message = '#' . escape_html($evinfo["params"]["{first_post_id}"]);                    if (!empty($evinfo["params"]["{first_post_url_relative}"])) {                        $message = "<a href='" . $evinfo["params"]["{first_post_url_relative}"] . "' $target>" . $message . "</a>";                        $go_to_message_appendix = "<div class='goto_message'><a href='" . $evinfo["params"]["{first_post_url_relative}"] . "' $target>" . escape_html(text("GoToMessage")) . "</a></div>";                    }                }                if (!empty($evinfo["message_deleted"])) {                    $message .= "&nbsp;<span style='color:red'>✘</span>";                  }                $evinfo["event"] = str_replace("{message}", $message, $evinfo["event"]);                                if (!empty($evinfo["params"]["{message}"])) {                    $evinfo["event"] .= "<div class='short_message'>" . trim($evinfo["params"]["{message}"]) . "</div>";                }                                $evinfo["event"] .= $go_to_message_appendix;                break;            //-----------------------------------------------            case "MsgEventGrantAdministrator":            case "MsgEventRevokeAdministrator":            case "MsgEventProfileHidden":            case "MsgEventProfileHiddenAnonym":            case "MsgEventProfileOpened":            case "MsgEventProfileOpenedAnonym":            case "MsgEventRatingDisallowed":            case "MsgEventRatingDisallowedAnonym":            case "MsgEventRatingAllowed":            case "MsgEventRatingAllowedAnonym":            case "MsgEventUserBlocked":            case "MsgEventUserBlockedAnonym":            case "MsgEventUserBlockedTime":            case "MsgEventUserBlockedTimeAnonym":            case "MsgEventUserForumBlocked":            case "MsgEventUserForumBlockedAnonym":            case "MsgEventUserForumBlockedTime":            case "MsgEventUserForumBlockedTimeAnonym":            case "MsgEventUserUnblocked":            case "MsgEventUserUnblockedAnonym":            case "MsgEventUserForumUnblocked":            case "MsgEventUserForumUnblockedAnonym":            case "MsgEventUserAccessGranted":            case "MsgEventUserAccessGrantedAnonym":            case "MsgEventUserAccessRevoked":            case "MsgEventUserAccessRevokedAnonym":                if (empty($evinfo["params"]["{block_expires}"])) {                    $evinfo["event"] = str_replace("{block_expires}", "", $evinfo["event"]);                } elseif (!is_numeric($evinfo["params"]["{block_expires}"])) {                    $evinfo["event"] = str_replace("{block_expires}", $evinfo["params"]["{block_expires}"], $evinfo["event"]);                } else {                    $evinfo["event"] = str_replace("{block_expires}", smart_date(adjust_and_format_timezone($evinfo["params"]["{block_expires}"], text("DateTimeFormat"))), $evinfo["event"]);                }                                if (!empty($evinfo["params"]["{comment}"])) {                    $evinfo["event"] .= "<div class='moderator_warning'>" . trim($evinfo["params"]["{comment}"]) . "</div>";                }                break;            //-----------------------------------------------        } // switch                return true;    } // build_event_html    } // FormatManager//-------------------------------------------------------------------?>